"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[1480],{23456:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day7)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2022/Day7.vue?vue&type=template&id=ca1a825e\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":7,\"year\":2022,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('pre',{staticClass:\"day-7-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.dirStructureHtml)}}),_vm._v(\"\\n      \")])]},proxy:true}])})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(36100);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2022/Day7.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day7vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      dirStructureHtml: null\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Define the root directory\n      const root = {\n        name: '/',\n        parent: null,\n        children: {},\n        files: {},\n        size: 0,\n        totalSize: 0\n      };\n\n      // Remember current directory\n      let currentDir = root;\n\n      // Iterate through all lines\n      input.forEach(i => {\n        // Split them\n        const parts = i.split(' ');\n        if (i.startsWith('$')) {\n          // If we're dealing with an instruction\n          if (parts[1] === 'cd') {\n            // And it's a 'change directory'\n            if (parts[2] === '/') {\n              // And it's root, set current directory to root\n              currentDir = root;\n            } else if (parts[2] === '..') {\n              // If it's '..', go up one level\n              currentDir = currentDir.parent;\n            } else {\n              // Else, we need to go deeper\n              if (currentDir.children[parts[2]]) {\n                // Switch to existing sub-directory\n                currentDir = currentDir.children[parts[2]];\n              } else {\n                // Create a new sub-directory\n                const newDir = {\n                  name: parts[2],\n                  parent: currentDir,\n                  children: {},\n                  files: {},\n                  size: 0,\n                  totalSize: 0\n                };\n                currentDir.children[parts[2]] = newDir;\n                currentDir = newDir;\n              }\n            }\n          } else if (parts[1] === 'ls') {\n            // Do nothing here, we handle the next lines in other places\n          }\n        } else if (i.startsWith('dir')) {\n          // If we found a new directory through a 'ls'\n          const dirName = parts[1];\n          if (!currentDir.children[dirName]) {\n            // Add a new one if it doesn't exist\n            const newDir = {\n              name: dirName,\n              parent: currentDir,\n              children: {},\n              files: {},\n              size: 0,\n              totalSize: 0\n            };\n            currentDir.children[dirName] = newDir;\n          }\n        } else {\n          // Else it's a file, remember it's name and size\n          const fileSize = +parts[0];\n          const fileName = parts[1];\n          if (!currentDir.files[fileName]) {\n            currentDir.files[fileName] = fileSize;\n            currentDir.size += fileSize;\n          }\n        }\n      });\n\n      // Traverse the whole tree structure to calculate the total directory sizes from individual sizes\n      this.traverseSum(root);\n\n      // Solution for part one is counting the directories with at most size 100000\n      this.solutions.partOne = this.countDirs(root, 100000);\n\n      // Get all directories in a flat array structure\n      const flattened = this.flatten(root);\n      // Sort them by size increasing\n      flattened.sort((a, b) => a.totalSize - b.totalSize);\n\n      // Determine how much space we need to find\n      const target = 30000000 - (70000000 - root.totalSize);\n\n      // Iterate through all directories\n      for (const dir of flattened) {\n        // Until we find one that gives us enough space\n        if (dir.totalSize >= target) {\n          // This is the solution\n          this.solutions.partTwo = dir.totalSize;\n          break;\n        }\n      }\n      this.dirStructureHtml = this.print(root);\n    },\n    /**\n     * Flattens the given directory into an array of all recursively contained directories\n     */\n    flatten: function (dir) {\n      const dirs = [dir];\n      Object.keys(dir.children).forEach(d => {\n        dirs.push(...this.flatten(dir.children[d]));\n      });\n      return dirs;\n    },\n    /**\n     * Counts the directories recursively that have a totalSize below the limit.\n     */\n    countDirs: function (dir, limit) {\n      let sum = dir.totalSize <= limit ? dir.totalSize : 0;\n      Object.keys(dir.children).forEach(d => {\n        sum += this.countDirs(dir.children[d], limit);\n      });\n      return sum;\n    },\n    /**\n     * Traverses the file system to calculate total sums per directory\n     */\n    traverseSum: function (dir) {\n      let sum = 0;\n      Object.keys(dir.children).forEach(d => {\n        sum += this.traverseSum(dir.children[d]);\n      });\n      Object.keys(dir.files).forEach(f => {\n        sum += dir.files[f];\n      });\n      dir.totalSize = sum;\n      return sum;\n    },\n    print: function (dir, indent = 0) {\n      let result = `<br/>${' '.repeat(indent)}- <span class=\"day-7-directory\">${dir.name} (dir)</span>`;\n      Object.keys(dir.children).forEach(d => {\n        result += this.print(dir.children[d], indent + 2);\n      });\n      Object.keys(dir.files).forEach(f => {\n        result += `<br/>${' '.repeat(indent + 2)}- <span class=\"day-7-file\">${f} (file, size=${dir.files[f]})</span>`;\n      });\n      return result;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2022/Day7.vue?vue&type=script&lang=js\n /* harmony default export */ const _2022_Day7vue_type_script_lang_js = (Day7vue_type_script_lang_js); \n;// CONCATENATED MODULE: ./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-12.use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2022/Day7.vue?vue&type=style&index=0&id=ca1a825e&prod&lang=css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/components/2022/Day7.vue?vue&type=style&index=0&id=ca1a825e&prod&lang=css\n\n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2022/Day7.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2022_Day7vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day7 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23456\n")}}]);
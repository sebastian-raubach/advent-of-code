{"version":3,"file":"js/8160.8a20f112.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAEAC,QAAAA,GAEA,EACAC,QAAAA,CACAR,eAAAA,SAAAA,GAEA,sDACA,oBACA,mBACA,EACAS,SAAAA,SAAAA,EAAAA,GAEA,WAGA,4BAEA,aACA,QAOA,GAJA,YACAC,GAAAA,GAGA,SAEA,sCAEAA,EAAAA,EAAAA,MAEAC,GAAAA,EAAAA,OAAAA,CACA,kBAEA,sEAEA,OACAC,MAAAA,EACAC,OAAAA,EAEA,CAGAC,EAAAA,KAAAA,EACA,CAGA,sEAEA,OACAF,MAAAA,EACAC,OAAAA,EAAAA,OAEA,EACAE,oBAAAA,SAAAA,GAEA,2BACA,aAEAD,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,IACAH,GAAAA,GAEA,aAEAG,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,IACAH,GAAAA,GAIA,WACA,EACAK,oBAAAA,SAAAA,GAEA,2BACA,aAEAF,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,IACAH,GAAAA,GAKA,2BACA,aAEAG,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,IACAG,GAAAA,GAIA,WACA,EACAC,aAAAA,WACA,yFACA,EACAC,aAAAA,WACA,yFACA,ICnH6P,I,UCOzPC,GAAY,OACd,EACA9B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAemB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2020/Day18.vue?4e60","webpack://advent-of-code/src/components/2020/Day18.vue","webpack://advent-of-code/./src/components/2020/Day18.vue?11df","webpack://advent-of-code/./src/components/2020/Day18.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":18,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"18\" :year=\"2020\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      numbers: []\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Remove all spaces, then split into bits\n      this.lines = input.map(i => i.replace(/\\s*/g, '').split(''))\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    evaluate: function (line, part) {\n      // Keep track of what's going on\n      const stack = []\n\n      // Go through the line\n      for (let i = 0; i < line.length; i++) {\n        // Get the current one\n        const el = line[i]\n        let res = el\n\n        // If it's a number, parse it\n        if (!isNaN(+el)) {\n          res = +el\n        }\n\n        if (el === '(') {\n          // Opening brackets mean we use recursion to solve the inner bit\n          const sub = this.evaluate(line.slice(i + 1), part)\n          // Remember the result\n          res = sub.value\n          // Adjust the index by effectively skipping the sub part\n          i += sub.length + 1\n        } else if (el === ')') {\n          // Closing brackets mean we can evaluate the current stack\n          const sub = part === 1 ? this.evaluateBitsPartOne(stack) : this.evaluateBitsPartTwo(stack)\n          // Return the result\n          return {\n            value: sub,\n            length: i\n          }\n        }\n\n        // Push the current part\n        stack.push(res)\n      }\n\n      // Finally, evaluate the whole stack\n      const value = part === 1 ? this.evaluateBitsPartOne(stack) : this.evaluateBitsPartTwo(stack)\n      // Return the result\n      return {\n        value: value,\n        length: line.length\n      }\n    },\n    evaluateBitsPartOne: function (stack) {\n      // Process them in the order they're defined in\n      for (let i = 0; i < stack.length; i++) {\n        if (stack[i] === '+') {\n          // If it's a plus, get previous and next, sum them up and put them back. Asjust the index.\n          stack.splice(i - 1, 3, stack[i - 1] + stack[i + 1])\n          i -= 1\n        }\n        if (stack[i] === '*') {\n          // If it's a star, get previous and next, multiply them up and put them back. Asjust the index.\n          stack.splice(i - 1, 3, stack[i - 1] * stack[i + 1])\n          i -= 1\n        }\n      }\n\n      return stack[0]\n    },\n    evaluateBitsPartTwo: function (stack) {\n      // Additions first\n      for (let i = 0; i < stack.length; i++) {\n        if (stack[i] === '+') {\n          // If it's a plus, get previous and next, sum them up and put them back. Asjust the index.\n          stack.splice(i - 1, 3, stack[i - 1] + stack[i + 1])\n          i -= 1\n        }\n      }\n\n      // Then multiplications\n      for (let j = 0; j < stack.length; j++) {\n        if (stack[j] === '*') {\n          // If it's a star, get previous and next, multiply them up and put them back. Asjust the index.\n          stack.splice(j - 1, 3, stack[j - 1] * stack[j + 1])\n          j -= 1\n        }\n      }\n\n      return stack[0]\n    },\n    solvePartOne: function () {\n      this.solutions.partOne = this.lines.map(l => this.evaluate(l, 1).value).reduce((a, b) => a + b)\n    },\n    solvePartTwo: function () {\n      this.solutions.partTwo = this.lines.map(l => this.evaluate(l, 2).value).reduce((a, b) => a + b)\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day18.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day18.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day18.vue?vue&type=template&id=56322162\"\nimport script from \"./Day18.vue?vue&type=script&lang=js\"\nexport * from \"./Day18.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","numbers","methods","evaluate","res","i","value","length","stack","evaluateBitsPartOne","evaluateBitsPartTwo","j","solvePartOne","solvePartTwo","component"],"sourceRoot":""}
{"version":3,"file":"js/3933.43377da8.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GACA,sDACA,mBACA,uCAEA,oBACA,mBACA,EACAQ,aAAAA,WACA,yDACA,EACAC,aAAAA,WACA,6DACA,EACAC,KAAAA,SAAAA,EAAAA,GAEA,gDAEA,QAEA,IAEA,GACAC,MAAAA,GAGAC,EAAAA,KAAAA,EACAA,EAAAA,KAAAA,EAGAC,IAEA,WACA,aAEAC,EAAAA,IAAAA,EAEA,6CAEA,SACA,SAEAC,EAAAA,KAAAA,EACAC,EAAAA,KAAAA,EACAC,EAAAA,KAAAA,KACAA,EAAAA,KAAAA,KAGAH,EAAAA,IAAAA,EAAAA,MAEAF,EAAAA,CACA,MAIA,eACA,cAGAA,EAAAA,CACAD,MAAAA,EACAI,KAAAA,EACAC,KAAAA,GAIAE,EAAAA,KAAAA,EACAC,EAAAA,KAAAA,CACA,CAGAC,GAAAA,EAAAA,GAAAA,KAAAA,QACAP,GACA,CAEA,qBACA,ICjG4P,I,UCOxPQ,GAAY,OACd,EACA/B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAeoB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2018/Day9.vue?7df6","webpack://advent-of-code/src/components/2018/Day9.vue","webpack://advent-of-code/./src/components/2018/Day9.vue?cd01","webpack://advent-of-code/./src/components/2018/Day9.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":9,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"9\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const parts = input[0].split(' players; last marble is worth ')\n      this.players = +parts[0]\n      this.count = +(parts[1].replace(' points', ''))\n\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    solvePartOne: function () {\n      this.solutions.partOne = this.play(this.players, this.count)\n    },\n    solvePartTwo: function () {\n      this.solutions.partTwo = this.play(this.players, this.count * 100)\n    },\n    play: function (players, targetCount) {\n      // Keep track of the scores\n      const scores = Array.from(Array(players).keys()).map(i => 0)\n      // The current player\n      let player = 0\n      // The next marble value\n      let count = 0\n      // The current marble\n      let marble = {\n        value: count\n      }\n      // Set its neighbors\n      marble.next = marble\n      marble.prev = marble\n\n      // Increase the marble count\n      count++\n      // Keep going until we reached the target value\n      while (count < targetCount) {\n        if (count % 23 === 0) {\n          // If it's divisible by 23 add the marble value to the player scores\n          scores[player] += count\n          // Get the one to remove\n          const toRemove = marble.prev.prev.prev.prev.prev.prev.prev\n          // Get its neigbors\n          const prev = toRemove.prev\n          const next = toRemove.next\n          // Remove the target\n          prev.next = next\n          next.prev = prev\n          toRemove.next = null\n          toRemove.prev = null\n\n          // Increase the player score again\n          scores[player] += toRemove.value\n          // Move to the next marble\n          marble = next\n        } else {\n          // Else, we just add the marble\n\n          // Get the next two marbles from the current one\n          const c1 = marble.next\n          const c2 = marble.next.next\n\n          // Create the new marble\n          marble = {\n            value: count,\n            prev: c1,\n            next: c2\n          }\n\n          // Insert it between the others\n          c1.next = marble\n          c2.prev = marble\n        }\n\n        // Shift player and increase marble count\n        player = (player + 1) % this.players\n        count++\n      }\n\n      return Math.max(...scores)\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day9.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day9.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day9.vue?vue&type=template&id=32852315\"\nimport script from \"./Day9.vue?vue&type=script&lang=js\"\nexport * from \"./Day9.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","solvePartOne","solvePartTwo","play","value","marble","count","scores","prev","next","toRemove","c1","c2","player","component"],"sourceRoot":""}
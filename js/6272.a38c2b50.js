"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[6272],{49098:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day18)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day18.vue?vue&type=template&id=4850715e&scoped=true\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":18,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(36100);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day18.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day18vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Start with the first\n      let current = input[0];\n      for (let i = 1; i < input.length; i++) {\n        // Then stepwise add the other onto it\n        current = this.add(current, input[i]);\n      }\n\n      // Convert to an array using the convenient JSON.parse\n      const arr = JSON.parse(current);\n      // Get the magnitude by traversing the tree\n      this.solutions.partOne = this.magnitude(arr);\n\n      // Find the maximum\n      let max = 0;\n      // Pairwise comparison of all pairs\n      for (let i = 0; i < input.length; i++) {\n        for (let j = 0; j < input.length; j++) {\n          // Skip same ones\n          if (i === j) {\n            continue;\n          }\n\n          // Calculate the magnitude\n          const result = this.magnitude(JSON.parse(this.add(input[i], input[j])));\n\n          // Update maximum\n          max = Math.max(max, result);\n        }\n      }\n      this.solutions.partTwo = max;\n    },\n    add: function (one, two) {\n      // Create the concatenated array\n      let current = `[${one},${two}]`;\n\n      // While we found something to compact\n      let compacting = false;\n      do {\n        // Explode first\n        let result = this.explode(current);\n        current = result[0];\n        compacting = result[1];\n\n        // If there was no explosion\n        if (!compacting) {\n          // Check for splits\n          result = this.split(current);\n          current = result[0];\n          compacting = result[1];\n        }\n      } while (compacting);\n\n      // Return the result of the addition\n      return current;\n    },\n    magnitude: function (current) {\n      if (isNaN(current)) {\n        // For internal nodes, it's 3 times left plus 2 times right\n        return 3 * this.magnitude(current[0]) + 2 * this.magnitude(current[1]);\n      } else {\n        // For leaf nodes, it's the value\n        return current;\n      }\n    },\n    split: function (current) {\n      const arr = current.split('');\n\n      // Find numbers that are larger or equal to 10\n      let start = null;\n      let end = null;\n      let isNumber = false;\n      // Go through the string from left to right\n      for (let i = 0; i < arr.length; i++) {\n        // If we find a number\n        if (!isNaN(arr[i])) {\n          isNumber = true;\n          if (start === null) {\n            // Set the start (left boundary)\n            start = i;\n            // Set an initial value for the end (right boundary)\n            end = Math.min(i + 1, arr.length - 1);\n          } else {\n            // Update the end (right boundary)\n            end = Math.min(i + 1, arr.length - 1);\n          }\n        } else {\n          isNumber = false;\n        }\n\n        // We got to the end\n        if (i === arr.length - 1) {\n          isNumber = false;\n        }\n\n        // If we're no longer in the process of parsing a multi-digit number and we found a start and an end\n        if (!isNumber && start !== null && end !== null) {\n          // Parse the number\n          const n = parseInt(current.substring(start, end));\n          if (n >= 10) {\n            // If it's too large, replace it with an array of floor and ceil\n            return [`${current.substring(0, start)}[${Math.floor(n / 2.0)},${Math.ceil(n / 2.0)}]${current.substring(end, current.length)}`, true];\n          } else {\n            // If it's too small, continue searching\n            start = null;\n            end = null;\n            isNumber = false;\n          }\n        }\n      }\n\n      // Indicate we didn't split\n      return [current, false];\n    },\n    explode: function (current) {\n      const arr = current.split('');\n\n      // Count the level by keeping track of opening and closing brackets\n      let openCount = 0;\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === '[') {\n          openCount++;\n        }\n        if (arr[i] === ']') {\n          openCount--;\n        }\n\n        // We found one that's \"too deep\"\n        if (openCount > 4) {\n          // Get the end index\n          const endIndex = current.indexOf(']', i);\n          // Parse the number pair\n          const pair = current.substring(i + 1, endIndex).split(',').map(c => +c);\n          // Get the left and the right substrings for later\n          let left = current.substring(0, i);\n          let right = current.substring(endIndex + 1);\n\n          // Go from the found index towards the left to find the first number and increase it\n          let start = null;\n          let end = null;\n          let isNumber = false;\n          const leftArr = left.split('');\n          for (let l = leftArr.length - 1; l >= 0; l--) {\n            if (!isNaN(leftArr[l])) {\n              isNumber = true;\n              if (end === null) {\n                // We found the right border\n                end = l;\n                // Initialise the left border\n                start = Math.max(0, l - 1);\n              } else {\n                // Update the left border\n                start = Math.max(0, l - 1);\n              }\n            } else {\n              isNumber = false;\n            }\n            if (l === 0) {\n              isNumber = false;\n            }\n\n            // If we're no longer in the process of parsing a multi-digit number and we found a start and an end\n            if (!isNumber && start !== null && end !== null) {\n              // Update the left side by increasing the number value\n              left = `${left.substring(0, start + 1)}${parseInt(left.substring(start + 1, end + 1)) + pair[0]}${left.substring(end + 1, left.length)}`;\n              break;\n            }\n          }\n          start = null;\n          end = null;\n          isNumber = false;\n          const rightArr = right.split('');\n          for (let r = 0; r < rightArr.length; r++) {\n            if (!isNaN(rightArr[r])) {\n              isNumber = true;\n              if (start === null) {\n                // We found the left border\n                start = r;\n                // Initialise the left border\n                end = Math.min(rightArr.length - 1, r + 1);\n              } else {\n                // Update the left border\n                end = Math.min(rightArr.length - 1, r + 1);\n              }\n            } else {\n              isNumber = false;\n            }\n            if (r === rightArr.length - 1) {\n              isNumber = false;\n            }\n\n            // If we're no longer in the process of parsing a multi-digit number and we found a start and an end\n            if (!isNumber && start !== null && end !== null) {\n              // Update the right side by increasing the number value\n              right = `${right.substring(0, start)}${parseInt(right.substring(start, end)) + pair[1]}${right.substring(end, right.length)}`;\n              break;\n            }\n          }\n\n          // Reconstitute the whole string by setting a zero in the middle\n          current = `${left}0${right}`;\n\n          // Indicate we exploded\n          return [current, true];\n        }\n      }\n\n      // Indicate we didn't explode\n      return [current, false];\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2021/Day18.vue?vue&type=script&lang=js\n /* harmony default export */ const _2021_Day18vue_type_script_lang_js = (Day18vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2021/Day18.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2021_Day18vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4850715e\",\n  null\n  \n)\n\n/* harmony default export */ const Day18 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49098\n")}}]);
"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[3713],{96024:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day12)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day12.vue?vue&type=template&id=36d56a62\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":12,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day12.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day12vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.startGrid = input[0].split(': ')[1].split('').map(c => c === '#');\n      input.shift();\n      input.shift();\n      this.rules = input.map(r => {\n        const parts = r.split(' => ');\n        const positions = parts[0].split('').map(c => c === '#');\n        const result = parts[1] === '#';\n        return {\n          positions,\n          result\n        };\n      });\n      this.solvePartOne();\n      this.solvePartTwo();\n    },\n    solve: function (generations) {\n      let startIndex = 0;\n\n      // Take a copy as the previous grid\n      let prevGrid = this.startGrid.concat();\n      // For each generation\n      for (let gen = 1; gen <= generations; gen++) {\n        // Take a copy to store the new values\n        const tempGrid = prevGrid.concat();\n        // Pad them with '.'/false if necessary\n        while (tempGrid.indexOf(true) < 5) {\n          // Adjust the start index so we know where the original 0 index is\n          startIndex++;\n          tempGrid.unshift(false);\n        }\n        while (tempGrid.lastIndexOf(true) > tempGrid.length - 6) {\n          tempGrid.push(false);\n        }\n\n        // Store the result\n        const targetGrid = tempGrid.concat();\n\n        // Go through all positions\n        for (let pos = 2; pos < tempGrid.length - 3; pos++) {\n          // Get the important positions\n          const [ll, l, c, r, rr] = tempGrid.slice(pos - 2, pos + 3);\n          // Find the rule that matches\n          const newValue = this.rules.filter(rule => rule.positions[0] === ll && rule.positions[1] === l && rule.positions[2] === c && rule.positions[3] === r && rule.positions[4] === rr).map(r => r.result)[0];\n          if (newValue === undefined || newValue === false) {\n            // If there is no matching rule (example) or the the rule says it should be dead, set to false\n            targetGrid[pos] = false;\n          } else {\n            // Otherwise, use the new value\n            targetGrid[pos] = newValue;\n          }\n        }\n\n        // Store for next iteration\n        prevGrid = targetGrid.concat();\n      }\n\n      // Sum up indices\n      let sum = 0;\n      for (let i = 0; i < prevGrid.length; i++) {\n        const index = i - startIndex;\n        if (prevGrid[i]) {\n          sum += index;\n        }\n      }\n      return sum;\n    },\n    solvePartOne: function () {\n      this.solutions.partOne = this.solve(20);\n    },\n    solvePartTwo: function () {\n      // For part 2 I ran the first few hundred generations to see if there's any pattern.\n      // After about 200 I noticed that the difference between two generations is constant.\n      // We can exploit this by searching for this repeat and then calculating the total by\n      // Using the last result before the repeat and then adding the diff times the number\n      // Of remaining iterations to it.\n\n      // Keep track of all the diffs between runs\n      const diffs = [];\n      // Start at 1 generation\n      let gen = 1;\n      // Track the result of the previous generation\n      let prev = 0;\n      // While there aren't yet 10 entries in the diffs OR they aren't all the same\n      while (diffs.length < 10 || diffs.some(d => d !== diffs[0])) {\n        // Solve for the next generation\n        const curr = this.solve(gen++);\n        // Store the diff\n        diffs.push(curr - prev);\n        // Remember previous result\n        prev = curr;\n\n        // Only keep the last 10 diffs\n        if (diffs.length > 10) {\n          diffs.shift();\n        }\n      }\n\n      // At this point the last ten diffs were the same, meaning we reached a point where the increase is identical in each run\n      // Therefore, calculate the result as the remaining gems times the diff + the last result before the diff repeat\n      this.solutions.partTwo = (50000000000 - gen + 11) * diffs[0] + this.solve(gen - 11);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2018/Day12.vue?vue&type=script&lang=js\n /* harmony default export */ const _2018_Day12vue_type_script_lang_js = (Day12vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2018/Day12.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2018_Day12vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day12 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///96024\n")}}]);
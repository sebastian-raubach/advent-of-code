"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[2914],{78926:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day9)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day9.vue?vue&type=template&id=8865598a\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":9,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{attrs:{\"id\":\"partOne\"}})]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('div',{attrs:{\"id\":\"partTwo\"}})]},proxy:true}])})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(36100);\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(20629);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day9.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ const Day9vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  computed: {\n    ...(0,vuex_esm/* mapGetters */.Se)(['storeDarkMode']),\n    layout: function () {\n      return {\n        height: 700,\n        xaxis: {\n          title: {\n            text: 'X',\n            font: {\n              color: this.storeDarkMode ? 'white' : 'black'\n            }\n          },\n          tickfont: {\n            color: this.storeDarkMode ? 'white' : 'black'\n          },\n          gridcolor: this.storeDarkMode ? '#111111' : '#eeeeee'\n        },\n        yaxis: {\n          title: {\n            text: 'Y',\n            font: {\n              color: this.storeDarkMode ? 'white' : 'black'\n            }\n          },\n          tickfont: {\n            color: this.storeDarkMode ? 'white' : 'black'\n          },\n          gridcolor: this.storeDarkMode ? '#111111' : '#eeeeee',\n          scaleanchor: 'x'\n        },\n        paper_bgcolor: 'transparent',\n        plot_bgcolor: 'transparent'\n      };\n    }\n  },\n  watch: {\n    storeDarkMode: function () {\n      this.plotGrid();\n      this.plotBasins();\n    }\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      pointToBasin: {}\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Parse the input into a number 2d array\n      const grid = input.map(r => r.split('').map(c => +c));\n\n      // Keep track of the basins\n      const basins = [];\n      for (let y = 0; y < grid.length; y++) {\n        for (let x = 0; x < grid[y].length; x++) {\n          // Find neighbors of the current grid cell\n          const neighbors = this.neighbors(grid, x, y);\n\n          // Check if the current point is smaller than all neighbors\n          if (grid[y][x] < Math.min(...neighbors.map(n => grid[n.y][n.x]))) {\n            basins.push({\n              x: x,\n              y: y\n            });\n          }\n        }\n      }\n\n      // Set solution one as the sum of all basin centers (+1) and plot\n      this.setTraceOne(grid);\n      this.solutions.partOne = basins.map(b => grid[b.y][b.x] + 1).reduce((a, b) => a + b);\n      this.plotGrid();\n\n      // Get the size of each basin using DFS, then sort descending\n      const basinSizes = basins.map((b, i) => this.calcBasinSize(grid, b, [], i));\n      const basinSizesSorted = basinSizes.concat().sort((a, b) => b - a);\n      // Use the largest three to calculate the solution, then plot\n      this.solutions.partTwo = basinSizesSorted[0] * basinSizesSorted[1] * basinSizesSorted[2];\n      this.setTraceTwo(grid, basinSizes);\n      this.plotBasins();\n    },\n    setTraceOne: function (grid) {\n      // Plot part one\n      const trace = {\n        x: Array.from(Array(grid[0].length)).map((_, i) => i + 1),\n        y: Array.from(Array(grid.length)).map((_, i) => i + 1),\n        z: grid,\n        type: 'heatmap',\n        colorscale: [[0, '#1B1464'], [1, '#12CBC4']]\n      };\n      Object.freeze(trace);\n      this.tracesOne = [trace];\n    },\n    setTraceTwo: function (grid, basinSizes) {\n      // Plot part two\n      const trace = {\n        x: Array.from(Array(grid[0].length)).map((_, i) => i + 1),\n        y: Array.from(Array(grid.length)).map((_, i) => i + 1),\n        z: grid.map((r, ri) => r.map((c, ci) => {\n          if (c === 9) {\n            return null;\n          } else {\n            const basin = this.pointToBasin[`${ci},${ri}`];\n            return basinSizes[basin];\n          }\n        })),\n        type: 'heatmap',\n        colorscale: [[0, '#1B1464'], [1, '#12CBC4']]\n      };\n      Object.freeze(trace);\n      this.tracesTwo = [trace];\n    },\n    calcBasinSize: function (grid, curr, visited, index) {\n      // Remember we've been here before\n      visited.push(`${curr.x},${curr.y}`);\n\n      // Remember for plotting\n      this.pointToBasin[`${curr.x},${curr.y}`] = index;\n\n      // Get the valid neighbors (the ones with strictly larger value and not visited before)\n      const validNeighbors = this.neighbors(grid, curr.x, curr.y).filter(n => {\n        if (visited.indexOf(`${n.x},${n.y}`) !== -1) {\n          // Check if it's already been visited\n          return false;\n        } else {\n          // Check if it's got a larger value but it's not a 9\n          return grid[n.y][n.x] > grid[curr.y][curr.x] && grid[n.y][n.x] < 9;\n        }\n      });\n\n      // Count the node itself\n      let counter = 1;\n\n      // Then sum up the sizes of their neighbors\n      validNeighbors.forEach(n => {\n        // We have to check this here again, because we may have visited more nodes in a previous DFS branch from this point\n        if (visited.indexOf(`${n.x},${n.y}`) === -1) {\n          // Increase the basin size\n          counter += this.calcBasinSize(grid, n, visited, index);\n        }\n      });\n      return counter;\n    },\n    neighbors: function (grid, x, y) {\n      const result = [];\n      if (x > 0) {\n        // Go left\n        result.push({\n          x: x - 1,\n          y: y\n        });\n      }\n      if (x < grid[y].length - 1) {\n        // Go right\n        result.push({\n          x: x + 1,\n          y: y\n        });\n      }\n      if (y > 0) {\n        // Go up\n        result.push({\n          x: x,\n          y: y - 1\n        });\n      }\n      if (y < grid.length - 1) {\n        // Go down\n        result.push({\n          x: x,\n          y: y + 1\n        });\n      }\n      return result;\n    },\n    plotGrid: function () {\n      this.$nextTick(() => {\n        this.$plotly.newPlot('partOne', this.tracesOne, this.layout, {\n          responsive: true,\n          displaylogo: false\n        });\n      });\n    },\n    plotBasins: function () {\n      this.$nextTick(() => {\n        this.$plotly.newPlot('partTwo', this.tracesTwo, this.layout, {\n          responsive: true,\n          displaylogo: false\n        });\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2021/Day9.vue?vue&type=script&lang=js\n /* harmony default export */ const _2021_Day9vue_type_script_lang_js = (Day9vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2021/Day9.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2021_Day9vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day9 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///78926\n")}}]);
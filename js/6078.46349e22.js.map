{"version":3,"file":"js/6078.46349e22.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2023/Day10.vue?4536","webpack://advent-of-code/src/components/2023/Day10.vue","webpack://advent-of-code/./src/components/2023/Day10.vue?4f06","webpack://advent-of-code/./src/components/2023/Day10.vue","webpack://advent-of-code/./src/util/color.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":10,\"year\":2023,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":\"1000\",\"height\":\"1000\"}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"10\" :year=\"2023\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partOne\" class=\"canvas\" width=\"1000\" height=\"1000\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { createMultiColorGradient, VIRIDIS } from '@/util/color'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      pathIndex: 0,\n      pipes: {\n        L: {\n          connects: (from, pipe) => (from.x === pipe.x && from.y === (pipe.y - 1)) || (from.y === pipe.y && from.x === (pipe.x + 1))\n        },\n        J: {\n          connects: (from, pipe) => (from.x === pipe.x && from.y === (pipe.y - 1)) || (from.y === pipe.y && from.x === (pipe.x - 1))\n        },\n        7: {\n          connects: (from, pipe) => (from.x === pipe.x && from.y === (pipe.y + 1)) || (from.y === pipe.y && from.x === (pipe.x - 1))\n        },\n        F: {\n          connects: (from, pipe) => (from.x === pipe.x && from.y === (pipe.y + 1)) || (from.y === pipe.y && from.x === (pipe.x + 1))\n        },\n        '|': {\n          connects: (from, pipe) => (from.x === pipe.x && from.y === (pipe.y - 1)) || (from.x === pipe.x && from.y === (pipe.y + 1))\n        },\n        '-': {\n          connects: (from, pipe) => (from.y === pipe.y && from.x === (pipe.x - 1)) || (from.y === pipe.y && from.x === (pipe.x + 1))\n        },\n        S: {\n          connects: (from, pipe) => true\n        }\n      },\n      dirs: [[-1, 0], [1, 0], [0, -1], [0, 1]]\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.grid = input.map(i => i.split(''))\n\n      let start = { x: 0, y: 0 }\n\n      input.forEach((r, ri) => {\n        const sIndex = r.indexOf('S')\n\n        if (sIndex !== -1) {\n          start = { x: sIndex, y: ri }\n        }\n      })\n\n      const circuit = []\n      const visited = new Set()\n      let current = start\n\n      while (true) {\n        circuit.push(current)\n        visited.add(`${current.x},${current.y}`)\n\n        const currPipe = this.grid[current.y][current.x]\n        const neighbors = this.getNeighbors(current)\n\n        const matches = neighbors.filter(n => {\n          const pipe = this.grid[n.y][n.x]\n\n          if (visited.has(`${n.x},${n.y}`)) {\n            return false\n          } else if (n.x === start.x && n.y === start.y) {\n          // } else if (pipe === 'S') {\n            return true\n          } else if (pipe === '.') {\n            return false\n          } else {\n            return this.pipes[pipe].connects(current, n) && this.pipes[currPipe].connects(n, current)\n          }\n        })\n\n        if (matches.length > 0) {\n          current = matches[0]\n        } else {\n          break\n        }\n      }\n\n      this.fixStart(circuit)\n\n      this.solutions.partOne = Math.floor(circuit.length / 2)\n      const enclosed = this.findEnclosed(circuit)\n      this.solutions.partTwo = enclosed.length\n\n      this.$nextTick(() => this.draw(start, circuit, enclosed))\n    },\n    fixStart: function (circuit) {\n      const start = circuit[0]\n      const next = circuit[1]\n      const prev = circuit[circuit.length - 1]\n\n      if (prev.x === start.x && start.x === next.x) {\n        this.grid[start.y][start.x] = '|'\n      } else if (prev.y === start.y && start.y === next.y) {\n        this.grid[start.y][start.x] = '-'\n      } else if (((prev.x === start.x + 1) && (next.y === start.y + 1)) || ((next.x === start.x + 1) && (prev.y === start.y + 1))) {\n        this.grid[start.y][start.x] = 'F'\n      } else if (((prev.x === start.x - 1) && (next.y === start.y + 1)) || ((next.x === start.x - 1) && (prev.y === start.y + 1))) {\n        this.grid[start.y][start.x] = '7'\n      } else if (((prev.x === start.x + 1) && (next.y === start.y - 1)) || ((next.x === start.x + 1) && (prev.y === start.y - 1))) {\n        this.grid[start.y][start.x] = 'L'\n      } else if (((prev.x === start.x - 1) && (next.y === start.y - 1)) || ((next.x === start.x - 1) && (prev.y === start.y - 1))) {\n        this.grid[start.y][start.x] = 'J'\n      }\n    },\n    findEnclosed: function (circuit) {\n      const mapped = new Map()\n      circuit.forEach((p, i) => {\n        mapped.set(`${p.x}|${p.y}`, i)\n      })\n      const result = []\n      for (let row = 0; row < this.grid.length; row++) {\n        for (let col = 0; col < this.grid[row].length; col++) {\n          if (!mapped.has(`${col}|${row}`)) {\n            let enclosed = false\n            let x = col\n\n            while (x >= 0) {\n              const index = mapped.get(`${x}|${row}`)\n              const pipe = this.grid[row][x]\n              if (index !== undefined && (pipe === '|' || pipe === 'F' || pipe === '7')) {\n                enclosed = !enclosed\n              }\n\n              x--\n            }\n\n            if (enclosed) {\n              result.push({ x: col, y: row })\n            }\n          }\n        }\n      }\n      return result\n    },\n    draw: function (start, path, enclosed) {\n      this.pathIndex = 0\n      this.enclosedIndex = 0\n      this.gradient = createMultiColorGradient(VIRIDIS, Math.ceil(path.length / 2))\n\n      // Initialise the canvas\n      this.canvas = document.getElementById('partOne')\n      this.ctx = this.canvas.getContext('2d')\n\n      // Set the canvas size\n      this.factor = 7\n      this.canvas.width = this.grid[0].length * this.factor\n      this.canvas.height = this.grid.length * this.factor\n      this.ctx.fillStyle = '#222222'\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n      this.ctx.lineWidth = this.factor / 4\n\n      for (let row = 0; row < this.grid.length; row++) {\n        for (let col = 0; col < this.grid[row].length; col++) {\n          let pipe = this.grid[row][col]\n\n          if (row === start.y && col === start.x) {\n            pipe = 'S'\n          }\n\n          this.ctx.strokeStyle = '#34495e'\n          this.ctx.fillStyle = '#34495e'\n          this.drawPipe(col, row, pipe)\n        }\n      }\n\n      window.requestAnimationFrame(() => this.drawPath(path, enclosed))\n    },\n    drawPath: function (path, enclosed) {\n      const i = this.pathIndex\n      const s = path[i]\n      const sp = this.grid[s.y][s.x]\n      const e = path[path.length - i - 1]\n      const ep = this.grid[e.y][e.x]\n\n      if ((s.x === e.x && s.y) === e.y || i === Math.floor(path.length / 2)) {\n        this.ctx.fillStyle = '#e74c3c'\n        this.ctx.strokeStyle = '#e74c3c'\n      } else {\n        const color = this.gradient[i]\n        this.ctx.strokeStyle = color\n        this.ctx.fillStyle = color\n      }\n\n      this.drawPipe(s.x, s.y, sp)\n      this.drawPipe(e.x, e.y, ep)\n\n      if (i < path.length / 2) {\n        this.pathIndex++\n        window.requestAnimationFrame(() => this.drawPath(path, enclosed))\n      } else {\n        const sorted = enclosed.concat().sort((a, b) => Math.sign((a.x + a.y) - (b.x + b.y)))\n        window.requestAnimationFrame(() => this.drawEnclosed(sorted))\n      }\n    },\n    drawEnclosed: function (enclosed) {\n      this.ctx.strokeStyle = '#25CCF7'\n      this.ctx.fillStyle = '#25CCF7'\n\n      const e = enclosed[this.enclosedIndex]\n\n      this.drawPipe(e.x, e.y, this.grid[e.y][e.x])\n\n      if (this.enclosedIndex < enclosed.length - 1) {\n        this.enclosedIndex++\n        window.requestAnimationFrame(() => this.drawEnclosed(enclosed))\n      }\n    },\n    drawPipe: function (x, y, pipe) {\n      switch (pipe) {\n        case 'F':\n          this.ctx.beginPath()\n          this.ctx.arc((x + 1) * this.factor, (y + 1) * this.factor, this.factor / 2, Math.PI, 1.5 * Math.PI)\n          this.ctx.stroke()\n          break\n        case 'J':\n          this.ctx.beginPath()\n          this.ctx.arc(x * this.factor, y * this.factor, this.factor / 2, 0, 0.5 * Math.PI)\n          this.ctx.stroke()\n          break\n        case '7':\n          this.ctx.beginPath()\n          this.ctx.arc(x * this.factor, (y + 1) * this.factor, this.factor / 2, 1.5 * Math.PI, 0)\n          this.ctx.stroke()\n          break\n        case 'L':\n          this.ctx.beginPath()\n          this.ctx.arc((x + 1) * this.factor, y * this.factor, this.factor / 2, 0.5 * Math.PI, Math.PI)\n          this.ctx.stroke()\n          break\n        case '|':\n          this.ctx.beginPath()\n          this.ctx.moveTo(x * this.factor + this.factor / 2, y * this.factor)\n          this.ctx.lineTo(x * this.factor + this.factor / 2, (y + 1) * this.factor)\n          this.ctx.stroke()\n          break\n        case '-':\n          this.ctx.beginPath()\n          this.ctx.moveTo(x * this.factor, y * this.factor + this.factor / 2)\n          this.ctx.lineTo((x + 1) * this.factor, y * this.factor + this.factor / 2)\n          this.ctx.stroke()\n          break\n        case '.':\n          this.ctx.beginPath()\n          this.ctx.arc(x * this.factor + this.factor / 2, y * this.factor + this.factor / 2, this.factor / 4, 0, 2 * Math.PI)\n          this.ctx.fill()\n          break\n        case 'S':\n          this.ctx.fillStyle = '#e74c3c'\n          this.ctx.fillRect(x * this.factor, y * this.factor, this.factor, this.factor)\n          break\n      }\n    },\n    getNeighbors: function (current) {\n      return this.dirs.map(d => { return { x: current.x + d[0], y: current.y + d[1] } }).filter(d => d.x >= 0 && d.x < this.grid[0].length && d.y >= 0 && d.y < this.grid.length)\n    }\n  }\n}\n</script>\n\n<style>\n.canvas-holder {\n  overflow: auto;\n  height: 1000px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day10.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day10.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day10.vue?vue&type=template&id=46861c24\"\nimport script from \"./Day10.vue?vue&type=script&lang=js\"\nexport * from \"./Day10.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day10.vue?vue&type=style&index=0&id=46861c24&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","const VIRIDIS = ['#440154', '#48186a', '#472d7b', '#424086', '#3b528b', '#33638d', '#2c728e', '#26828e', '#21918c', '#1fa088', '#28ae80', '#3fbc73', '#5ec962', '#84d44b', '#addc30', '#d8e219', '#fde725']\n\n/**\n * Converts a HEX value into an RGB object\n * @param {String} hex The hex color\n */\nconst hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    }\n    : null\n}\n\n/**\n * Converts the given R, G, B values into a HEX color\n * @param {Number} r The red color component\n * @param {Number} g The green color component\n * @param {Number} b The blue color component\n */\nconst rgbToHex = (r, g, b) => {\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n}\n\n/**\n * Creates a linear gradient between the two given colors with the given number of steps\n * @param {String} one The first color in HEX\n * @param {String} two The second color in HEX\n * @param {Number} steps The number of steps between the two colors\n */\nconst createColorGradient = (one, two, steps) => {\n  const oneRgb = hexToRgb(one)\n  const twoRgb = hexToRgb(two)\n\n  if (steps < 2) {\n    return [one]\n  }\n\n  const result = []\n  for (let i = 0; i < steps; i++) {\n    const iNorm = (i / (steps - 1))\n    result.push(rgbToHex(\n      Math.floor(oneRgb.r + iNorm * (twoRgb.r - oneRgb.r)),\n      Math.floor(oneRgb.g + iNorm * (twoRgb.g - oneRgb.g)),\n      Math.floor(oneRgb.b + iNorm * (twoRgb.b - oneRgb.b))\n    ))\n  }\n  return result\n}\n\nconst createMultiColorGradient = (colors, steps) => {\n  if (colors.length > steps) {\n    return colors.slice(0, steps)\n  }\n\n  const sections = colors.length - 1\n\n  let result = []\n\n  for (let i = 0; i < sections - 1; i++) {\n    result = result.concat(createColorGradient(colors[i], colors[i + 1], Math.max(1, Math.floor(steps / sections))))\n  }\n\n  while (result.length < steps) {\n    result.push(colors[colors.length - 1])\n  }\n\n  return result\n}\n\nexport {\n  hexToRgb,\n  rgbToHex,\n  createColorGradient,\n  createMultiColorGradient,\n  VIRIDIS\n}\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","proxy","staticRenderFns","components","Day","data","partOne","partTwo","pathIndex","pipes","L","connects","J","F","S","dirs","methods","x","y","input","start","circuit","visited","current","fixStart","findEnclosed","mapped","enclosed","result","draw","pipe","window","drawPath","drawEnclosed","drawPipe","getNeighbors","component","VIRIDIS","hexToRgb","hex","exec","r","parseInt","g","b","rgbToHex","toString","slice","createColorGradient","one","two","steps","oneRgb","twoRgb","i","iNorm","push","Math","floor","createMultiColorGradient","colors","length","sections","concat","max"],"sourceRoot":""}
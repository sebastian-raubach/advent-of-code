(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[5226],{7436:(__unused_webpack_module,exports,__webpack_require__)=>{eval("const { MinHeap } = __webpack_require__(78573);\nconst { MaxHeap } = __webpack_require__(38945);\nconst { CustomHeap } = __webpack_require__(14295);\n\nexports.MinHeap = MinHeap;\nexports.MaxHeap = MaxHeap;\nexports.CustomHeap = CustomHeap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQzNi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxRQUFRLFVBQVUsRUFBRSxtQkFBTyxDQUFDLEtBQWU7QUFDM0MsUUFBUSxVQUFVLEVBQUUsbUJBQU8sQ0FBQyxLQUFlO0FBQzNDLFFBQVEsYUFBYSxFQUFFLG1CQUFPLENBQUMsS0FBa0I7O0FBRWpELGVBQWU7QUFDZixlQUFlO0FBQ2Ysa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWR2ZW50LW9mLWNvZGUvLi9ub2RlX21vZHVsZXMvQGRhdGFzdHJ1Y3R1cmVzLWpzL2hlYXAvaW5kZXguanM/NzdhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IE1pbkhlYXAgfSA9IHJlcXVpcmUoJy4vc3JjL21pbkhlYXAnKTtcbmNvbnN0IHsgTWF4SGVhcCB9ID0gcmVxdWlyZSgnLi9zcmMvbWF4SGVhcCcpO1xuY29uc3QgeyBDdXN0b21IZWFwIH0gPSByZXF1aXJlKCcuL3NyYy9jdXN0b21IZWFwJyk7XG5cbmV4cG9ydHMuTWluSGVhcCA9IE1pbkhlYXA7XG5leHBvcnRzLk1heEhlYXAgPSBNYXhIZWFwO1xuZXhwb3J0cy5DdXN0b21IZWFwID0gQ3VzdG9tSGVhcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7436\n")},14295:(__unused_webpack_module,exports,__webpack_require__)=>{eval("/**\n * @license MIT\n * @copyright 2020 Eyas Ranjous <eyas.ranjous@gmail.com>\n */\n\nconst { Heap } = __webpack_require__(42613);\n\n/**\n * @class CustomHeap\n * @extends Heap\n */\nclass CustomHeap extends Heap {\n  constructor(comparator, nodes, leaf) {\n    if (typeof comparator !== 'function') {\n      throw new Error('CustomHeap expects a comparator function');\n    }\n    super(nodes, leaf);\n    this._comparator = comparator;\n  }\n\n  /**\n   * Compares parent & child nodes\n   * and returns true if they are in right positions\n   *\n   * @private\n   * @param {object|number|string} parent\n   * @param {object|number|string} child\n   * @returns {number}\n   */\n  _compare(parentNode, childNode) {\n    return this._comparator(parentNode, childNode) <= 0;\n  }\n\n  /**\n   * Returns child's index of two children before an index\n   * @private\n   * @param {number} index\n   * @param {number} leftChildIndex\n   * @param {number} rightChildIndex\n   * @returns {number}\n   */\n  _compareChildrenBefore(index, leftChildIndex, rightChildIndex) {\n    const compare = this._comparator(\n      this._nodes[rightChildIndex],\n      this._nodes[leftChildIndex]\n    );\n\n    if (compare <= 0 && rightChildIndex < index) {\n      return rightChildIndex;\n    }\n\n    return leftChildIndex;\n  }\n\n  /**\n   * Returns a shallow copy of the heap\n   * @public\n   * @returns {CustomHeap}\n   */\n  clone() {\n    return new CustomHeap(\n      this._comparator,\n      this._nodes.slice(),\n      this._leaf\n    );\n  }\n\n  /**\n   * Builds a custom heap from an array of items\n   * @public\n   * @static\n   * @param {array} list\n   * @param {function} comparator\n   * @returns {CustomHeap}\n   */\n  static heapify(list, comparator) {\n    if (!Array.isArray(list)) {\n      throw new Error('.heapify expects an array');\n    }\n\n    if (typeof comparator !== 'function') {\n      throw new Error('.heapify expects a comparator function');\n    }\n\n    return new CustomHeap(comparator, list).fix();\n  }\n\n  /**\n   * Checks if a list of items is a valid custom heap\n   * @public\n   * @static\n   * @param {array} list\n   * @param {function} comparator\n   * @returns {boolean}\n   */\n  static isHeapified(list, comparator) {\n    if (!Array.isArray(list)) {\n      throw new Error('.heapify expects an array');\n    }\n\n    if (typeof comparator !== 'function') {\n      throw new Error('.isHeapified expects a comparator function');\n    }\n\n    return new CustomHeap(comparator, list).isValid();\n  }\n}\n\nexports.CustomHeap = CustomHeap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQyOTUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxPQUFPLEVBQUUsbUJBQU8sQ0FBQyxLQUFROztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsc0JBQXNCO0FBQ25DLGFBQWEsc0JBQXNCO0FBQ25DLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsVUFBVTtBQUN2QixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLFVBQVU7QUFDdkIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHZlbnQtb2YtY29kZS8uL25vZGVfbW9kdWxlcy9AZGF0YXN0cnVjdHVyZXMtanMvaGVhcC9zcmMvY3VzdG9tSGVhcC5qcz9jODY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgTUlUXG4gKiBAY29weXJpZ2h0IDIwMjAgRXlhcyBSYW5qb3VzIDxleWFzLnJhbmpvdXNAZ21haWwuY29tPlxuICovXG5cbmNvbnN0IHsgSGVhcCB9ID0gcmVxdWlyZSgnLi9oZWFwJyk7XG5cbi8qKlxuICogQGNsYXNzIEN1c3RvbUhlYXBcbiAqIEBleHRlbmRzIEhlYXBcbiAqL1xuY2xhc3MgQ3VzdG9tSGVhcCBleHRlbmRzIEhlYXAge1xuICBjb25zdHJ1Y3Rvcihjb21wYXJhdG9yLCBub2RlcywgbGVhZikge1xuICAgIGlmICh0eXBlb2YgY29tcGFyYXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDdXN0b21IZWFwIGV4cGVjdHMgYSBjb21wYXJhdG9yIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHN1cGVyKG5vZGVzLCBsZWFmKTtcbiAgICB0aGlzLl9jb21wYXJhdG9yID0gY29tcGFyYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wYXJlcyBwYXJlbnQgJiBjaGlsZCBub2Rlc1xuICAgKiBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZXkgYXJlIGluIHJpZ2h0IHBvc2l0aW9uc1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge29iamVjdHxudW1iZXJ8c3RyaW5nfSBwYXJlbnRcbiAgICogQHBhcmFtIHtvYmplY3R8bnVtYmVyfHN0cmluZ30gY2hpbGRcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIF9jb21wYXJlKHBhcmVudE5vZGUsIGNoaWxkTm9kZSkge1xuICAgIHJldHVybiB0aGlzLl9jb21wYXJhdG9yKHBhcmVudE5vZGUsIGNoaWxkTm9kZSkgPD0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGNoaWxkJ3MgaW5kZXggb2YgdHdvIGNoaWxkcmVuIGJlZm9yZSBhbiBpbmRleFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnRDaGlsZEluZGV4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByaWdodENoaWxkSW5kZXhcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIF9jb21wYXJlQ2hpbGRyZW5CZWZvcmUoaW5kZXgsIGxlZnRDaGlsZEluZGV4LCByaWdodENoaWxkSW5kZXgpIHtcbiAgICBjb25zdCBjb21wYXJlID0gdGhpcy5fY29tcGFyYXRvcihcbiAgICAgIHRoaXMuX25vZGVzW3JpZ2h0Q2hpbGRJbmRleF0sXG4gICAgICB0aGlzLl9ub2Rlc1tsZWZ0Q2hpbGRJbmRleF1cbiAgICApO1xuXG4gICAgaWYgKGNvbXBhcmUgPD0gMCAmJiByaWdodENoaWxkSW5kZXggPCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJpZ2h0Q2hpbGRJbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVmdENoaWxkSW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNoYWxsb3cgY29weSBvZiB0aGUgaGVhcFxuICAgKiBAcHVibGljXG4gICAqIEByZXR1cm5zIHtDdXN0b21IZWFwfVxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBDdXN0b21IZWFwKFxuICAgICAgdGhpcy5fY29tcGFyYXRvcixcbiAgICAgIHRoaXMuX25vZGVzLnNsaWNlKCksXG4gICAgICB0aGlzLl9sZWFmXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYSBjdXN0b20gaGVhcCBmcm9tIGFuIGFycmF5IG9mIGl0ZW1zXG4gICAqIEBwdWJsaWNcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge2FycmF5fSBsaXN0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JcbiAgICogQHJldHVybnMge0N1c3RvbUhlYXB9XG4gICAqL1xuICBzdGF0aWMgaGVhcGlmeShsaXN0LCBjb21wYXJhdG9yKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJy5oZWFwaWZ5IGV4cGVjdHMgYW4gYXJyYXknKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbXBhcmF0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignLmhlYXBpZnkgZXhwZWN0cyBhIGNvbXBhcmF0b3IgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEN1c3RvbUhlYXAoY29tcGFyYXRvciwgbGlzdCkuZml4KCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgbGlzdCBvZiBpdGVtcyBpcyBhIHZhbGlkIGN1c3RvbSBoZWFwXG4gICAqIEBwdWJsaWNcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge2FycmF5fSBsaXN0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNIZWFwaWZpZWQobGlzdCwgY29tcGFyYXRvcikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCcuaGVhcGlmeSBleHBlY3RzIGFuIGFycmF5Jyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb21wYXJhdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJy5pc0hlYXBpZmllZCBleHBlY3RzIGEgY29tcGFyYXRvciBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ3VzdG9tSGVhcChjb21wYXJhdG9yLCBsaXN0KS5pc1ZhbGlkKCk7XG4gIH1cbn1cblxuZXhwb3J0cy5DdXN0b21IZWFwID0gQ3VzdG9tSGVhcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14295\n")},42613:(__unused_webpack_module,exports)=>{eval("/**\n * @license MIT\n * @copyright 2020 Eyas Ranjous <eyas.ranjous@gmail.com>\n *\n * @class\n * @abstract\n */\nclass Heap {\n  /**\n   * Creates a heap instance\n   * @param {array<string|number|object>} nodes\n   * @param {string|number|object} [leaf]\n   * @returns {number}\n   */\n  constructor(nodes, leaf) {\n    this._nodes = Array.isArray(nodes) ? nodes : [];\n    this._leaf = leaf || null;\n  }\n\n  /**\n   * Checks if a parent has a left child\n   * @private\n   * @param {number} parentIndex\n   * @returns {boolean}\n   */\n  _hasLeftChild(parentIndex) {\n    const leftChildIndex = (parentIndex * 2) + 1;\n    return leftChildIndex < this.size();\n  }\n\n  /**\n   * Checks if a parent has a right child\n   * @private\n   * @param {number} parentIndex\n   * @returns {boolean}\n   */\n  _hasRightChild(parentIndex) {\n    const rightChildIndex = (parentIndex * 2) + 2;\n    return rightChildIndex < this.size();\n  }\n\n  /**\n   * Returns heap node's key\n   * @private\n   * @param {object|number|string} node\n   * @returns {number|string}\n   */\n  _getKey(node) {\n    if (typeof node === 'object') return node.key;\n    return node;\n  }\n\n  /**\n   * Swaps two nodes in the heap\n   * @private\n   * @param {number} i\n   * @param {number} j\n   */\n  _swap(i, j) {\n    const temp = this._nodes[i];\n    this._nodes[i] = this._nodes[j];\n    this._nodes[j] = temp;\n  }\n\n  /**\n   * Compares parent & child nodes\n   * and returns true if they are in right positions\n   *\n   * @private\n   * @param {object|number|string} parent\n   * @param {object|number|string} child\n   * @returns {boolean}\n   */\n  _compare(parentNode, childNode) {\n    return this._compareKeys(\n      this._getKey(parentNode),\n      this._getKey(childNode)\n    );\n  }\n\n  /**\n   * Checks if parent and child nodes should be swapped\n   * @private\n   * @param {number} parentIndex\n   * @param {number} childIndex\n   * @returns {boolean}\n   */\n  _shouldSwap(parentIndex, childIndex) {\n    if (parentIndex < 0 || parentIndex >= this.size()) return false;\n    if (childIndex < 0 || childIndex >= this.size()) return false;\n\n    return !this._compare(\n      this._nodes[parentIndex],\n      this._nodes[childIndex]\n    );\n  }\n\n  /**\n   * Bubbles a node from a starting index up in the heap\n   * @param {number} startingIndex\n   * @public\n   */\n  heapifyUp(startingIndex) {\n    let childIndex = startingIndex;\n    let parentIndex = Math.floor((childIndex - 1) / 2);\n\n    while (this._shouldSwap(parentIndex, childIndex)) {\n      this._swap(parentIndex, childIndex);\n      childIndex = parentIndex;\n      parentIndex = Math.floor((childIndex - 1) / 2);\n    }\n  }\n\n  /**\n   * Compares left and right & children of a parent\n   * @private\n   * @param {number} parentIndex\n   * @returns {number} - a child's index\n   */\n  _compareChildrenOf(parentIndex) {\n    if (\n      !this._hasLeftChild(parentIndex)\n      && !this._hasRightChild(parentIndex)\n    ) {\n      return -1;\n    }\n\n    const leftChildIndex = (parentIndex * 2) + 1;\n    const rightChildIndex = (parentIndex * 2) + 2;\n\n    if (!this._hasLeftChild(parentIndex)) {\n      return rightChildIndex;\n    }\n\n    if (!this._hasRightChild(parentIndex)) {\n      return leftChildIndex;\n    }\n\n    const isLeft = this._compare(\n      this._nodes[leftChildIndex],\n      this._nodes[rightChildIndex]\n    );\n\n    return isLeft ? leftChildIndex : rightChildIndex;\n  }\n\n  /**\n   * Pushes a node from a starting index down in the heap\n   * @private\n   */\n  _heapifyDown(startingIndex) {\n    let parentIndex = startingIndex;\n    let childIndex = this._compareChildrenOf(parentIndex);\n\n    while (this._shouldSwap(parentIndex, childIndex)) {\n      this._swap(parentIndex, childIndex);\n      parentIndex = childIndex;\n      childIndex = this._compareChildrenOf(parentIndex);\n    }\n  }\n\n  /**\n   * Removes and returns the root node in the heap\n   * @public\n   * @returns {object}\n   */\n  extractRoot() {\n    if (this.isEmpty()) return null;\n\n    const root = this.root();\n    this._nodes[0] = this._nodes[this.size() - 1];\n    this._nodes.pop();\n    this._heapifyDown(0);\n\n    if (root === this._leaf) {\n      this._leaf = this.root();\n    }\n\n    return root;\n  }\n\n  /**\n   * Pushes a node with down in the heap before an index\n   * @private\n   * @param {number} index\n   */\n  _heapifyDownUntil(index) {\n    let parentIndex = 0;\n    let leftChildIndex = 1;\n    let rightChildIndex = 2;\n    let childIndex;\n\n    while (leftChildIndex < index) {\n      childIndex = this._compareChildrenBefore(\n        index,\n        leftChildIndex,\n        rightChildIndex\n      );\n\n      if (this._shouldSwap(parentIndex, childIndex)) {\n        this._swap(parentIndex, childIndex);\n      }\n\n      parentIndex = childIndex;\n      leftChildIndex = (parentIndex * 2) + 1;\n      rightChildIndex = (parentIndex * 2) + 2;\n    }\n  }\n\n  /**\n   * Returns a shallow copy of the heap\n   * @protected\n   * @param {class} HeapType\n   * @returns {Heap}\n   */\n  _clone(HeapType) {\n    return new HeapType(this._nodes.slice(), this._leaf);\n  }\n\n  /**\n   * Sorts the heap by swapping root with all nodes and fixing positions\n   * @public\n   * @returns {array} the sorted nodes\n   */\n  sort() {\n    for (let i = this.size() - 1; i > 0; i -= 1) {\n      this._swap(0, i);\n      this._heapifyDownUntil(i);\n    }\n\n    return this._nodes;\n  }\n\n  /**\n   * Inserts a node in the right position into the heap\n   * @public\n   * @param {number|string} key\n   * @param {any} [value]\n   * @returns {Heap}\n   */\n  insert(key, value) {\n    const newNode = value !== undefined ? { key, value } : key;\n    this._nodes.push(newNode);\n    this.heapifyUp(this.size() - 1);\n    if (this._leaf === null || !this._compare(newNode, this._leaf)) {\n      this._leaf = newNode;\n    }\n    return this;\n  }\n\n  /**\n   * Fixes all positions of the nodes in the heap\n   * @public\n   * @returns {Heap}\n   */\n  fix() {\n    for (let i = 0; i < this.size(); i += 1) {\n      this.heapifyUp(i);\n    }\n    return this;\n  }\n\n  /**\n   * Verifies that the heap is valid\n   * @public\n   * @returns {boolean}\n   */\n  isValid() {\n    const isValidRecursive = (parentIndex) => {\n      let isValidLeft = true;\n      let isValidRight = true;\n\n      if (this._hasLeftChild(parentIndex)) {\n        const leftChildIndex = (parentIndex * 2) + 1;\n        isValidLeft = this._compare(\n          this._nodes[parentIndex],\n          this._nodes[leftChildIndex]\n        );\n\n        if (!isValidLeft) {\n          return false;\n        }\n\n        isValidLeft = isValidRecursive(leftChildIndex);\n      }\n\n      if (this._hasRightChild(parentIndex)) {\n        const rightChildIndex = (parentIndex * 2) + 2;\n        isValidRight = this._compare(\n          this._nodes[parentIndex],\n          this._nodes[rightChildIndex]\n        );\n\n        if (!isValidRight) {\n          return false;\n        }\n\n        isValidRight = isValidRecursive(rightChildIndex);\n      }\n\n      return isValidLeft && isValidRight;\n    };\n\n    return isValidRecursive(0);\n  }\n\n  /**\n   * Returns the root node in the heap\n   * @public\n   * @returns {object|number|string|null}\n   */\n  root() {\n    if (this.isEmpty()) return null;\n    return this._nodes[0];\n  }\n\n  /**\n   * Returns a leaf node in the heap\n   * @public\n   * @returns {object|number|string|null}\n   */\n  leaf() {\n    return this._leaf;\n  }\n\n  /**\n   * Returns the number of nodes in the heap\n   * @public\n   * @returns {number}\n   */\n  size() {\n    return this._nodes.length;\n  }\n\n  /**\n   * Checks if the heap is empty\n   * @public\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  /**\n   * Clears the heap\n   * @public\n   */\n  clear() {\n    this._nodes = [];\n    this._leaf = null;\n  }\n\n  /**\n   * Convert a list of items into a heap\n   * @protected\n   * @static\n   * @param {array} array\n   * @param {class} HeapType\n   * @returns {Heap}\n   */\n  static _heapify(list, HeapType) {\n    if (!Array.isArray(list)) {\n      throw new Error('.heapify expects an array');\n    }\n\n    return new HeapType(list).fix();\n  }\n\n  /**\n   * Checks if a list of items is a valid heap\n   * @protected\n   * @static\n   * @param {array} array\n   * @param {class} HeapType\n   * @returns {boolean}\n   */\n  static _isHeapified(list, HeapType) {\n    return new HeapType(list).isValid();\n  }\n}\n\nexports.Heap = Heap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42613\n")},38945:(__unused_webpack_module,exports,__webpack_require__)=>{eval("/**\n * @license MIT\n * @copyright 2020 Eyas Ranjous <eyas.ranjous@gmail.com>\n */\n\nconst { Heap } = __webpack_require__(42613);\n\n/**\n * @class MaxHeap\n * @extends Heap\n */\nclass MaxHeap extends Heap {\n  /**\n   * Checks two nodes are in relatively valid position\n   * @private\n   * @param {object} parent\n   * @param {object} child\n   * @returns {boolean}\n   */\n  _compareKeys(parentKey, childKey) {\n    return parentKey > childKey;\n  }\n\n  /**\n   * Returns max child's index of two children before an index\n   * @private\n   * @param {number} index\n   * @param {number} leftChildIndex\n   * @param {number} rightChildIndex\n   * @returns {number}\n   */\n  _compareChildrenBefore(index, leftChildIndex, rightChildIndex) {\n    const leftChildKey = this._getKey(this._nodes[leftChildIndex]);\n    const rightChildKey = this._getKey(this._nodes[rightChildIndex]);\n\n    if (rightChildKey > leftChildKey && rightChildIndex < index) {\n      return rightChildIndex;\n    }\n    return leftChildIndex;\n  }\n\n  /**\n   * Returns a shallow copy of the heap\n   * @public\n   * @returns {MaxHeap}\n   */\n  clone() {\n    return super._clone(MaxHeap);\n  }\n\n  /**\n   * Builds a max heap from an array of items\n   * @public\n   * @static\n   * @param {array} list\n   * @returns {MaxHeap}\n   */\n  static heapify(list) {\n    return super._heapify(list, MaxHeap);\n  }\n\n  /**\n   * Checks if a list of items is a valid max heap\n   * @public\n   * @static\n   * @param {array} list\n   * @returns {boolean}\n   */\n  static isHeapified(list) {\n    return super._isHeapified(list, MaxHeap);\n  }\n}\n\nexports.MaxHeap = MaxHeap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg5NDUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxPQUFPLEVBQUUsbUJBQU8sQ0FBQyxLQUFROztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWR2ZW50LW9mLWNvZGUvLi9ub2RlX21vZHVsZXMvQGRhdGFzdHJ1Y3R1cmVzLWpzL2hlYXAvc3JjL21heEhlYXAuanM/YmE3YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIE1JVFxuICogQGNvcHlyaWdodCAyMDIwIEV5YXMgUmFuam91cyA8ZXlhcy5yYW5qb3VzQGdtYWlsLmNvbT5cbiAqL1xuXG5jb25zdCB7IEhlYXAgfSA9IHJlcXVpcmUoJy4vaGVhcCcpO1xuXG4vKipcbiAqIEBjbGFzcyBNYXhIZWFwXG4gKiBAZXh0ZW5kcyBIZWFwXG4gKi9cbmNsYXNzIE1heEhlYXAgZXh0ZW5kcyBIZWFwIHtcbiAgLyoqXG4gICAqIENoZWNrcyB0d28gbm9kZXMgYXJlIGluIHJlbGF0aXZlbHkgdmFsaWQgcG9zaXRpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmVudFxuICAgKiBAcGFyYW0ge29iamVjdH0gY2hpbGRcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBfY29tcGFyZUtleXMocGFyZW50S2V5LCBjaGlsZEtleSkge1xuICAgIHJldHVybiBwYXJlbnRLZXkgPiBjaGlsZEtleTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1heCBjaGlsZCdzIGluZGV4IG9mIHR3byBjaGlsZHJlbiBiZWZvcmUgYW4gaW5kZXhcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0Q2hpbGRJbmRleFxuICAgKiBAcGFyYW0ge251bWJlcn0gcmlnaHRDaGlsZEluZGV4XG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBfY29tcGFyZUNoaWxkcmVuQmVmb3JlKGluZGV4LCBsZWZ0Q2hpbGRJbmRleCwgcmlnaHRDaGlsZEluZGV4KSB7XG4gICAgY29uc3QgbGVmdENoaWxkS2V5ID0gdGhpcy5fZ2V0S2V5KHRoaXMuX25vZGVzW2xlZnRDaGlsZEluZGV4XSk7XG4gICAgY29uc3QgcmlnaHRDaGlsZEtleSA9IHRoaXMuX2dldEtleSh0aGlzLl9ub2Rlc1tyaWdodENoaWxkSW5kZXhdKTtcblxuICAgIGlmIChyaWdodENoaWxkS2V5ID4gbGVmdENoaWxkS2V5ICYmIHJpZ2h0Q2hpbGRJbmRleCA8IGluZGV4KSB7XG4gICAgICByZXR1cm4gcmlnaHRDaGlsZEluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdENoaWxkSW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNoYWxsb3cgY29weSBvZiB0aGUgaGVhcFxuICAgKiBAcHVibGljXG4gICAqIEByZXR1cm5zIHtNYXhIZWFwfVxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIHN1cGVyLl9jbG9uZShNYXhIZWFwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYSBtYXggaGVhcCBmcm9tIGFuIGFycmF5IG9mIGl0ZW1zXG4gICAqIEBwdWJsaWNcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge2FycmF5fSBsaXN0XG4gICAqIEByZXR1cm5zIHtNYXhIZWFwfVxuICAgKi9cbiAgc3RhdGljIGhlYXBpZnkobGlzdCkge1xuICAgIHJldHVybiBzdXBlci5faGVhcGlmeShsaXN0LCBNYXhIZWFwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBsaXN0IG9mIGl0ZW1zIGlzIGEgdmFsaWQgbWF4IGhlYXBcbiAgICogQHB1YmxpY1xuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7YXJyYXl9IGxpc3RcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNIZWFwaWZpZWQobGlzdCkge1xuICAgIHJldHVybiBzdXBlci5faXNIZWFwaWZpZWQobGlzdCwgTWF4SGVhcCk7XG4gIH1cbn1cblxuZXhwb3J0cy5NYXhIZWFwID0gTWF4SGVhcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38945\n")},78573:(__unused_webpack_module,exports,__webpack_require__)=>{eval("/**\n * @license MIT\n * @copyright 2019 Eyas Ranjous <eyas.ranjous@gmail.com>\n */\n\nconst { Heap } = __webpack_require__(42613);\n\n/**\n * @class MinHeap\n * @extends Heap\n */\nclass MinHeap extends Heap {\n  /**\n   * Checks two nodes are in relatively valid position\n   * @private\n   * @param {object} parent\n   * @param {object} child\n   * @returns {boolean}\n   */\n  _compareKeys(parentKey, childKey) {\n    return parentKey < childKey;\n  }\n\n  /**\n   * Returns min child's index of two children before an index\n   * @protected\n   * @param {number} index\n   * @param {number} leftChildIndex\n   * @param {number} rightChildIndex\n   * @returns {number}\n   */\n  _compareChildrenBefore(index, leftChildIndex, rightChildIndex) {\n    const leftChildKey = this._getKey(this._nodes[leftChildIndex]);\n    const rightChildKey = this._getKey(this._nodes[rightChildIndex]);\n\n    if (rightChildKey < leftChildKey && rightChildIndex < index) {\n      return rightChildIndex;\n    }\n    return leftChildIndex;\n  }\n\n  /**\n   * Returns a shallow copy of the heap\n   * @public\n   * @returns {MinHeap}\n   */\n  clone() {\n    return super._clone(MinHeap);\n  }\n\n  /**\n   * Builds a min heap from an array of items\n   * @public\n   * @static\n   * @param {array} list\n   * @returns {MinHeap}\n   */\n  static heapify(list) {\n    return super._heapify(list, MinHeap);\n  }\n\n  /**\n   * Checks if a list of list is a valid min heap\n   * @public\n   * @static\n   * @param {array} list\n   * @returns {boolean}\n   */\n  static isHeapified(list) {\n    return super._isHeapified(list, MinHeap);\n  }\n}\n\nexports.MinHeap = MinHeap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg1NzMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxPQUFPLEVBQUUsbUJBQU8sQ0FBQyxLQUFROztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWR2ZW50LW9mLWNvZGUvLi9ub2RlX21vZHVsZXMvQGRhdGFzdHJ1Y3R1cmVzLWpzL2hlYXAvc3JjL21pbkhlYXAuanM/N2RiOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIE1JVFxuICogQGNvcHlyaWdodCAyMDE5IEV5YXMgUmFuam91cyA8ZXlhcy5yYW5qb3VzQGdtYWlsLmNvbT5cbiAqL1xuXG5jb25zdCB7IEhlYXAgfSA9IHJlcXVpcmUoJy4vaGVhcCcpO1xuXG4vKipcbiAqIEBjbGFzcyBNaW5IZWFwXG4gKiBAZXh0ZW5kcyBIZWFwXG4gKi9cbmNsYXNzIE1pbkhlYXAgZXh0ZW5kcyBIZWFwIHtcbiAgLyoqXG4gICAqIENoZWNrcyB0d28gbm9kZXMgYXJlIGluIHJlbGF0aXZlbHkgdmFsaWQgcG9zaXRpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmVudFxuICAgKiBAcGFyYW0ge29iamVjdH0gY2hpbGRcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBfY29tcGFyZUtleXMocGFyZW50S2V5LCBjaGlsZEtleSkge1xuICAgIHJldHVybiBwYXJlbnRLZXkgPCBjaGlsZEtleTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1pbiBjaGlsZCdzIGluZGV4IG9mIHR3byBjaGlsZHJlbiBiZWZvcmUgYW4gaW5kZXhcbiAgICogQHByb3RlY3RlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnRDaGlsZEluZGV4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByaWdodENoaWxkSW5kZXhcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIF9jb21wYXJlQ2hpbGRyZW5CZWZvcmUoaW5kZXgsIGxlZnRDaGlsZEluZGV4LCByaWdodENoaWxkSW5kZXgpIHtcbiAgICBjb25zdCBsZWZ0Q2hpbGRLZXkgPSB0aGlzLl9nZXRLZXkodGhpcy5fbm9kZXNbbGVmdENoaWxkSW5kZXhdKTtcbiAgICBjb25zdCByaWdodENoaWxkS2V5ID0gdGhpcy5fZ2V0S2V5KHRoaXMuX25vZGVzW3JpZ2h0Q2hpbGRJbmRleF0pO1xuXG4gICAgaWYgKHJpZ2h0Q2hpbGRLZXkgPCBsZWZ0Q2hpbGRLZXkgJiYgcmlnaHRDaGlsZEluZGV4IDwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByaWdodENoaWxkSW5kZXg7XG4gICAgfVxuICAgIHJldHVybiBsZWZ0Q2hpbGRJbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBoZWFwXG4gICAqIEBwdWJsaWNcbiAgICogQHJldHVybnMge01pbkhlYXB9XG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gc3VwZXIuX2Nsb25lKE1pbkhlYXApO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIG1pbiBoZWFwIGZyb20gYW4gYXJyYXkgb2YgaXRlbXNcbiAgICogQHB1YmxpY1xuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7YXJyYXl9IGxpc3RcbiAgICogQHJldHVybnMge01pbkhlYXB9XG4gICAqL1xuICBzdGF0aWMgaGVhcGlmeShsaXN0KSB7XG4gICAgcmV0dXJuIHN1cGVyLl9oZWFwaWZ5KGxpc3QsIE1pbkhlYXApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGxpc3Qgb2YgbGlzdCBpcyBhIHZhbGlkIG1pbiBoZWFwXG4gICAqIEBwdWJsaWNcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge2FycmF5fSBsaXN0XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzSGVhcGlmaWVkKGxpc3QpIHtcbiAgICByZXR1cm4gc3VwZXIuX2lzSGVhcGlmaWVkKGxpc3QsIE1pbkhlYXApO1xuICB9XG59XG5cbmV4cG9ydHMuTWluSGVhcCA9IE1pbkhlYXA7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///78573\n")},54082:(module,__unused_webpack_exports,__webpack_require__)=>{eval("const { MinPriorityQueue } = __webpack_require__(38192);\nconst { MaxPriorityQueue } = __webpack_require__(28387);\nconst { PriorityQueue } = __webpack_require__(25515)\n\nmodule.exports = { MinPriorityQueue, MaxPriorityQueue, PriorityQueue };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwODIuanMiLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxtQkFBbUIsRUFBRSxtQkFBTyxDQUFDLEtBQXdCO0FBQzdELFFBQVEsbUJBQW1CLEVBQUUsbUJBQU8sQ0FBQyxLQUF3QjtBQUM3RCxRQUFRLGdCQUFnQixFQUFFLG1CQUFPLENBQUMsS0FBcUI7O0FBRXZELG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FkdmVudC1vZi1jb2RlLy4vbm9kZV9tb2R1bGVzL0BkYXRhc3RydWN0dXJlcy1qcy9wcmlvcml0eS1xdWV1ZS9pbmRleC5qcz8xNGJhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgTWluUHJpb3JpdHlRdWV1ZSB9ID0gcmVxdWlyZSgnLi9zcmMvbWluUHJpb3JpdHlRdWV1ZScpO1xuY29uc3QgeyBNYXhQcmlvcml0eVF1ZXVlIH0gPSByZXF1aXJlKCcuL3NyYy9tYXhQcmlvcml0eVF1ZXVlJyk7XG5jb25zdCB7IFByaW9yaXR5UXVldWUgfSA9IHJlcXVpcmUoJy4vc3JjL3ByaW9yaXR5UXVldWUnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgTWluUHJpb3JpdHlRdWV1ZSwgTWF4UHJpb3JpdHlRdWV1ZSwgUHJpb3JpdHlRdWV1ZSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///54082\n")},28387:(__unused_webpack_module,exports,__webpack_require__)=>{eval("/**\n * @copyright 2020 Eyas Ranjous <eyas.ranjous@gmail.com>\n * @license MIT\n */\n\nconst { MaxHeap } = __webpack_require__(7436);\nconst { PriorityQueue } = __webpack_require__(25515);\n\n/**\n * @class MaxPriorityQueue\n * @extends PriorityQueue\n */\nclass MaxPriorityQueue extends PriorityQueue {\n  constructor(options) {\n    super(options);\n    if (!this._compare) {\n      this._heap = new MaxHeap();\n    }\n  }\n}\n\nexports.MaxPriorityQueue = MaxPriorityQueue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgzODcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxVQUFVLEVBQUUsbUJBQU8sQ0FBQyxJQUF5QjtBQUNyRCxRQUFRLGdCQUFnQixFQUFFLG1CQUFPLENBQUMsS0FBaUI7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHZlbnQtb2YtY29kZS8uL25vZGVfbW9kdWxlcy9AZGF0YXN0cnVjdHVyZXMtanMvcHJpb3JpdHktcXVldWUvc3JjL21heFByaW9yaXR5UXVldWUuanM/ZTY1MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBjb3B5cmlnaHQgMjAyMCBFeWFzIFJhbmpvdXMgPGV5YXMucmFuam91c0BnbWFpbC5jb20+XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5jb25zdCB7IE1heEhlYXAgfSA9IHJlcXVpcmUoJ0BkYXRhc3RydWN0dXJlcy1qcy9oZWFwJyk7XG5jb25zdCB7IFByaW9yaXR5UXVldWUgfSA9IHJlcXVpcmUoJy4vcHJpb3JpdHlRdWV1ZScpO1xuXG4vKipcbiAqIEBjbGFzcyBNYXhQcmlvcml0eVF1ZXVlXG4gKiBAZXh0ZW5kcyBQcmlvcml0eVF1ZXVlXG4gKi9cbmNsYXNzIE1heFByaW9yaXR5UXVldWUgZXh0ZW5kcyBQcmlvcml0eVF1ZXVlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIGlmICghdGhpcy5fY29tcGFyZSkge1xuICAgICAgdGhpcy5faGVhcCA9IG5ldyBNYXhIZWFwKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuTWF4UHJpb3JpdHlRdWV1ZSA9IE1heFByaW9yaXR5UXVldWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28387\n")},38192:(__unused_webpack_module,exports,__webpack_require__)=>{eval("/**\n * @copyright 2020 Eyas Ranjous <eyas.ranjous@gmail.com>\n * @license MIT\n */\n\nconst { MinHeap } = __webpack_require__(7436);\nconst { PriorityQueue } = __webpack_require__(25515);\n\n/**\n * @class MinPriorityQueue\n * @extends PriorityQueue\n */\nclass MinPriorityQueue extends PriorityQueue {\n  constructor(options) {\n    super(options);\n    if (!this._compare) {\n      this._heap = new MinHeap();\n    }\n  }\n}\n\nexports.MinPriorityQueue = MinPriorityQueue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgxOTIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxVQUFVLEVBQUUsbUJBQU8sQ0FBQyxJQUF5QjtBQUNyRCxRQUFRLGdCQUFnQixFQUFFLG1CQUFPLENBQUMsS0FBaUI7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHZlbnQtb2YtY29kZS8uL25vZGVfbW9kdWxlcy9AZGF0YXN0cnVjdHVyZXMtanMvcHJpb3JpdHktcXVldWUvc3JjL21pblByaW9yaXR5UXVldWUuanM/NjE0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBjb3B5cmlnaHQgMjAyMCBFeWFzIFJhbmpvdXMgPGV5YXMucmFuam91c0BnbWFpbC5jb20+XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5jb25zdCB7IE1pbkhlYXAgfSA9IHJlcXVpcmUoJ0BkYXRhc3RydWN0dXJlcy1qcy9oZWFwJyk7XG5jb25zdCB7IFByaW9yaXR5UXVldWUgfSA9IHJlcXVpcmUoJy4vcHJpb3JpdHlRdWV1ZScpO1xuXG4vKipcbiAqIEBjbGFzcyBNaW5Qcmlvcml0eVF1ZXVlXG4gKiBAZXh0ZW5kcyBQcmlvcml0eVF1ZXVlXG4gKi9cbmNsYXNzIE1pblByaW9yaXR5UXVldWUgZXh0ZW5kcyBQcmlvcml0eVF1ZXVlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIGlmICghdGhpcy5fY29tcGFyZSkge1xuICAgICAgdGhpcy5faGVhcCA9IG5ldyBNaW5IZWFwKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuTWluUHJpb3JpdHlRdWV1ZSA9IE1pblByaW9yaXR5UXVldWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38192\n")},25515:(__unused_webpack_module,exports,__webpack_require__)=>{eval("/**\n * @copyright 2020 Eyas Ranjous <eyas.ranjous@gmail.com>\n * @license MIT\n */\n\nconst { CustomHeap } = __webpack_require__(7436);\n\n/**\n * @class PriorityQueue\n */\nclass PriorityQueue {\n  /**\n   * Creates a priority queue\n   * @public\n   * @params {object} [options]\n   */\n  constructor(options = {}) {\n    const { priority, compare } = options;\n    if (compare) {\n      if (typeof compare !== 'function') {\n        throw new Error('.constructor expects a valid compare function');\n      }\n      this._compare = compare;\n      this._heap = new CustomHeap(this._compare);\n    } else {\n      if (priority !== undefined && typeof priority !== 'function') {\n        throw new Error('.constructor expects a valid priority function');\n      }\n\n      this._priority = priority || ((el) => +el);\n    }\n  }\n\n  /**\n   * @private\n   * @returns {object}\n   */\n  _getElementWithPriority(node) {\n    return {\n      priority: node.key,\n      element: node.value\n    };\n  }\n\n  /**\n   * @public\n   * @returns {number}\n   */\n  size() {\n    return this._heap.size();\n  }\n\n  /**\n   * @public\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this._heap.isEmpty();\n  }\n\n  /**\n   * Returns an element with highest priority in the queue\n   * @public\n   * @returns {object}\n   */\n  front() {\n    if (this.isEmpty()) return null;\n\n    if (this._compare) {\n      return this._heap.root();\n    }\n\n    return this._getElementWithPriority(this._heap.root());\n  }\n\n  /**\n   * Returns an element with lowest priority in the queue\n   * @public\n   * @returns {object}\n   */\n  back() {\n    if (this.isEmpty()) return null;\n\n    if (this._compare) {\n      return this._heap.leaf();\n    }\n\n    return this._getElementWithPriority(this._heap.leaf());\n  }\n\n  /**\n   * Adds an element to the queue\n   * @public\n   * @param {any} element\n   * @param {number} p - priority\n   * @throws {Error} if priority is not a valid number\n   */\n  enqueue(element, p) {\n    if (this._compare) {\n      this._heap.insert(element);\n      return this;\n    }\n\n    if (p && Number.isNaN(+p)) {\n      throw new Error('.enqueue expects a numeric priority');\n    }\n\n    if (Number.isNaN(+p) && Number.isNaN(this._priority(element))) {\n      throw new Error(\n        '.enqueue expects a numeric priority '\n        + 'or a constructor callback that returns a number'\n      );\n    }\n\n    const priority = !Number.isNaN(+p) ? p : this._priority(element);\n    this._heap.insert(+priority, element);\n    return this;\n  }\n\n  /**\n   * Removes and returns an element with highest priority in the queue\n   * @public\n   * @returns {object}\n   */\n  dequeue() {\n    if (this.isEmpty()) return null;\n\n    if (this._compare) {\n      return this._heap.extractRoot();\n    }\n\n    return this._getElementWithPriority(this._heap.extractRoot());\n  }\n\n  /**\n   * Returns a sorted list of elements from highest to lowest priority\n   * @public\n   * @returns {array}\n   */\n  toArray() {\n    if (this._compare) {\n      return this._heap.clone().sort().reverse();\n    }\n\n    return this._heap\n      .clone()\n      .sort()\n      .map((n) => this._getElementWithPriority(n))\n      .reverse();\n  }\n\n  /**\n   * Clears the queue\n   * @public\n   */\n  clear() {\n    this._heap.clear();\n  }\n}\n\nexports.PriorityQueue = PriorityQueue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU1MTUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxhQUFhLEVBQUUsbUJBQU8sQ0FBQyxJQUF5Qjs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQSwwQkFBMEI7QUFDMUIsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQixhQUFhLFFBQVE7QUFDckIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWR2ZW50LW9mLWNvZGUvLi9ub2RlX21vZHVsZXMvQGRhdGFzdHJ1Y3R1cmVzLWpzL3ByaW9yaXR5LXF1ZXVlL3NyYy9wcmlvcml0eVF1ZXVlLmpzPzRlNDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAY29weXJpZ2h0IDIwMjAgRXlhcyBSYW5qb3VzIDxleWFzLnJhbmpvdXNAZ21haWwuY29tPlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuY29uc3QgeyBDdXN0b21IZWFwIH0gPSByZXF1aXJlKCdAZGF0YXN0cnVjdHVyZXMtanMvaGVhcCcpO1xuXG4vKipcbiAqIEBjbGFzcyBQcmlvcml0eVF1ZXVlXG4gKi9cbmNsYXNzIFByaW9yaXR5UXVldWUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIHByaW9yaXR5IHF1ZXVlXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtcyB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgcHJpb3JpdHksIGNvbXBhcmUgfSA9IG9wdGlvbnM7XG4gICAgaWYgKGNvbXBhcmUpIHtcbiAgICAgIGlmICh0eXBlb2YgY29tcGFyZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJy5jb25zdHJ1Y3RvciBleHBlY3RzIGEgdmFsaWQgY29tcGFyZSBmdW5jdGlvbicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fY29tcGFyZSA9IGNvbXBhcmU7XG4gICAgICB0aGlzLl9oZWFwID0gbmV3IEN1c3RvbUhlYXAodGhpcy5fY29tcGFyZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcmlvcml0eSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBwcmlvcml0eSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJy5jb25zdHJ1Y3RvciBleHBlY3RzIGEgdmFsaWQgcHJpb3JpdHkgZnVuY3Rpb24nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcHJpb3JpdHkgPSBwcmlvcml0eSB8fCAoKGVsKSA9PiArZWwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi9cbiAgX2dldEVsZW1lbnRXaXRoUHJpb3JpdHkobm9kZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmlvcml0eTogbm9kZS5rZXksXG4gICAgICBlbGVtZW50OiBub2RlLnZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9oZWFwLnNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5faGVhcC5pc0VtcHR5KCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBlbGVtZW50IHdpdGggaGlnaGVzdCBwcmlvcml0eSBpbiB0aGUgcXVldWVcbiAgICogQHB1YmxpY1xuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi9cbiAgZnJvbnQoKSB7XG4gICAgaWYgKHRoaXMuaXNFbXB0eSgpKSByZXR1cm4gbnVsbDtcblxuICAgIGlmICh0aGlzLl9jb21wYXJlKSB7XG4gICAgICByZXR1cm4gdGhpcy5faGVhcC5yb290KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2dldEVsZW1lbnRXaXRoUHJpb3JpdHkodGhpcy5faGVhcC5yb290KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZWxlbWVudCB3aXRoIGxvd2VzdCBwcmlvcml0eSBpbiB0aGUgcXVldWVcbiAgICogQHB1YmxpY1xuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi9cbiAgYmFjaygpIHtcbiAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKHRoaXMuX2NvbXBhcmUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oZWFwLmxlYWYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZ2V0RWxlbWVudFdpdGhQcmlvcml0eSh0aGlzLl9oZWFwLmxlYWYoKSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBlbGVtZW50IHRvIHRoZSBxdWV1ZVxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7YW55fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwIC0gcHJpb3JpdHlcbiAgICogQHRocm93cyB7RXJyb3J9IGlmIHByaW9yaXR5IGlzIG5vdCBhIHZhbGlkIG51bWJlclxuICAgKi9cbiAgZW5xdWV1ZShlbGVtZW50LCBwKSB7XG4gICAgaWYgKHRoaXMuX2NvbXBhcmUpIHtcbiAgICAgIHRoaXMuX2hlYXAuaW5zZXJ0KGVsZW1lbnQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHAgJiYgTnVtYmVyLmlzTmFOKCtwKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCcuZW5xdWV1ZSBleHBlY3RzIGEgbnVtZXJpYyBwcmlvcml0eScpO1xuICAgIH1cblxuICAgIGlmIChOdW1iZXIuaXNOYU4oK3ApICYmIE51bWJlci5pc05hTih0aGlzLl9wcmlvcml0eShlbGVtZW50KSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJy5lbnF1ZXVlIGV4cGVjdHMgYSBudW1lcmljIHByaW9yaXR5ICdcbiAgICAgICAgKyAnb3IgYSBjb25zdHJ1Y3RvciBjYWxsYmFjayB0aGF0IHJldHVybnMgYSBudW1iZXInXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHByaW9yaXR5ID0gIU51bWJlci5pc05hTigrcCkgPyBwIDogdGhpcy5fcHJpb3JpdHkoZWxlbWVudCk7XG4gICAgdGhpcy5faGVhcC5pbnNlcnQoK3ByaW9yaXR5LCBlbGVtZW50KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuZCByZXR1cm5zIGFuIGVsZW1lbnQgd2l0aCBoaWdoZXN0IHByaW9yaXR5IGluIHRoZSBxdWV1ZVxuICAgKiBAcHVibGljXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBkZXF1ZXVlKCkge1xuICAgIGlmICh0aGlzLmlzRW1wdHkoKSkgcmV0dXJuIG51bGw7XG5cbiAgICBpZiAodGhpcy5fY29tcGFyZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hlYXAuZXh0cmFjdFJvb3QoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZ2V0RWxlbWVudFdpdGhQcmlvcml0eSh0aGlzLl9oZWFwLmV4dHJhY3RSb290KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzb3J0ZWQgbGlzdCBvZiBlbGVtZW50cyBmcm9tIGhpZ2hlc3QgdG8gbG93ZXN0IHByaW9yaXR5XG4gICAqIEBwdWJsaWNcbiAgICogQHJldHVybnMge2FycmF5fVxuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICBpZiAodGhpcy5fY29tcGFyZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hlYXAuY2xvbmUoKS5zb3J0KCkucmV2ZXJzZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9oZWFwXG4gICAgICAuY2xvbmUoKVxuICAgICAgLnNvcnQoKVxuICAgICAgLm1hcCgobikgPT4gdGhpcy5fZ2V0RWxlbWVudFdpdGhQcmlvcml0eShuKSlcbiAgICAgIC5yZXZlcnNlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBxdWV1ZVxuICAgKiBAcHVibGljXG4gICAqL1xuICBjbGVhcigpIHtcbiAgICB0aGlzLl9oZWFwLmNsZWFyKCk7XG4gIH1cbn1cblxuZXhwb3J0cy5Qcmlvcml0eVF1ZXVlID0gUHJpb3JpdHlRdWV1ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25515\n")},15922:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day23)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day23.vue?vue&type=template&id=8b2e0644&scoped=true\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":23,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day23.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\nconst {\n  PriorityQueue\n} = __webpack_require__(54082);\n/* harmony default export */ const Day23vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      moveCosts: {\n        A: 1,\n        B: 10,\n        C: 100,\n        D: 1000\n      },\n      rooms: {\n        1: [[3, 2], [3, 3]],\n        10: [[5, 2], [5, 3]],\n        100: [[7, 2], [7, 3]],\n        1000: [[9, 2], [9, 3]]\n      },\n      roomsTwo: {\n        1: [[3, 2], [3, 3], [3, 4], [3, 5]],\n        10: [[5, 2], [5, 3], [5, 4], [5, 5]],\n        100: [[7, 2], [7, 3], [7, 4], [7, 5]],\n        1000: [[9, 2], [9, 3], [9, 4], [9, 5]]\n      },\n      hall: [1, 2, 4, 6, 8, 10, 11]\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const copy = input.concat();\n      const amphipods = new Map();\n      for (let y = 0; y < copy.length; y++) {\n        for (let x = 0; x < copy[y].length; x++) {\n          if (![' ', '#', '.'].includes(copy[y][x])) {\n            const coords = `${x},${y}`;\n            amphipods.set(coords, {\n              isDone: false,\n              type: this.moveCosts[copy[y][x]]\n            });\n          }\n        }\n      }\n      this.solutions.partOne = this.solve(amphipods, this.rooms);\n\n      // copy.splice(3, 0, '  #D#C#B#A#', '  #D#B#A#C#')\n\n      // amphipods = new Map()\n      // for (let y = 0; y < copy.length; y++) {\n      //   for (let x = 0; x < copy[y].length; x++) {\n      //     if (![' ', '#', '.'].includes(copy[y][x])) {\n      //       const coords = `${x},${y}`\n      //       amphipods.set(coords, {\n      //         isDone: false,\n      //         type: this.moveCosts[copy[y][x]]\n      //       })\n      //     }\n      //   }\n      // }\n\n      // this.solutions.partTwo = this.solve(amphipods, this.roomsTwo)\n    },\n\n    solve: function (amphipods, rooms) {\n      Object.keys(rooms).forEach(type => {\n        const r = rooms[type];\n        for (let i = r.length - 1; i >= 0; i--) {\n          const a = amphipods.get(`${r[i][0]},${r[i][1]}`);\n          if (a === undefined || a.type !== +type) {\n            return;\n          } else {\n            a.isDone = true;\n          }\n        }\n      });\n      console.log(amphipods);\n\n      // Use a priority queue to keep track of the configurations with lowest cost\n      const queue = new PriorityQueue({\n        compare: (a, b) => a.costTotal - b.costTotal\n      });\n      queue.enqueue({\n        amphipods: amphipods,\n        costTotal: 0,\n        costApprox: this.getApproxCost(amphipods, rooms)\n      });\n      const seenCosts = new Map();\n      let min = Number.POSITIVE_INFINITY;\n      let max = 0;\n      while (queue.size() > 0) {\n        const current = queue.dequeue();\n        const curMax = Array.from(current.amphipods.values()).filter(a => a.isDone).length;\n        if (curMax > max) {\n          console.log(queue.size(), seenCosts.size, curMax);\n          max = curMax;\n        }\n        if (current.costTotal > min) {\n          break;\n        }\n        max = Math.max(max, Array.from(current.amphipods.values()).filter(a => a.isDone).length);\n        if (Array.from(current.amphipods.values()).every(a => a.isDone)) {\n          min = Math.min(min, current.costTotal);\n        } else {\n          current.amphipods.forEach((amphipod, key) => {\n            if (!amphipod.isDone) {\n              const coords = key.split(',').map(c => +c);\n              if (coords[1] === 1) {\n                // We're in the hall\n                const roomPositionY = this.getFreeRoomPosition(coords, amphipod.type, current.amphipods, rooms);\n                if (roomPositionY !== null) {\n                  const newAmphipods = new Map();\n                  current.amphipods.forEach((v, k) => {\n                    if (k === key) {\n                      // This is our current one\n                      newAmphipods.set(`${rooms[amphipod.type][0][0]},${roomPositionY}`, {\n                        isDone: true,\n                        type: v.type\n                      });\n                    } else {\n                      newAmphipods.set(k, {\n                        isDone: v.isDone,\n                        type: v.type\n                      });\n                    }\n                  });\n                  const stringified = this.toString(newAmphipods);\n                  const prevCost = seenCosts.get(stringified);\n                  const costTotal = current.costTotal + this.manhattan(coords, [rooms[amphipod.type][0][0], roomPositionY]) * amphipod.type;\n                  if (prevCost === undefined || prevCost > costTotal) {\n                    seenCosts.set(stringified, current.costTotal);\n                    queue.enqueue({\n                      amphipods: newAmphipods,\n                      costTotal: costTotal,\n                      costApprox: this.getApproxCost(newAmphipods, rooms)\n                    });\n                  }\n                }\n              } else {\n                // We're in a room and we're not done\n                const possibleHallPositions = this.getHallPositions(coords, current.amphipods);\n                possibleHallPositions.forEach(hx => {\n                  const newAmphipods = new Map();\n                  current.amphipods.forEach((v, k) => {\n                    if (k === key) {\n                      // This is our current one\n                      newAmphipods.set(`${hx},1`, {\n                        isDone: false,\n                        type: v.type\n                      });\n                    } else {\n                      newAmphipods.set(k, {\n                        isDone: v.isDone,\n                        type: v.type\n                      });\n                    }\n                  });\n                  const stringified = this.toString(newAmphipods);\n                  const prevCost = seenCosts.get(stringified);\n                  const costTotal = current.costTotal + this.manhattan(coords, [hx, 1]) * amphipod.type;\n                  if (prevCost === undefined || prevCost > costTotal) {\n                    seenCosts.set(stringified, current.costTotal);\n                    queue.enqueue({\n                      amphipods: newAmphipods,\n                      costTotal: costTotal,\n                      costApprox: this.getApproxCost(newAmphipods, rooms)\n                    });\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n      return min;\n    },\n    getFreeRoomPosition: function (current, type, amphipods, rooms) {\n      const room = rooms[type];\n\n      // Check the hall leading to the room\n      for (let x = Math.min(room[0][0], current[0]) + 1; x < Math.max(room[0][0], current[0]); x++) {\n        if (amphipods.has(`${x},${1}`)) {\n          return null;\n        }\n      }\n\n      // const roomAmph = []\n\n      // for (let y = 2; y < room.length + 2; y++) {\n      //   const amph = amphipods.get(`${room[0][0]},${y}`)\n\n      //   roomAmph.push(amph ? amph.type : null)\n      // }\n\n      // // Room completely empty, move to bottom\n      // if (roomAmph.every(r => r === null)) {\n      //   return 1 + room.length\n      // }\n\n      // // Amphipod of wrong type in the room\n      // if (roomAmph.some(r => r !== null && r !== type)) {\n      //   return null\n      // }\n\n      // let result = null\n      // for (let y = room.length + 1; y >= 2; y--) {\n      //   const amph = amphipods.get(`${room[0][0]},${y}`)\n\n      //   if (amph === undefined) {\n      //     if (result === null) {\n      //       // Found a free spot\n      //       result = y\n      //     }\n      //   } else {\n      //     // If we found an empty one and then there's one that isn't empty, then don't move into the room, cause it's not properly filled from the bottom\n      //     if (result !== null) {\n      //       return null\n      //     }\n      //   }\n      // }\n\n      // return result\n\n      let result = null;\n      for (let y = 2; y < room.length + 2; y++) {\n        const amph = amphipods.get(`${room[0][0]},${y}`);\n        if (amph === undefined) {\n          // Found a free spot\n          result = y;\n        } else {\n          if (amph.type !== type) {\n            // There's an amphipod of the wrong type => we cannot go in\n            return null;\n          } else {\n            // We found another amphipod of the right type => stop looking further down\n            break;\n          }\n        }\n      }\n      return result;\n    },\n    getHallPositions: function (current, amphipods) {\n      // Check the way out of the room\n      for (let y = current[1] - 1; y > 1; y--) {\n        if (amphipods.has(`${current[0]},${y}`)) {\n          // Someone is in the way, we can't reach the hall\n          return [];\n        }\n      }\n      const possibleHallPositions = [];\n      for (let x = current[0] - 1; x >= this.hall[0]; x--) {\n        if (this.hall.includes(x) && !amphipods.has(`${x},1`)) {\n          possibleHallPositions.push(x);\n        }\n      }\n      for (let x = current[0] + 1; x <= this.hall[this.hall.length - 1]; x++) {\n        if (this.hall.includes(x) && !amphipods.has(`${x},1`)) {\n          possibleHallPositions.push(x);\n        }\n      }\n      return possibleHallPositions;\n    },\n    getApproxCost: function (amphipods, rooms) {\n      let cost = 0;\n      amphipods.forEach((value, key) => {\n        const coords = key.split(',').map(c => +c);\n        const target = rooms[value.type][rooms[value.type].length - 1];\n        if (coords[1] === 1) {\n          cost += this.manhattan(coords, target) * value.type;\n        } else {\n          cost += (rooms[value.type].length + Math.abs(coords[1] - 1) + Math.abs(coords[0] - target[0])) * value.type;\n        }\n      });\n      return cost;\n    },\n    manhattan: function (a, b) {\n      return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n    },\n    toString: function (amphipods) {\n      return Array.from(amphipods.keys()).sort().map(k => `${k},${amphipods.get(k).type}`).join('|');\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2021/Day23.vue?vue&type=script&lang=js\n /* harmony default export */ const _2021_Day23vue_type_script_lang_js = (Day23vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2021/Day23.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2021_Day23vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"8b2e0644\",\n  null\n  \n)\n\n/* harmony default export */ const Day23 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15922\n")}}]);
"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[7467],{26945:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ Day4)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day4.vue?vue&type=template&id=3f226825\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'Day\',{attrs:{"day":4,"year":2021,"solutions":_vm.solutions},on:{"input-changed":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day4.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day4vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.solutions = {\n        partOne: null,\n        partTwo: null\n      };\n      const numbers = input[0].split(\',\').map(i => +i);\n      const grids = [];\n      let current = [];\n\n      // Parse the grids\n      for (let i = 2; i < input.length; i++) {\n        if (input[i].length < 1) {\n          grids.push(current);\n          current = [];\n        } else {\n          current.push(input[i].trim().split(/\\s+/).map(n => {\n            return {\n              n: +n,\n              m: false\n            };\n          }));\n        }\n      }\n      grids.push(current);\n\n      // Remember which grids are complete\n      const gridsComplete = grids.map(_ => false);\n      for (let i = 0; i < numbers.length; i++) {\n        // Mark the numbers and get back the sum of non-marked values or `undefined` if not complete\n        const complete = this.markNumber(grids, numbers[i]);\n        // Check if any of them are actually complete\n        const anyComplete = complete.filter(g => g);\n        if (anyComplete.length > 0 && !this.solutions.partOne) {\n          // If at least one is complete and we\'ve not found solution 1 yet, this is it\n          this.solutions.partOne = anyComplete[0] * numbers[i];\n          // Mark as complete\n          gridsComplete[complete.indexOf(anyComplete[0])] = true;\n        } else {\n          // Otherwise, check if all are now complete\n          let allComplete = true;\n          // Get the index of the last one\n          let lastIndex = -1;\n          for (let g = 0; g < grids.length; g++) {\n            // Check if this one is also complete\n            allComplete &= complete[g] !== undefined;\n            // If it wasn\'t complete before, but it is now\n            if (!gridsComplete[g] && complete[g]) {\n              // Remember the index\n              lastIndex = g;\n              // Mark as complete\n              gridsComplete[g] = true;\n            }\n          }\n\n          // If all are complete after this iteration, we found our solution 2\n          if (allComplete) {\n            this.solutions.partTwo = complete[lastIndex] * numbers[i];\n            break;\n          }\n        }\n      }\n    },\n    markNumber: function (grids, number) {\n      return grids.map(g => {\n        g.forEach(r => {\n          r.forEach(n => {\n            // Change the marked state\n            n.m |= n.n === number;\n          });\n        });\n        return this.isComplete(g);\n      });\n    },\n    isComplete: function (grid) {\n      // Check if any row or column is complete\n      const rowComplete = grid.filter(r => r.filter(r => r.m).length === r.length).length > 0;\n      const colComplete = grid[0].filter((c, index) => grid.filter(r => r[index].m).length === grid.length).length > 0;\n      if (rowComplete || colComplete) {\n        // Calculate the sum of all non-marked items\n        return grid.reduce((prev, row) => prev + row.map(c => c.m ? 0 : c.n).reduce((a, b) => a + b), 0);\n      } else {\n        return undefined;\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2021/Day4.vue?vue&type=script&lang=js\n /* harmony default export */ const _2021_Day4vue_type_script_lang_js = (Day4vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2021/Day4.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2021_Day4vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day4 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26945\n')}}]);
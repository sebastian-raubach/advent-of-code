"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[7898],{82417:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day24)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day24.vue?vue&type=template&id=aa0edec0\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":24,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day24.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day24vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      neighbors: [[1, 0], [-1, 0], [1, -1], [0, -1], [0, 1], [-1, 1]],\n      directions: {\n        e: pos => {\n          pos[0]++;\n        },\n        se: pos => {\n          pos[1]++;\n        },\n        sw: pos => {\n          pos[0]--;\n          pos[1]++;\n        },\n        w: pos => {\n          pos[0]--;\n        },\n        nw: pos => {\n          pos[1]--;\n        },\n        ne: pos => {\n          pos[0]++;\n          pos[1]--;\n        }\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // For each line in the input\n      this.tiles = input.map(line => {\n        const parsed = [];\n        // Keep parsing directions\n        while (true) {\n          // Get the direction that matches the first letters\n          const directions = Object.keys(this.directions).filter(d => line.indexOf(d) === 0);\n          // If there isn't one, return the parsed result\n          if (!directions || directions.length < 1) {\n            return parsed;\n          }\n          // Else, add it to the array\n          parsed.push(directions[0]);\n          // And remove it from the start of the string\n          line = line.replace(directions[0], '');\n        }\n      });\n      this.solvePartOne();\n      this.solvePartTwo();\n    },\n    solvePartOne: function () {\n      this.blackTiles = new Set();\n      this.tiles.forEach(t => {\n        // Start at the origin\n        const pos = [0, 0];\n        // For each direction\n        t.forEach(d => {\n          // Adjust the position\n          this.directions[d](pos);\n        });\n        // Produce the key\n        const stringified = `${pos[0]},${pos[1]}`;\n        // If it's alive, flip it to dead. Otherwise, set it to alive\n        if (this.blackTiles.has(stringified)) {\n          this.blackTiles.delete(stringified);\n        } else {\n          this.blackTiles.add(stringified);\n        }\n      });\n\n      // Count the number of black (alive) tiles\n      this.solutions.partOne = this.blackTiles.size;\n    },\n    solvePartTwo: function () {\n      // For each of the 100 days\n      for (let day = 0; day < 100; day++) {\n        // Run one iteration\n        this.blackTiles = this.iterate();\n      }\n\n      // Count the number of alive cells\n      this.solutions.partTwo = this.blackTiles.size;\n    },\n    iterate: function () {\n      const tempTiles = new Set();\n\n      // Split each tile into x and y\n      const split = [...this.blackTiles].map(t => t.split(',').map(i => +i));\n      // Find min and max per dimension\n      const minX = Math.min(...split.map(t => t[0]));\n      const maxX = Math.max(...split.map(t => t[0]));\n      const minY = Math.min(...split.map(t => t[1]));\n      const maxY = Math.max(...split.map(t => t[1]));\n\n      // Check the grid from min-1 to max+1 in each dimension\n      for (let x = minX - 1; x <= maxX + 1; x++) {\n        for (let y = minY - 1; y <= maxY + 1; y++) {\n          const stringified = `${x},${y}`;\n\n          // Filter the neighbors to those that are alive/black\n          const activeNeighbors = this.neighbors.filter(n => {\n            // Adjust the position\n            const np = stringified.split(',').map((v, i) => +v + n[i]);\n            // Calculate the new key\n            const nk = `${np[0]},${np[1]}`;\n            return this.blackTiles.has(nk);\n          }).length;\n\n          // Check if this one is alive\n          const alive = this.blackTiles.has(stringified);\n          if (alive && (activeNeighbors === 1 || activeNeighbors === 2)) {\n            // If we're currently alive, stay alive if we have 1 or 2 active neighbors\n            tempTiles.add(stringified);\n          } else if (!alive && activeNeighbors === 2) {\n            // If we aren't alive, become alive if we have two active neighbors\n            tempTiles.add(stringified);\n          }\n        }\n      }\n      return tempTiles;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2020/Day24.vue?vue&type=script&lang=js\n /* harmony default export */ const _2020_Day24vue_type_script_lang_js = (Day24vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2020/Day24.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2020_Day24vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day24 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///82417\n")}}]);
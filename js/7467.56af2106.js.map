{"version":3,"file":"js/7467.56af2106.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GACA,gBACAK,QAAAA,KACAC,QAAAA,MAEA,qCAEA,KACA,SAGA,2BACA,eACAE,EAAAA,KAAAA,GACAC,EAAAA,IAEAA,EAAAA,KAAAA,EAAAA,GAAAA,OAAAA,MAAAA,OAAAA,KAAAA,IACA,CACAC,GAAAA,EACAC,GAAAA,OAMAH,EAAAA,KAAAA,GAGA,uBAEA,4BAEA,gCAEA,mBAEA,uCAEA,iCAEAI,EAAAA,EAAAA,QAAAA,EAAAA,MAAAA,MACA,CAEA,SAEA,KACA,2BAEAC,QAAAA,IAAAA,EAAAA,IAEA,aAEAC,EAAAA,EAEAF,EAAAA,IAAAA,GAKA,MACA,iCACA,KACA,CACA,CACA,CACA,EACAG,WAAAA,SAAAA,EAAAA,GACA,kBACAC,EAAAA,SAAAA,IACAC,EAAAA,SAAAA,IAEAP,EAAAA,GAAAA,EAAAA,IAAAA,CAAAA,GACA,IAGA,qBAEA,EACAQ,WAAAA,SAAAA,GAEA,qEACA,yEAEA,YAEA,uEAEA,CAEA,IC9G4P,I,UCOxPC,GAAY,OACd,EACA7B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAekB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2021/Day4.vue?0f3d","webpack://advent-of-code/src/components/2021/Day4.vue","webpack://advent-of-code/./src/components/2021/Day4.vue?ee42","webpack://advent-of-code/./src/components/2021/Day4.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":4,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"4\" :year=\"2021\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.solutions = {\n        partOne: null,\n        partTwo: null\n      }\n      const numbers = input[0].split(',').map(i => +i)\n\n      const grids = []\n      let current = []\n\n      // Parse the grids\n      for (let i = 2; i < input.length; i++) {\n        if (input[i].length < 1) {\n          grids.push(current)\n          current = []\n        } else {\n          current.push(input[i].trim().split(/\\s+/).map(n => {\n            return {\n              n: +n,\n              m: false\n            }\n          }))\n        }\n      }\n\n      grids.push(current)\n\n      // Remember which grids are complete\n      const gridsComplete = grids.map(_ => false)\n\n      for (let i = 0; i < numbers.length; i++) {\n        // Mark the numbers and get back the sum of non-marked values or `undefined` if not complete\n        const complete = this.markNumber(grids, numbers[i])\n        // Check if any of them are actually complete\n        const anyComplete = complete.filter(g => g)\n\n        if (anyComplete.length > 0 && !this.solutions.partOne) {\n          // If at least one is complete and we've not found solution 1 yet, this is it\n          this.solutions.partOne = anyComplete[0] * numbers[i]\n          // Mark as complete\n          gridsComplete[complete.indexOf(anyComplete[0])] = true\n        } else {\n          // Otherwise, check if all are now complete\n          let allComplete = true\n          // Get the index of the last one\n          let lastIndex = -1\n          for (let g = 0; g < grids.length; g++) {\n            // Check if this one is also complete\n            allComplete &= complete[g] !== undefined\n            // If it wasn't complete before, but it is now\n            if (!gridsComplete[g] && complete[g]) {\n              // Remember the index\n              lastIndex = g\n              // Mark as complete\n              gridsComplete[g] = true\n            }\n          }\n\n          // If all are complete after this iteration, we found our solution 2\n          if (allComplete) {\n            this.solutions.partTwo = complete[lastIndex] * numbers[i]\n            break\n          }\n        }\n      }\n    },\n    markNumber: function (grids, number) {\n      return grids.map(g => {\n        g.forEach(r => {\n          r.forEach(n => {\n            // Change the marked state\n            n.m |= n.n === number\n          })\n        })\n\n        return this.isComplete(g)\n      })\n    },\n    isComplete: function (grid) {\n      // Check if any row or column is complete\n      const rowComplete = grid.filter(r => r.filter(r => r.m).length === r.length).length > 0\n      const colComplete = grid[0].filter((c, index) => grid.filter(r => r[index].m).length === grid.length).length > 0\n\n      if (rowComplete || colComplete) {\n        // Calculate the sum of all non-marked items\n        return grid.reduce((prev, row) => prev + row.map(c => c.m ? 0 : c.n).reduce((a, b) => a + b), 0)\n      } else {\n        return undefined\n      }\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day4.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day4.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day4.vue?vue&type=template&id=3f226825\"\nimport script from \"./Day4.vue?vue&type=script&lang=js\"\nexport * from \"./Day4.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","grids","current","n","m","gridsComplete","allComplete","lastIndex","markNumber","g","r","isComplete","component"],"sourceRoot":""}
{"version":3,"file":"js/9058.88e5f4f3.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GACA,gCAGA,KACAQ,EAAAA,SAAAA,CAAAA,EAAAA,KACAC,EAAAA,SAAAA,CAAAA,EAAAA,KACA,SACAC,EAAAA,KAAAA,CAAAC,EAAAA,EAAAC,EAAAA,GACA,GACA,IAIA,mCAGA,yCACA,6CACA,EACAC,MAAAA,SAAAA,EAAAA,EAAAA,GAEA,sCACAC,EAAAA,SAAAA,IACA,yCACA,mCAEAC,EAAAA,GAAAA,EAAAA,EACAA,EAAAA,GAAAA,EAAAA,CAAAA,IAIA,QACA,2BACA,6BACAC,GAAAA,KAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,KAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAGA,QACA,EACAC,mBAAAA,SAAAA,GAEA,SACAC,KAAAA,GACAC,KAAAA,IAGA,2BAEA,0BACAH,EAAAA,KAAAA,KAAAA,GAGA,+BAEA,SACA,2BACA,kBACAI,GAAAA,EACA,KACA,CAGA,GACAJ,EAAAA,KAAAA,KAAAA,EAEA,CAEA,QACA,IC1F6P,I,UCOzPK,GAAY,OACd,EACA/B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAeoB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2023/Day11.vue?2477","webpack://advent-of-code/src/components/2023/Day11.vue","webpack://advent-of-code/./src/components/2023/Day11.vue?b54f","webpack://advent-of-code/./src/components/2023/Day11.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":11,\"year\":2023,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"11\" :year=\"2023\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const grid = input.map(i => i.split(''))\n\n      // Parse all the galaxies\n      const points = []\n      grid.forEach((row, ri) => {\n        row.forEach((col, ci) => {\n          if (col === '#') {\n            points.push({ x: ci, y: ri })\n          }\n        })\n      })\n\n      // Get all the extension points for rows and columns\n      const extensions = this.getExtensionPoints(grid)\n\n      // Solve both parts by adjusting the points by extension factors\n      this.solutions.partOne = this.solve(points, extensions, 1)\n      this.solutions.partTwo = this.solve(points, extensions, 999_999)\n    },\n    solve: function (points, extensions, factor) {\n      // Adjust the points by the factor extension\n      const adjusted = JSON.parse(JSON.stringify(points))\n      adjusted.forEach(p => {\n        const dx = extensions.cols.filter(c => c < p.x).length\n        const dy = extensions.rows.filter(r => r < p.y).length\n\n        p.x += dx * factor\n        p.y += dy * factor\n      })\n\n      // Calculate the manhattan distance between all pairs of points, then sum up\n      let result = 0\n      for (let a = 0; a < adjusted.length; a++) {\n        for (let b = a + 1; b < adjusted.length; b++) {\n          result += Math.abs(adjusted[a].x - adjusted[b].x) + Math.abs(adjusted[a].y - adjusted[b].y)\n        }\n      }\n      return result\n    },\n    getExtensionPoints: function (grid) {\n      // Remember the columns and rows that need to be extended\n      const result = {\n        rows: [],\n        cols: []\n      }\n\n      for (let row = 0; row < grid.length; row++) {\n        // Check if the row is empty\n        if (grid[row].every(c => c === '.')) {\n          result.rows.push(row)\n        }\n      }\n      for (let col = 0; col < grid[0].length; col++) {\n        // Check if the column is empty\n        let allDot = true\n        for (let row = 0; row < grid.length; row++) {\n          if (grid[row][col] !== '.') {\n            allDot = false\n            break\n          }\n        }\n\n        if (allDot) {\n          result.cols.push(col)\n        }\n      }\n\n      return result\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day11.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day11.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day11.vue?vue&type=template&id=b2dbb862\"\nimport script from \"./Day11.vue?vue&type=script&lang=js\"\nexport * from \"./Day11.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","grid","row","points","x","y","solve","adjusted","p","result","getExtensionPoints","rows","cols","allDot","component"],"sourceRoot":""}
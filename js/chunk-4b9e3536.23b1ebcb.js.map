{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.array.reduce.js","webpack:///./node_modules/core-js/modules/es.string.replace.js","webpack:///./src/assets/input/Day-18.txt","webpack:///./node_modules/core-js/modules/es.array.splice.js","webpack:///./node_modules/core-js/internals/array-reduce.js","webpack:///./node_modules/core-js/modules/es.array.map.js","webpack:///./src/components/Day18.vue?d1db","webpack:///src/components/Day18.vue","webpack:///./src/components/Day18.vue?a6a8","webpack:///./src/components/Day18.vue"],"names":["$","$reduce","left","arrayMethodIsStrict","arrayMethodUsesToLength","CHROME_VERSION","IS_NODE","STRICT_METHOD","USES_TO_LENGTH","1","CHROME_BUG","target","proto","forced","reduce","callbackfn","this","arguments","length","undefined","fixRegExpWellKnownSymbolLogic","anObject","toObject","toLength","toInteger","requireObjectCoercible","advanceStringIndex","regExpExec","max","Math","min","floor","SUBSTITUTION_SYMBOLS","SUBSTITUTION_SYMBOLS_NO_NAMED","maybeToString","it","String","REPLACE","nativeReplace","maybeCallNative","reason","REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE","REPLACE_KEEPS_$0","UNSAFE_SUBSTITUTE","searchValue","replaceValue","O","replacer","call","regexp","indexOf","res","done","value","rx","S","functionalReplace","global","fullUnicode","unicode","lastIndex","results","result","push","matchStr","accumulatedResult","nextSourcePosition","i","matched","position","index","captures","j","namedCaptures","groups","replacerArgs","concat","replacement","apply","getSubstitution","slice","str","tailPos","m","symbols","match","ch","capture","charAt","n","f","toAbsoluteIndex","arraySpeciesCreate","createProperty","arrayMethodHasSpeciesSupport","HAS_SPECIES_SUPPORT","ACCESSORS","0","MAX_SAFE_INTEGER","MAXIMUM_ALLOWED_LENGTH_EXCEEDED","splice","start","deleteCount","insertCount","actualDeleteCount","A","k","from","to","len","actualStart","argumentsLength","TypeError","aFunction","IndexedObject","createMethod","IS_RIGHT","that","memo","self","module","exports","right","$map","map","render","_vm","_h","$createElement","_c","_self","attrs","solutions","taskInput","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","numbers","methods","lines","input","solvePartOne","solvePartTwo","evaluate","isNaN","el","sub","stack","line","evaluateBitsPartOne","evaluateBitsPartTwo","component"],"mappings":"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","file":"js/chunk-4b9e3536.23b1ebcb.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar $reduce = require('../internals/array-reduce').left;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\nvar CHROME_VERSION = require('../internals/engine-v8-version');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar STRICT_METHOD = arrayMethodIsStrict('reduce');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });\n// Chrome 80-82 has a critical bug\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\nvar CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;\n\n// `Array.prototype.reduce` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH || CHROME_BUG }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nfixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {\n  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;\n  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;\n  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\n\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return replacer !== undefined\n        ? replacer.call(searchValue, O, replaceValue)\n        : nativeReplace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      if (\n        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||\n        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)\n      ) {\n        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n        if (res.done) return res.value;\n      }\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n\n        results.push(result);\n        if (!global) break;\n\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n  // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return nativeReplace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n","export default \"3 * (2 + (9 * 2 * 2 + 8) * (7 * 6 * 7 * 3) * (3 * 9 * 7) * (6 * 6)) * 9 * 8 + 6\\n6 + 4 + 6 * 2 + 5 * (8 + 5 + 5 + (8 * 7 + 2 + 6 * 5 * 4))\\n9 + 3 + 5 + 3 * (5 + (8 + 7 * 8 * 8) * (5 + 9 + 9 * 9 * 4)) * (6 * (8 * 5 * 6 * 8 + 4 * 5))\\n4 * ((8 * 6 + 3 * 3 * 9 * 8) + (2 * 3 * 4 + 9 * 2 * 3) + 4)\\n4 * 9 + (6 + 4) * 6\\n6 * 7 + (8 * 2 + 9) + 4 * 7\\n(2 + 6 * 4 + 3 + 7 * 2) * 2 + 7 + 2 + (9 * 4 + 9 + 7 + 9) + (2 * 4 + 3 + 5 + 2 + 7)\\n(7 * 5 + 4) * 7\\n3 + 8 + (5 + 9 * 8 + 6 + 4 * (3 + 3 * 8 + 7)) + (2 * 4 + 4 * 3)\\n2 + 2 + ((8 * 9 + 2 * 8) * 7 + 5 * (5 + 7 * 3) + 7 * 5) * 3 + 8 * 7\\n5 * 9 + (5 * (9 * 7 * 9 * 9) + 9 * 2 + 6 * 2)\\n9 + 9 * (4 + 9 * 9 * 6 + 5) * 7 * 8 * ((7 + 6 * 6 * 4 * 8) * (7 * 8) + 7 * 6 * 8 * 9)\\n6 + ((3 + 4) + (2 * 9 + 8 + 9 * 3 * 7) * 3 + (7 * 8 + 9 * 3))\\n6 + (3 * (9 + 2) * 9 + 4 + (5 + 4 + 3 * 2 * 4 + 4) + 6)\\n(8 * 3) * ((8 * 4 + 4) + 7 * 2 * 7 * 8 * 9) + 2 + (4 * 3 + (7 + 6) + 4 * (3 * 8 * 3 * 8) * 3)\\n(9 * (3 * 6 + 7) + (2 * 3 * 2) + (7 + 8 + 7 * 4 * 4) + 6) + 3\\n6 * (3 + (5 + 6 * 2 * 3) + (8 + 7 + 2 + 7 * 2 * 5) * 3) + 4 * 4 + 7 * 7\\n4 + 3 + 9 + 5 * 3 * (7 + 6 + (5 + 2 + 7) + 8)\\n5 * 4 + 4 * 4 + (2 + 9)\\n8 + 6 + ((8 + 5 + 2 * 9 * 3 + 3) * 8 * 4) + (7 + (7 * 4 + 9) * 4)\\n2 * 8 * 4 + ((3 + 2) * 8) + 3\\n4 * ((6 + 8 * 6 * 7 + 3) * 6 + 9 + 8 * 6 * (5 * 9 + 4)) * (2 + 8 + 6 * 3 + 9)\\n(3 + 6 + 3) * 3 * 4 * 6 + ((9 + 9 + 7) * 6 + 9 + 6) + (7 * 7 + 8 * 2 * 2)\\n(3 * 8 + 9 * 2 * 8 * (2 + 3 * 4)) + 3 * 3\\n(7 + 9 * 5 + 6 * 4) + 9 * 4 + 2 * 2\\n(6 + 9 + 2 * 7 * 6) * 9 * (5 + 9 * 6)\\n(2 * 4 * 8 + 2 * (4 + 3 + 2 * 2)) * 4 * 3 + 6 + ((8 * 5) + (9 * 5 * 3 * 9 * 7 + 7) * 7 + 9) + (4 * 8 + 9 + 5 + 2)\\n3 + ((6 + 3) * 3 * 8 + 9 + 5)\\n9 + 7 * (9 + 5 + (2 * 7 + 8 + 3 + 9 * 2)) + 4\\n4 * (8 * 7 + 9 * 9 * 3) * (5 + 5 + 9 + 4 * 9 * 6) + (4 + 3) * (9 + 3 + 4 + 7 * 5) + 7\\n(7 + 9 + 5) + 3 * ((6 + 7 * 7 + 4) + (3 * 3) + 3)\\n5 + (6 * (5 + 6 * 5) + 9 * (3 * 5 + 7 + 6) + (2 * 3 * 4 + 5 * 9) + 4)\\n((2 + 3 + 5 + 5 + 2 * 7) + 5 + 2 * 7 + 6) + 8 * 9 + 4 + 5\\n3 * 3 * 4 * 4 * 6 + (4 + (7 + 6))\\n(2 + 8 + 6 + 7 + 6) * (8 + 4) + 4 + 3\\n(7 + 3 + (5 + 3 + 3 + 5)) * 5 + 4 * (7 * 3)\\n4 * 2 * (5 + 5 * 7 + 8 * (4 * 6 * 8 + 6 + 7 + 2) * (4 + 3)) * (2 * 3 * 7 * 3 + 8 + 5) * 4\\n6 + (2 * 6 * 7 + (6 * 6 + 8 + 4 * 2) + 6 + 5) * (8 + 3 * (4 * 4)) + (2 * 5 + 6 + 8 * 3 + 6) * 9 + (3 + 3 * 3 + 8)\\n2 + (4 * 3 * 9 + (2 + 4)) * (3 + (5 * 8 + 9) + 6 * (7 * 3) + 6 + 6) + 8 * 2 * 7\\n8 * (4 * 5 * 7 * (4 * 8 + 4 + 3) + 6) + 5 * 2\\n((5 + 5) * 9) + 2 + 8 + 3 + 6\\n8 * (9 + 7 + (5 * 3 + 7 * 3)) + 5\\n5 + 5 * 2 + (6 * 4 + 4 * (5 + 7 * 4 * 8 + 7 + 5) * 5 + 7)\\n(5 + 9 + 6 * 7 + 4) * 3 * 9 + 7 * (2 + 9 + 8 * 4)\\n7 * 4 + 7 + (7 + 4 + 8) + 9 * (6 + 5)\\n2 + 3 * 2\\n8 * (3 + 4 * 7 + 6 + 9 * 2) + (7 * 2 * 5)\\n(4 + 3 + 3) * (6 * 8 + 2 + (6 * 5)) * 8 * 9\\n8 * (2 + 8 * 3 * 5 + 2) + 9 * 4 + ((4 * 8 * 4) * 9 * 4 + 3 * 4) * 8\\n(4 + 3) * 5\\n3 + 8 * 8 * (3 * 7 + 5 * 7 * (2 * 8 + 3 + 8) * (5 + 2 * 6 + 3 * 2 + 3))\\n3 * ((5 * 9 + 2 + 8) * (9 + 9)) + (4 + 9 * 2 + 8 * 6) * 7 * (8 + (3 + 6 * 3 + 5)) + 3\\n5 + 2 * 7 * 8 + 2 + (8 * 3 * 2 * 7 * 5)\\n(3 + (6 + 5) * (2 * 2 * 6) + 8 + 5 * 8) + 9 + 2 * 8\\n(8 + 3 * 8) + 7 + ((9 + 3 + 2) * (8 * 5 + 3 + 7) + 9)\\n2 + 5 + ((5 * 8 + 7) * 2) + 7 + 6\\n6 * 5 * 3\\n5 * ((3 * 7 * 6) * 2 * 5) * 5 * 8 * 6 * (9 + 9 + 2 * 3 + 6 + 4)\\n9 * (6 * (4 + 9 + 9 + 7 * 5 * 3)) + 7 + 7 + 6 * 5\\n9 * (4 + (3 * 9 + 3 + 6 * 7) * 7 * 9 + 3 * 6) + 7\\n(4 * 3) + 4 * 6 * 3 * 5\\n3 * 9 * 8 * (9 + 8 * 6) + 8 + (7 + (5 * 5 * 8 + 6))\\n6 * 3\\n2 + (3 + (6 + 2) + 5 + 9 * 7 * (3 + 5)) + 4\\n(7 * (8 * 6 + 3) * 4 * 5) * 6 * 9 + 9 + 9\\n((3 * 4 * 7 + 8) + 5 + 5) + 9 + (2 + (5 + 9 + 7 * 7 + 8) + (3 + 3 + 2) + 9) * (3 + (6 * 3) * 9) * 5\\n(6 * 6 + 7) + 7 + 8 * 5\\n(6 + 2 + 3 + 4) + (6 + 9 + 5 + 8) + (4 + 3 * 2) * 7\\n5 * ((5 + 5 * 9 * 7 * 8 + 2) * 7 + (7 + 5 + 5 + 5 * 9 * 8) + 5 * 6 * 3)\\n(9 * 6 * 5) + (7 + 2 + 4 * 7 + 8) * (3 * 6) + (9 + 7 + 3 * 7 + 4)\\n4 + ((5 + 8 + 3) + 7 + 4 + 9 * 3) + 5 + 2 + 6\\n2 + 6 + 5 * (6 + (9 + 8 * 4 * 5 * 4) + 6 + 9) * (7 * 4 + 6 + 4 + 7) * 6\\n((9 + 8 * 5 * 9 * 9 * 2) * 5) + 8 * 9\\n9 * 7 * 5 + (8 + 4 + 3 * 5 + 2 * 6)\\n8 * 7 * 7 * 9 + (6 * 3 + 8 * 7 * 8 * (2 * 9))\\n7 * (5 + (7 + 3 + 2 * 4 + 8)) * 8 * 3\\n6 * (8 + 3) + ((7 * 9 + 7 * 8 * 9 * 8) + 3 * (9 * 7 + 3 * 7) + 3 * 6 * 7)\\n7 + 6 * 7 * 4 * (4 * 2) + ((7 + 5 * 9 + 5 + 9) + 7 * 4 * 4 + 8)\\n5 + 6 + 4 + 9 * 2 * (9 * 4 + (7 + 6 * 7) + (2 * 8 + 9 + 6) * 2 + 8)\\n6 + 6 * 8 + 9 + (3 + 2 + 7 * 7 * (7 * 7 * 3 + 3 + 5 * 6) + 9)\\n3 + 2 + 2 + 6 + 6 + 9\\n8 * 3 * (7 * 6 + 6 * 9 * 9 * 9)\\n7 + 5 + (6 * 4 + (7 + 7 + 9) + (5 + 7) + 9) + (9 * 7 + 6 * 8)\\n7 + (5 + (9 + 4) * (8 * 8 + 2 + 6 + 8) * (5 * 5) * 5 * 9)\\n5 * 7 + 6 + (7 * 4 + (7 + 2 + 8 + 5) * 8 * 6 * (3 * 4 * 9 * 5)) + 9\\n(7 * 5 + 7 + (6 * 5) + 3 + 5) + 4 * 2 + ((5 + 2) + 5 * (6 + 7 + 4 * 8 * 6) + (8 * 4) + 5 * (2 + 5 * 8 + 6 + 2 * 8))\\n6 * 9\\n9 + (3 * 7 + 8 + 9 * 5) * 3\\n(4 * (7 * 7) + 8 * 5 + 8) * 3\\n6 * (5 + 2 * 2 * 2 + 2)\\n(2 * 3 * 6 + 9) * 8\\n2 * 7 * 4 * (4 + 2) * (3 + 5 * 8 + 5 * 9)\\n((2 * 8 + 7 * 2 * 6 + 6) * 5 + 9 + (8 + 7 * 4) + 8 + 6) * (6 * (5 + 5 * 7 + 2 + 3) + 4 * 4 + 5 + 3) + 8\\n6 + 7 * (9 * 7 * (4 + 2 * 5) * 4 * (7 + 3 + 2) * 2)\\n8 * 3 * 5 + (3 + (3 * 5 + 8 + 9) + 5 + 2)\\n2 * ((5 * 6 + 3 * 6) * 8 * 4 * 9) * 3\\n5 + (3 + 8 * 8 + (8 * 8 * 2 * 7) + 8 + 4) * 4 + 2 * 5\\n7 * (4 * (2 * 8 + 2 * 8) + 2) * 8\\n8 * 4 * 3 * 6 + (6 + 2 * 5 + (8 + 3 + 8 * 7 * 8) + 6 * 2)\\n(3 * (8 * 4 + 9 + 8 + 8) * (4 + 5 * 3 * 3) * 6 + (8 + 5)) + 9 * 7 + 4\\n6 + (5 * 5 + 5 * 8 + 2) * 8 + 9 * 5\\n2 + 4 + (9 * 2 + 7 + (6 * 2 * 5 * 8 + 2 * 8) + 5 + 9) + 3 * 4\\n3 * (9 * 4) * 8\\n2 + 8\\n7 * 9 * 5 * 4\\n8 + 8 * (2 + 5 * 4 * 6 * 8) + 9 + 9\\n(8 * 5 * 4 + 3 * 7) + 5 + 9 * 3 * (4 * 7 + (7 * 8 + 4 * 7 + 7) + (4 + 6 + 9 + 5 + 5)) + (5 + (4 * 2 * 3) * 2 + 6 * 3)\\n(2 + 8) * 3 * (8 + 6 + 5) * 2 * 3\\n(6 + 7 + (8 * 2 * 5 * 4 * 4) + 2) * (6 * 8 + 6)\\n(6 * 9 * (8 * 6 * 8)) * 6 + (4 + 7 * 6 + 7 + 8 + (2 * 6 * 3 + 9 + 5))\\n((3 + 9 + 9 + 4 + 3 * 4) + 5 * 9 + 5 + 6 * (2 * 5 * 3)) * 4\\n9 * 9 + (8 + (8 * 3 + 4 + 7 * 7 + 3) + 4 * 7 * 4) * (6 * 6 * (5 * 7 + 8) * 2 * 4 * 7)\\n2 + 8 * (5 + 5) * (3 + 9 + 8)\\n8 * (4 * 7 * 9 * 8 + 8 * 7) * (6 + 7) * 6 * 3\\n2 * 6 + ((7 * 3) + 6 * (5 + 4 * 7 * 9 + 9 + 5) + 5) * 9 + 9 + 2\\n2 + (3 + 2 + 9 * 6 + 3) + 2 * 9 + (4 + 9 + 4 + 4)\\n2 * (8 * 9 * 4 + 9) + 6 + (6 + 5 * (2 + 4 + 5 + 9 + 5 * 6) * (3 * 2 + 5 + 4) + 5)\\n3 * 9 + (6 * 9) + 9 * ((5 + 2 + 3 * 2 * 4) * 8 + 8) + 3\\n((9 + 8 * 9 + 4 * 5) * 2 + 8 + 7) + 8\\n(6 + 8 + 2 + 4 + 8 * 6) + 7\\n6 * 9 + 9 * (6 + 6 * 8) * (5 + 4 + 4) * 7\\n((4 * 4 * 7 * 8) + 6) * 3\\n7 * 3 + (7 * 5 * 3 + 4)\\n5 * ((8 * 9 * 8 + 4 + 2 * 6) + 7) + ((7 + 7 * 3) * 5 + 9 + 9 + 5) + 2 * ((3 * 2 * 9 * 2 * 5) + (6 + 4) * 6 + 6) * 8\\n(3 + 6 * (9 + 4 + 5 * 2 * 5) * 2) + ((8 * 9) * 5 + 4 + (8 * 8 + 8 + 2 * 8 * 5)) + 4\\n3 * 4 + ((7 + 6 + 9 * 7) * 7 * 9) + (6 + 3 * (2 * 9 * 2 * 3) + 6 * (8 + 2 * 8 + 9))\\n3 * 3 + ((7 * 7) + 4 + 3 + 5 + 8 + 8) + 3 * (7 + 8) + (8 + 9 * 2 + 5 * 9)\\n6 + 9 + ((3 + 2 * 2 + 6 * 7) * 9) + 8 + 4 + 2\\n(5 * 4 + 7 + (5 * 4) * 8 + 2) * 5 + (8 * (6 + 7 + 7 + 9 * 7 + 5) + 6 + 3 + 3) + 6 + (4 * 4 * 2) + (9 * 7 + 6)\\n5 + 3 * (2 + (8 * 9 * 4 * 3) * (2 + 8))\\n(6 * 5 + 3 + (4 + 9 * 7 * 2 + 3 * 6)) + 6 * ((3 * 2 * 2 * 6) + 7) * 5 + 7 * 5\\n6 + (8 * 5 * 3 + 9 + 6 + (7 * 5 * 4 + 4 + 2)) * 4 + 7 * (4 + 8) + 7\\n2 * 2 * 9 * 6 * ((6 * 8 * 8) * (2 + 7 + 3 * 9 * 5 + 2) * 9) * 5\\n8 * 8\\n(9 * 2) + 5 + (5 * 8 * (2 + 3 + 9 * 8)) * 4 + 6\\n((4 * 8 + 9 + 5 + 8) + 6 * 8 * (2 + 3)) * 8 * 3 * 2 + (2 * 7)\\n8 + 4 * ((2 + 4 + 7 + 4 * 2) * 3 * 6 + 3 * 7 + 3) * 8 * 9 + 4\\n5 + ((2 + 9 * 3 * 9) + 6 * (3 * 7 + 2 + 7 * 5 + 9)) * (9 + 8)\\n9 * (5 + 7) + 5 * 6 * 9 + 7\\n9 * 5 + 8 * 5 * (5 * 7 * 9) * (5 * 3 + 9 + (7 + 2 + 5 * 6) * 5 + 5)\\n3 * 7 * (8 + (3 * 4 * 6 + 4 + 2 * 8) * 8 + 2 * 9) + 2 * 6\\n2 + 6 + 9 * (6 * 2 + 9 * 9 * 8) * 3\\n(2 + 4 * 4 + 7 + 3) * 2 * 8\\n6 * 6 + 4 + 5 * 4 * 2\\n(3 + 6) * 3 + 9 + (7 + 8 * 3 + (2 + 5 + 4 * 4 * 8 * 5)) + 9\\n(5 + 5 * (5 + 3 + 5 * 4)) + ((3 * 7 * 9 + 7 * 7) * 4 * 6)\\n(6 * 3 * 3 + (8 + 8 * 6 + 3) * 2) * (5 + 3 * 8 * 4) + (6 + 6) * ((3 + 9 + 7) + (5 + 2 + 2) * 7 + (7 * 2 * 4 + 7 + 2 * 9)) * 2 + 5\\n(8 + 8 + 2 * 4) + (6 * 8 + (6 * 4 + 2 + 9 * 9 * 8) * (4 + 4 + 2 + 4)) * ((8 + 6 * 5) + 6 * (2 + 6 + 3 * 5 + 4 + 8)) + 9 + 8 + 3\\n5 + 7 + ((7 + 9 + 9) * 3 + 6) + 6 * 2 * 4\\n(8 + 5) + 8 * 7 * (9 * 2 + 6) * (2 * 2)\\n7 * 6 * (2 + 7 + 6) * 8\\n5 + 6 * (5 + 4 + (8 * 4)) * 3 + 3\\n5 * 4 + 7 + 7 + (2 + 6 * (6 + 3 * 9 + 7 * 4 * 5) * 6) * 8\\n(9 * (9 + 8 + 4 * 8)) + 6 + ((8 + 6) * 5 * 5 * 2 + 9 + 2) * 5\\n5 * (4 * 9 + (3 + 7 + 9 * 6 * 2 * 4)) * 4 * 6\\n4 + 2 * (7 + 2 + 8 * 3) + 2\\n5 * ((9 * 3 * 4 * 2) * 2 + (2 * 7) * 2 * 4 * 6)\\n9 + (6 + 8) + 9 * 9 * ((6 * 7 + 2 * 8 * 8) * 8) + 8\\n9 + 9 * 2 * (8 * 3 + 2 + 4 + 2) * (4 * 4 + 3 + 2) + 2\\n3 * (5 + 9 + 5 * (8 * 3) * 6) + 3 * 6 * (4 * 8 + 6 * (4 * 8) * 5) + 3\\n3 + (3 + 7 + 7 * (3 + 5 + 8 + 5 * 7 + 6) + 3) * 8 + 4 + 7\\n3 * (7 * 6 * 6 + 9 * 8) + 5 + 7 + 4 + (7 * 3)\\n8 + (4 * 9 * 5 * 5 + 9) * 3 * 5 * ((7 * 5 + 8 * 9 + 2) + 6 * (9 * 5 * 6 + 7 + 7) * 8)\\n(3 * 4) + (7 + 2 + (2 * 7) + 6 + 8 + (5 * 6 * 5 * 2 + 8 * 2)) + ((7 + 9 * 3 + 7 + 8) * (9 * 3 + 5 + 4 * 5) + (4 + 9 * 7 * 4 * 3) + 5) + 6 * 2\\n(3 + 2 * 4 * (6 * 6 + 5 * 2)) + 7 * 8 + (3 + (5 * 6 * 3) + (8 + 9 * 6 * 6 * 2 * 6) * 8) * 2 * (2 + 6)\\n8 * 6 * (8 * 5 + (7 * 7 + 7 * 5 + 4 + 8) + 5 + (6 + 8 * 4 + 2 + 7)) * 2 + 9\\n5 + 9 * 5 * 9 + (8 * 6 + (7 + 6) * 6 * 5 + 7) + 4\\n4 * ((4 + 8 + 6 + 7 * 2 + 6) * 2 + 5) + ((5 + 8 + 9 + 9) + (7 * 3 + 3 + 2 + 9) + 6 * 8 * (9 + 5 + 8 + 5) * (6 + 9 * 9 * 6 * 7 + 8)) * (2 + 6 * 9 * 7) + 3 * 2\\n(4 + 7 + 5 * 8) + (3 + 5) + 7\\n7 * 8 + (6 * 4)\\n6 * 3 * 7 + 4 + 3 * 4\\n(6 * (6 * 7 * 9 + 9) + 4 * 3 * 2) + 8\\n8 * 3 * 9 + 5 + 6 * 6\\n5 + 4 * 2 + 9 * 5 * 8\\n5 + 8 + 3\\n(6 + 2 + 9 * 8) + 3 * 4 + (5 + 7 * 3 + 5)\\n((5 * 5) * 6) * 7\\n8 + ((2 + 6 + 6 * 3 + 2) + 6) + 4\\n(5 * 2 * 9 + 2 * 2) + 4 + (3 + 2 + 3 * 4) * 3 + ((5 * 3 * 7) * (8 * 2 + 3 * 2) + 9 * 8 + (8 * 7 + 8 + 9 * 3) + 7)\\n6 + 5 * 6 + 8 * (3 * 8 + (7 + 4 * 4 + 3))\\n6 * (7 + (2 * 3) + 2) * 8 + 4 + 6 + 5\\n7 * 3 * 6 * 4 + 3\\n(8 * 8 + (5 + 5 + 5 + 9)) * 5 + 3 + 5 + 5\\n(2 * 3 * 6) + 9 + (3 * 2 * 6) * 4 + ((6 * 6 + 9 * 3 + 3) * 7 + 7 * 6) + 6\\n7 + 6 * 3 * ((7 + 5 + 2 + 8) * 4 * 5 * 3) + 7 * 6\\n6 * ((8 * 3 + 6 + 5 * 6 * 7) + (9 + 6 * 2 + 6) * 8 * 8) + (4 * 5 + 9 * 6) * 7\\n(9 + 7 + 2 + 2) + 9 + 7 * 4\\n(9 + 3 * 2 * 4) * 7 * 6 + 2 * (4 * (3 * 9) + 4 * 3 * 3) + 9\\n7 + 2 + 2 + 6 * 2 + (6 * 7)\\n6 + ((2 * 3 * 3 + 3) + 3 * 9 + 7 + 4 * 2) + 3\\n7 + 6 + 9 * (8 * 4) * 9\\n2 * ((4 * 3) + 5) + 7 + 4 + 3\\n(5 * 4 * (8 * 6) + 4) * 6 * (3 * 3 + 5 * (3 + 3 + 6 * 7 * 6) + 6 + 8)\\n4 * 7 + 3 * 8\\n5 + 3 + 7\\n5 * 8 * (3 + 4 + (3 + 6) * (4 + 6 * 3 * 5 + 8) + (5 + 2 + 3 + 2 * 3 * 8)) + 7 * 4\\n(7 + 8) + (6 * 7 + 9) * ((2 * 4 * 7 + 2 + 8) + 9 * 9 + 5 * 3 + 3) * 6 + 4 * 6\\n2 + 4 * 5 + 3 + (7 + 9 * (6 + 2))\\n8 + (9 + 2 * 4) * 4 * (7 * 7 * 5) * (4 * (3 + 2 + 3 * 4)) + 9\\n7 * 2 * 7 * 4 + 2 * (2 + 4 * 5 + 2)\\n5 * (3 * 7 * 8 * (4 + 2 + 8)) + 5 * 4 + 3\\n((8 + 6 + 4 * 9 * 7 + 8) * 9 * (7 * 9 + 5 * 8) * 4) * 9 + (5 * (5 * 7 * 4 + 3 * 9) + 6 + 2 * 9 * 2)\\n6 * (5 + 2 * 3) + 5 + 5 * 2\\n(4 * (7 * 3 * 3 + 4 * 6) + 6 * 9 * 6 + (8 * 4)) * 5 * 9 + 3 * 9\\n4 * (2 * 8 * 8) * 5 * ((4 + 2 * 7 * 4 * 4 * 3) + 5) + 4\\n7 * ((8 + 8 + 6) * (5 * 5 * 2 * 8 + 7) * 8 * 2 * 8 * 8) * ((3 * 3 + 9 * 8) * 3 * 3)\\n8 + (4 * (3 + 6 + 9 * 6 * 9) + 5 * 6) * 9 + 2 + 6\\n(6 + (6 + 9 + 5)) + (3 * 7 * 7 * 8) * 4 * 7 * (2 * (9 + 2 * 4 + 7 * 2))\\n2 + (6 + 6 * 6) * 9 * 4\\n9 * (9 + 3 * 4 + 8 + (4 * 4 + 5 + 8 + 8 * 2) + 5) * 9 + 5\\n((9 * 6 * 9) + (4 + 4 * 3 + 2 * 2 * 6) * 4 * 6 * (9 * 4 * 9 + 9 * 3)) + (5 * 6 * 9 * (8 * 5 * 9 * 6 + 4) + 3) + 8\\n6 + (2 * 3 + 5 * 7 * 7) + 2 + 4\\n2 * 9 + 6 + (2 * 7 + 7 * 3) * (7 * 5 * 7 + 5 * 4) * 2\\n6 + 6 * 5 * 7 + (3 * (2 * 7) * 3 * (9 * 4 * 5 + 5 * 7 * 5))\\n8 * ((4 + 9 + 9) + 8) * (5 * 4 * (9 + 3 * 3 + 6) + 3) * (8 * 7 * 9 + (8 + 8 * 3 + 9 * 7) * (3 + 7 + 9) * 7) + 6\\n8 + 8 * 3 * 8 + 5\\n2 + 3 * ((4 * 7 + 3 * 2 * 8 * 4) + 7 + 3 + (3 * 5) * 5) * 9 + 5\\n(3 + 7) + 6 * 4 * 7 * 3 * (4 * 7 + 3 * 6 + 5)\\n3 * (3 * (2 * 5 * 4 + 9 * 8 * 8) * (6 * 4 + 2 + 5 * 4) * 4 * 6) + (9 + 9 * 9 + 3 + 5) + 7 * (7 + 7)\\n((9 + 8 + 8 * 8) * 9 + 8 + (2 * 7 * 4) * 2 + 5) * (9 + (7 * 3 + 4 + 2 * 2) * 4) * 7 * 2\\n2 * (7 + 9 * 7 + (3 + 2 + 2) + (9 + 5 * 2 * 8 * 6) * 2) * 4 + 3 * 5 * (5 * (7 * 8) * (5 + 3 + 4 + 3 * 3) + 7)\\n(7 * (9 + 7) + 5 * 7 + 3) * (2 + 8) * (2 + 9 * (7 * 7 * 7 + 4) + 6 * 2) * 9 * 8\\n(3 + 5) + (8 * 4 * 4 + 3 * 8 + 7) + 5 * 5 * 7\\n5 * 9 + (2 + 9 * 9 * 6 * 4) + 5\\n3 * 6 * 2 * ((2 * 3) + 6 * (6 + 8 + 9 * 2 + 5) * 2 + 5 + 5) * (7 + 6 + 4 + 9 + 6 + 3) + 4\\n8 * 9 * 3 * 7\\n(2 + 8) * 3 + 7\\n(9 + 7 + 8 * 5 * 9) + 9\\n3 + ((7 * 6 * 4 * 5 * 9 + 3) * 5 + 4 + 3 * 5)\\n(2 + 8 * (8 + 3 * 3 + 4 * 5)) + (5 + (3 + 8 + 4 + 7 + 3 + 3) + (9 * 8 + 3)) + 9 * (7 * 5 * 2 + 2 * (4 * 7 * 3 * 4 + 8 + 4) + (2 * 2 + 4 * 7 + 9 + 8))\\n((4 * 9) + 5 * 3 * 3 + 6 * 7) * 7 * 7\\n(9 + 4 + 4 + 6 + 7 * 2) + 2 + 3 * 7 + 9\\n5 * (4 * (9 * 3) + 9) * 7 * (6 * 8 + 3 * 4 + 7 + 3) * 9 * 6\\n6 * ((8 + 7 * 3 + 7 * 4) * 5 + (5 * 5 + 9) + 6 * 3) * (6 * 6 + 7 * (3 + 4 + 9 * 5 + 7) * (8 + 3 * 7 * 6) + 4) + 8 * 7 + 6\\n(9 + 3 * 9 * (5 * 6 * 8) * (4 * 2 + 3) * 6) + ((6 + 2 + 6 + 8 + 4) + 4 * 7 + 7) * 5 + (6 * 8 * 5) + 7 * 6\\n8 + 3 * (9 + 6 + 2 + (4 * 2 * 8) * 7 + (7 + 7 * 7 + 5 * 4 + 6)) * 9 + 9 + 7\\n(2 * 2 + 7 * 3 * 3 * 4) * 9 * 9 * 7\\n(2 * (9 * 6 * 6 * 5 + 2 + 7) * 3 + 3 * 4) + 2 * 6 + (9 + (2 + 2 + 9)) * (2 + (7 * 6 * 5 * 9) + 6 * 3) * 9\\n8 * 2 * 5 + 9 + ((3 + 7) * 7 * 6 + 5)\\n9 * 8 * 4 + (8 + 9) + (4 * 7 * 4 + 6)\\n5 * (8 * 4 * 6 * 7 * 6) * 9 * 7 * (6 + 6 * 6 + 7 + 4)\\n7 + (2 + 2 * 3) * 6 * 8 + 9 * 6\\n3 * 4 * (4 + (6 * 9) + 3 + 8 * 9 * 5)\\n3 * (5 * 6 * (8 * 4 + 6 + 3)) + 4 + (9 + 8) + ((6 * 3 + 2) * 9 * 5 + 5 + 8 * 3)\\n3 + ((4 + 9 * 2 + 2 + 2) * (9 * 3 * 4 * 7) * (8 * 7 + 2 * 6 * 2) * 2 + 3 * 4)\\n5 * (2 + 2 + 9 * 5) + 7 * 8 + 7\\n4 + 2 + 8\\n7 + (2 + 8 + 9 * 4) + 4 * ((9 * 4 * 4 * 4 * 4 + 3) * 3)\\n2 + (9 + 4 * 3) + ((2 + 5 * 5 * 5 + 5) + (5 * 6 * 9 * 8)) + 4 + 9\\n(7 + 4 + (5 + 3 + 3 + 8 + 9) + 9 * 6) + 4 * 9 + 3 + 5\\n2 + (4 + 2 + 7) + (5 + 9 + 3 + 7) + 7 * ((2 + 8 + 5 + 4) + 5 + 6) * (4 * 8 * 4 * 8)\\n(8 + 7 + 3 + (8 * 3) + 6 * 2) * 4 + ((5 + 6 * 4) * 6 + 4 + 5)\\n(8 + 2 * 7 * 3 + 5) * 2 * ((9 + 3 * 4 * 6 + 2) * 2 * (7 * 9 * 4 * 5 + 8 * 5))\\n((9 + 8 + 3 * 2 + 8) + (8 + 4 + 2 * 5 + 3 * 9) + (9 * 3 * 2 * 4 * 8) * 8) + (8 * 5 + 3 + 3 + 9) * 8 + (4 + 7 * 7 + (3 + 7 * 9 + 8 + 2) * 5 + (5 * 5)) + 9 + 2\\n(5 + 3 + (6 * 2 + 5 + 4 + 3 + 9) + 5) + 5 * 9 * 8 * 8 + 3\\n(3 + 8 * 8 * 2 * 3) + 7 + 4 + 3 + 5 + 4\\n7 + 9 + 5 * 6 * 9 + ((4 * 8 * 7 + 8 * 2 * 8) + (7 * 2 + 9 + 4 + 2 * 4) * 2)\\n((6 * 4 + 8 * 7) + 9 + 5 * 5) * 8 + 8 + 4\\n(6 + 2 * 6 + 4) + ((5 * 4 + 5) * 4 + 3)\\n6 + (2 * 4 * 4 + 6) + (8 * 5 * 2) * 4\\n7 + (4 + 3 * 5 * 5 * 5 * 4) * 4\\n(6 + 2) + (9 + 6 + (9 + 3) + (3 + 7 + 2 * 6) + 6) * 3 + 5 + 8 + 7\\n2 + (9 * (4 * 7 * 9) + 7 * 5 + 2) * 3\\n6 * (6 * 8 * 3 * 6 * 3 + 4)\\n4 + (2 + (3 + 3 * 8) + 8 + 4 + 3 + 6) * (6 + (3 + 9 + 9 + 7 * 6 * 7) + 9 + 9 + 6) + 5 * 5\\n(9 * (6 + 7 * 5 * 9 + 3 + 8) + 4 + 4 * 6) + 8 * 3\\n7 * (7 * 5 * 5) + 8\\n8 * 8 * 2 + ((4 + 2 + 5 + 4 + 3) + 2) + (3 * 5 * 3 + 4)\\n9 + 2 * 9 * (8 * 7 + 2 * 3) * 2\\n8 * (6 * 6) * 7 + 3 * 5 * ((8 + 3) + 3 + 7 * 3)\\n7 * 8 * (7 + (2 + 6) * 5) + 5 + 2\\n3 * 2 + 5 + (5 * 9 * 8) + 7\\n(8 * 7 + 9) + (7 * 7 * 8 + 9 * 3) + (8 * 9 * 4 * 9)\\n8 * 9 + 7 * 2 + 3 + (2 + 3 * (4 * 2 * 3 * 3) + 4)\\n(5 + 4 * 3 + 8) * (8 * (2 + 3 + 2 + 2) + 9 * 8 * 9)\\n7 * 7 * 9 * (5 * 9 * 4 * 5 + (9 * 3 * 4 * 4))\\n4 * ((2 + 6 * 4) + 7) * 8 + 7 + ((9 + 2 + 3 + 8) + (5 * 9)) * 2\\n6 + 5 + 4 * 7 * 6 + (6 * 7 * 2 * 6 + 8 * 2)\\n4 * (8 * (5 + 2 * 2 + 4) + 4 + (2 + 8 * 3 + 7 + 8)) + (4 + 7 + 9 * 4 + 8 * (8 * 6 * 6 * 9)) + 6 * 8 * ((3 + 3 * 7 * 2 + 7 + 5) * 2 * 5)\\n5 * (2 * (4 * 4 * 6 + 3 + 4 + 8) * 7 * (8 * 3 + 9 + 2 * 8) * 5) + 5 * ((7 + 7 * 3 * 5 * 7 + 3) * 7 + 3 + 6 * 7) + 8\\n(2 * 3 + 8 * 5 * 6 + 2) * 6 + (6 * 5 + 2 * 9 + 3 * (9 + 5 * 2))\\n9 + ((8 + 9 * 7 * 5 * 8) * 4 * 2)\\n3 * 6 * 4 + 4 + 3 * (4 + 3 + 4 + 6 + (4 + 6 + 2) + 3)\\n5 * 2 * ((9 + 9) * 2 + (4 + 2) + 9 * 4 * 3)\\n(4 + 8) + 2 * 4 + 5\\n(3 * 7 * 5 * (7 + 6 * 9 * 2 * 7 * 3)) * 4 * 4 * 8 + 9 * 5\\n6 * 8 * ((5 + 4 * 4 + 9) * 4 * 6 * 9) + 9 * 9 + (2 + (9 + 3 + 7 * 7 + 2 + 8) + 7 + 4 * 8 * (8 * 3 * 3))\\n((9 * 6 * 6 + 3) * 2) + 7 + 6\\n9 * 6 * 5 + 6 * (7 * 6 * 9 + 4 * 4)\\n9 * (4 * 9 + 9) * (2 * 3 * 6) + 7 + (6 + 9 * 6 * 7 + 4) * 6\\n(2 * 9) * 2 + 5 + 6 + 8 + (8 + 7 + 3)\\n(2 + 3 + 6 + 2) * (6 * 3 + 7 * 5 + 5 + 7) + 4 * 4 + 2\\n5 + (4 + (8 + 2 + 9 + 6 + 6 * 7) + 2 + 9 + 4) * 8 * 8 * ((3 + 3 + 7) * 7 + 9 * 7 + 6 * 9) * 9\\n7 * (7 * 5 + 6 + (6 * 7 + 8 * 5 + 3 + 5) + 4)\\n6 + 4 * (3 + 2 * (5 * 7 + 6 + 2) * (8 + 8 + 2) + (7 + 2))\\n5 * ((4 + 5 * 9) + 3 * 4 + (2 * 3 * 2) * 5 + 4) + (7 + 9) * 6 + (8 + 2 * 6 * 9)\\n(4 + 9 + 2) * (4 + 8 * 9 + 6 * 8) + 4 + 8 * 9\\n4 + 8 + 3 + 5 + (5 * 9 * (3 * 3 * 8))\\n(5 + 4 * 8 + 9 * 3) * 2 + 5 + 8\\n(3 + 3 * 9) + 6 * (2 * 9 + 6) + 5\\n3 + 4 + 3 * 9 * 2 + ((7 * 7) * 3 * (9 * 5 * 7 * 4 * 2))\\n7 * 7 * (8 + 4) * (7 + 9 + (6 * 7 * 7 * 2 * 6 * 6) * 7)\\n7 + (4 + (5 + 4 + 9 * 2 + 6 * 5) + 2 + 6) + 7\\n(3 + (5 + 9) * 8 * 3 + 9) * 5 + ((6 * 7 * 5) * (4 * 8 + 6 + 5) + 3 + 4 + 8) + (4 * (2 + 7 + 5 * 7 + 2) * 8 * 8 + 6 + 3)\\n6 * (5 * 3) * 4 * 8 * 6\\n4 * 5 * 4 * 3 * 5\\n3 + 6 * 2 + 7 + ((3 + 7 + 3) + 5) * 8\\n9 * 5 + (6 + 7 * 9 + 8 + 3 + 8) + (9 + (2 + 9 * 4) * 9 * 9 * (3 * 2 * 3 * 5 + 3) * (2 + 9 * 3 * 4 * 7))\\n5 * 6 * 3 * (7 * 3 + 3 + (2 * 7))\\n9 + 8 * 5 + (7 * 6) * 9 + 3\\n8 + 6 + 4 * (6 * 8)\\n3 * (4 * (2 * 4 + 4 * 8 + 7) * (2 + 7 * 4 * 6 + 3) + 8 * 4) * (7 + (7 * 9 + 8 + 7 + 8 * 8))\\n3 + (8 * 9) * 6 + (5 + 6)\\n6 + 2 + (7 * 6 + 7 * 6 + 3)\\n5 + 9 * (9 * 7 + 4 + 6) + (9 + 7 + 6)\\n(9 * 7 * (3 + 6 * 3)) + 3 + 6\\n5 * (9 * 5 * 2 * 5) * 8\\n((2 + 9 * 6) * 5 * (2 + 2) + 7 * 9 + 3) + 4 + 6 + 5\\n6 + 8 + 9 * (4 * 2 * 7) + 4 + 6\\n4 * (9 * (4 * 8 + 3 * 3)) * 2\\n(7 * (3 + 3) * 8 * 8 * 9) + 5 + 4 + 6 * 2 + (8 * (6 * 6) + 5 * 2 * 8)\\n((9 * 3 * 4 + 4 + 4) + 8 * 3 + 2 + 9) + ((4 + 4 + 8 + 7 + 7 * 9) + (7 + 8 + 9 + 3 + 7) * 9 * 7 * 8)\\n(8 + 6 + 3 * 8 + 3) * 6 * 4 + 9 * 2 * (7 * (3 * 2 * 2 + 7 * 7 * 3) * 7 * 2 * (3 + 2 + 2 + 5) + (7 * 8 + 3))\\n7 + 5 * 5 * (4 + (7 * 3) * 5 + (7 + 5) + 3) * 4 * 8\\n4 * (3 + 6) + 8 + 6\\n5 * 2 * 7 + 8 * 5\\n3 + (9 + (4 * 5) + 5 * (9 + 3 * 3) * 3 * 5)\\n7 * (5 * 3 + 3 * (9 + 9 + 6 * 6 + 8 * 9) + (8 * 2 * 9 * 4))\\n((5 + 7 * 7 * 9 + 3) * 3 + 6) * 7 * 5\\n(7 * 7 * 9) * 5 + 8 * 6 * 5 + 5\\n2 * 6 + 3 * 4 + (9 + 4) + 4\\n6 * 6 + 2 * ((5 + 9 * 2 + 6) + 9 * 9 * 6 * 4 + (9 * 4 + 2)) + 3\\n5 * 3 * ((6 + 7 + 6 + 3 * 9 + 3) + 8 * 5 + 2) * 9 * (7 * (7 + 2 * 6 + 2 * 2) * 4 * 3) + 5\\n9 + ((7 + 4 + 5 * 5 * 6) + 4 + 4 * 9)\\n((5 + 9) * (4 * 6) * (8 + 3 * 8 + 8 + 3)) * 8 + ((5 * 5 + 5 + 4) + (4 + 9) + 2 * (7 + 5 * 4) * 5) + (5 * 5 + 2 * 3 * 6)\\n8 * 4 + 8 * 8\\n(4 + 8) + (7 + 4)\\n8 + (8 + 6 * 5 + 6 + 9 * 8) + 7 * 2\\n3 + 9 + 4 + (6 + (9 * 6 + 6 + 6) * 7) + 7 * 3\\n2 * (8 + 9 + 7 * 4 + (2 * 9) * 6) + 3\\n6 + (5 + 2)\\n3 * 9 * 3 + 2 + 3\\n4 * 3 + 8 * 2 + (2 * (8 + 2 * 5) * 3 * 4 * 3)\\n9 + (2 + 4 * 8 * 7 * 5) + 8 + (6 + (3 * 4 + 6) * 5 * 8 + (2 * 5 * 4 * 8 * 3 * 5))\\n5 + 4\\n4 + 8 * (6 + (3 + 9 + 5 * 4 * 8) * (8 + 3 * 2 * 5) + 9 + (9 + 2 + 6 + 6) + 4) + 5 + (6 * (3 + 3 + 5 * 6 * 9 + 2) + 4 * 4)\\n(9 * (6 + 9 + 4 + 6 * 9)) * 9 * 8 * 7 * 8\\n(4 * 6 * 6 * 7 * 3) + (3 + (3 * 8) + 3 * (8 * 4)) * 2\\n(7 + 2 + 6 + 2) + (4 + 5 * (5 * 2 + 4) * 3) * 5 + 4 * 5 * 8\\n(3 * 3 + 7 + 7 + 8) * (3 * 4 * (6 * 2 * 3 + 6 * 7 * 7) + 5 * 3 * (7 * 9 + 7 + 9 * 2))\\n7 + (8 + 9 * (4 + 5 + 4 + 2 + 2 * 3) * 7 + 8 * (4 * 6 * 7 * 6 * 2)) * 5 + 6 * 3 + (4 + 8)\\n(4 + 3) + ((9 * 7) + 2 * 2 + 4 + 6 + 7) * 6 * 3 * 8\\n7 + (4 * (7 * 9 + 2) + 3) * 2 * 8 + 9 + 2\\n8 * 5 * (7 * 8 + (7 + 6)) * 7\\n(4 * 6 * 9 + 7) + 3 + 6 + 2 * 3\\n2 * 2 * 9 * (4 * (9 * 8 * 4 + 2 + 3))\\n9 + 6 * ((2 * 6 + 6 + 9) + 9 * 5 + (7 * 3 * 9 * 3 + 5 + 6)) + 2 * 4\\n5 * 7 + (9 + 3 * 4)\\n5 * 3 * 3 + (9 + 3 * 9 + 5) * 7 + 8\\n3 + 2 + 7 + (6 + 8 + (2 * 6 + 5) * 2)\\n8 * 8 * (6 * (3 + 6 + 4 * 7 * 8) + 7 + 9 * (3 * 8) + 8) + 3\\n5 + 3 * 9 + 2 * 4 * (8 * 7 * (7 + 6) + (9 + 3 * 8 * 7 * 7 * 3))\\n(4 + 8 * 3 + 6 * 9) * 2 + 4 * (7 * 4) + 7 + 5\\n7 + ((8 + 6 + 7) * 2 * 8 + (9 * 3 + 8) + 2)\\n6 * 9 + (3 + 4 * 5 * (8 * 6) + 4) * 8 * (7 * 7) + 5\\n5 + 7 + 4 + (2 * (5 + 3 * 2 * 5 + 7 * 4))\\n3 + 6 * 9 + (5 + (7 + 3 * 4 * 3 * 5) * 6 * 5 * 2 * (8 * 5 * 5)) + 8\\n((9 + 8 * 2) + 9 * 8 * 3) + ((8 * 7 + 3 + 4 * 7 * 5) * 4 + 3) + 3 + 9 + 2\\n(8 + (6 * 7 + 5 * 7 * 7 + 3) + 9 + 6 * 2) * 3 + 4 + 2 + 4\\n5 + 8 + ((5 * 9 * 7 * 9) * 8 * 8) + (8 * 7 + 8 * (6 + 9 * 3 * 2) * 6 + 6) + 3 * 9\\n5 * ((3 * 5 + 3) * 7 * 3 * 3 * 6) + 4 + 6\\n((2 + 6 * 8 + 7) * (6 + 2 * 2) + (4 * 8 + 9) * 4 + 5) * 4 * 3\\n9 * 9 * 2 * 2\\n2 * (4 * 2 * 8 * 8) * 5 * (7 + 9 + 8)\\n4 + (2 + 5 + 8 + 8) * (9 + 4) * 8 + ((6 * 3 + 5 + 8 * 5 + 2) * (4 + 7 + 9) * 9 + 3 + (4 * 4 * 6 + 2 + 2) * 4) + 7\\n5 + 5 * 9 * (2 * 6 * 2 + 3 * 7 * (3 + 7 * 4 + 5)) + 6 + 8\\n9 * 4 + 2 + (6 * 8 + 5 * 7)\\n(6 * 5 * 7 * 8 + 3) + ((9 + 5 * 5 + 8 * 4 + 3) * 6 + (6 * 4 + 8 * 6 * 3) + 3 + 5 + 5) * 7 * 5 + 7 * 5\";","'use strict';\nvar $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","var aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aFunction(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = toLength(O.length);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar $map = require('../internals/array-iteration').map;\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');\n// FF49- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('map');\n\n// `Array.prototype.map` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":18,\"solutions\":_vm.solutions,\"taskInput\":_vm.taskInput},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"18\" :solutions=\"solutions\" :taskInput=\"taskInput\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      taskInput: require('@/assets/input/Day-18.txt').default,\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      numbers: []\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Remove all spaces, then split into bits\n      this.lines = input.map(i => i.replace(/\\s*/g, '').split(''))\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    evaluate: function (line, part) {\n      // Keep track of what's going on\n      const stack = []\n\n      // Go through the line\n      for (let i = 0; i < line.length; i++) {\n        // Get the current one\n        const el = line[i]\n        let res = el\n\n        // If it's a number, parse it\n        if (!isNaN(+el)) {\n          res = +el\n        }\n\n        if (el === '(') {\n          // Opening brackets mean we use recursion to solve the inner bit\n          const sub = this.evaluate(line.slice(i + 1), part)\n          // Remember the result\n          res = sub.value\n          // Adjust the index by effectively skipping the sub part\n          i += sub.length + 1\n        } else if (el === ')') {\n          // Closing brackets mean we can evaluate the current stack\n          const sub = part === 1 ? this.evaluateBitsPartOne(stack) : this.evaluateBitsPartTwo(stack)\n          // Return the result\n          return {\n            value: sub,\n            length: i\n          }\n        }\n\n        // Push the current part\n        stack.push(res)\n      }\n\n      // Finally, evaluate the whole stack\n      const value = part === 1 ? this.evaluateBitsPartOne(stack) : this.evaluateBitsPartTwo(stack)\n      // Return the result\n      return {\n        value: value,\n        length: line.length\n      }\n    },\n    evaluateBitsPartOne: function (stack) {\n      // Process them in the order they're defined in\n      for (let i = 0; i < stack.length; i++) {\n        if (stack[i] === '+') {\n          // If it's a plus, get previous and next, sum them up and put them back. Asjust the index.\n          stack.splice(i - 1, 3, stack[i - 1] + stack[i + 1])\n          i -= 1\n        }\n        if (stack[i] === '*') {\n          // If it's a star, get previous and next, multiply them up and put them back. Asjust the index.\n          stack.splice(i - 1, 3, stack[i - 1] * stack[i + 1])\n          i -= 1\n        }\n      }\n\n      return stack[0]\n    },\n    evaluateBitsPartTwo: function (stack) {\n      // Additions first\n      for (let i = 0; i < stack.length; i++) {\n        if (stack[i] === '+') {\n          // If it's a plus, get previous and next, sum them up and put them back. Asjust the index.\n          stack.splice(i - 1, 3, stack[i - 1] + stack[i + 1])\n          i -= 1\n        }\n      }\n\n      // Then multiplications\n      for (let j = 0; j < stack.length; j++) {\n        if (stack[j] === '*') {\n          // If it's a star, get previous and next, multiply them up and put them back. Asjust the index.\n          stack.splice(j - 1, 3, stack[j - 1] * stack[j + 1])\n          j -= 1\n        }\n      }\n\n      return stack[0]\n    },\n    solvePartOne: function () {\n      this.solutions.partOne = this.lines.map(l => this.evaluate(l, 1).value).reduce((a, b) => a + b)\n    },\n    solvePartTwo: function () {\n      this.solutions.partTwo = this.lines.map(l => this.evaluate(l, 2).value).reduce((a, b) => a + b)\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day18.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day18.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Day18.vue?vue&type=template&id=7e7b2bd2&\"\nimport script from \"./Day18.vue?vue&type=script&lang=js&\"\nexport * from \"./Day18.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}
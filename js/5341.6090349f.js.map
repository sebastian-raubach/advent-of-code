{"version":3,"file":"js/5341.6090349f.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2022/Day9.vue?e4f9","webpack://advent-of-code/src/components/2022/Day9.vue","webpack://advent-of-code/./src/components/2022/Day9.vue?ee68","webpack://advent-of-code/./src/components/2022/Day9.vue","webpack://advent-of-code/./src/util/color.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":9,\"year\":2022,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":_vm.canvasOne.width,\"height\":_vm.canvasOne.height}})])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partTwo\",\"width\":_vm.canvasTwo.width,\"height\":_vm.canvasTwo.height}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"9\" :year=\"2022\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partOne\" class=\"canvas\" :width=\"canvasOne.width\" :height=\"canvasOne.height\" />\n      </div>\n    </template>\n    <template v-slot:partTwo>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partTwo\" class=\"canvas\" :width=\"canvasTwo.width\" :height=\"canvasTwo.height\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { createMultiColorGradient, VIRIDIS } from '@/util/color'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      dirs: {\n        U: (curr) => { curr.y++ },\n        R: (curr) => { curr.x++ },\n        D: (curr) => { curr.y-- },\n        L: (curr) => { curr.x-- }\n      },\n      canvasOne: {\n        width: 100,\n        height: 100\n      },\n      canvasTwo: {\n        width: 100,\n        height: 100\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Parse the input into instructions\n      const instructions = input.map(i => {\n        const [direction, count] = i.split(' ')\n        return {\n          dir: direction,\n          count: +count\n        }\n      })\n\n      // Solve both parts using different ropes\n      const partOne = this.solve(instructions, Array.from(Array(2).keys()).map(_ => { return { x: 0, y: 0 } }))\n      this.solutions.partOne = partOne.set.size\n      const partTwo = this.solve(instructions, Array.from(Array(10).keys()).map(_ => { return { x: 0, y: 0 } }))\n      this.solutions.partTwo = partTwo.set.size\n\n      this.$nextTick(() => {\n        this.draw('partOne', this.canvasOne, partOne.head, partOne.tail)\n        this.draw('partTwo', this.canvasTwo, partTwo.head, partTwo.tail)\n      })\n    },\n    solve: function (instructions, rope) {\n      // Keep track of positions\n      const positionSet = new Set()\n      positionSet.add('0,0')\n      const headArray = []\n      headArray.push({ x: 0, y: 0 })\n      const tailArray = []\n      tailArray.push({ x: 0, y: 0 })\n\n      instructions.forEach(i => {\n        // For each instruction, loop over the number of moves\n        for (let c = 0; c < i.count; c++) {\n          // Move the head\n          this.dirs[i.dir](rope[0])\n          for (let r = 1; r < rope.length; r++) {\n            // Then move the following segments based on the previous (move in pairs)\n            this.adjust(rope[r - 1], rope[r])\n          }\n\n          // Add new position to set\n          positionSet.add(`${rope[rope.length - 1].x},${rope[rope.length - 1].y}`)\n          headArray.push({ x: rope[0].x, y: rope[0].y })\n          tailArray.push({ x: rope[rope.length - 1].x, y: rope[rope.length - 1].y })\n        }\n      })\n\n      return {\n        set: positionSet,\n        head: headArray,\n        tail: tailArray\n      }\n    },\n    adjust: function (h, t) {\n      // Calculate the delta, signum and absolute difference\n      const dX = h.x - t.x\n      const dY = h.y - t.y\n      const sX = Math.sign(dX)\n      const sY = Math.sign(dY)\n      const aX = Math.abs(dX)\n      const aY = Math.abs(dY)\n\n      // Do we have to do anything?\n      if (aX > 1 && aY === 0) {\n        // Catch up horizontally\n        t.x += sX\n      } else if (aY > 1 && aX === 0) {\n        // Catch up vertically\n        t.y += sY\n      } else if ((aY > 1 && aX > 0) || (aY > 0 && aX > 1)) {\n        // Catch up diagonally\n        t.x += sX\n        t.y += sY\n      }\n    },\n    draw: function (id, dims, head, tail) {\n      // Initialise the canvas\n      const canvas = document.getElementById(id)\n      const ctx = canvas.getContext('2d')\n      ctx.lineWidth = 1\n\n      // Create gradient\n      const tailGradient = createMultiColorGradient(VIRIDIS, tail.length)\n\n      let minX = Number.MAX_VALUE\n      let maxX = -Number.MAX_VALUE\n      let minY = Number.MAX_VALUE\n      let maxY = -Number.MAX_VALUE\n      head.forEach(a => {\n        minX = Math.min(minX, a.x)\n        maxX = Math.max(maxX, a.x)\n        minY = Math.min(minY, a.y)\n        maxY = Math.max(maxY, a.y)\n      })\n      tail.forEach(a => {\n        minX = Math.min(minX, a.x)\n        maxX = Math.max(maxX, a.x)\n        minY = Math.min(minY, a.y)\n        maxY = Math.max(maxY, a.y)\n      })\n\n      const factor = 3\n\n      dims.width = (maxX - minX + 1) * factor\n      dims.height = (maxY - minY + 1) * factor\n\n      this.$nextTick(() => {\n        // Offset for better drawing accuracy\n        ctx.translate(-minX * factor, -minY * factor)\n        ctx.globalAlpha = 0.2\n\n        head.forEach(a => {\n          ctx.fillStyle = '#57606f'\n          ctx.fillRect(a.x * factor, a.y * factor, factor, factor)\n        })\n\n        ctx.globalAlpha = 1.0\n        tail.forEach((a, i) => {\n          ctx.fillStyle = tailGradient[i]\n          ctx.fillRect(a.x * factor, a.y * factor, factor, factor)\n        })\n\n        ctx.fillStyle = 'white'\n        ctx.fillRect(0, 0, factor, factor)\n      })\n    }\n  }\n}\n</script>\n\n<style>\n.canvas-holder {\n  overflow-x: auto;\n  overflow-y: hidden;\n  height: 1000px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day9.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day9.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day9.vue?vue&type=template&id=2b56bec4\"\nimport script from \"./Day9.vue?vue&type=script&lang=js\"\nexport * from \"./Day9.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day9.vue?vue&type=style&index=0&id=2b56bec4&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","const VIRIDIS = ['#440154', '#48186a', '#472d7b', '#424086', '#3b528b', '#33638d', '#2c728e', '#26828e', '#21918c', '#1fa088', '#28ae80', '#3fbc73', '#5ec962', '#84d44b', '#addc30', '#d8e219', '#fde725']\n\n/**\n * Converts a HEX value into an RGB object\n * @param {String} hex The hex color\n */\nconst hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    }\n    : null\n}\n\n/**\n * Converts the given R, G, B values into a HEX color\n * @param {Number} r The red color component\n * @param {Number} g The green color component\n * @param {Number} b The blue color component\n */\nconst rgbToHex = (r, g, b) => {\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n}\n\n/**\n * Creates a linear gradient between the two given colors with the given number of steps\n * @param {String} one The first color in HEX\n * @param {String} two The second color in HEX\n * @param {Number} steps The number of steps between the two colors\n */\nconst createColorGradient = (one, two, steps) => {\n  const oneRgb = hexToRgb(one)\n  const twoRgb = hexToRgb(two)\n\n  if (steps < 2) {\n    return [one]\n  }\n\n  const result = []\n  for (let i = 0; i < steps; i++) {\n    const iNorm = (i / (steps - 1))\n    result.push(rgbToHex(\n      Math.floor(oneRgb.r + iNorm * (twoRgb.r - oneRgb.r)),\n      Math.floor(oneRgb.g + iNorm * (twoRgb.g - oneRgb.g)),\n      Math.floor(oneRgb.b + iNorm * (twoRgb.b - oneRgb.b))\n    ))\n  }\n  return result\n}\n\nconst createMultiColorGradient = (colors, steps) => {\n  if (colors.length > steps) {\n    return colors.slice(0, steps)\n  }\n\n  const sections = colors.length - 1\n\n  let result = []\n\n  for (let i = 0; i < sections - 1; i++) {\n    result = result.concat(createColorGradient(colors[i], colors[i + 1], Math.max(1, Math.floor(steps / sections))))\n  }\n\n  while (result.length < steps) {\n    result.push(colors[colors.length - 1])\n  }\n\n  return result\n}\n\nexport {\n  hexToRgb,\n  rgbToHex,\n  createColorGradient,\n  createMultiColorGradient,\n  VIRIDIS\n}\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","canvasOne","width","height","proxy","canvasTwo","staticRenderFns","components","Day","data","partOne","partTwo","dirs","U","curr","R","D","L","methods","dir","count","x","y","solve","positionSet","headArray","tailArray","instructions","set","head","tail","adjust","t","draw","ctx","minX","maxX","minY","maxY","dims","component","VIRIDIS","hexToRgb","hex","result","exec","r","parseInt","g","b","rgbToHex","toString","slice","createColorGradient","one","two","steps","oneRgb","twoRgb","i","iNorm","push","Math","floor","createMultiColorGradient","colors","length","sections","concat","max"],"sourceRoot":""}
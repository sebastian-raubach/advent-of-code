{"version":3,"file":"js/1591.0961f157.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCMtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAEAC,YAAAA,GAEA,EACAC,QAAAA,CACAR,eAAAA,SAAAA,GACA,mBAEA,oBACA,mBACA,EACAS,WAAAA,SAAAA,GACA,4BAEA,sBAEA,kBAEA,iBAGA,GACAC,SAAAA,EACAC,YAAAA,CACAC,OAAAA,EAAAA,GACAC,MAAAA,EAAAA,GAAAA,MAAAA,MAEAC,YAAAA,MAIA,KAYA,OAVAC,EAAAA,SAAAA,IAEA,KACAC,EAAAA,KAEAA,EAAAA,GAAAA,CACA,IAEAC,EAAAA,YAAAA,EAEA,IAEA,EACAC,aAAAA,WAEA,iDAEA,sBAEA,uBAEA,sBAGA,uCACA,qBACA,EACAC,aAAAA,WAEA,iDAEA,mBAEA,uBAEA,2BACA,2BAGA,iDACA,qBACA,IC1F4P,I,UCOxPC,GAAY,OACd,EACA9B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAemB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2020/Day2.vue?5c81","webpack://advent-of-code/src/components/2020/Day2.vue","webpack://advent-of-code/./src/components/2020/Day2.vue?fcfb","webpack://advent-of-code/./src/components/2020/Day2.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":2,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"2\" :year=\"2020\" :solutions=\"solutions\" @input-changed=\"onInputChanged\" />\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      parsedInput: []\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.parseInput(input)\n\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    parseInput: function (input) {\n      this.parsedInput = input.map(i => {\n        // First, split on \": \" to separate the requirement and the password\n        const parts = i.split(': ')\n        // Split the requirement on \" \" to separate the range and the letter\n        const passwordReq = parts[0].split(' ')\n        // Split the password into its individual letters\n        const letters = parts[1].split('')\n\n        // Construct the result\n        const result = {\n          password: letters,\n          requirement: {\n            letter: passwordReq[1],\n            range: passwordReq[0].split('-')\n          },\n          letterCount: null\n        }\n\n        // Password letter counts\n        const letterMap = {}\n        // For each letter in the password\n        letters.forEach(l => {\n          // Either increase its count or create it\n          if (letterMap[l]) {\n            letterMap[l]++\n          } else {\n            letterMap[l] = 1\n          }\n        })\n        result.letterCount = letterMap\n\n        return result\n      })\n    },\n    solvePartOne: function () {\n      // Map each input row to a boolean value representing if it matches the requirement\n      this.solutions.partOne = this.parsedInput.map(i => {\n        // Get the letter to count mapping\n        const letters = i.letterCount\n        // Get the password requirement letter\n        const letter = i.requirement.letter\n        // And the letter count range\n        const range = i.requirement.range\n\n        // Check if the letter exists in the password and if its count is in range\n        return letters[letter] && letters[letter] >= range[0] && letters[letter] <= range[1]\n      }).filter(p => p).length\n    },\n    solvePartTwo: function () {\n      // Map each input row to a boolean value representing if it matches the requirement\n      this.solutions.partTwo = this.parsedInput.map(i => {\n        // Get the original password\n        const letters = i.password\n        // Get the password requirement letter\n        const letter = i.requirement.letter\n        // Get the indices that should match that letter\n        const firstIndex = i.requirement.range[0] - 1\n        const lastIndex = i.requirement.range[1] - 1\n\n        // Check if EXACTLY ONE of the positions matches the letter\n        return (letters[firstIndex] === letter && letters[lastIndex] !== letter) || (letters[firstIndex] !== letter && letters[lastIndex] === letter)\n      }).filter(p => p).length\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day2.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day2.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day2.vue?vue&type=template&id=2376a742\"\nimport script from \"./Day2.vue?vue&type=script&lang=js\"\nexport * from \"./Day2.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","parsedInput","methods","parseInput","password","requirement","letter","range","letterCount","letters","letterMap","result","solvePartOne","solvePartTwo","component"],"sourceRoot":""}
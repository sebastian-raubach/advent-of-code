{"version":3,"sources":["webpack:///./src/components/2018/Day8.vue?cd5b","webpack:///src/components/2018/Day8.vue","webpack:///./src/components/2018/Day8.vue?4c06","webpack:///./src/components/2018/Day8.vue","webpack:///./node_modules/core-js/modules/es.array.map.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","numbersOne","input","split","map","numbersTwo","concat","solvePartOne","solvePartTwo","parseNodesOne","sum","shift","parseNodesTwo","childCount","children","push","meta","forEach","index","length","component","$","$map","arrayMethodHasSpeciesSupport","arrayMethodUsesToLength","HAS_SPECIES_SUPPORT","USES_TO_LENGTH","target","proto","forced","callbackfn","arguments","undefined"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,mBACpLC,EAAkB,G,gECOtB,GACEC,WAAY,CACVC,IAAJ,cAEEC,KAAM,WACJ,MAAO,CACLN,UAAW,CACTO,QAAS,KACTC,QAAS,QAIfC,QAAS,CACPP,eAAgB,SAApB,GAEMR,KAAKgB,WAAaC,EAAM,GAAGC,MAAM,KAAKC,KAAI,SAAhD,eACMnB,KAAKoB,WAAapB,KAAKgB,WAAWK,SAElCrB,KAAKsB,eACLtB,KAAKuB,gBAEPC,cAAe,WAOb,IALA,IAAN,0BACA,0BAGA,IACA,YAEQC,GAAOzB,KAAKwB,gBAId,IAAK,IAAX,YACQC,GAAOzB,KAAKgB,WAAWU,QAGzB,OAAOD,GAETE,cAAe,WAEb,IAAN,0BACA,0BAGA,IACM,GAAIC,EAAa,EAAG,CAGlB,IADA,IAAR,KACA,YACUC,EAASC,KAAK9B,KAAK2B,iBAIrB,IADA,IAAR,KACA,YACUI,EAAKD,KAAK9B,KAAKoB,WAAWM,SAI5BK,EAAKC,SAAQ,SAArB,GACU,IAAV,MACcC,GAAS,GAAKA,EAAQJ,EAASK,SACjCT,GAAOI,EAASI,YAKpB,IAAK,IAAb,YACUR,GAAOzB,KAAKoB,WAAWM,QAI3B,OAAOD,GAETH,aAAc,WACZtB,KAAKM,UAAUO,QAAUb,KAAKwB,iBAEhCD,aAAc,WACZvB,KAAKM,UAAUQ,QAAUd,KAAK2B,mBCvFyT,I,YCOzVQ,EAAY,eACd,EACArC,EACAW,GACA,EACA,KACA,KACA,MAIa,aAAA0B,E,2CCjBf,IAAIC,EAAI,EAAQ,QACZC,EAAO,EAAQ,QAAgClB,IAC/CmB,EAA+B,EAAQ,QACvCC,EAA0B,EAAQ,QAElCC,EAAsBF,EAA6B,OAEnDG,EAAiBF,EAAwB,OAK7CH,EAAE,CAAEM,OAAQ,QAASC,OAAO,EAAMC,QAASJ,IAAwBC,GAAkB,CACnFtB,IAAK,SAAa0B,GAChB,OAAOR,EAAKrC,KAAM6C,EAAYC,UAAUZ,OAAS,EAAIY,UAAU,QAAKC","file":"js/chunk-33999342.42b6634e.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":8,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"8\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Split into numbers and parse\n      this.numbersOne = input[0].split(' ').map(c => +c)\n      this.numbersTwo = this.numbersOne.concat()\n\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    parseNodesOne: function () {\n      // Get child and meta count\n      const childCount = this.numbersOne.shift()\n      const metaCount = this.numbersOne.shift()\n\n      // Sum over all children\n      let sum = 0\n      for (let child = 0; child < childCount; child++) {\n        // Get their sums\n        sum += this.parseNodesOne()\n      }\n\n      // Add the meta entries for this node\n      for (let meta = 0; meta < metaCount; meta++) {\n        sum += this.numbersOne.shift()\n      }\n\n      return sum\n    },\n    parseNodesTwo: function () {\n      // Get child and meta count\n      const childCount = this.numbersTwo.shift()\n      const metaCount = this.numbersTwo.shift()\n\n      // Sum up\n      let sum = 0\n      if (childCount > 0) {\n        // If there are children, get their sums\n        const children = []\n        for (let child = 0; child < childCount; child++) {\n          children.push(this.parseNodesTwo())\n        }\n        // Get the meta numbers\n        const meta = []\n        for (let i = 0; i < metaCount; i++) {\n          meta.push(this.numbersTwo.shift())\n        }\n\n        // Use the numbers as indices and sum the values up\n        meta.forEach(c => {\n          const index = c - 1\n          if (index >= 0 && index < children.length) {\n            sum += children[index]\n          }\n        })\n      } else {\n        // Otherwise, just sum up the meta entries\n        for (let m = 0; m < metaCount; m++) {\n          sum += this.numbersTwo.shift()\n        }\n      }\n\n      return sum\n    },\n    solvePartOne: function () {\n      this.solutions.partOne = this.parseNodesOne()\n    },\n    solvePartTwo: function () {\n      this.solutions.partTwo = this.parseNodesTwo()\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day8.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day8.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Day8.vue?vue&type=template&id=96241608&\"\nimport script from \"./Day8.vue?vue&type=script&lang=js&\"\nexport * from \"./Day8.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","'use strict';\nvar $ = require('../internals/export');\nvar $map = require('../internals/array-iteration').map;\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');\n// FF49- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('map');\n\n// `Array.prototype.map` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n"],"sourceRoot":""}
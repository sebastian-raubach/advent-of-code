{"version":3,"file":"js/5409.de70dac3.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GACA,sCAEA,sCAEA,oEAEA,gEACA,+DACA,EACAQ,aAAAA,SAAAA,EAAAA,GACA,QACA,IAaA,OAVAC,EAAAA,SAAAA,IAEA,mBAEAC,GAAAA,EAAAA,EAEAC,GAAAA,IAIA,SACA,EACAC,aAAAA,SAAAA,EAAAA,GACA,QACA,IAGA,qBACAH,EAAAA,SAAAA,IACA,mBACAC,GAAAA,EAAAA,EACAC,GAAAA,IAKA,WACA,8BACA,WAEA,qBACAE,GAAAA,EAAAA,EAAAA,GAGAC,EAAAA,KAAAA,EACA,CAGA,kBACA,qBAKA,OAHA,aACAC,EAAAA,IAAAA,KAEA,KACA,8BACA,EACAC,OAAAA,SAAAA,EAAAA,EAAAA,GAEA,mBAEAC,GAAAA,EAAAA,OAGA,oBAEAC,GAAAA,EAAAA,GAAAA,EAAAA,QAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAEA,IC9F6P,I,UCOzPC,GAAY,OACd,EACA7B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAekB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2017/Day10.vue?8277","webpack://advent-of-code/src/components/2017/Day10.vue","webpack://advent-of-code/./src/components/2017/Day10.vue?a812","webpack://advent-of-code/./src/components/2017/Day10.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":10,\"year\":2017,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"10\" :year=\"2017\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const list = Array.from(Array(256).keys())\n      // Split into numbers separated by commas for part one\n      const lengths = input[0].split(',').map(l => +l.trim())\n      // Split into individual characters, map to ASCII, then add the five extra numbers\n      const bitLenths = input[0].split('').map(l => l.charCodeAt(0)).concat([17, 31, 73, 47, 23])\n\n      this.solutions.partOne = this.solvePartOne(list.concat(), lengths.concat())\n      this.solutions.partTwo = this.solvePartTwo(list.concat(), bitLenths.concat())\n    },\n    solvePartOne: function (list, lengths) {\n      let startIndex = 0\n      let skipSize = 0\n\n      // For each length\n      lengths.forEach(l => {\n        // Invert the section\n        this.invert(list, startIndex, l)\n        // Adjust the start index\n        startIndex += l + skipSize\n        // Increase the skip size\n        skipSize++\n      })\n\n      // Result is first and second entry multiplied\n      return list[0] * list[1]\n    },\n    solvePartTwo: function (list, lengths) {\n      let startIndex = 0\n      let skipSize = 0\n\n      // Run it 64 times\n      for (let round = 0; round < 64; round++) {\n        lengths.forEach(l => {\n          this.invert(list, startIndex, l)\n          startIndex += l + skipSize\n          skipSize++\n        })\n      }\n\n      // XOR 16 blocks of 16 numbers together\n      const xors = []\n      for (let i = 0; i < list.length; i = i + 16) {\n        let value = list[i]\n\n        for (let j = 1; j < 16; j++) {\n          value = value ^ list[i + j]\n        }\n\n        xors.push(value)\n      }\n\n      // The result is each part converted to hexadecimal, the concatenated together\n      return xors.map(x => {\n        let s = x.toString(16)\n        // Make sure every part is 2 letters long\n        if (s.length < 2) {\n          s = `0${s}`\n        }\n        return s\n      }).reduce((a, b) => `${a}${b}`, '')\n    },\n    invert: function (list, start, length) {\n      // Take a copy of the original\n      const listCopy = list.concat()\n      // Get the start index (mind the modulo)\n      start = start % list.length\n\n      // Then iterate forwards\n      for (let i = 0; i < length; i++) {\n        // And set the index (including modulo) to the inverted bit (including modulo)\n        list[(start + i) % list.length] = listCopy[(start + length - i - 1) % list.length]\n      }\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day10.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day10.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day10.vue?vue&type=template&id=89599f38\"\nimport script from \"./Day10.vue?vue&type=script&lang=js\"\nexport * from \"./Day10.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","solvePartOne","lengths","startIndex","skipSize","solvePartTwo","value","xors","s","invert","start","list","component"],"sourceRoot":""}
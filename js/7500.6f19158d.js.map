{"version":3,"file":"js/7500.6f19158d.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GAEA,mBAEA,eACAQ,EAAAA,SAAAA,IAEA,sCAEA,+BAEA,+BAGA,kBACAC,WACAC,SAIA,+BACA,gCAEA,oBAEA,kBAEA,sCAGA,mBAEA,CACA,IAEA,oBACA,mBACA,EACAC,aAAAA,WAEA,QACA,4BACA,KACAC,GACA,IAGA,wBACA,EACAC,aAAAA,WAEA,sCAEA,SACA,uBAEAC,EAAAA,IAAAA,IAAAA,EAAAA,EAAAA,SAAAA,GAAAA,EAAAA,EAAAA,SAAAA,GAAAA,EAAAA,KAAAA,GAAAA,IACA,uDAEA,oBAGA,wBAEAC,GAAAA,EACA,OACA,CACA,CAGA,KAGA,YADA,2BAGA,CACA,ICjG4P,I,UCOxPC,GAAY,OACd,EACA1B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAee,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2018/Day3.vue?5b35","webpack://advent-of-code/src/components/2018/Day3.vue","webpack://advent-of-code/./src/components/2018/Day3.vue?9567","webpack://advent-of-code/./src/components/2018/Day3.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":3,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"3\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Keep track of the grid cells and their occurances\n      this.cells = new Map()\n      // Keep track of the claims\n      this.claims = []\n      input.forEach(i => {\n        // Get the claim definition\n        const info = i.split(' @ ')[1].split(': ')\n        // Parse the position\n        const position = info[0].split(',').map(c => +c)\n        // Parse the size\n        const size = info[1].split('x').map(c => +c)\n\n        // Remember the claim\n        this.claims.push({\n          position,\n          size\n        })\n\n        // Iterate through all cells within the claim\n        for (let x = position[0]; x < position[0] + size[0]; x++) {\n          for (let y = position[1]; y < position[1] + size[1]; y++) {\n            // Construct a key\n            const key = `${x},${y}`\n\n            if (this.cells.has(key)) {\n              // If it exists, increase its count\n              this.cells.set(key, this.cells.get(key) + 1)\n            } else {\n              // Else initialize it with 1\n              this.cells.set(key, 1)\n            }\n          }\n        }\n      })\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    solvePartOne: function () {\n      // Count the number of cells that occur more than once\n      let counter = 0\n      this.cells.forEach((value, key) => {\n        if (value > 1) {\n          counter++\n        }\n      })\n      // Which is the solution for part one\n      this.solutions.partOne = counter\n    },\n    solvePartTwo: function () {\n      // Iterate through all claims\n      for (let index = 0; index < this.claims.length; index++) {\n        // Check if all cells within the claim only occur once\n        let allOne = true\n        const c = this.claims[index]\n        // Iterate through all cells\n        outer:for (let x = c.position[0]; x < c.position[0] + c.size[0]; x++) {\n          for (let y = c.position[1]; y < c.position[1] + c.size[1]; y++) {\n            // Construct the key\n            const key = `${x},${y}`\n\n            // Check if it occurs more than once\n            if (this.cells.get(key) > 1) {\n              // In which case, continue with the next claim\n              allOne = false\n              break outer\n            }\n          }\n        }\n\n        if (allOne) {\n          // We found the claim that occupies a unique space\n          this.solutions.partTwo = index + 1\n          return\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day3.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day3.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day3.vue?vue&type=template&id=4507b041\"\nimport script from \"./Day3.vue?vue&type=script&lang=js\"\nexport * from \"./Day3.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","input","position","size","solvePartOne","counter","solvePartTwo","outer","allOne","component"],"sourceRoot":""}
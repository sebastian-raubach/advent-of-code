{"version":3,"file":"js/5598.f5742959.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GACA,wBAEA,aACA,uBACA,WACA,uBAEA,eACA,cACAQ,GAAAA,KAAAA,aACAA,GAAAA,EACA,yBACAA,EAAAA,EAAAA,OAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,GACAC,EAAAA,KAAAA,EAAAA,EACA,CACA,iBACA,CAEA,oBACA,mBACA,EACAC,aAAAA,WACA,QACA,OACA,sBACA,uBAEA,0DACAC,GAAAA,KAAAA,KAAAA,EAAAA,GAAAA,GAAAA,KAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GACAA,GAAAA,KAAAA,KAAAA,EAAAA,GAAAA,GAAAA,KAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAEA,MAEAC,EAAAA,EACAC,EAAAA,CACAC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,GAGA,CAGA,sCACA,EACAC,aAAAA,WAEA,OACAL,KAAAA,OAAAA,UACAE,OAAAA,KACAI,KAAAA,GAIA,sBACA,uBAEA,sBAEA,UACAC,EAAAA,CACAP,IAAAA,EACAE,OAAAA,CAAAC,EAAAA,EAAAA,EAAAC,EAAAA,EAAAA,GACAE,KAAAA,IAKA,sBACA,UAGA,sBAEA,oBACAN,GAAAA,KAAAA,KAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAGA,oBACAA,GAAAA,KAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAGAA,GAAAA,KAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAGA,UACAO,EAAAA,CACAP,IAAAA,EACAE,OAAAA,CAAAC,EAAAA,EAAAA,EAAAC,EAAAA,EAAAA,GACAE,KAAAA,GAGA,CACA,CAGA,8DACA,ICtH6P,I,UCOzPE,GAAY,OACd,EACA7B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAekB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2018/Day11.vue?ce9a","webpack://advent-of-code/src/components/2018/Day11.vue","webpack://advent-of-code/./src/components/2018/Day11.vue?be43","webpack://advent-of-code/./src/components/2018/Day11.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":11,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"11\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.serialNumber = +input[0]\n\n      this.grid = []\n      for (let y = 0; y < 300; y++) {\n        const row = []\n        for (let x = 0; x < 300; x++) {\n          // Calculate the grid power value\n          const rackId = (x + 1) + 10\n          let powerLevel = rackId * (y + 1)\n          powerLevel += this.serialNumber\n          powerLevel *= rackId\n          const digits = `${powerLevel}`.split('')\n          powerLevel = digits.length < 3 ? 0 : +(digits[digits.length - 3])\n          row.push(powerLevel - 5)\n        }\n        this.grid.push(row)\n      }\n\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    solvePartOne: function () {\n      let maxSum = 0\n      let coords = null\n      for (let y = 0; y < 297; y++) {\n        for (let x = 0; x < 297; x++) {\n          // Sum up all the grid cells\n          let sum = this.grid[y][x] + this.grid[y][x + 1] + this.grid[y][x + 2]\n          sum += this.grid[y + 1][x] + this.grid[y + 1][x + 1] + this.grid[y + 1][x + 2]\n          sum += this.grid[y + 2][x] + this.grid[y + 2][x + 1] + this.grid[y + 2][x + 2]\n\n          if (sum > maxSum) {\n            // Keep the new maximum and the coordinates\n            maxSum = sum\n            coords = {\n              x: x + 1,\n              y: y + 1\n            }\n          }\n        }\n      }\n\n      this.solutions.partOne = `${coords.x},${coords.y}`\n    },\n    solvePartTwo: function () {\n      // Find the maximum configuration\n      let max = {\n        sum: -Number.MAX_VALUE,\n        coords: null,\n        size: 1\n      }\n\n      // Iterate over all positions\n      for (let y = 0; y < 300; y++) {\n        for (let x = 0; x < 300; x++) {\n          // Start the sum with the top left value\n          let sum = this.grid[y][x]\n\n          if (sum > max.sum) {\n            max = {\n              sum: sum,\n              coords: { x: x + 1, y: y + 1 },\n              size: 1\n            }\n          }\n\n          // Determine how many steps we can take in either direction\n          const maxCoord = Math.max(x, y)\n          const maxSize = 300 - maxCoord - 1\n\n          // Increment the area size\n          for (let size = 2; size <= maxSize; size++) {\n            // Add the vertical edge to the sum\n            for (let h = 0; h < size; h++) {\n              sum += this.grid[y + h][x + size - 1]\n            }\n            // Add the horizontal edge to the sum\n            for (let w = 0; w < size; w++) {\n              sum += this.grid[y + size - 1][x + w]\n            }\n            // Substract the bottom right corner as it's been counted twice\n            sum -= this.grid[y + size - 1][x + size - 1]\n\n            // Keep if new maximum\n            if (sum > max.sum) {\n              max = {\n                sum: sum,\n                coords: { x: x + 1, y: y + 1 },\n                size: size\n              }\n            }\n          }\n        }\n      }\n\n      this.solutions.partTwo = `${max.coords.x},${max.coords.y},${max.size}`\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day11.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day11.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day11.vue?vue&type=template&id=0d3669a4\"\nimport script from \"./Day11.vue?vue&type=script&lang=js\"\nexport * from \"./Day11.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","powerLevel","row","solvePartOne","sum","maxSum","coords","x","y","solvePartTwo","size","max","component"],"sourceRoot":""}
{"version":3,"file":"js/1222.64c26d5b.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2015/Day6.vue?daa5","webpack://advent-of-code/src/components/2015/Day6.vue","webpack://advent-of-code/./src/components/2015/Day6.vue?e49e","webpack://advent-of-code/./src/components/2015/Day6.vue","webpack://advent-of-code/./src/util/color.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":6,\"year\":2015,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":\"1000\",\"height\":\"1000\"}})])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partTwo\",\"width\":\"1000\",\"height\":\"1000\"}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"6\" :year=\"2015\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partOne\" class=\"canvas\" width=\"1000\" height=\"1000\" />\n      </div>\n    </template>\n    <template v-slot:partTwo>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partTwo\" class=\"canvas\" width=\"1000\" height=\"1000\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport { createColorGradient } from '@/util/color'\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      partOne: {\n        'turn off': (grid, x, y) => { grid[y][x] = 0 },\n        toggle: (grid, x, y) => { grid[y][x] = 1 - grid[y][x] },\n        'turn on': (grid, x, y) => { grid[y][x] = 1 }\n      },\n      partTwo: {\n        'turn off': (grid, x, y) => { grid[y][x] = Math.max(0, grid[y][x] - 1) },\n        toggle: (grid, x, y) => { grid[y][x] += 2 },\n        'turn on': (grid, x, y) => { grid[y][x]++ }\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Create the grid. Use an actual 2d array instead of a Map here, because the size is fixed.\n      const gridOne = new Array(1000).fill(0).map(() => new Array(1000).fill(0))\n      const gridTwo = new Array(1000).fill(0).map(() => new Array(1000).fill(0))\n\n      const pattern = /(?<method>.+) (?<blX>\\d+),(?<blY>\\d+) through (?<trX>\\d+),(?<trY>\\d+)/\n      input.forEach(i => {\n        const matched = i.match(pattern).groups\n\n        for (let y = +matched.blY; y <= +matched.trY; y++) {\n          for (let x = +matched.blX; x <= +matched.trX; x++) {\n            this.partOne[matched.method](gridOne, x, y)\n            this.partTwo[matched.method](gridTwo, x, y)\n          }\n        }\n      })\n\n      this.solutions.partOne = gridOne.map(r => r.filter(c => c).length).reduce((a, b) => a + b)\n      this.solutions.partTwo = gridTwo.map(r => r.reduce((a, b) => a + b)).reduce((a, b) => a + b)\n\n      this.$nextTick(() => {\n        this.draw('partOne', gridOne)\n        this.draw('partTwo', gridTwo)\n      })\n    },\n    draw: function (id, data) {\n      // Initialise the canvas\n      const canvas = document.getElementById(id)\n      const ctx = canvas.getContext('2d')\n\n      let max = 0\n      for (let y = 0; y < data.length; y++) {\n        for (let x = 0; x < data[y].length; x++) {\n          max = Math.max(max, data[y][x])\n        }\n      }\n\n      const gradient = createColorGradient('#006266', '#C4E538', max + 1)\n\n      for (let y = 0; y < data.length; y++) {\n        for (let x = 0; x < data[y].length; x++) {\n          ctx.fillStyle = data[y][x] === 0 ? 'black' : gradient[data[y][x]]\n          ctx.fillRect(x, y, 1, 1)\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.canvas-holder {\n  overflow-x: auto;\n  overflow-y: hidden;\n  height: 1000px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day6.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day6.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day6.vue?vue&type=template&id=930986b4\"\nimport script from \"./Day6.vue?vue&type=script&lang=js\"\nexport * from \"./Day6.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day6.vue?vue&type=style&index=0&id=930986b4&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","const VIRIDIS = ['#440154', '#48186a', '#472d7b', '#424086', '#3b528b', '#33638d', '#2c728e', '#26828e', '#21918c', '#1fa088', '#28ae80', '#3fbc73', '#5ec962', '#84d44b', '#addc30', '#d8e219', '#fde725']\n\n/**\n * Converts a HEX value into an RGB object\n * @param {String} hex The hex color\n */\nconst hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    }\n    : null\n}\n\n/**\n * Converts the given R, G, B values into a HEX color\n * @param {Number} r The red color component\n * @param {Number} g The green color component\n * @param {Number} b The blue color component\n */\nconst rgbToHex = (r, g, b) => {\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n}\n\n/**\n * Creates a linear gradient between the two given colors with the given number of steps\n * @param {String} one The first color in HEX\n * @param {String} two The second color in HEX\n * @param {Number} steps The number of steps between the two colors\n */\nconst createColorGradient = (one, two, steps) => {\n  const oneRgb = hexToRgb(one)\n  const twoRgb = hexToRgb(two)\n\n  if (steps < 2) {\n    return [one]\n  }\n\n  const result = []\n  for (let i = 0; i < steps; i++) {\n    const iNorm = (i / (steps - 1))\n    result.push(rgbToHex(\n      Math.floor(oneRgb.r + iNorm * (twoRgb.r - oneRgb.r)),\n      Math.floor(oneRgb.g + iNorm * (twoRgb.g - oneRgb.g)),\n      Math.floor(oneRgb.b + iNorm * (twoRgb.b - oneRgb.b))\n    ))\n  }\n  return result\n}\n\nconst createMultiColorGradient = (colors, steps) => {\n  if (colors.length > steps) {\n    return colors.slice(0, steps)\n  }\n\n  const sections = colors.length - 1\n\n  let result = []\n\n  for (let i = 0; i < sections - 1; i++) {\n    result = result.concat(createColorGradient(colors[i], colors[i + 1], Math.max(1, Math.floor(steps / sections))))\n  }\n\n  while (result.length < steps) {\n    result.push(colors[colors.length - 1])\n  }\n\n  return result\n}\n\nexport {\n  hexToRgb,\n  rgbToHex,\n  createColorGradient,\n  createMultiColorGradient,\n  VIRIDIS\n}\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","proxy","staticRenderFns","components","Day","data","partOne","partTwo","grid","toggle","methods","input","draw","max","ctx","component","VIRIDIS","hexToRgb","hex","result","exec","r","parseInt","g","b","rgbToHex","toString","slice","createColorGradient","one","two","steps","oneRgb","twoRgb","i","iNorm","push","Math","floor","createMultiColorGradient","colors","length","sections","concat"],"sourceRoot":""}
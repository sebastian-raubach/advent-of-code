{"version":3,"file":"js/8611.3b77dfdb.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2021/Day9.vue?9177","webpack://advent-of-code/src/components/2021/Day9.vue","webpack://advent-of-code/./src/components/2021/Day9.vue?5922","webpack://advent-of-code/./src/components/2021/Day9.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":9,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{attrs:{\"id\":\"partOne\"}})]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('div',{attrs:{\"id\":\"partTwo\"}})]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"9\" :year=\"2021\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div id=\"partOne\" />\n    </template>\n    <template v-slot:partTwo>\n      <div id=\"partTwo\" />\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { mapGetters } from 'vuex'\n\nexport default {\n  components: {\n    Day\n  },\n  computed: {\n    ...mapGetters([\n      'storeDarkMode'\n    ]),\n    layout: function () {\n      return {\n        height: 700,\n        xaxis: {\n          title: { text: 'X', font: { color: this.storeDarkMode ? 'white' : 'black' } },\n          tickfont: { color: this.storeDarkMode ? 'white' : 'black' },\n          gridcolor: this.storeDarkMode ? '#111111' : '#eeeeee'\n        },\n        yaxis: {\n          title: { text: 'Y', font: { color: this.storeDarkMode ? 'white' : 'black' } },\n          tickfont: { color: this.storeDarkMode ? 'white' : 'black' },\n          gridcolor: this.storeDarkMode ? '#111111' : '#eeeeee',\n          scaleanchor: 'x'\n        },\n        paper_bgcolor: 'transparent',\n        plot_bgcolor: 'transparent'\n      }\n    }\n  },\n  watch: {\n    storeDarkMode: function () {\n      this.plotGrid()\n      this.plotBasins()\n    }\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      pointToBasin: {}\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Parse the input into a number 2d array\n      const grid = input.map(r => r.split('').map(c => +c))\n\n      // Keep track of the basins\n      const basins = []\n      for (let y = 0; y < grid.length; y++) {\n        for (let x = 0; x < grid[y].length; x++) {\n          // Find neighbors of the current grid cell\n          const neighbors = this.neighbors(grid, x, y)\n\n          // Check if the current point is smaller than all neighbors\n          if (grid[y][x] < Math.min(...neighbors.map(n => grid[n.y][n.x]))) {\n            basins.push({\n              x: x,\n              y: y\n            })\n          }\n        }\n      }\n\n      // Set solution one as the sum of all basin centers (+1) and plot\n      this.setTraceOne(grid)\n      this.solutions.partOne = basins.map(b => grid[b.y][b.x] + 1).reduce((a, b) => a + b)\n      this.plotGrid()\n\n      // Get the size of each basin using DFS, then sort descending\n      const basinSizes = basins.map((b, i) => this.calcBasinSize(grid, b, [], i))\n      const basinSizesSorted = basinSizes.concat().sort((a, b) => b - a)\n      // Use the largest three to calculate the solution, then plot\n      this.solutions.partTwo = basinSizesSorted[0] * basinSizesSorted[1] * basinSizesSorted[2]\n      this.setTraceTwo(grid, basinSizes)\n      this.plotBasins()\n    },\n    setTraceOne: function (grid) {\n      // Plot part one\n      const trace = {\n        x: Array.from(Array(grid[0].length)).map((_, i) => i + 1),\n        y: Array.from(Array(grid.length)).map((_, i) => i + 1),\n        z: grid,\n        type: 'heatmap',\n        colorscale: [[0, '#1B1464'], [1, '#12CBC4']]\n      }\n      Object.freeze(trace)\n      this.tracesOne = [trace]\n    },\n    setTraceTwo: function (grid, basinSizes) {\n      // Plot part two\n      const trace = {\n        x: Array.from(Array(grid[0].length)).map((_, i) => i + 1),\n        y: Array.from(Array(grid.length)).map((_, i) => i + 1),\n        z: grid.map((r, ri) => r.map((c, ci) => {\n          if (c === 9) {\n            return null\n          } else {\n            const basin = this.pointToBasin[`${ci},${ri}`]\n\n            return basinSizes[basin]\n          }\n        })),\n        type: 'heatmap',\n        colorscale: [[0, '#1B1464'], [1, '#12CBC4']]\n      }\n      Object.freeze(trace)\n      this.tracesTwo = [trace]\n    },\n    calcBasinSize: function (grid, curr, visited, index) {\n      // Remember we've been here before\n      visited.push(`${curr.x},${curr.y}`)\n\n      // Remember for plotting\n      this.pointToBasin[`${curr.x},${curr.y}`] = index\n\n      // Get the valid neighbors (the ones with strictly larger value and not visited before)\n      const validNeighbors = this.neighbors(grid, curr.x, curr.y).filter(n => {\n        if (visited.indexOf(`${n.x},${n.y}`) !== -1) {\n          // Check if it's already been visited\n          return false\n        } else {\n          // Check if it's got a larger value but it's not a 9\n          return grid[n.y][n.x] > grid[curr.y][curr.x] && grid[n.y][n.x] < 9\n        }\n      })\n\n      // Count the node itself\n      let counter = 1\n\n      // Then sum up the sizes of their neighbors\n      validNeighbors.forEach(n => {\n        // We have to check this here again, because we may have visited more nodes in a previous DFS branch from this point\n        if (visited.indexOf(`${n.x},${n.y}`) === -1) {\n          // Increase the basin size\n          counter += this.calcBasinSize(grid, n, visited, index)\n        }\n      })\n\n      return counter\n    },\n    neighbors: function (grid, x, y) {\n      const result = []\n\n      if (x > 0) {\n        // Go left\n        result.push({ x: x - 1, y: y })\n      }\n      if (x < grid[y].length - 1) {\n        // Go right\n        result.push({ x: x + 1, y: y })\n      }\n      if (y > 0) {\n        // Go up\n        result.push({ x: x, y: y - 1 })\n      }\n      if (y < grid.length - 1) {\n        // Go down\n        result.push({ x: x, y: y + 1 })\n      }\n\n      return result\n    },\n    plotGrid: function () {\n      this.$nextTick(() => {\n        this.$plotly.newPlot('partOne', this.tracesOne, this.layout, {\n          responsive: true,\n          displaylogo: false\n        })\n      })\n    },\n    plotBasins: function () {\n      this.$nextTick(() => {\n        this.$plotly.newPlot('partTwo', this.tracesTwo, this.layout, {\n          responsive: true,\n          displaylogo: false\n        })\n      })\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day9.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day9.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day9.vue?vue&type=template&id=8865598a\"\nimport script from \"./Day9.vue?vue&type=script&lang=js\"\nexport * from \"./Day9.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","proxy","staticRenderFns","components","Day","computed","layout","height","xaxis","title","text","font","color","tickfont","gridcolor","yaxis","scaleanchor","paper_bgcolor","plot_bgcolor","watch","storeDarkMode","data","partOne","partTwo","pointToBasin","methods","basins","x","y","setTraceOne","z","type","colorscale","Object","setTraceTwo","calcBasinSize","visited","validNeighbors","counter","neighbors","result","plotGrid","responsive","displaylogo","plotBasins","component"],"sourceRoot":""}
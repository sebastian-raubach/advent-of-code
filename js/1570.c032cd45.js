"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[1570],{93658:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day18)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2017/Day18.vue?vue&type=template&id=40fe69c3&scoped=true\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":18,\"year\":2017,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(36100);\n;// CONCATENATED MODULE: ./src/util/DuetProgram.js\nclass DuetProgram {\n  constructor(id, inst) {\n    this.$id = id;\n    this.$inst = inst;\n    this.init();\n  }\n  setLink(link) {\n    this.$link = link;\n  }\n  isStuck() {\n    return this.$queue.length < 1 || this.$finished;\n  }\n  isFinished() {\n    return this.$finished;\n  }\n  getSendCount() {\n    return this.$sendCount;\n  }\n  init() {\n    // Keep track of the index\n    this.$index = 0;\n    // Keep track of the registers\n    this.$registers = {\n      p: this.$id\n    };\n    // Keep track of the values that have been sent to us\n    this.$queue = [];\n    // Mark if we're stuck\n    this.$stuck = false;\n    // Mark if we're finished\n    this.$finished = false;\n    // Count the number of times we sent a value\n    this.$sendCount = 0;\n    this.$instructions = {\n      snd: (registers, x, _) => {\n        // Resolve the value to send\n        const value = this.resolve(registers, x);\n\n        // Increase the counter\n        this.$sendCount++;\n        if (this.$link) {\n          // If we've got a linked program, send the value\n          this.$link.receive(value);\n        } else {\n          // Else, set our queue to JUST this value\n          this.$queue = [value];\n        }\n      },\n      set: (registers, x, y) => {\n        registers[x] = this.resolve(registers, y);\n      },\n      add: (registers, x, y) => {\n        registers[x] += this.resolve(registers, y);\n      },\n      mul: (registers, x, y) => {\n        registers[x] *= this.resolve(registers, y);\n      },\n      mod: (registers, x, y) => {\n        registers[x] %= this.resolve(registers, y);\n      },\n      rcv: (registers, x, _) => {\n        if (this.$queue.length > 0) {\n          // If there are values, get the oldest one\n          registers[x] = this.$queue.shift();\n\n          // We're no longer stuck\n          this.$stuck = false;\n          // Return it\n          return registers[x];\n        } else {\n          // We're stuck\n          this.$stuck = true;\n          return null;\n        }\n      },\n      jgz: (registers, x, y) => this.resolve(registers, x) > 0 ? this.resolve(registers, y) : 0\n    };\n  }\n  resolve(registers, a) {\n    if (isNaN(a)) {\n      if (a in registers) {\n        return registers[a];\n      } else {\n        registers[a] = 0;\n        return 0;\n      }\n    } else {\n      return +a;\n    }\n  }\n  receive(value) {\n    this.$queue.push(value);\n  }\n  run() {\n    while (true) {\n      const i = this.$inst[this.$index];\n      // Ensure the register exists\n      if (isNaN(i.reg) && !(i.reg in this.$registers)) {\n        this.$registers[i.reg] = 0;\n      }\n\n      // Follow the instruction\n      const result = this.$instructions[i.inst](this.$registers, i.reg, i.value);\n      if (this.$stuck) {\n        return null;\n      }\n\n      // If we received a value, set it as the result\n      if (i.inst === 'rcv' && result !== null) {\n        this.$index++;\n        return result;\n      }\n      if (i.inst === 'jgz' && result !== 0) {\n        // If we need to jump, do it\n        this.$index += result;\n      } else {\n        // Otherwise increment\n        this.$index++;\n        if (this.$index >= this.$inst.length) {\n          this.$finished = true;\n          return;\n        }\n      }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2017/Day18.vue?vue&type=script&lang=js\n//\n//\n//\n//\n\n\n\n/* harmony default export */ const Day18vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Parse the input\n      const inst = input.map(i => {\n        const parts = i.split(' ');\n        return {\n          inst: parts[0],\n          reg: parts[1],\n          value: parts.length > 2 ? parts[2] : null\n        };\n      });\n      let p1 = new DuetProgram(0, inst);\n      this.solutions.partOne = p1.run();\n      p1 = new DuetProgram(0, inst);\n      const p2 = new DuetProgram(1, inst);\n      p1.setLink(p2);\n      p2.setLink(p1);\n      do {\n        // While p1 isn't finished, let it run\n        if (!p1.isFinished()) {\n          p1.run();\n        }\n        // While p1 isn't finished, let it run\n        if (!p2.isFinished()) {\n          p2.run();\n        }\n      } while (!p1.isStuck() || !p2.isStuck());\n      this.solutions.partTwo = p2.getSendCount();\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2017/Day18.vue?vue&type=script&lang=js\n /* harmony default export */ const _2017_Day18vue_type_script_lang_js = (Day18vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2017/Day18.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2017_Day18vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"40fe69c3\",\n  null\n  \n)\n\n/* harmony default export */ const Day18 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///93658\n")}}]);
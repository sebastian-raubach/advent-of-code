{"version":3,"file":"js/360.a4a91a22.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2018/Day22.vue?b046","webpack://advent-of-code/src/components/2018/Day22.vue","webpack://advent-of-code/./src/components/2018/Day22.vue?ae52","webpack://advent-of-code/./src/components/2018/Day22.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":22,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('pre',{staticClass:\"day-22-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridOne)}}),_vm._v(\"\\n      \")])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('pre',{staticClass:\"day-22-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridTwo)}}),_vm._v(\"\\n      \")])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"22\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <pre class=\"day-22-code border\">\n<code v-html=\"gridOne\" />\n      </pre>\n    </template>\n    <template v-slot:partTwo>\n      <pre class=\"day-22-code border\">\n<code v-html=\"gridTwo\" />\n      </pre>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nconst ROCKY = '.'\nconst WET = '='\nconst NARROW = '|'\n\nconst TORCH = 0\nconst GEAR = 1\nconst NONE = 2\nconst BOTH = 3\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      gridOne: null,\n      risk: {\n        '.': 0,\n        '=': 1,\n        '|': 2\n      },\n      types: [ROCKY, WET, NARROW],\n      directions: [[1, 0], [0, 1], [-1, 0], [0, -1]],\n      validGear: {\n        '.': [GEAR, TORCH, BOTH],\n        '=': [GEAR, NONE],\n        '|': [TORCH, NONE]\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.depth = +input[0].split(' ')[1]\n      this.target = input[1].split(' ')[1].split(',').map(c => +c)\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    getGeoIndex: function (grid, x, y) {\n      if ((x === 0 && y === 0) || (x === this.target[0] && y === this.target[1])) {\n        // Top left and target have an index of 0\n        return 0\n      } else if (y === 0) {\n        // Top row uses x index\n        return x * 16807\n      } else if (x === 0) {\n        // First column uses y index\n        return y * 48271\n      } else {\n        // Everything else uses the index based on the cell to the top and the one to the left\n        return grid[y][x - 1].erosionLevel * grid[y - 1][x].erosionLevel\n      }\n    },\n    solvePartOne: function () {\n      this.grid = []\n      // Factor 2 was working for me, but just in case I increased this to 3\n      const sizeFactor = 3\n\n      // Create the grid\n      for (let y = 0; y <= this.target[1] + 50; y++) {\n        // Add a  row\n        this.grid.push(Array.from(Array(this.target[0] * sizeFactor + 1).keys()).map(i => { return { geoIndex: null, erosionLevel: null, type: null } }))\n        for (let x = 0; x <= this.target[0] * sizeFactor; x++) {\n          // Calculate the index, erosion level and type\n          this.grid[y][x].geoIndex = this.getGeoIndex(this.grid, x, y)\n          this.grid[y][x].erosionLevel = (this.grid[y][x].geoIndex + this.depth) % 20183\n          this.grid[y][x].type = this.types[this.grid[y][x].erosionLevel % 3]\n        }\n      }\n\n      // Print the grid\n      this.gridOne = this.print(this.grid.map(r => r.map(c => c.type)))\n      // Sum up all risks within the rectangle\n      this.solutions.partOne = this.grid.slice(0, this.target[1] + 1).map(r => r.slice(0, this.target[0] + 1).map(c => this.risk[c.type]).reduce((a, b) => a + b)).reduce((a, b) => a + b)\n    },\n    solvePartTwo: function () {\n      // Start location\n      const start = {\n        tool: TORCH,\n        x: 0,\n        y: 0,\n        type: ROCKY,\n        time: 0,\n        path: []\n      }\n\n      // Priority queue\n      const configs = [start]\n      // Keep track of best times for x,y,tool combinations\n      const bestTime = new Map()\n      bestTime.set(`${start.x},${start.y},${start.tool}`, 0)\n\n      // Do a breadth-first-search\n      while (true) {\n        // Sort them to get the one with the fewest steps\n        configs.sort((a, b) => a.time - b.time)\n\n        // Get the one with the lowest time\n        const current = configs.shift()\n\n        // If we get to the target, output the time\n        if (current.x === this.target[0] && current.y === this.target[1]) {\n          this.gridTwo = this.print(this.grid.map(r => r.map(c => c.type)), current.path)\n          this.solutions.partTwo = current.time\n          return\n        }\n\n        this.directions.forEach(d => {\n          // Take a copy and adjust the coordinates\n          const next = JSON.parse(JSON.stringify(current))\n          next.x += d[0]\n          next.y += d[1]\n\n          // If we're outside the grid, return\n          if (next.y < 0 || next.x < 0 || next.y >= this.grid.length || next.x >= this.grid[next.y].length) {\n            return\n          }\n\n          // Get the type from the grid\n          next.type = this.grid[next.y][next.x].type\n          // Adjust the configuration (time + tool)\n          this.adjustConfig(current, next)\n\n          const bt = bestTime.get(`${next.x},${next.y},${next.tool}`)\n          // If there's already a faster way to get here, return\n          if (bt !== undefined && bt <= next.time) {\n            return\n          }\n\n          // If the next one is the target, but we're using the wrong tool, add 7 to the time\n          if (next.x === this.target[0] && next.y === this.target[1]) {\n            if (next.tool !== TORCH) {\n              next.time += 7\n            }\n          }\n\n          // Remember the path\n          next.path.push({\n            x: next.x,\n            y: next.y\n          })\n          // Add the new config\n          configs.push(next)\n          // Remember the time\n          bestTime.set(`${next.x},${next.y},${next.tool}`, next.time)\n        })\n      }\n    },\n    adjustConfig: function (current, next) {\n      if (current.type === next.type) {\n        // Just increase the time by 1\n        next.time++\n      } else {\n        // Get the intersection of gear, because we have to both switch in the current one and enter the next one\n        const toolsAllowedInBoth = this.validGear[current.type].filter(v => this.validGear[next.type].includes(v))\n\n        // Add the time for either switching tool and moving or simply moving\n        next.time += toolsAllowedInBoth[0] !== current.tool ? 7 + 1 : 1\n        // Then adjust the tool\n        next.tool = toolsAllowedInBoth[0]\n      }\n    },\n    print: function (grid, path) {\n      const onPath = new Set()\n\n      if (path) {\n        path.forEach(p => onPath.add(`${p.x},${p.y}`))\n      }\n\n      let result = ''\n      for (let y = 0; y < grid.length; y++) {\n        for (let x = 0; x < grid[y].length; x++) {\n          let clazz = null\n          if (onPath.has(`${x},${y}`)) {\n            clazz = 'day-22-path'\n          } else if (grid[y][x] === WET) {\n            clazz = 'day-22-wet'\n          } else if (grid[y][x] === NARROW) {\n            clazz = 'day-22-narrow'\n          }\n\n          if (clazz) {\n            result += `<span class=\"${clazz}\">${grid[y][x]}</span>`\n          } else {\n            result += grid[y][x]\n          }\n        }\n        result += '<br/>'\n      }\n      return result\n    }\n  }\n}\n</script>\n\n<style>\n.day-22-code {\n  background-color: #2c3e50;\n  color: #7f8c8d;\n  max-height: 50vh;\n}\n.day-22-wet {\n  background-color: #2980b9;\n  color: #2c3e50;\n}\n.day-22-narrow {\n  background-color:#27ae60;\n  color: #2c3e50;\n}\n.day-22-path {\n  background-color: #ecf0f1;\n  color: #2c3e50;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day22.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day22.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day22.vue?vue&type=template&id=dd7e63ec\"\nimport script from \"./Day22.vue?vue&type=script&lang=js\"\nexport * from \"./Day22.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day22.vue?vue&type=style&index=0&id=dd7e63ec&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","domProps","_s","gridOne","_v","proxy","gridTwo","staticRenderFns","ROCKY","WET","NARROW","TORCH","GEAR","NONE","BOTH","components","Day","data","partOne","partTwo","risk","types","directions","validGear","methods","getGeoIndex","solvePartOne","geoIndex","erosionLevel","type","solvePartTwo","tool","x","y","time","path","bestTime","configs","next","adjustConfig","print","clazz","result","component"],"sourceRoot":""}
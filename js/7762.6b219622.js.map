{"version":3,"file":"js/7762.6b219622.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2023/Day15.vue?bb2b","webpack://advent-of-code/src/components/2023/Day15.vue","webpack://advent-of-code/./src/components/2023/Day15.vue?5967","webpack://advent-of-code/./src/components/2023/Day15.vue","webpack://advent-of-code/./src/util/color.js","webpack://advent-of-code/./src/util/math.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":15,\"year\":2023,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partTwo\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partTwo\",\"width\":\"200\",\"height\":\"1536\"}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"15\" :year=\"2023\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partTwo>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partTwo\" class=\"canvas\" width=\"200\" height=\"1536\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { mod } from '@/util/math'\n\nimport { createMultiColorGradient, VIRIDIS } from '@/util/color'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    hash: function (str) {\n      const parts = str.split('')\n      let sum = 0\n\n      parts.forEach(c => {\n        sum += c.charCodeAt(0)\n        sum *= 17\n        sum = mod(sum, 256)\n      })\n      return sum\n    },\n    onInputChanged: function (input) {\n      this.solutions.partOne = input[0].split(',').map(i => this.hash(i)).reduce((a, b) => a + b, 0)\n\n      const boxes = Array.from(Array(256).keys()).map(i => [])\n\n      input[0].split(',').forEach(i => {\n        if (i.endsWith('-')) {\n          const label = i.substring(0, i.length - 1)\n          const hash = this.hash(label)\n          const box = boxes[hash]\n\n          const index = box.findIndex(l => l.label === label)\n\n          if (index !== -1) {\n            box.splice(index, 1)\n          }\n        } else {\n          const [label, lens] = i.split('=')\n          const hash = this.hash(label)\n          const box = boxes[hash]\n          const index = box.findIndex(l => l.label === label)\n\n          if (index !== -1) {\n            box[index].lens = +lens\n          } else {\n            box.push({\n              label: label,\n              lens: +lens\n            })\n          }\n        }\n      })\n\n      this.solutions.partTwo = boxes.map((b, bi) => {\n        return b.map((l, li) => (bi + 1) * (li + 1) * l.lens).reduce((a, b) => a + b, 0)\n      }).reduce((a, b) => a + b, 0)\n\n      this.$nextTick(() => this.plot(boxes))\n    },\n    plot: function (boxes) {\n      const maxWidth = Math.max(...boxes.map(b => b.length))\n      const maxLens = Math.max(...boxes.map(b => Math.max(...b.map(l => l.lens))))\n\n      const gradient = createMultiColorGradient(VIRIDIS, maxLens + 1)\n\n      // Initialise the canvas\n      const canvas = document.getElementById('partTwo')\n\n      // Set the canvas size\n      const hFactor = 20\n      const wFactor = 30\n      const padding = 2\n      canvas.width = (maxWidth + padding) * wFactor + 30\n      canvas.height = (boxes.length + padding) * hFactor\n\n      const ctx = canvas.getContext('2d')\n      ctx.font = '10px sans-serif'\n      ctx.textAlign = 'end'\n      ctx.textBaseline = 'middle'\n\n      ctx.fillStyle = '#222222'\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n      boxes.forEach((b, bi) => {\n        ctx.fillStyle = '#ffffff'\n        ctx.fillText(`${bi + 1}`, 30, bi * hFactor + hFactor / 2)\n\n        b.forEach((l, li) => {\n          const lensThickness = 0.7 + (l.lens * (1 - 0.3)) / maxLens * wFactor / 2\n          const x = 30 + padding + li * wFactor + wFactor / 2\n          const y = bi * hFactor + padding / 2\n          ctx.fillStyle = gradient[l.lens]\n          ctx.beginPath()\n          ctx.moveTo(x, y)\n          console.log(lensThickness, lensThickness)\n          ctx.bezierCurveTo(x + lensThickness, y + hFactor * 0.25, x + lensThickness, y + hFactor * 0.75, x, y + hFactor - padding - padding / 2)\n          ctx.bezierCurveTo(x - lensThickness, y + hFactor * 0.75, x - lensThickness, y + hFactor * 0.25, x, y)\n          ctx.fill()\n        })\n      })\n    }\n  }\n}\n</script>\n\n<style>\n.canvas-holder {\n  overflow: auto;\n  height: 1000px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day15.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day15.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day15.vue?vue&type=template&id=032ae8d8\"\nimport script from \"./Day15.vue?vue&type=script&lang=js\"\nexport * from \"./Day15.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day15.vue?vue&type=style&index=0&id=032ae8d8&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","const VIRIDIS = ['#440154', '#48186a', '#472d7b', '#424086', '#3b528b', '#33638d', '#2c728e', '#26828e', '#21918c', '#1fa088', '#28ae80', '#3fbc73', '#5ec962', '#84d44b', '#addc30', '#d8e219', '#fde725']\n\n/**\n * Converts a HEX value into an RGB object\n * @param {String} hex The hex color\n */\nconst hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    }\n    : null\n}\n\n/**\n * Converts the given R, G, B values into a HEX color\n * @param {Number} r The red color component\n * @param {Number} g The green color component\n * @param {Number} b The blue color component\n */\nconst rgbToHex = (r, g, b) => {\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n}\n\n/**\n * Creates a linear gradient between the two given colors with the given number of steps\n * @param {String} one The first color in HEX\n * @param {String} two The second color in HEX\n * @param {Number} steps The number of steps between the two colors\n */\nconst createColorGradient = (one, two, steps) => {\n  const oneRgb = hexToRgb(one)\n  const twoRgb = hexToRgb(two)\n\n  if (steps < 2) {\n    return [one]\n  }\n\n  const result = []\n  for (let i = 0; i < steps; i++) {\n    const iNorm = (i / (steps - 1))\n    result.push(rgbToHex(\n      Math.floor(oneRgb.r + iNorm * (twoRgb.r - oneRgb.r)),\n      Math.floor(oneRgb.g + iNorm * (twoRgb.g - oneRgb.g)),\n      Math.floor(oneRgb.b + iNorm * (twoRgb.b - oneRgb.b))\n    ))\n  }\n  return result\n}\n\nconst createMultiColorGradient = (colors, steps) => {\n  if (colors.length > steps) {\n    return colors.slice(0, steps)\n  }\n\n  const sections = colors.length - 1\n\n  let result = []\n\n  for (let i = 0; i < sections - 1; i++) {\n    result = result.concat(createColorGradient(colors[i], colors[i + 1], Math.max(1, Math.floor(steps / sections))))\n  }\n\n  while (result.length < steps) {\n    result.push(colors[colors.length - 1])\n  }\n\n  return result\n}\n\nexport {\n  hexToRgb,\n  rgbToHex,\n  createColorGradient,\n  createMultiColorGradient,\n  VIRIDIS\n}\n","const mod = (a, b) => {\n  return ((a % b) + b) % b\n}\n\nconst transpose = (matrix) => {\n  const rows = matrix.length\n  const cols = matrix[0].length\n  const grid = []\n  for (let j = 0; j < cols; j++) {\n    grid[j] = Array(rows)\n  }\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      grid[j][i] = matrix[i][j]\n    }\n  }\n  return grid\n}\n\nexport {\n  mod,\n  transpose\n}\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","proxy","staticRenderFns","components","Day","data","partOne","partTwo","methods","hash","parts","sum","input","box","label","lens","plot","canvas","ctx","boxes","b","console","component","VIRIDIS","hexToRgb","hex","result","exec","r","parseInt","g","rgbToHex","toString","slice","createColorGradient","one","two","steps","oneRgb","twoRgb","i","iNorm","push","Math","floor","createMultiColorGradient","colors","length","sections","concat","max","mod","a","transpose","matrix","rows","cols","grid","j","Array"],"sourceRoot":""}
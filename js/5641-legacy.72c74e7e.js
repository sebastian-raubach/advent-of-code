"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[5641,1978],{31125:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ Day18)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day18.vue?vue&type=template&id=4850715e&scoped=true&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'Day\',{attrs:{"day":18,"year":2021,"solutions":_vm.solutions},on:{"input-changed":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js\nvar es_array_concat = __webpack_require__(92222);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(74916);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.split.js\nvar es_string_split = __webpack_require__(23123);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js\nvar es_array_map = __webpack_require__(21249);\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(85619);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day18.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\n//\n//\n//\n//\n//\n\n/* harmony default export */ const Day18vue_type_script_lang_js_ = ({\n  components: {\n    Day: Day["default"]\n  },\n  data: function data() {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function onInputChanged(input) {\n      // Start with the first\n      var current = input[0];\n\n      for (var i = 1; i < input.length; i++) {\n        // Then stepwise add the other onto it\n        current = this.add(current, input[i]);\n      } // Convert to an array using the convenient JSON.parse\n\n\n      var arr = JSON.parse(current); // Get the magnitude by traversing the tree\n\n      this.solutions.partOne = this.magnitude(arr); // Find the maximum\n\n      var max = 0; // Pairwise comparison of all pairs\n\n      for (var _i = 0; _i < input.length; _i++) {\n        for (var j = 0; j < input.length; j++) {\n          // Skip same ones\n          if (_i === j) {\n            continue;\n          } // Calculate the magnitude\n\n\n          var result = this.magnitude(JSON.parse(this.add(input[_i], input[j]))); // Update maximum\n\n          max = Math.max(max, result);\n        }\n      }\n\n      this.solutions.partTwo = max;\n    },\n    add: function add(one, two) {\n      // Create the concatenated array\n      var current = "[".concat(one, ",").concat(two, "]"); // While we found something to compact\n\n      var compacting = false;\n\n      do {\n        // Explode first\n        var result = this.explode(current);\n        current = result[0];\n        compacting = result[1]; // If there was no explosion\n\n        if (!compacting) {\n          // Check for splits\n          result = this.split(current);\n          current = result[0];\n          compacting = result[1];\n        }\n      } while (compacting); // Return the result of the addition\n\n\n      return current;\n    },\n    magnitude: function magnitude(current) {\n      if (isNaN(current)) {\n        // For internal nodes, it\'s 3 times left plus 2 times right\n        return 3 * this.magnitude(current[0]) + 2 * this.magnitude(current[1]);\n      } else {\n        // For leaf nodes, it\'s the value\n        return current;\n      }\n    },\n    split: function split(current) {\n      var arr = current.split(\'\'); // Find numbers that are larger or equal to 10\n\n      var start = null;\n      var end = null;\n      var isNumber = false; // Go through the string from left to right\n\n      for (var i = 0; i < arr.length; i++) {\n        // If we find a number\n        if (!isNaN(arr[i])) {\n          isNumber = true;\n\n          if (start === null) {\n            // Set the start (left boundary)\n            start = i; // Set an initial value for the end (right boundary)\n\n            end = Math.min(i + 1, arr.length - 1);\n          } else {\n            // Update the end (right boundary)\n            end = Math.min(i + 1, arr.length - 1);\n          }\n        } else {\n          isNumber = false;\n        } // We got to the end\n\n\n        if (i === arr.length - 1) {\n          isNumber = false;\n        } // If we\'re no longer in the process of parsing a multi-digit number and we found a start and an end\n\n\n        if (!isNumber && start !== null && end !== null) {\n          // Parse the number\n          var n = parseInt(current.substring(start, end));\n\n          if (n >= 10) {\n            // If it\'s too large, replace it with an array of floor and ceil\n            return ["".concat(current.substring(0, start), "[").concat(Math.floor(n / 2.0), ",").concat(Math.ceil(n / 2.0), "]").concat(current.substring(end, current.length)), true];\n          } else {\n            // If it\'s too small, continue searching\n            start = null;\n            end = null;\n            isNumber = false;\n          }\n        }\n      } // Indicate we didn\'t split\n\n\n      return [current, false];\n    },\n    explode: function explode(current) {\n      var arr = current.split(\'\'); // Count the level by keeping track of opening and closing brackets\n\n      var openCount = 0;\n\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === \'[\') {\n          openCount++;\n        }\n\n        if (arr[i] === \']\') {\n          openCount--;\n        } // We found one that\'s "too deep"\n\n\n        if (openCount > 4) {\n          // Get the end index\n          var endIndex = current.indexOf(\']\', i); // Parse the number pair\n\n          var pair = current.substring(i + 1, endIndex).split(\',\').map(function (c) {\n            return +c;\n          }); // Get the left and the right substrings for later\n\n          var left = current.substring(0, i);\n          var right = current.substring(endIndex + 1); // Go from the found index towards the left to find the first number and increase it\n\n          var start = null;\n          var end = null;\n          var isNumber = false;\n          var leftArr = left.split(\'\');\n\n          for (var l = leftArr.length - 1; l >= 0; l--) {\n            if (!isNaN(leftArr[l])) {\n              isNumber = true;\n\n              if (end === null) {\n                // We found the right border\n                end = l; // Initialise the left border\n\n                start = Math.max(0, l - 1);\n              } else {\n                // Update the left border\n                start = Math.max(0, l - 1);\n              }\n            } else {\n              isNumber = false;\n            }\n\n            if (l === 0) {\n              isNumber = false;\n            } // If we\'re no longer in the process of parsing a multi-digit number and we found a start and an end\n\n\n            if (!isNumber && start !== null && end !== null) {\n              // Update the left side by increasing the number value\n              left = "".concat(left.substring(0, start + 1)).concat(parseInt(left.substring(start + 1, end + 1)) + pair[0]).concat(left.substring(end + 1, left.length));\n              break;\n            }\n          }\n\n          start = null;\n          end = null;\n          isNumber = false;\n          var rightArr = right.split(\'\');\n\n          for (var r = 0; r < rightArr.length; r++) {\n            if (!isNaN(rightArr[r])) {\n              isNumber = true;\n\n              if (start === null) {\n                // We found the left border\n                start = r; // Initialise the left border\n\n                end = Math.min(rightArr.length - 1, r + 1);\n              } else {\n                // Update the left border\n                end = Math.min(rightArr.length - 1, r + 1);\n              }\n            } else {\n              isNumber = false;\n            }\n\n            if (r === rightArr.length - 1) {\n              isNumber = false;\n            } // If we\'re no longer in the process of parsing a multi-digit number and we found a start and an end\n\n\n            if (!isNumber && start !== null && end !== null) {\n              // Update the right side by increasing the number value\n              right = "".concat(right.substring(0, start)).concat(parseInt(right.substring(start, end)) + pair[1]).concat(right.substring(end, right.length));\n              break;\n            }\n          } // Reconstitute the whole string by setting a zero in the middle\n\n\n          current = "".concat(left, "0").concat(right); // Indicate we exploded\n\n          return [current, true];\n        }\n      } // Indicate we didn\'t explode\n\n\n      return [current, false];\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2021/Day18.vue?vue&type=script&lang=js&\n /* harmony default export */ const _2021_Day18vue_type_script_lang_js_ = (Day18vue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2021/Day18.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2021_Day18vue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "4850715e",\n  null\n  \n)\n\n/* harmony default export */ const Day18 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31125\n')},21249:(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval("\nvar $ = __webpack_require__(82109);\nvar $map = (__webpack_require__(42092).map);\nvar arrayMethodHasSpeciesSupport = __webpack_require__(81194);\nvar arrayMethodUsesToLength = __webpack_require__(29207);\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');\n// FF49- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('map');\n\n// `Array.prototype.map` method\n// https://tc39.es/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEyNDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixRQUFRLG1CQUFPLENBQUMsS0FBcUI7QUFDckMsV0FBVyxnQ0FBMkM7QUFDdEQsbUNBQW1DLG1CQUFPLENBQUMsS0FBK0M7QUFDMUYsOEJBQThCLG1CQUFPLENBQUMsS0FBMEM7O0FBRWhGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLCtFQUErRTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWR2ZW50LW9mLWNvZGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcz8zZmUzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKTtcbi8vIEZGNDktIGlzc3VlXG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnbWFwJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIHx8ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21249\n")}}]);
{"version":3,"file":"js/743.bc252991.js","mappings":"yKAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GAEA,0CAEA,YACA,EACAQ,MAAAA,WACA,6BAEA,KAEA,QACA,SAEA,kCAGA,WAEAC,EAAAA,GAAAA,EAGA,qBACA,UAEAA,EAAAA,KACAC,GAAAA,EAAAA,GAAAA,EAAAA,OACAC,IAIA,oBACA,eACA,UAMA,YAJA,gBACAN,QAAAA,EACAC,QAAAA,EAAAA,EAAAA,IAIAM,EAAAA,KAAAA,GAGAC,GACA,CACA,ICnE4P,I,UCOxPC,GAAY,OACd,EACAxB,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAea,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2017/Day6.vue?929d","webpack://advent-of-code/src/components/2017/Day6.vue","webpack://advent-of-code/./src/components/2017/Day6.vue?cd7a","webpack://advent-of-code/./src/components/2017/Day6.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":6,\"year\":2017,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"6\" :year=\"2017\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Split each row on tab and then map the values to numbers\n      this.values = input[0].split('\\t').map(i => +i)\n\n      this.solve()\n    },\n    solve: function () {\n      const copy = this.values.concat()\n      // Remember all the steps we have seen\n      const memory = []\n\n      let counter = 1\n      while (true) {\n        // Get the max index\n        const maxIndex = copy.indexOf(Math.max(...copy))\n\n        // Get the amount of bits to reorganize\n        let remaining = copy[maxIndex]\n        // Reset this one to 0\n        copy[maxIndex] = 0\n\n        // Starting from the next one\n        let index = (maxIndex + 1) % copy.length\n        while (remaining > 0) {\n          // Add one to each of the following bins\n          copy[index]++\n          index = (index + 1) % copy.length\n          remaining--\n        }\n\n        // Keep track of the configuration\n        const concat = copy.join('|')\n        const memoryIndex = memory.indexOf(concat)\n        if (memoryIndex !== -1) {\n          // We're done\n          this.solutions = {\n            partOne: counter,\n            partTwo: counter - memoryIndex - 1\n          }\n          return\n        } else {\n          memory.push(concat)\n        }\n\n        counter++\n      }\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day6.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day6.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day6.vue?vue&type=template&id=c9fdde44\"\nimport script from \"./Day6.vue?vue&type=script&lang=js\"\nexport * from \"./Day6.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","solve","copy","index","remaining","memory","counter","component"],"sourceRoot":""}
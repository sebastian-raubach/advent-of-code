{"version":3,"file":"js/5114.61a3eb28.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2017/Day22.vue?0db6","webpack://advent-of-code/src/components/2017/Day22.vue","webpack://advent-of-code/./src/components/2017/Day22.vue?dd63","webpack://advent-of-code/./src/components/2017/Day22.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":22,\"year\":2017,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":\"800\",\"height\":\"500\"}})])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partTwo\",\"width\":\"800\",\"height\":\"500\"}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"22\" :year=\"2017\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partOne\" class=\"canvas\" width=\"800\" height=\"500\" />\n      </div>\n    </template>\n    <template v-slot:partTwo>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partTwo\" class=\"canvas\" width=\"800\" height=\"500\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      turn: {\n        up: (curr, cell) => {\n          // Turn according to instructions\n          if (cell === '#') {\n            curr.dir = 'right'\n          } else if (cell === '.') {\n            curr.dir = 'left'\n          } else if (cell === 'F') {\n            curr.dir = 'down'\n          }\n        },\n        right: (curr, cell) => {\n          // Turn according to instructions\n          if (cell === '#') {\n            curr.dir = 'down'\n          } else if (cell === '.') {\n            curr.dir = 'up'\n          } else if (cell === 'F') {\n            curr.dir = 'left'\n          }\n        },\n        down: (curr, cell) => {\n          // Turn according to instruction\n          if (cell === '#') {\n            curr.dir = 'left'\n          } else if (cell === '.') {\n            curr.dir = 'right'\n          } else if (cell === 'F') {\n            curr.dir = 'up'\n          }\n        },\n        left: (curr, cell) => {\n          // Turn according to instructions\n          if (cell === '#') {\n            curr.dir = 'up'\n          } else if (cell === '.') {\n            curr.dir = 'down'\n          } else if (cell === 'F') {\n            curr.dir = 'right'\n          }\n        }\n      },\n      move: {\n        up: (curr) => curr.y--,\n        left: (curr) => curr.x--,\n        down: (curr) => curr.y++,\n        right: (curr) => curr.x++\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.solutions = {\n        partOne: 0,\n        partTwo: 0\n      }\n\n      this.$nextTick(() => {\n        // Generate two copies of the original grid\n        const gridOne = new Map()\n        const gridTwo = new Map()\n        input.forEach((r, y) => {\n          r.split('').forEach((c, x) => {\n            if (c === '#') {\n              gridOne.set(`${x},${y}`, '#')\n              gridTwo.set(`${x},${y}`, '#')\n            }\n          })\n        })\n\n        this.solutions.partOne = this.solvePartOne(gridOne, input.length)\n        this.solutions.partTwo = this.solvePartTwo(gridTwo, input.length)\n      })\n    },\n    solvePartOne: function (grid, size) {\n      // Starting position\n      const current = {\n        x: Math.floor(size / 2),\n        y: Math.floor(size / 2),\n        dir: 'up'\n      }\n\n      const bb = {\n        minX: current.x,\n        minY: current.y,\n        maxX: current.x,\n        maxY: current.y\n      }\n\n      let counter = 0\n      // Bursts\n      for (let i = 0; i < 10_000; i++) {\n        // Get current position coordinates\n        const pos = `${current.x},${current.y}`\n        // Get grid cell\n        const cell = grid.get(pos) || '.'\n\n        // Turn according to rules\n        this.turn[current.dir](current, cell)\n        // Adjust current cell\n        if (cell === '.') {\n          // Count infections\n          counter++\n          grid.set(pos, '#')\n        } else {\n          grid.delete(pos)\n        }\n        // Then move\n        this.move[current.dir](current)\n\n        bb.minX = Math.min(bb.minX, current.x)\n        bb.minY = Math.min(bb.minY, current.y)\n        bb.maxX = Math.max(bb.maxX, current.x)\n        bb.maxY = Math.max(bb.maxY, current.y)\n      }\n\n      // Initialise the canvas\n      const canvas = document.getElementById('partOne')\n      const ctx = canvas.getContext('2d')\n      // Set the canvas size and translate the origin\n      const factor = 2\n      canvas.width = (Math.abs(bb.minX) + Math.abs(bb.maxX)) * factor\n      canvas.height = (Math.abs(bb.minY) + Math.abs(bb.maxY)) * factor\n      ctx.scale(factor, factor)\n      ctx.translate(Math.abs(bb.minX), Math.abs(bb.minY))\n\n      // Draw the canvas\n      grid.forEach((cell, coords) => {\n        const xy = coords.split(',').map(i => +i)\n        ctx.fillStyle = '#EA2027'\n        ctx.fillRect(xy[0], xy[1], 1, 1)\n      })\n\n      return counter\n    },\n    solvePartTwo: function (grid, size) {\n      // Starting position\n      const current = {\n        x: Math.floor(size / 2),\n        y: Math.floor(size / 2),\n        dir: 'up'\n      }\n\n      const bb = {\n        minX: current.x,\n        minY: current.y,\n        maxX: current.x,\n        maxY: current.y\n      }\n\n      let counter = 0\n      // Bursts\n      for (let i = 0; i < 10_000_000; i++) {\n        // Get current position coordinates\n        const pos = `${current.x},${current.y}`\n        // Get grid cell\n        const cell = grid.get(pos) || '.'\n\n        // Turn according to rules\n        this.turn[current.dir](current, cell)\n        if (cell === '.') {\n          grid.set(pos, 'W')\n        } else if (cell === 'W') {\n          // Count infections\n          counter++\n          grid.set(pos, '#')\n        } else if (cell === '#') {\n          grid.set(pos, 'F')\n        } else {\n          grid.delete(pos)\n        }\n        // Then move\n        this.move[current.dir](current)\n\n        bb.minX = Math.min(bb.minX, current.x)\n        bb.minY = Math.min(bb.minY, current.y)\n        bb.maxX = Math.max(bb.maxX, current.x)\n        bb.maxY = Math.max(bb.maxY, current.y)\n      }\n\n      // Initialise the canvas\n      const canvas = document.getElementById('partTwo')\n      const ctx = canvas.getContext('2d')\n      // Set the canvas size and translate the origin\n      const factor = 2\n      canvas.width = (Math.abs(bb.minX) + Math.abs(bb.maxX)) * factor\n      canvas.height = (Math.abs(bb.minY) + Math.abs(bb.maxY)) * factor\n      ctx.scale(factor, factor)\n      ctx.translate(Math.abs(bb.minX), Math.abs(bb.minY))\n\n      // Draw the canvas\n      grid.forEach((cell, coords) => {\n        const xy = coords.split(',').map(i => +i)\n        if (cell === '#') {\n          ctx.fillStyle = '#EA2027'\n        } else if (cell === 'F') {\n          ctx.fillStyle = '#1289A7'\n        } else if (cell === 'W') {\n          ctx.fillStyle = '#F79F1F'\n        }\n\n        ctx.fillRect(xy[0], xy[1], 1, 1)\n      })\n\n      return counter\n    }\n  }\n}\n</script>\n\n<style scoped>\n.canvas-holder {\n  overflow: auto;\n  height: 800px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day22.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day22.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day22.vue?vue&type=template&id=8e26cc12&scoped=true\"\nimport script from \"./Day22.vue?vue&type=script&lang=js\"\nexport * from \"./Day22.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day22.vue?vue&type=style&index=0&id=8e26cc12&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"8e26cc12\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","proxy","staticRenderFns","components","Day","data","partOne","partTwo","turn","up","curr","right","down","left","move","methods","input","r","gridOne","gridTwo","solvePartOne","x","y","dir","minX","minY","maxX","maxY","counter","grid","bb","canvas","ctx","solvePartTwo","component"],"sourceRoot":""}
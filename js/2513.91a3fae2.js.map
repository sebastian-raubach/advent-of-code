{"version":3,"file":"js/2513.91a3fae2.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,iBAAiB,CAACV,EAAG,SAAS,CAACU,YAAY,SAASR,MAAM,CAAC,GAAK,UAAU,MAAQ,MAAM,OAAS,WAAW,EAAES,OAAM,MAAS,EACjZC,EAAkB,G,WCYtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAZ,UAAAA,CACAa,QAAAA,KACAC,QAAAA,MAEAC,EAAAA,EACAC,WAAAA,CACAC,EAAAA,IAAAC,EAAAA,GAAAA,EACAC,GAAAA,IACAD,EAAAA,IACAA,EAAAA,GAAAA,EAEAE,GAAAA,IAAAF,EAAAA,GAAAA,EACAG,EAAAA,IAAAH,EAAAA,GAAAA,EACAI,GAAAA,IACAJ,EAAAA,IACAA,EAAAA,GAAAA,EAEAK,GAAAA,IAAAL,EAAAA,GAAAA,GAGA,EACAM,QAAAA,CACAtB,eAAAA,SAAAA,GACA,0BAEA,qBACA,wBAGA,GACAuB,EAAAA,EACAV,EAAAA,GAGA,GACAU,EAAAA,EACAV,EAAAA,GAIA,qCACA,qBAEA,KACA,GACAW,KAAAA,EACAC,MAAAA,EACAC,IAAAA,EACAC,OAAAA,GAGAC,EAAAA,KAAAA,GAGA,+BAEAd,EAAAA,SAAAA,IAEA,sBAGA,yBACA,+CAGAe,EAAAA,KAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GACAA,EAAAA,MAAAA,KAAAA,IAAAA,EAAAA,MAAAA,GACAA,EAAAA,IAAAA,KAAAA,IAAAA,EAAAA,IAAAA,GACAA,EAAAA,OAAAA,KAAAA,IAAAA,EAAAA,OAAAA,GAGAD,EAAAA,KAAAA,CACAE,EAAAA,EACAC,EAAAA,IAIA,8BAGA,MACAC,EAAAA,EACA,IAIAC,EAAAA,MAAAA,KAAAA,IAAAA,EAAAA,OAAAA,KAAAA,IAAAA,EAAAA,MACAA,EAAAA,OAAAA,KAAAA,IAAAA,EAAAA,KAAAA,KAAAA,IAAAA,EAAAA,QACAC,EAAAA,UAAAA,KAAAA,IAAAA,EAAAA,MAAAA,KAAAA,IAAAA,EAAAA,MAGAN,EAAAA,SAAAA,CAAAA,EAAAA,KACAM,EAAAA,YAAAA,IAAAA,EAAAA,QAAAA,IAAAA,EAAAA,OAAAA,EAAAA,MAAAA,QACAA,EAAAA,UAAAA,IAAAA,EAAAA,QAAAA,IAAAA,EAAAA,OAAAA,EAAAA,MAAAA,QACA,yBAIA,6CACA,2BAEA,EACAC,YAAAA,SAAAA,EAAAA,GAEA,uEACA,EACAC,YAAAA,SAAAA,EAAAA,GAEA,oBACAF,EAAAA,YACA,oBACAA,EAAAA,OAAAA,EAAAA,EAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,IAEAA,EAAAA,YACAA,EAAAA,SACAA,EAAAA,MACA,ICvI6P,I,UCQzPG,GAAY,OACd,EACA/C,EACAiB,GACA,EACA,KACA,WACA,MAIF,EAAe8B,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2017/Day11.vue?cb6d","webpack://advent-of-code/src/components/2017/Day11.vue","webpack://advent-of-code/./src/components/2017/Day11.vue?ac0e","webpack://advent-of-code/./src/components/2017/Day11.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":11,\"year\":2017,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":\"800\",\"height\":\"500\"}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"11\" :year=\"2017\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partOne\" class=\"canvas\" width=\"800\" height=\"500\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      r: 2,\n      directions: {\n        n: point => { point.r-- },\n        ne: point => {\n          point.r--\n          point.q++\n        },\n        se: point => { point.q++ },\n        s: point => { point.r++ },\n        sw: point => {\n          point.q--\n          point.r++\n        },\n        nw: point => { point.q-- }\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.solutions.partOne = ''\n\n      this.$nextTick(() => {\n        const directions = input[0].split(',')\n\n        // Keep a copy of the origin\n        const origin = {\n          q: 0,\n          r: 0\n        }\n        // Keep track of the current position\n        const current = {\n          q: 0,\n          r: 0\n        }\n\n        // Initialise the canvas\n        const canvas = document.getElementById('partOne')\n        const ctx = canvas.getContext('2d')\n        // Keep track of all points and the edges for drawing\n        const points = []\n        const edges = {\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0\n        }\n\n        points.push(origin)\n\n        // Get the maximum distance for part two\n        let maxDistance = -Number.MAX_SAFE_INTEGER\n\n        directions.forEach(d => {\n          // Adjust the position\n          this.directions[d](current)\n\n          // Calculate the x and hy coordinate for drawing\n          const x = this.r * (3.0 / 2 * current.q)\n          const y = this.r * (Math.sqrt(3) / 2 * current.q + Math.sqrt(3) * current.r)\n\n          // Adjust the bounding box\n          edges.left = Math.min(edges.left, x)\n          edges.right = Math.max(edges.right, x)\n          edges.top = Math.min(edges.top, y)\n          edges.bottom = Math.max(edges.bottom, y)\n\n          // Keep track of the point\n          points.push({\n            x: x,\n            y: y\n          })\n\n          // Calculate the distance to the origin for part two\n          const distance = this.getDistance(origin, current)\n\n          // Keep the maximum\n          if (distance > maxDistance) {\n            maxDistance = distance\n          }\n        })\n\n        // Set the canvas size and translate the origin\n        canvas.width = Math.abs(edges.right) + Math.abs(edges.left)\n        canvas.height = Math.abs(edges.top) + Math.abs(edges.bottom)\n        ctx.translate(Math.abs(edges.left), Math.abs(edges.top))\n\n        // Draw the canvas\n        points.forEach((p, i) => {\n          ctx.strokeStyle = i === 0 ? 'green' : ((i === points.length - 1) ? 'red' : 'black')\n          ctx.fillStyle = i === 0 ? 'green' : ((i === points.length - 1) ? 'red' : 'white')\n          this.drawHexagon(ctx, p)\n        })\n\n        // Set the solutions\n        this.solutions.partOne = this.getDistance(origin, current)\n        this.solutions.partTwo = maxDistance\n      })\n    },\n    getDistance: function (a, b) {\n      // Calculate the distance using https://www.redblobgames.com/grids/hexagons/#distances\n      return (Math.abs(a.q - b.q) + Math.abs(a.q + a.r - b.q - b.r) + Math.abs(a.r - b.r)) / 2\n    },\n    drawHexagon: function (ctx, point) {\n      // Draw the hex\n      const a = 2 * Math.PI / 6\n      ctx.beginPath()\n      for (let i = 0; i < 6; i++) {\n        ctx.lineTo(point.x + this.r * Math.cos(a * i), point.y + this.r * Math.sin(a * i))\n      }\n      ctx.closePath()\n      ctx.stroke()\n      ctx.fill()\n    }\n  }\n}\n</script>\n\n<style scoped>\n.canvas-holder {\n  overflow: auto;\n  height: 800px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day11.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day11.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day11.vue?vue&type=template&id=b18e9304&scoped=true\"\nimport script from \"./Day11.vue?vue&type=script&lang=js\"\nexport * from \"./Day11.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day11.vue?vue&type=style&index=0&id=b18e9304&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"b18e9304\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","proxy","staticRenderFns","components","Day","data","partOne","partTwo","r","directions","n","point","ne","se","s","sw","nw","methods","q","left","right","top","bottom","points","edges","x","y","maxDistance","canvas","ctx","getDistance","drawHexagon","component"],"sourceRoot":""}
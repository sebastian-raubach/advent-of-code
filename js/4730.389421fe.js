"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[4730],{89928:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ Day19)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day19.vue?vue&type=template&id=7f9fa6b0&scoped=true\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'Day\',{attrs:{"day":19,"year":2021,"solutions":_vm.solutions},on:{"input-changed":_vm.onInputChanged},scopedSlots:_vm._u([{key:"partOne",fn:function(){return [_c(\'div\',{attrs:{"id":"partOne"}})]},proxy:true}])})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day19.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n// Create a map that, for missing keys, sets them to a default value\nclass MapWithDefault extends Map {\n  get(key) {\n    if (!this.has(key)) {\n      this.set(key, this.default());\n    }\n    return super.get(key);\n  }\n  constructor(defaultFunction, entries) {\n    super(entries);\n    this.default = defaultFunction;\n  }\n}\nconst transforms = [([x, y, z]) => [x, y, z], ([x, y, z]) => [x, y, -z], ([x, y, z]) => [x, -y, z], ([x, y, z]) => [x, -y, -z], ([x, y, z]) => [-x, y, z], ([x, y, z]) => [-x, y, -z], ([x, y, z]) => [-x, -y, z], ([x, y, z]) => [-x, -y, -z], ([x, y, z]) => [z, x, y], ([x, y, z]) => [z, x, -y], ([x, y, z]) => [z, -x, y], ([x, y, z]) => [z, -x, -y], ([x, y, z]) => [-z, x, y], ([x, y, z]) => [-z, x, -y], ([x, y, z]) => [-z, -x, y], ([x, y, z]) => [-z, -x, -y], ([x, y, z]) => [y, z, x], ([x, y, z]) => [y, z, -x], ([x, y, z]) => [y, -z, x], ([x, y, z]) => [y, -z, -x], ([x, y, z]) => [-y, z, x], ([x, y, z]) => [-y, z, -x], ([x, y, z]) => [-y, -z, x], ([x, y, z]) => [-y, -z, -x], ([x, y, z]) => [x, z, y], ([x, y, z]) => [x, z, -y], ([x, y, z]) => [x, -z, y], ([x, y, z]) => [x, -z, -y], ([x, y, z]) => [-x, z, y], ([x, y, z]) => [-x, z, -y], ([x, y, z]) => [-x, -z, y], ([x, y, z]) => [-x, -z, -y], ([x, y, z]) => [y, x, z], ([x, y, z]) => [y, x, -z], ([x, y, z]) => [y, -x, z], ([x, y, z]) => [y, -x, -z], ([x, y, z]) => [-y, x, z], ([x, y, z]) => [-y, x, -z], ([x, y, z]) => [-y, -x, z], ([x, y, z]) => [-y, -x, -z], ([x, y, z]) => [z, y, x], ([x, y, z]) => [z, y, -x], ([x, y, z]) => [z, -y, x], ([x, y, z]) => [z, -y, -x], ([x, y, z]) => [-z, y, x], ([x, y, z]) => [-z, y, -x], ([x, y, z]) => [-z, -y, x], ([x, y, z]) => [-z, -y, -x]];\n/* harmony default export */ const Day19vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const scanners = [];\n      let currentScanner = [];\n      for (let i = 0; i < input.length; i++) {\n        if (input[i].length < 1) {\n          // Empty row, push the scanner data onto the array\n          scanners.push(currentScanner);\n          currentScanner = [];\n        } else if (input[i].startsWith(\'---\')) {\n          // Skip header rows\n        } else {\n          // Add the beacon coordinates\n          currentScanner.push(input[i].split(\',\').map(c => +c));\n        }\n      }\n\n      // Add the last scanner\n      scanners.push(currentScanner);\n\n      // Start by setting the first scanner as the origin\n      const absoluteCoords = {\n        \'0,0,0\': scanners[0]\n      };\n\n      // Keep the rest as unmapped\n      const unmapped = scanners.slice(1);\n\n      // While there are still unmapped scanners\n      restart: while (unmapped.length > 0) {\n        // Iterate through all the fixed scanners\n        for (const ac in absoluteCoords) {\n          // Get the fixed scanner beacon coordinates\n          const known = absoluteCoords[ac];\n          // Go through the unmapped scanners\n          for (let i = 0; i < unmapped.length; i++) {\n            // Go through all transforms\n            for (const transform of transforms) {\n              // Transform the unmapped coordinates using the current transform\n              const possible = unmapped[i].map(transform);\n\n              // Count hits\n              const hits = new MapWithDefault(() => 0);\n\n              // For each of the known coordinates\n              for (let k = 0; k < known.length; k++) {\n                // Compare to all of the unmapped coordinates\n                for (let p = 0; p < possible.length; p++) {\n                  // Get the delta\n                  const v = this.minus(known[k], possible[p]);\n                  // Create the key\n                  const vk = v.join(\',\');\n\n                  // Count a hit\n                  hits.set(vk, hits.get(vk) + 1);\n\n                  // If we found enough hits\n                  if (hits.get(vk) >= 12) {\n                    // Add the delta\n                    const found = possible.map(b => this.plus(v, b));\n                    // Add to mapped scanners\n                    absoluteCoords[vk] = found;\n                    // Remove from unmapped\n                    unmapped.splice(i, 1);\n                    // Start over\n                    continue restart;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      const beacons = new Set();\n      for (const ac in absoluteCoords) {\n        absoluteCoords[ac].forEach(c => beacons.add(c.join(\'\')));\n      }\n      this.solutions.partOne = beacons.size;\n      const scannerCoords = Object.keys(absoluteCoords).map(s => s.split(\',\').map(c => +c));\n      let max = 0;\n      scannerCoords.forEach((a, i) => {\n        scannerCoords.forEach((b, j) => {\n          if (i !== j) {\n            max = Math.max(max, this.manhattan(a, b));\n          }\n        });\n      });\n      this.solutions.partTwo = max;\n    },\n    manhattan: function (a, b) {\n      return a.map((v, i) => Math.abs(v - b[i])).reduce((a, b) => a + b, 0);\n    },\n    plus: function (a, b) {\n      return a.map((v, i) => v + b[i]);\n    },\n    minus: function (a, b) {\n      return a.map((v, i) => v - b[i]);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2021/Day19.vue?vue&type=script&lang=js\n /* harmony default export */ const _2021_Day19vue_type_script_lang_js = (Day19vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2021/Day19.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2021_Day19vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "7f9fa6b0",\n  null\n  \n)\n\n/* harmony default export */ const Day19 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///89928\n')}}]);
"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[6714],{26679:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day15)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day15.vue?vue&type=template&id=5ba2d910\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":15,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(36100);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day15.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day15vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      directions: [[0, -1], [-1, 0], [1, 0], [0, 1]]\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.grid = input.map(i => i.split(''));\n      this.players = [];\n      for (let y = 0; y < this.grid.length; y++) {\n        for (let x = 0; x < this.grid[y].length; x++) {\n          if (this.grid[y][x] === 'G' || this.grid[y][x] === 'E') {\n            this.players.push({\n              attack: 3,\n              health: 200,\n              type: this.grid[y][x],\n              x: x,\n              y: y\n            });\n          }\n        }\n      }\n      this.solvePartOne();\n      this.solvePartTwo();\n    },\n    findEnemy: function (player, players, grid) {\n      return players.filter(p => p.type !== player.type && p.health > 0).filter(p => Math.abs(player.x - p.x) + Math.abs(player.y - p.y) === 1).reduce((weakest, curr) => weakest === null || weakest.health > curr.health ? curr : weakest, null);\n    },\n    findNextMovement: function (player, players, grid) {\n      // Map all target position (adjacent cells) of all alive enemies\n      const targetKeys = {};\n      players.filter(p => p.type !== player.type && p.health > 0).map(p => this.getAdjacents({\n        x: p.x,\n        y: p.y\n      }).filter(a => grid[a.y][a.x] === '.')).reduce((acc, list) => acc.concat(...list), []).forEach(a => {\n        targetKeys[`${a.x},${a.y}`] = a;\n      });\n      const visited = new Set();\n      visited.add(`${player.x},${player.y}`);\n      let paths = [[{\n        x: player.x,\n        y: player.y\n      }]];\n      while (true) {\n        const newPaths = [];\n        let targetPaths = [];\n        paths.forEach(p => {\n          this.getAdjacents(p[p.length - 1]).forEach(a => {\n            const xy = `${a.x},${a.y}`;\n            if (targetKeys[xy]) {\n              // We found a path to a target\n              targetPaths.push([...p, a, targetKeys[xy]]);\n            } else if (!visited.has(xy) && grid[a.y][a.x] === '.') {\n              // Extend the path\n              newPaths.push([...p, a]);\n            }\n            visited.add(xy);\n          });\n        });\n        if (targetPaths.length > 0) {\n          // We found at least one path\n          // Sort them based on reading order of last step\n          targetPaths = targetPaths.sort((a, b) => {\n            const al = a[a.length - 1];\n            const bl = b[b.length - 1];\n            return al.y === bl.y ? al.x - bl.x : al.y - bl.y;\n          });\n\n          // Return the first step on the shortest path\n          return targetPaths[0][1];\n        }\n\n        // Keep going, no path found yet\n        paths = newPaths;\n        if (paths.length < 1) {\n          // There are no reachable targets\n          return null;\n        }\n      }\n    },\n    getAdjacents: function (position) {\n      return this.directions.map(d => {\n        return {\n          x: position.x + d[0],\n          y: position.y + d[1]\n        };\n      });\n    },\n    solve: function (grid, players, elfAttackPower) {\n      // Adjust the attack power of all elves\n      players.filter(p => p.type === 'E').forEach(p => {\n        p.attack = elfAttackPower;\n      });\n      let round = 0;\n      while (true) {\n        players = players.sort((a, b) => a.y === b.y ? a.x - b.x : a.y - b.y);\n        for (let i = 0; i < players.length; i++) {\n          const player = players[i];\n          if (player.health > 0) {\n            if (players.filter(p => p.health > 0 && p.type !== player.type).length < 1) {\n              return round * players.filter(p => p.health > 0).map(p => p.health).reduce((a, b) => a + b);\n            }\n            let enemy = this.findEnemy(player, players, grid);\n            const next = enemy ? null : this.findNextMovement(player, players, grid);\n            if (!enemy && next) {\n              grid[player.y][player.x] = '.';\n              player.x = next.x;\n              player.y = next.y;\n              grid[player.y][player.x] = player.type;\n              enemy = this.findEnemy(player, players, grid);\n            }\n            if (enemy) {\n              enemy.health -= player.attack;\n              if (enemy.health < 1) {\n                grid[enemy.y][enemy.x] = '.';\n\n                // If an elf died and this isn't part 1, return\n                if (enemy.type === 'E' && elfAttackPower !== 3) {\n                  return null;\n                }\n              }\n            }\n          }\n        }\n        round++;\n      }\n    },\n    solvePartOne: function () {\n      this.solutions.partOne = this.solve(JSON.parse(JSON.stringify(this.grid)), JSON.parse(JSON.stringify(this.players)), 3);\n    },\n    solvePartTwo: function () {\n      // Start with an attack power of 4\n      let attackPower = 4;\n      while (true) {\n        // Get the result\n        const result = this.solve(JSON.parse(JSON.stringify(this.grid)), JSON.parse(JSON.stringify(this.players)), attackPower);\n\n        // If it succeeded, not elf died, so accept the result\n        if (result !== null) {\n          this.solutions.partTwo = result;\n          return;\n        }\n\n        // Increase the elf attack power\n        attackPower++;\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2018/Day15.vue?vue&type=script&lang=js\n /* harmony default export */ const _2018_Day15vue_type_script_lang_js = (Day15vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2018/Day15.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2018_Day15vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day15 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26679\n")}}]);
{"version":3,"file":"js/9762.e48f6bbb.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2020/Day3.vue?5063","webpack://advent-of-code/./src/util/PathDrawer.js","webpack://advent-of-code/src/components/2020/Day3.vue","webpack://advent-of-code/./src/components/2020/Day3.vue?4a65","webpack://advent-of-code/./src/components/2020/Day3.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":3,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('pre',{staticClass:\"day-3-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridOne)}}),_vm._v(\"\\n      \")])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('pre',{staticClass:\"day-3-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridTwo)}}),_vm._v(\"\\n      \")])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default class PathDrawer {\n  constructor (input, paths) {\n    this.$input = input\n    this.$paths = paths\n  }\n\n  getPathGrid () {\n    let result = ''\n    // Calculate how many times the grid repeats in x direction\n    const xRepeats = this.$paths.map(p => {\n      return Math.ceil(p[p.length - 1].x / this.$input[0].length)\n    }).reduce((a, b) => Math.max(a, b))\n\n    // Get a map of all cells on the path\n    const onPath = {}\n    this.$paths.forEach(p => {\n      p.forEach(c => {\n        onPath[`${c.x}-${c.y}`] = c.hit\n      })\n    })\n\n    // Each row\n    for (let y = 0; y < this.$input.length; y++) {\n      // Repeat the for xRepeat times\n      for (let rep = 0; rep < xRepeats; rep++) {\n        // Then draw the row\n        for (let x = 0; x < this.$input[y].length; x++) {\n          const value = this.$input[y][x] ? '#' : '.'\n          const totalX = this.$input[y].length * rep + x\n          const isHit = onPath[`${totalX}-${y}`]\n\n          if (isHit === true) {\n            result += '<span class=\"day-3-path-hit\">X</span>'\n          } else if (isHit === false) {\n            result += '<span class=\"day-3-path-miss\">O</span>'\n          } else {\n            result += value\n          }\n        }\n      }\n      result += '<br/>'\n    }\n\n    return result\n  }\n}\n","<template>\n  <Day :day=\"3\" :year=\"2020\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <pre class=\"day-3-code border\">\n<code v-html=\"gridOne\" />\n      </pre>\n    </template>\n    <template v-slot:partTwo>\n      <pre class=\"day-3-code border\">\n<code v-html=\"gridTwo\" />\n      </pre>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nimport PathDrawer from '@/util/PathDrawer.js'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      parsedInput: [],\n      paths: {\n        1: [],\n        2: []\n      },\n      gridOne: null,\n      gridTwo: null\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Map the input into a 2d boolean array where trees are true\n      this.parsedInput = input.map(r => {\n        return r.split('').map(c => c === '#')\n      })\n\n      // Reset some data fields\n      this.paths = {\n        1: [],\n        2: []\n      }\n      this.gridOne = null\n      this.gridTwo = null\n\n      // Solve both parts\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    solvePartOne: function () {\n      // Check the slope\n      const result = this.checkSlope(3, 1)\n      // Save the path for drawing\n      this.paths[1].push(result.path)\n      // Set the result\n      this.solutions.partOne = result.trees\n\n      // Start the drawer\n      this.gridOne = new PathDrawer(this.parsedInput, this.paths[1]).getPathGrid()\n    },\n    solvePartTwo: function () {\n      // Check the slopes\n      const slopes = [\n        [1, 1],\n        [3, 1],\n        [5, 1],\n        [7, 1],\n        [1, 2]\n      ]\n\n      // Map each slope to its number of trees then multiply them together\n      this.solutions.partTwo = slopes.map(s => {\n        // Calculate the result\n        const result = this.checkSlope(s[0], s[1])\n        // Save the path for drawing\n        this.paths[2].push(result.path)\n        // Return the number of trees\n        return result.trees\n      })\n        .reduce((a, b) => a * b, 1)\n\n      // Start the drawer\n      this.gridTwo = new PathDrawer(this.parsedInput, this.paths[2]).getPathGrid()\n    },\n    /**\n     * Checks the number of trees and grid points on the path from top left with the given delta slope\n     * @param deltaX The delta value in the x direction (>= 0)\n     * @param deltaY The delta value in the y direction (>= 0)\n     * @returns An object containing the number of trees (`trees`) and the cells on the path (`path`)\n     */\n    checkSlope: function (deltaX, deltaY) {\n      let counter = 0\n      let x = 0\n      // Keep track of the overall x position for repeated grids\n      let totalX = 0\n      // Track all the cells on the path\n      const path = []\n      // Traverse in y direction with delta y\n      for (let y = deltaY; y < this.parsedInput.length; y += deltaY) {\n        // Add to total x\n        totalX += deltaX\n        // Calculate new x based on wrapping\n        x = (x + deltaX) % this.parsedInput[y].length\n        // Check if it's a tree\n        if (this.parsedInput[y][x]) {\n          counter++\n          path.push({ x: totalX, y: y, hit: true })\n        } else {\n          path.push({ x: totalX, y: y, hit: false })\n        }\n      }\n\n      return {\n        path: path,\n        trees: counter\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.day-3-code {\n  background-color: #2c3e50;\n  color: #7f8c8d;\n  max-height: 300px;\n}\n.day-3-path-hit {\n  background-color: #2ecc71;\n  color: #2c3e50;\n}\n.day-3-path-miss {\n  background-color: #ecf0f1;\n  color: #2c3e50;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day3.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day3.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day3.vue?vue&type=template&id=1027242d\"\nimport script from \"./Day3.vue?vue&type=script&lang=js\"\nexport * from \"./Day3.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day3.vue?vue&type=style&index=0&id=1027242d&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","domProps","_s","gridOne","_v","proxy","gridTwo","staticRenderFns","PathDrawer","constructor","input","paths","$input","$paths","getPathGrid","result","xRepeats","map","p","Math","ceil","length","x","reduce","a","b","max","onPath","forEach","c","y","hit","rep","value","totalX","isHit","components","Day","data","partOne","partTwo","parsedInput","methods","solvePartOne","solvePartTwo","checkSlope","counter","path","trees","component"],"sourceRoot":""}
{"version":3,"file":"js/1503.450126dd.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2023/Day18.vue?8993","webpack://advent-of-code/src/components/2023/Day18.vue","webpack://advent-of-code/./src/components/2023/Day18.vue?b4da","webpack://advent-of-code/./src/components/2023/Day18.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":18,\"year\":2023,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":\"1000\",\"height\":\"1000\"}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"18\" :year=\"2023\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partOne\" class=\"canvas\" width=\"1000\" height=\"1000\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      dirs: {\n        U: (current, amount = 1) => { current.y -= amount },\n        D: (current, amount = 1) => { current.y += amount },\n        L: (current, amount = 1) => { current.x -= amount },\n        R: (current, amount = 1) => { current.x += amount }\n      },\n      p2Dirs: ['R', 'D', 'L', 'U']\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const pattern = /(?<dir>[LRUD]{1})\\s(?<steps>\\d+)\\s\\((?<color>#[0-9a-f]{6})\\)/\n      const instructions = input.map(i => {\n        const res = i.match(pattern).groups\n\n        const hex = res.color.replace('#', '')\n\n        return {\n          p1: {\n            dir: res.dir,\n            steps: +res.steps,\n            color: res.color\n          },\n          p2: {\n            dir: this.p2Dirs[+hex.charAt(5)],\n            steps: parseInt(hex.substring(0, 5), 16),\n            color: '#00acef'\n          }\n        }\n      })\n\n      console.log(instructions)\n\n      const p1 = this.solve(instructions.map(i => i.p1))\n      this.solutions.partOne = Object.keys(p1.newGrid).length\n      this.solutions.partTwo = this.solvePart2(instructions.map(i => i.p2))\n\n      this.$nextTick(() => this.plot(p1.grid, p1.dims, p1.newGrid))\n    },\n    solvePart2: function (instructions) {\n      // First we count the border area\n      let current = { x: 0, y: 0 }\n      let borderCount = 1\n\n      instructions.forEach(i => {\n        for (let a = 0; a < i.steps; a++) {\n          this.dirs[i.dir](current)\n\n          borderCount++\n        }\n      })\n\n      const vertices = []\n\n      current = { x: 0, y: 0 }\n\n      instructions.forEach(i => {\n        this.dirs[i.dir](current, i.steps)\n        vertices.push({ x: current.x, y: current.y })\n      })\n\n      // Then we use this polygon area calculation algorithm to find the area inside\n      // https://web.archive.org/web/20100405070507/http://valis.cs.uiuc.edu/~sariel/research/CG/compgeom/msg00831.html\n      let area = 0\n      for (let i = 0; i < vertices.length; i++) {\n        const j = (i + 1) % vertices.length\n        area += vertices[i].x * vertices[j].y\n        area -= vertices[i].y * vertices[j].x\n      }\n\n      // we actually calculated the area and the border twice\n      return Math.abs(area / 2) + Math.ceil(borderCount / 2)\n    },\n    solve: function (instructions) {\n      const current = { x: 0, y: 0 }\n      const grid = {}\n      grid[`${current.x}|${current.y}`] = instructions[0].color\n\n      const dims = {\n        xMin: 0,\n        xMax: 0,\n        yMin: 0,\n        yMax: 0\n      }\n\n      instructions.forEach(i => {\n        for (let a = 0; a < i.steps; a++) {\n          this.dirs[i.dir](current)\n\n          grid[`${current.x}|${current.y}`] = i.color\n\n          // Update dimensions\n          dims.xMin = Math.min(dims.xMin, current.x)\n          dims.xMax = Math.max(dims.xMax, current.x)\n          dims.yMin = Math.min(dims.yMin, current.y)\n          dims.yMax = Math.max(dims.yMax, current.y)\n        }\n      })\n\n      const newGrid = JSON.parse(JSON.stringify(grid))\n      // This is a bit of a hack. We don't actually know if 1,1 is inside the area, but it works fine on the example and my input.\n      this.floodFill({ x: 1, y: 1 }, dims, newGrid)\n\n      return {\n        grid,\n        newGrid,\n        dims\n      }\n    },\n    floodFill: function (curr, dims, newGrid) {\n      // Map the grid to hashes instead of the color hexes\n      Object.keys(newGrid).forEach(k => { newGrid[k] = '#' })\n\n      // Maintain a queue\n      const queue = [curr]\n\n      while (queue.length > 0) {\n        // Get first one\n        const curr = queue.shift()\n\n        // Check if it's valid\n        if (curr.x >= dims.xMin && curr.x <= dims.xMax && curr.y >= dims.yMin && curr.y <= dims.yMax && !newGrid[`${curr.x}|${curr.y}`]) {\n          // Mark as filled\n          newGrid[`${curr.x}|${curr.y}`] = '#'\n\n          // Continue for all directions\n          Object.keys(this.dirs).forEach(d => {\n            const next = { x: curr.x, y: curr.y }\n            this.dirs[d](next)\n            queue.push(next)\n          })\n        }\n      }\n    },\n    plot: function (grid, dims, filled) {\n      // Initialise the canvas\n      const canvas = document.getElementById('partOne')\n      const factor = 6\n\n      // Update dimensions based on grid sizes\n      const width = dims.xMax - dims.xMin + 1\n      const height = dims.yMax - dims.yMin + 1\n      canvas.width = width * factor\n      canvas.height = height * factor\n\n      const ctx = canvas.getContext('2d')\n\n      this.$nextTick(() => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n        // Offset for better drawing accuracy\n        ctx.translate(0.5, 0.5)\n        ctx.lineWidth = 1\n\n        ctx.fillStyle = '#2c3e50'\n        ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n        for (let y = 0; y <= height; y++) {\n          for (let x = 0; x <= width; x++) {\n            const xx = dims.xMin + x\n            const yy = dims.yMin + y\n            if (filled[`${xx}|${yy}`]) {\n              const color = grid[`${xx}|${yy}`] || '#34495e'\n              ctx.fillStyle = color\n              ctx.fillRect(x * factor, y * factor, factor, factor)\n            }\n          }\n        }\n\n        ctx.translate(-0.5, -0.5)\n      })\n    }\n  }\n}\n</script>\n\n<style>\n.canvas-holder {\n  overflow: auto;\n  height: 1000px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day18.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day18.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day18.vue?vue&type=template&id=4e52c22c\"\nimport script from \"./Day18.vue?vue&type=script&lang=js\"\nexport * from \"./Day18.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day18.vue?vue&type=style&index=0&id=4e52c22c&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","proxy","staticRenderFns","components","Day","data","partOne","partTwo","dirs","U","current","D","L","R","p2Dirs","methods","p1","dir","steps","color","p2","console","solvePart2","x","y","instructions","borderCount","vertices","area","solve","grid","xMin","xMax","yMin","yMax","dims","newGrid","floodFill","Object","queue","plot","canvas","ctx","component"],"sourceRoot":""}
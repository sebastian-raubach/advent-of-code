{"version":3,"file":"js/5595.c80a9ae1.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCQtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GAEA,gBAGAQ,EAAAA,SAAAA,IACA,wBAEA,eACA,WAEA,IACAC,EAAAA,IAEA,IACAC,EAAAA,KAGA,kBACAD,EAAAA,KAAAA,IAEA,kBACAC,EAAAA,KAAAA,GAGAC,EAAAA,IAAAA,EAAAA,GACAA,EAAAA,IAAAA,EAAAA,EAAAA,IAGA,6BACA,8BACA,0CACA,8BAEA,6DACA,4DACA,EACAC,UAAAA,SAAAA,EAAAA,EAAAA,GA6EA,EAEAC,aAAAA,SAAAA,GACA,gBAGA,UAIA,OAFA,+BAEA,CACA,EACAC,0BAAAA,SAAAA,GACA,gBAGA,UAOA,OAHAC,MAAAA,KAAAA,EAAAA,QAAAA,QAAAA,GAAAA,UAAAA,GAAAA,QAAAA,GAAAA,EAAAA,gBAAAA,IACAC,SAAAA,GAAAA,KAAAA,QAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,KAEA,CACA,EACAC,QAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAMA,GAJAC,EAAAA,KAAAA,GAEAC,EAAAA,KAAAA,GAEA,UAGA,YADAC,EAAAA,IAAAA,EAAAA,KAAAA,MAKA,oCAEAT,EAAAA,IAAAA,GAEAU,QAAAA,GAAAA,UAAAA,IAAAA,IAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,gBAAAA,IAAAA,EAAAA,QAAAA,MAEAL,SAAAA,GAAAA,KAAAA,QAAAA,EAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,SAAAA,IACA,ICrL6P,I,UCQzPM,GAAY,OACd,EACAhC,EACAW,GACA,EACA,KACA,WACA,MAIF,EAAeqB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2021/Day12.vue?8b71","webpack://advent-of-code/src/components/2021/Day12.vue","webpack://advent-of-code/./src/components/2021/Day12.vue?e7ad","webpack://advent-of-code/./src/components/2021/Day12.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":12,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"12\" :year=\"2021\" :solutions=\"solutions\" @input-changed=\"onInputChanged\" />\n</template>\n\n<script>\n/* eslint-disable new-cap */\nimport Day from '@/components/Day'\n// import { createColorGradient } from '@/util/color'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Keep trackk of (source -> [targets])\n      const nodeToNeighbor = new Map()\n\n      // Parse the input\n      input.forEach(i => {\n        const [source, target] = i.split('-')\n\n        let sourceNeighbors = nodeToNeighbor.get(source)\n        let targetNeighbors = nodeToNeighbor.get(target)\n\n        if (!sourceNeighbors) {\n          sourceNeighbors = []\n        }\n        if (!targetNeighbors) {\n          targetNeighbors = []\n        }\n\n        if (sourceNeighbors.indexOf(target) === -1) {\n          sourceNeighbors.push(target)\n        }\n        if (targetNeighbors.indexOf(source) === -1) {\n          targetNeighbors.push(source)\n        }\n\n        nodeToNeighbor.set(source, sourceNeighbors)\n        nodeToNeighbor.set(target, targetNeighbors)\n      })\n\n      const pathsPartOne = this.findAllPaths(nodeToNeighbor)\n      this.solutions.partOne = pathsPartOne.size\n      const pathsPartTwo = this.findAllPathsWithMultiples(nodeToNeighbor)\n      this.solutions.partTwo = pathsPartTwo.size\n\n      this.$nextTick(() => this.drawGraph(nodeToNeighbor, this.$refs.partOne, pathsPartOne))\n      this.$nextTick(() => this.drawGraph(nodeToNeighbor, this.$refs.partTwo, pathsPartTwo))\n    },\n    drawGraph: function (nodeToNeighbor, element, paths) {\n      // const nodeCount = new Map()\n\n      // console.log(paths)\n\n      // let min = 0\n      // let max = 0\n      // paths.forEach(p => p.split(',').forEach(l => {\n      //   if (!nodeCount.has(l)) {\n      //     nodeCount.set(l, 0)\n      //   }\n      //   const count = nodeCount.get(l) + 1\n      //   nodeCount.set(l, count)\n\n      //   min = Math.min(min, count)\n      //   max = Math.max(max, count)\n      // }))\n\n      // const g = new dagreD3.graphlib.Graph().setGraph({})\n\n      // const nodes = []\n      // const edges = new Set()\n\n      // const gradient = createColorGradient('#C4E538', '#006266', max - min + 1)\n\n      // console.log(nodeCount)\n\n      // nodeToNeighbor.forEach((v, k) => nodes.push({\n      //   label: k,\n      //   shape: 'circle',\n      //   style: `stroke: black; fill: ${nodeCount.has(k) ? gradient[nodeCount.get(k) - min] : 'white'};`,\n      //   labelStyle: `font-size: ${k === k.toLowerCase() ? 1 : 2}em`\n      // }))\n      // nodeToNeighbor.forEach((v, k) => v.forEach(t => {\n      //   const arr = [k, t]\n      //   arr.sort((a, b) => {\n      //     if (a === 'start' || b === 'end') {\n      //       return -1\n      //     } else if (b === 'start' || a === 'end') {\n      //       return 1\n      //     } else {\n      //       return a.localeCompare(b)\n      //     }\n      //   })\n      //   edges.add(`${arr[0]},${arr[1]}`)\n      // }))\n\n      // nodes.sort((a, b) => {\n      //   if (a.label === 'start' || b.label === 'end') {\n      //     return -1\n      //   } else if (b.label === 'start' || a.label === 'end') {\n      //     return 1\n      //   } else {\n      //     return a.label.localeCompare(b.label)\n      //   }\n      // })\n\n      // nodes.forEach(n => g.setNode(n.label, n))\n      // edges.forEach(e => {\n      //   const [source, target] = e.split(',')\n      //   g.setEdge(source, target, {\n      //     style: 'stroke: black; fill: none;',\n      //     arrowhead: 'undirected'\n      //   })\n      // })\n\n      // const render = new dagreD3.render()\n\n      // const svg = d3Select.select(element)\n      // const svgGroup = svg.append('g')\n\n      // // Run the renderer. This is what draws the final graph.\n      // render(svgGroup, g)\n\n      // // Center the graph\n      // const xCenterOffset = (svg.attr('width') - g.graph().width) / 2\n      // svgGroup.attr('transform', 'translate(' + xCenterOffset + ', 20)')\n      // svg.attr('height', g.graph().height + 40)\n    },\n    findAllPaths: function (nodeToNeighbor) {\n      const source = 'start'\n\n      // Keep track of all found paths. Use a set to ignore multiples found in part 2\n      const paths = new Set()\n      // Find them by recursive DFS from the start\n      this.recurse(source, nodeToNeighbor, null, [], [], paths)\n\n      return paths\n    },\n    findAllPathsWithMultiples: function (nodeToNeighbor) {\n      const source = 'start'\n\n      // Keep track of all found paths. Use a set to ignore multiples found in part 2\n      const paths = new Set()\n\n      // Get all lowercase caves\n      // Find the paths by recursive DFS from the start allowing this single cave to appear multiple times\n      Array.from(nodeToNeighbor.keys()).filter(k => k !== 'start' && k !== 'end' && k.toLowerCase() === k)\n        .forEach(l => this.recurse(source, nodeToNeighbor, l, [], [], paths))\n\n      return paths\n    },\n    recurse: function (current, nodeToNeighbor, multiple, visitedNodes, path, paths) {\n      // Remember we visited this one\n      visitedNodes.push(current)\n      // Add it to the path\n      path.push(current)\n\n      if (current === 'end') {\n        // If we reached the end, return the path\n        paths.add(path.join(','))\n        return\n      }\n\n      // Count how often we've visited the small cave we can visit twice\n      const multipleCount = path.filter(p => p === multiple).length\n      // For each neighbor\n      nodeToNeighbor.get(current)\n        // Filter out visited notes unless they are upper case or it's the one we can visit twice and we haven't yet\n        .filter(n => n !== 'start' && ((n === multiple && multipleCount < 2) || n === n.toUpperCase() || visitedNodes.indexOf(n) === -1))\n        // DFS into them\n        .forEach(n => this.recurse(n, nodeToNeighbor, multiple, visitedNodes.concat(), path.concat(), paths))\n    }\n  }\n}\n</script>\n\n<style scoped>\n.svg-holder {\n  overflow: auto;\n  height: 500px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day12.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day12.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day12.vue?vue&type=template&id=36abffa0&scoped=true\"\nimport script from \"./Day12.vue?vue&type=script&lang=js\"\nexport * from \"./Day12.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day12.vue?vue&type=style&index=0&id=36abffa0&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"36abffa0\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","input","sourceNeighbors","targetNeighbors","nodeToNeighbor","drawGraph","findAllPaths","findAllPathsWithMultiples","Array","forEach","recurse","visitedNodes","path","paths","filter","component"],"sourceRoot":""}
{"version":3,"file":"js/9859.21189b4b.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,iBAAiB,CAACV,EAAG,SAAS,CAACU,YAAY,SAASR,MAAM,CAAC,GAAK,UAAU,MAAQN,EAAIe,UAAUC,MAAM,OAAShB,EAAIe,UAAUE,YAAY,EAAEC,OAAM,MAAS,EAC9aC,EAAkB,G,WCYtB,MAAMC,EAAO,IACPC,EAAO,IACPC,EAAO,IACPC,EAAO,IACPC,EAAS,IAEf,OACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACApB,UAAAA,CACAqB,QAAAA,KACAC,QAAAA,MAEAd,UAAAA,CACAC,MAAAA,IACAC,OAAAA,KAGA,EACAa,QAAAA,CACArB,eAAAA,SAAAA,GACA,WACAsB,EAAAA,SAAAA,IAEA,sBAEA,kBACA,kBAKA,GAHAC,EAAAA,IAAAA,EAAAA,GACAC,EAAAA,GAAAA,EAAAA,GAAAA,MAAAA,MAAAA,KAAAA,IAAAA,IAEA,SAEA,iCACAC,EAAAA,KAAAA,CACAC,EAAAA,EAAAA,GACAC,EAAAA,SAKA,iCACAF,EAAAA,KAAAA,CACAC,EAAAA,EACAC,EAAAA,EAAAA,IAGA,IAIA,kBACA,QACA,qDAGAF,EAAAA,SAAAA,IACAG,EAAAA,GAAAA,KAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GACAA,EAAAA,GAAAA,KAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GACAC,EAAAA,GAAAA,KAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GACAA,EAAAA,GAAAA,KAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAEA,oDACA,uDAGAD,EAAAA,KACAA,EAAAA,KACA,yBACA,yBAGA,aACA,8BACA,WACA,6BACAE,EAAAA,KAAAA,GAEA,iBACA,CAGAL,EAAAA,SAAAA,IACAM,EAAAA,GAAAA,EAAAA,GACAA,EAAAA,GAAAA,EAAAA,GAGA,yBAIA,aAAAL,EAAAA,IAAAA,EAAAA,GAAAC,EAAAA,EAAAA,EAAAA,IACA,0CAEA,oBACA,oBAEA,iCACA,EACAK,KAAAA,WAEA,2CACA,qBACAC,EAAAA,UAAAA,EAKA,UAEA,gBACA1B,MAAAA,KAAAA,KAAAA,GAAAA,OAAAA,EACAC,OAAAA,KAAAA,KAAAA,OAAAA,GAGA,qBACA,mCACA,sCACA,qBACAyB,EAAAA,UAAAA,UACAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IACA,qBACAA,EAAAA,UAAAA,UACAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IACA,sBACAA,EAAAA,UAAAA,UACAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAGA,GAEA,EACAC,OAAAA,WACA,cAGA,4BAEA,mCACA,SAEA,mBAGA,GAFAC,EAAAA,KAEA,uBAEA,MAGA,6BAIA,0DAEA,iBACA,aAGA,oFACAC,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,SAEA,6CACA,+BACA,MAEAD,EAAAA,KACA,uBACA,CAEA,6CACA,+BACA,MAEAC,EAAAA,KACA,uBACA,CAEA,wBACAC,EAAAA,IACA,CAGA,4BACA,qBAGA,wCAEAD,EAAAA,KACA,wBACA,qBAEA,wCAEAD,EAAAA,KACA,wBACA,qBAGA,KACA,CACA,KACA,CArDA,wBACAE,EAAAA,CAqDA,CACA,CACA,EACAC,aAAAA,WAEA,4CAEA,cAGA,QACA,uDACA,sCACA,0CACAC,IAIA,wBACA,EACAC,aAAAA,WAEA,QACA,uDACA,sCACA,qBACAD,IAIA,wBACA,IC7P6P,I,UCQzPE,GAAY,OACd,EACApD,EACAoB,GACA,EACA,KACA,KACA,MAIF,EAAegC,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2018/Day17.vue?5582","webpack://advent-of-code/src/components/2018/Day17.vue","webpack://advent-of-code/./src/components/2018/Day17.vue?13fb","webpack://advent-of-code/./src/components/2018/Day17.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":17,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":_vm.canvasOne.width,\"height\":_vm.canvasOne.height}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"17\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partOne\" class=\"canvas\" :width=\"canvasOne.width\" :height=\"canvasOne.height\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nconst REST = '~'\nconst CLAY = '#'\nconst SAND = '.'\nconst HYPO = '|'\nconst SOURCE = 'x'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      canvasOne: {\n        width: 1000,\n        height: 1000\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const clay = []\n      input.forEach(i => {\n        // Split x and y part\n        const parts = i.split(', ')\n        // Split each on the equals sign\n        const one = parts[0].split('=')\n        const two = parts[1].split('=')\n        // Convert to numbers\n        one[1] = +one[1]\n        two[1] = two[1].split('..').map(d => +d)\n\n        if (one[0] === SOURCE) {\n          // If the first coordinate is x, fill in the y's according to the range\n          for (let y = two[1][0]; y <= two[1][1]; y++) {\n            clay.push({\n              x: one[1],\n              y: y\n            })\n          }\n        } else {\n          // If the first coordinate is y, fill in the x's according to the range\n          for (let x = two[1][0]; x <= two[1][1]; x++) {\n            clay.push({\n              x: x,\n              y: one[1]\n            })\n          }\n        }\n      })\n\n      // Start with the spring\n      const xRange = [500, 500]\n      const yRange = [0, 0]\n      this.clayyRange = [Number.MAX_VALUE, -Number.MAX_VALUE]\n\n      // Then expand the range\n      clay.forEach(c => {\n        xRange[0] = Math.min(xRange[0], c.x)\n        xRange[1] = Math.max(xRange[1], c.x)\n        yRange[0] = Math.min(yRange[0], c.y)\n        yRange[1] = Math.max(yRange[1], c.y)\n\n        this.clayyRange[0] = Math.min(this.clayyRange[0], c.y)\n        this.clayyRange[1] = Math.max(this.clayyRange[1], c.y)\n      })\n      // Add 1 cell padding\n      xRange[0]--\n      xRange[1]++\n      this.clayyRange[0] -= yRange[0]\n      this.clayyRange[1] -= yRange[0]\n\n      // Fill the grid with sand\n      this.grid = []\n      for (let y = 0; y <= yRange[1] - yRange[0]; y++) {\n        const row = []\n        for (let x = 0; x <= xRange[1] - xRange[0]; x++) {\n          row.push(SAND)\n        }\n        this.grid.push(row)\n      }\n\n      // Adjust coordinates to be relative to top left coordinate\n      clay.forEach(c => {\n        c.x -= xRange[0]\n        c.y -= yRange[0]\n\n        // Set the clay\n        this.grid[c.y][c.x] = CLAY\n      })\n\n      // Set the spring\n      this.spring = { x: 500 - xRange[0], y: 0 - yRange[0] }\n      this.grid[this.spring.y][this.spring.x] = SOURCE\n\n      this.solvePartOne()\n      this.solvePartTwo()\n\n      this.$nextTick(() => this.draw())\n    },\n    draw: function () {\n      // Initialise the canvas\n      const canvas = document.getElementById('partOne')\n      const ctx = canvas.getContext('2d')\n      ctx.lineWidth = 1\n\n      // Create gradient\n      // const sandGradient = createMultiColorGradient(VIRIDIS, result.count)\n\n      const factor = 4\n\n      this.canvasOne = {\n        width: this.grid[0].length * factor,\n        height: this.grid.length * factor\n      }\n\n      this.$nextTick(() => {\n        for (let y = 0; y < this.grid.length; y++) {\n          for (let x = 0; x < this.grid[y].length; x++) {\n            if (this.grid[y][x] === REST) {\n              ctx.fillStyle = '#3498db'\n              ctx.fillRect(x * factor, y * factor, factor, factor)\n            } else if (this.grid[y][x] === HYPO) {\n              ctx.fillStyle = '#2980b9'\n              ctx.fillRect(x * factor, y * factor, factor, factor)\n            } else if (this.grid[y][x] === CLAY) {\n              ctx.fillStyle = '#7f8c8d'\n              ctx.fillRect(x * factor, y * factor, factor, factor)\n            }\n          }\n        }\n      })\n    },\n    goDown: function () {\n      const valid = [CLAY, REST]\n\n      // While we still have a position that can advance\n      while (this.active.length > 0) {\n        // Get the next one\n        let current = this.active.shift().concat()\n        while (true) {\n          // Continue downwards as long as we're going through sand\n          const next = current.concat()\n          next[1]++\n\n          if (next[1] >= this.grid.length) {\n            // We reached the bottom\n            break\n          }\n\n          if (this.grid[next[1]][next[0]] === SAND) {\n            // If we hit sand, just continue downwards\n            this.grid[next[1]][next[0]] = HYPO\n            current = next\n          } else if (this.grid[next[1]][next[0]] === CLAY || this.grid[next[1]][next[0]] === REST) {\n            // Else, if we hit clay or water at rest, expand to the left and right\n            let left = current.concat()\n            let right = current.concat()\n\n            // While we haven't reached a point where the water can overflow\n            while (valid.includes(this.grid[left[1] + 1][left[0] - 1]) && valid.includes(this.grid[right[1] + 1][right[0] + 1])) {\n              left = current.concat()\n              right = current.concat()\n              // Find the left boundary\n              while (valid.includes(this.grid[left[1] + 1][left[0] - 1])) {\n                if (this.grid[left[1]][left[0] - 1] === CLAY) {\n                  break\n                }\n                left[0]--\n                this.grid[left[1]][left[0]] = REST\n              }\n              // Find the right boundary\n              while (valid.includes(this.grid[right[1] + 1][right[0] + 1])) {\n                if (this.grid[right[1]][right[0] + 1] === CLAY) {\n                  break\n                }\n                right[0]++\n                this.grid[right[1]][right[0]] = REST\n              }\n\n              this.grid[current[1]][current[0]] = REST\n              current[1]--\n            }\n\n            // We have reached a tipping point, fill the top layer with hypothetical water\n            for (let x = left[0]; x < right[0] + 1; x++) {\n              this.grid[left[1]][x] = HYPO\n            }\n\n            if (!valid.includes(this.grid[right[1] + 1][right[0] + 1])) {\n              // If the overflow is to the right, remember this\n              right[0]++\n              this.grid[right[1]][right[0]] = HYPO\n              this.active.push(right)\n            }\n            if (!valid.includes(this.grid[left[1] + 1][left[0] - 1])) {\n              // If the overflow is to the left, remember this\n              left[0]--\n              this.grid[left[1]][left[0]] = HYPO\n              this.active.push(left)\n            }\n\n            break\n          } else {\n            break\n          }\n        }\n      }\n    },\n    solvePartOne: function () {\n      // Start with one active position - the spring\n      this.active = [[this.spring.x, this.spring.y]]\n      // Iterate the way down\n      this.goDown()\n\n      // Count the occurances of water\n      let counter = 0\n      for (let y = this.clayyRange[0]; y <= this.clayyRange[1]; y++) {\n        for (let x = 0; x < this.grid[y].length; x++) {\n          if (this.grid[y][x] === REST || this.grid[y][x] === HYPO) {\n            counter++\n          }\n        }\n      }\n      this.solutions.partOne = counter\n    },\n    solvePartTwo: function () {\n      // Cound the occurance of water at rest\n      let counter = 0\n      for (let y = this.clayyRange[0]; y <= this.clayyRange[1]; y++) {\n        for (let x = 0; x < this.grid[y].length; x++) {\n          if (this.grid[y][x] === REST) {\n            counter++\n          }\n        }\n      }\n      this.solutions.partTwo = counter\n    }\n  }\n}\n</script>\n\n<style>\n.canvas-holder {\n  overflow: auto;\n  height: 1000px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day17.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day17.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day17.vue?vue&type=template&id=75085ffa\"\nimport script from \"./Day17.vue?vue&type=script&lang=js\"\nexport * from \"./Day17.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day17.vue?vue&type=style&index=0&id=75085ffa&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","canvasOne","width","height","proxy","staticRenderFns","REST","CLAY","SAND","HYPO","SOURCE","components","Day","data","partOne","partTwo","methods","input","one","two","clay","x","y","xRange","yRange","row","c","draw","ctx","goDown","next","left","right","current","solvePartOne","counter","solvePartTwo","component"],"sourceRoot":""}
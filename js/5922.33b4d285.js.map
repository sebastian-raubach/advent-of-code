{"version":3,"file":"js/5922.33b4d285.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GAEA,+CACA,yCAGA,8DAEA,iEACA,EACAQ,MAAAA,SAAAA,EAAAA,GAEA,sBAEA,QACA,IAGA,oBACA,iBAEAC,EAAAA,EACA,KACA,CAIA,sBACA,iBAEAC,EAAAA,EACA,KACA,CAIA,eAEA,IC3D4P,I,UCOxPC,GAAY,OACd,EACArB,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAeU,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2023/Day6.vue?ba82","webpack://advent-of-code/src/components/2023/Day6.vue","webpack://advent-of-code/./src/components/2023/Day6.vue?a591","webpack://advent-of-code/./src/components/2023/Day6.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":6,\"year\":2023,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"6\" :year=\"2023\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Parse the input\n      const time = input[0].split(/\\s+/).slice(1).map(Number)\n      const dist = input[1].split(/\\s+/).slice(1).map(Number)\n\n      // Solve part one by multiplying the number of options together\n      this.solutions.partOne = this.solve(time, dist).reduce((a, b) => a * b, 1)\n      // Solve part two by counting the number of options for the concatenated numbers\n      this.solutions.partTwo = this.solve([+time.join('')], [+dist.join('')])[0]\n    },\n    solve: function (time, dist) {\n      // Map each time to the count of wait/speed combinations that win\n      return time.map((t, i) => {\n        // Determine the minimal time and maximal time to wait\n        let min = 1\n        let max = t\n\n        // Search for the min from the start\n        for (let j = 1; j < t; j++) {\n          if (j * (t - j) > dist[i]) {\n            // Once we find a winning combination, remember and break\n            min = j\n            break\n          }\n        }\n\n        // Search for the max from the end\n        for (let j = t - 1; j > 0; j--) {\n          if (j * (t - j) > dist[i]) {\n            // Once we find a winning combination, remember and break\n            max = j\n            break\n          }\n        }\n\n        // Return the size of the range\n        return max - min + 1\n      })\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day6.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day6.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day6.vue?vue&type=template&id=2ac3edf3\"\nimport script from \"./Day6.vue?vue&type=script&lang=js\"\nexport * from \"./Day6.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","solve","min","max","component"],"sourceRoot":""}
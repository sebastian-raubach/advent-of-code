{"version":3,"file":"js/8585.4f6c68b3.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,sBAAsB,CAACV,EAAG,OAAO,CAACW,SAAS,CAAC,UAAYf,EAAIgB,GAAGhB,EAAIiB,aAAaC,cAAc,EAAEC,OAAM,GAAM,CAACP,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,sBAAsB,CAACV,EAAG,OAAO,CAACW,SAAS,CAAC,UAAYf,EAAIgB,GAAGhB,EAAIiB,aAAaG,cAAc,EAAED,OAAM,MAAS,EAC1iBE,EAAkB,G,WCatB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAjB,UAAAA,CACAW,QAAAA,KACAE,QAAAA,MAEAH,aAAAA,CACAC,QAAAA,KACAE,QAAAA,MAGA,EACAK,QAAAA,CACAhB,eAAAA,SAAAA,GACA,kBACA,sCAGA,qBACA,oBACA,EACAiB,aAAAA,SAAAA,GACA,oCAEA,kBAEA,oBAIA,iBAEA,+BACA,wCACA,EAQAC,MAAAA,SAAAA,EAAAA,EAAAA,GACA,QACA,IAEA,gEAGA,WAEAC,EAAAA,EACAC,EAAAA,EAEA,sCAGA,2BACA,+BAEA,gBAGA,aAEA,0CAEA,aAEAD,IACAE,EAAAA,GAAAA,IAAAA,IACA,eAEAF,IACAE,EAAAA,GAAAA,IAAAA,GAIAD,IAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,CACA,CACA,CAGAE,EAAAA,CACA,CAEA,OACAC,MAAAA,EACAC,aAAAA,KAAAA,eAAAA,GAEA,EACAC,aAAAA,SAAAA,GACA,uCACA,8BAEA,qBAEA,oBAEA,cACA,SAGA,oBAGA,cACA,SAGA,YACA,QAEA,CAEA,YAEA,+BACA,wCACA,EACAC,eAAAA,SAAAA,GACA,4JACA,IC5I6P,I,UCQzPC,GAAY,OACd,EACArC,EACAsB,GACA,EACA,KACA,KACA,MAIF,EAAee,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2020/Day11.vue?67e6","webpack://advent-of-code/src/components/2020/Day11.vue","webpack://advent-of-code/./src/components/2020/Day11.vue?6b06","webpack://advent-of-code/./src/components/2020/Day11.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":11,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('pre',{staticClass:\"day-10-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.finalSeating.partOne)}})])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('pre',{staticClass:\"day-10-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.finalSeating.partTwo)}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"11\" :year=\"2020\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n<pre class=\"day-10-code border\"><code v-html=\"finalSeating.partOne\"></code></pre>\n    </template>\n    <template v-slot:partTwo>\n<pre class=\"day-10-code border\"><code v-html=\"finalSeating.partTwo\"></code></pre>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      finalSeating: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const grid = input.map(i => {\n        return i.split('').map(c => c === 'L' ? false : null)\n      })\n\n      this.solvePartOne(grid)\n      this.solvePartTwo(grid)\n    },\n    solvePartOne: function (grid) {\n      const partOne = this.solve(grid, 4, (grid, row, col, n) => {\n        // Get the neighbor row\n        const neighborRow = grid[row + n[1]]\n        // If it's invalid (outside of the grid), return false\n        if (neighborRow === undefined) {\n          return false\n        }\n        // Return true if the neighbor is occupied\n        return neighborRow[col + n[0]] === true\n      })\n      this.solutions.partOne = partOne.count\n      this.finalSeating.partOne = partOne.gridSolution\n    },\n    /**\n     * Solves the given seat occupation grid using the given allowed neighbors and the neighborhandler used to get the number of neighbors for a seat\n     * @param grid The task input\n     * @param allowedNeighbors The number of allowed neighbors per seat before the state switches\n     * @param neighborHandler The task part specific handler to determine the number of visible neighbors for a given seat\n     * @returns An object of the form: `{ count, gridSolution }` where `count` is the number of occupied seats and `gridSolution` is a formatted representation of the final grid.\n     */\n    solve: function (grid, allowedNeighbors, neighborHandler) {\n      let changeCount = 1\n      let occupiedCount = 0\n      // List all neighboring cells\n      const neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]\n\n      // While something changed, go on\n      while (changeCount > 0) {\n        // Reset change count and occupied count\n        changeCount = 0\n        occupiedCount = 0\n        // Take a copy of the grid, because we don't want to make live changes\n        const tempGrid = JSON.parse(JSON.stringify(grid))\n\n        // For each row and cell\n        for (let row = 0; row < grid.length; row++) {\n          for (let col = 0; col < grid[row].length; col++) {\n            // Get the current grid cell\n            const current = grid[row][col]\n\n            // Only consider seats\n            if (current !== null) {\n              // Iterate all neighbors and filter only the full seats\n              const neighborCount = neighbors.filter(n => neighborHandler(grid, row, col, n)).length\n\n              if (current === true && neighborCount >= allowedNeighbors) {\n                // If the current seat is occupied and at least `allowedNeighbors` neighbors are, set it to unoccupied\n                changeCount++\n                tempGrid[row][col] = false\n              } else if (current === false && neighborCount === 0) {\n                // If the current seat isn't occupied and there are no neighbors, it is now\n                changeCount++\n                tempGrid[row][col] = true\n              }\n\n              // Increase the count if required\n              occupiedCount += tempGrid[row][col] === true ? 1 : 0\n            }\n          }\n        }\n\n        grid = tempGrid\n      }\n\n      return {\n        count: occupiedCount,\n        gridSolution: this.getGridPrinted(grid)\n      }\n    },\n    solvePartTwo: function (grid) {\n      const maxDim = Math.max(grid.length, grid[0].length)\n      const partTwo = this.solve(grid, 5, (grid, row, col, n) => {\n        // Walk into the direction to check all visible neighbors\n        for (let times = 1; times < maxDim; times++) {\n          // Get the neighbor row\n          const neighborRow = grid[row + n[1] * times]\n          // If it's invalid (outside of the grid), return false\n          if (neighborRow === undefined) {\n            return false\n          }\n          // Get the neighborig cell\n          const neighbor = neighborRow[col + n[0] * times]\n\n          // If it's invalid (outside of the grid), return false\n          if (neighbor === undefined) {\n            return false\n          }\n          // Else, if it's a seat, return its value\n          if (neighbor !== null) {\n            return neighbor\n          }\n        }\n        // If no neighbor is found, return false\n        return false\n      })\n      this.solutions.partTwo = partTwo.count\n      this.finalSeating.partTwo = partTwo.gridSolution\n    },\n    getGridPrinted: function (grid) {\n      return grid.map(r => r.map(c => c === true ? '<span class=\"day-10-seat-full\">#</span>' : (c === false ? '<span class=\"day-10-seat-empty\">L</span>' : '.')).join('')).join('<br/>')\n    }\n  }\n}\n</script>\n\n<style>\n.day-10-code {\n  background-color: #2c3e50;\n  color: #7f8c8d;\n  max-height: 300px;\n}\n.day-10-seat-full {\n  background-color: #2ecc71;\n  color: #2c3e50;\n}\n.day-10-seat-empty {\n  background-color: #ecf0f1;\n  color: #2c3e50;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day11.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day11.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day11.vue?vue&type=template&id=2b6e9188\"\nimport script from \"./Day11.vue?vue&type=script&lang=js\"\nexport * from \"./Day11.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day11.vue?vue&type=style&index=0&id=2b6e9188&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","domProps","_s","finalSeating","partOne","proxy","partTwo","staticRenderFns","components","Day","data","methods","solvePartOne","solve","changeCount","occupiedCount","tempGrid","grid","count","gridSolution","solvePartTwo","getGridPrinted","component"],"sourceRoot":""}
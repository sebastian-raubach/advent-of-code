"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[9859],{63883:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day17)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day17.vue?vue&type=template&id=75085ffa\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":17,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":_vm.canvasOne.width,\"height\":_vm.canvasOne.height}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day17.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nconst REST = '~';\nconst CLAY = '#';\nconst SAND = '.';\nconst HYPO = '|';\nconst SOURCE = 'x';\n/* harmony default export */ const Day17vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      canvasOne: {\n        width: 1000,\n        height: 1000\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const clay = [];\n      input.forEach(i => {\n        // Split x and y part\n        const parts = i.split(', ');\n        // Split each on the equals sign\n        const one = parts[0].split('=');\n        const two = parts[1].split('=');\n        // Convert to numbers\n        one[1] = +one[1];\n        two[1] = two[1].split('..').map(d => +d);\n        if (one[0] === SOURCE) {\n          // If the first coordinate is x, fill in the y's according to the range\n          for (let y = two[1][0]; y <= two[1][1]; y++) {\n            clay.push({\n              x: one[1],\n              y: y\n            });\n          }\n        } else {\n          // If the first coordinate is y, fill in the x's according to the range\n          for (let x = two[1][0]; x <= two[1][1]; x++) {\n            clay.push({\n              x: x,\n              y: one[1]\n            });\n          }\n        }\n      });\n\n      // Start with the spring\n      const xRange = [500, 500];\n      const yRange = [0, 0];\n      this.clayyRange = [Number.MAX_VALUE, -Number.MAX_VALUE];\n\n      // Then expand the range\n      clay.forEach(c => {\n        xRange[0] = Math.min(xRange[0], c.x);\n        xRange[1] = Math.max(xRange[1], c.x);\n        yRange[0] = Math.min(yRange[0], c.y);\n        yRange[1] = Math.max(yRange[1], c.y);\n        this.clayyRange[0] = Math.min(this.clayyRange[0], c.y);\n        this.clayyRange[1] = Math.max(this.clayyRange[1], c.y);\n      });\n      // Add 1 cell padding\n      xRange[0]--;\n      xRange[1]++;\n      this.clayyRange[0] -= yRange[0];\n      this.clayyRange[1] -= yRange[0];\n\n      // Fill the grid with sand\n      this.grid = [];\n      for (let y = 0; y <= yRange[1] - yRange[0]; y++) {\n        const row = [];\n        for (let x = 0; x <= xRange[1] - xRange[0]; x++) {\n          row.push(SAND);\n        }\n        this.grid.push(row);\n      }\n\n      // Adjust coordinates to be relative to top left coordinate\n      clay.forEach(c => {\n        c.x -= xRange[0];\n        c.y -= yRange[0];\n\n        // Set the clay\n        this.grid[c.y][c.x] = CLAY;\n      });\n\n      // Set the spring\n      this.spring = {\n        x: 500 - xRange[0],\n        y: 0 - yRange[0]\n      };\n      this.grid[this.spring.y][this.spring.x] = SOURCE;\n      this.solvePartOne();\n      this.solvePartTwo();\n      this.$nextTick(() => this.draw());\n    },\n    draw: function () {\n      // Initialise the canvas\n      const canvas = document.getElementById('partOne');\n      const ctx = canvas.getContext('2d');\n      ctx.lineWidth = 1;\n\n      // Create gradient\n      // const sandGradient = createMultiColorGradient(VIRIDIS, result.count)\n\n      const factor = 4;\n      this.canvasOne = {\n        width: this.grid[0].length * factor,\n        height: this.grid.length * factor\n      };\n      this.$nextTick(() => {\n        for (let y = 0; y < this.grid.length; y++) {\n          for (let x = 0; x < this.grid[y].length; x++) {\n            if (this.grid[y][x] === REST) {\n              ctx.fillStyle = '#3498db';\n              ctx.fillRect(x * factor, y * factor, factor, factor);\n            } else if (this.grid[y][x] === HYPO) {\n              ctx.fillStyle = '#2980b9';\n              ctx.fillRect(x * factor, y * factor, factor, factor);\n            } else if (this.grid[y][x] === CLAY) {\n              ctx.fillStyle = '#7f8c8d';\n              ctx.fillRect(x * factor, y * factor, factor, factor);\n            }\n          }\n        }\n      });\n    },\n    goDown: function () {\n      const valid = [CLAY, REST];\n\n      // While we still have a position that can advance\n      while (this.active.length > 0) {\n        // Get the next one\n        let current = this.active.shift().concat();\n        while (true) {\n          // Continue downwards as long as we're going through sand\n          const next = current.concat();\n          next[1]++;\n          if (next[1] >= this.grid.length) {\n            // We reached the bottom\n            break;\n          }\n          if (this.grid[next[1]][next[0]] === SAND) {\n            // If we hit sand, just continue downwards\n            this.grid[next[1]][next[0]] = HYPO;\n            current = next;\n          } else if (this.grid[next[1]][next[0]] === CLAY || this.grid[next[1]][next[0]] === REST) {\n            // Else, if we hit clay or water at rest, expand to the left and right\n            let left = current.concat();\n            let right = current.concat();\n\n            // While we haven't reached a point where the water can overflow\n            while (valid.includes(this.grid[left[1] + 1][left[0] - 1]) && valid.includes(this.grid[right[1] + 1][right[0] + 1])) {\n              left = current.concat();\n              right = current.concat();\n              // Find the left boundary\n              while (valid.includes(this.grid[left[1] + 1][left[0] - 1])) {\n                if (this.grid[left[1]][left[0] - 1] === CLAY) {\n                  break;\n                }\n                left[0]--;\n                this.grid[left[1]][left[0]] = REST;\n              }\n              // Find the right boundary\n              while (valid.includes(this.grid[right[1] + 1][right[0] + 1])) {\n                if (this.grid[right[1]][right[0] + 1] === CLAY) {\n                  break;\n                }\n                right[0]++;\n                this.grid[right[1]][right[0]] = REST;\n              }\n              this.grid[current[1]][current[0]] = REST;\n              current[1]--;\n            }\n\n            // We have reached a tipping point, fill the top layer with hypothetical water\n            for (let x = left[0]; x < right[0] + 1; x++) {\n              this.grid[left[1]][x] = HYPO;\n            }\n            if (!valid.includes(this.grid[right[1] + 1][right[0] + 1])) {\n              // If the overflow is to the right, remember this\n              right[0]++;\n              this.grid[right[1]][right[0]] = HYPO;\n              this.active.push(right);\n            }\n            if (!valid.includes(this.grid[left[1] + 1][left[0] - 1])) {\n              // If the overflow is to the left, remember this\n              left[0]--;\n              this.grid[left[1]][left[0]] = HYPO;\n              this.active.push(left);\n            }\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    },\n    solvePartOne: function () {\n      // Start with one active position - the spring\n      this.active = [[this.spring.x, this.spring.y]];\n      // Iterate the way down\n      this.goDown();\n\n      // Count the occurances of water\n      let counter = 0;\n      for (let y = this.clayyRange[0]; y <= this.clayyRange[1]; y++) {\n        for (let x = 0; x < this.grid[y].length; x++) {\n          if (this.grid[y][x] === REST || this.grid[y][x] === HYPO) {\n            counter++;\n          }\n        }\n      }\n      this.solutions.partOne = counter;\n    },\n    solvePartTwo: function () {\n      // Cound the occurance of water at rest\n      let counter = 0;\n      for (let y = this.clayyRange[0]; y <= this.clayyRange[1]; y++) {\n        for (let x = 0; x < this.grid[y].length; x++) {\n          if (this.grid[y][x] === REST) {\n            counter++;\n          }\n        }\n      }\n      this.solutions.partTwo = counter;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2018/Day17.vue?vue&type=script&lang=js\n /* harmony default export */ const _2018_Day17vue_type_script_lang_js = (Day17vue_type_script_lang_js); \n;// CONCATENATED MODULE: ./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-12.use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day17.vue?vue&type=style&index=0&id=75085ffa&prod&lang=css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/components/2018/Day17.vue?vue&type=style&index=0&id=75085ffa&prod&lang=css\n\n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2018/Day17.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2018_Day17vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day17 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///63883\n")}}]);
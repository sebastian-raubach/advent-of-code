"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[8843],{4693:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day16)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day16.vue?vue&type=template&id=911e3fee\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":16,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day16.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day16vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const binary = [];\n\n      // Convert the input into a binary array. First, convert hex to binary. Then pad to 4 digits, then push onto the array\n      input[0].split('').forEach(c => parseInt(c, 16).toString(2).padStart(4, '0').split('').forEach(b => binary.push(b)));\n\n      // Calculate the tree structure\n      const root = this.parsePacket(binary);\n\n      // Part one is the sum of version numbers\n      this.solutions.partOne = this.sumVersions(root);\n      // Part two is the total value based on the type id\n      this.solutions.partTwo = this.getTotal(root);\n    },\n    sumVersions: function (node) {\n      // Recursively calculate the version number sum as the sum of this version plus the sum of child versions\n      return node.version + node.packets.map(p => this.sumVersions(p)).reduce((a, b) => a + b, 0);\n    },\n    getTotal: function (node) {\n      // Calculate the total for each child packet\n      const subTotals = node.packets.map(p => this.getTotal(p));\n      // Then reduce them together using the rules\n      switch (node.typeId) {\n        case 0:\n          return subTotals.reduce((a, b) => a + b, 0);\n        case 1:\n          return subTotals.reduce((a, b) => a * b, 1);\n        case 2:\n          return Math.min(...subTotals);\n        case 3:\n          return Math.max(...subTotals);\n        case 4:\n          return node.value;\n        case 5:\n          return subTotals[0] > subTotals[1] ? 1 : 0;\n        case 6:\n          return subTotals[0] < subTotals[1] ? 1 : 0;\n        case 7:\n          return subTotals[0] === subTotals[1] ? 1 : 0;\n        default:\n          return 0;\n      }\n    },\n    parsePacket: function (binary) {\n      // Create a new packet\n      const packet = {\n        version: parseInt(parseInt(binary.slice(0, 3).join(''), 2).toString(10)),\n        typeId: parseInt(parseInt(binary.slice(3, 6).join(''), 2).toString(10)),\n        packets: [],\n        endIndex: 0,\n        value: 0\n      };\n      switch (packet.typeId) {\n        case 4:\n          {\n            // Literal packet\n            // Get the data part of the binary string\n            const num = binary.slice(6, binary.length);\n            // Check how many full parts there are in total\n            const parts = Math.floor(num.length / 5);\n            // Keep track of the digits\n            let digits = '';\n            // Run through each chunk\n            let index = 0;\n            for (; index < parts * 5; index += 5) {\n              // Get the digit\n              digits += num.slice(index + 1, index + 5).join('');\n\n              // If the first bit was a zero, stop\n              if (num[index] === '0') {\n                break;\n              }\n            }\n\n            // The value us the decimal of the binary\n            packet.value = parseInt(parseInt(digits, 2).toString(10));\n\n            // Set the end index\n            packet.endIndex = 6 + index + 5;\n            break;\n          }\n        default:\n          {\n            // Operator\n            // Check if it's a length or a count specification\n            const isLength = parseInt(binary[6]) === 0;\n            if (isLength) {\n              // Get the length of the bit array\n              const len = parseInt(parseInt(binary.slice(7, 7 + 15).join(''), 2).toString(10));\n              let index = 0;\n              // While we haven't reaached the end yet\n              while (index < len) {\n                // Parse the child packet\n                const subPacket = this.parsePacket(binary.slice(22 + index, 22 + len));\n\n                // Remember it\n                packet.packets.push(subPacket);\n\n                // Adjust the index\n                index += subPacket.endIndex;\n              }\n\n              // Remember the end index of THIS packet\n              packet.endIndex = 22 + index;\n            } else {\n              // Get the number of child packets\n              const number = parseInt(parseInt(binary.slice(7, 7 + 11).join(''), 2).toString(10));\n              let index = 0;\n              // Iterate through them\n              for (let p = 0; p < number; p++) {\n                const subPacket = this.parsePacket(binary.slice(18 + length + index, binary.length));\n\n                // Remember it\n                packet.packets.push(subPacket);\n\n                // Adjust the index\n                index += subPacket.endIndex;\n              }\n\n              // Remember the end index of THIS packet\n              packet.endIndex = 18 + index;\n            }\n            break;\n          }\n      }\n      return packet;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2021/Day16.vue?vue&type=script&lang=js\n /* harmony default export */ const _2021_Day16vue_type_script_lang_js = (Day16vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2021/Day16.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2021_Day16vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day16 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4693\n")}}]);
{"version":3,"file":"js/9351.a174accb.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,aAAa,EAAEQ,OAAM,GAAM,CAACF,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,aAAa,EAAEQ,OAAM,MAAS,EACvYC,EAAkB,G,sBCctB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,SAAAA,KACA,SACA,mBAGAC,MAAAA,CACAC,cAAAA,WACA,gCACA,2CACA,yCAEA,GAEAC,KAAAA,WACA,OACAd,UAAAA,CACAe,QAAAA,KACAC,QAAAA,MAEAC,OAAAA,CACAF,QAAAA,CACAG,EAAAA,GACAC,EAAAA,IAEAH,QAAAA,CAAAA,CACAE,EAAAA,GACAC,EAAAA,IACA,CACAD,EAAAA,GACAC,EAAAA,MAIA,EACAC,QAAAA,CACAlB,eAAAA,SAAAA,GACA,aACAa,QAAAA,CACAG,EAAAA,GACAC,EAAAA,IAEAH,QAAAA,CAAAA,CACAE,EAAAA,GACAC,EAAAA,IACA,CACAD,EAAAA,GACAC,EAAAA,MAKA,SACA,aACA,aACA,aACAE,EAAAA,GAAAA,EAAAA,KAIA,iBAEA,UAGA,GACAH,EAAAA,EACAC,EAAAA,GAGAG,EAAAA,IAAAA,OACAC,EAAAA,SAAAA,IAEAC,EAAAA,GAAAA,GAEAF,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,EAAAA,KAGA,gCACA,mCAIA,8BACA,iEAGA,SACAJ,EAAAA,EACAC,EAAAA,GAEA,GACAD,EAAAA,EACAC,EAAAA,GAIAG,EAAAA,QAEAA,EAAAA,IAAAA,OACAC,EAAAA,SAAAA,CAAAA,EAAAA,KAEA,SACAC,EAAAA,GAAAA,GACAF,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,EAAAA,KAEA,mCACA,qCAEAE,EAAAA,GAAAA,GACAF,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,EAAAA,KAEA,mCACA,mCACA,IAIA,8BACA,8DACA,EACAG,KAAAA,SAAAA,EAAAA,GACA,sBAEA,sCACAC,EAAAA,SAAAA,IACAC,EAAAA,KAAAA,QACAA,EAAAA,KAAAA,SAAAA,IAGA,0BACAC,OAAAA,IACAC,UAAAA,UACAC,YAAAA,EACAC,OAAAA,CAAAJ,EAAAA,GAAAK,EAAAA,GAAAC,EAAAA,GAAAC,EAAAA,GACAC,cAAAA,cACAC,aAAAA,cACAC,MAAAA,CACAC,SAAAA,CAAAC,MAAAA,KAAAA,cAAAA,QAAAA,SACAC,UAAAA,KAAAA,cAAAA,UAAAA,WAEAC,MAAAA,CACAH,SAAAA,CAAAC,MAAAA,KAAAA,cAAAA,QAAAA,SACAC,UAAAA,KAAAA,cAAAA,UAAAA,YAEA,CACAE,YAAAA,EACAC,aAAAA,GAEA,ICvK4P,I,UCOxPC,GAAY,OACd,EACApD,EACAgB,GACA,EACA,KACA,WACA,MAIF,EAAeoC,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2015/Day3.vue?5f76","webpack://advent-of-code/src/components/2015/Day3.vue","webpack://advent-of-code/./src/components/2015/Day3.vue?1c10","webpack://advent-of-code/./src/components/2015/Day3.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":3,\"year\":2015,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{attrs:{\"id\":\"partOne\"}})]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('div',{attrs:{\"id\":\"partTwo\"}})]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"3\" :year=\"2015\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div id=\"partOne\" />\n    </template>\n    <template v-slot:partTwo>\n      <div id=\"partTwo\" />\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { mapGetters } from 'vuex'\n\nexport default {\n  components: {\n    Day\n  },\n  computed: {\n    ...mapGetters([\n      'storeDarkMode'\n    ])\n  },\n  watch: {\n    storeDarkMode: function () {\n      if (this.solutions.partOne !== null) {\n        this.draw([this.traces.partOne], 'partOne')\n        this.draw(this.traces.partTwo, 'partTwo')\n      }\n    }\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      traces: {\n        partOne: {\n          x: [],\n          y: []\n        },\n        partTwo: [{\n          x: [],\n          y: []\n        }, {\n          x: [],\n          y: []\n        }]\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.traces = {\n        partOne: {\n          x: [],\n          y: []\n        },\n        partTwo: [{\n          x: [],\n          y: []\n        }, {\n          x: [],\n          y: []\n        }]\n      }\n\n      // Define the movements\n      const dirs = {\n        '>': curr => curr.x++,\n        '<': curr => curr.x--,\n        '^': curr => curr.y--,\n        v: curr => curr.y++\n      }\n\n      // Split the input into bits\n      const parts = input[0].split('')\n      // Remember locations we've been to\n      const memory = new Set()\n\n      // Current location\n      const curr = {\n        x: 0,\n        y: 0\n      }\n      // Add the origin\n      memory.add('0,0')\n      parts.forEach(p => {\n        // For each bit in the input, move in the direction\n        dirs[p](curr)\n        // Then remember the new position\n        memory.add(`${curr.x},${curr.y}`)\n\n        // Remember for drawing\n        this.traces.partOne.x.push(curr.x)\n        this.traces.partOne.y.push(curr.y)\n      })\n\n      // The answer is the number of unique positions\n      this.solutions.partOne = memory.size\n      this.$nextTick(() => this.draw([this.traces.partOne], 'partOne'))\n\n      // For part two, lets have two positions\n      const santa = {\n        x: 0,\n        y: 0\n      }\n      const robo = {\n        x: 0,\n        y: 0\n      }\n\n      // Clear the memory\n      memory.clear()\n      // Add the origin again\n      memory.add('0,0')\n      parts.forEach((p, i) => {\n        // For each bit in the input, move either santa or the robot depending on the index, then remember the new location\n        if (i % 2 === 0) {\n          dirs[p](santa)\n          memory.add(`${santa.x},${santa.y}`)\n\n          this.traces.partTwo[0].x.push(santa.x)\n          this.traces.partTwo[0].y.push(santa.y)\n        } else {\n          dirs[p](robo)\n          memory.add(`${robo.x},${robo.y}`)\n\n          this.traces.partTwo[1].x.push(robo.x)\n          this.traces.partTwo[1].y.push(robo.y)\n        }\n      })\n\n      // The answe is the number of unique positions again\n      this.solutions.partTwo = memory.size\n      this.$nextTick(() => this.draw(this.traces.partTwo, 'partTwo'))\n    },\n    draw: function (traces, id) {\n      this.$plotly.purge(id)\n\n      const tr = JSON.parse(JSON.stringify(traces))\n      tr.forEach(t => {\n        t.mode = 'lines'\n        t.type = 'scatter'\n      })\n\n      this.$plotly.newPlot(id, tr, {\n        height: 400,\n        hovermode: 'closest',\n        showlegend: false,\n        margin: { t: 10, b: 20, l: 50, r: 0 },\n        paper_bgcolor: 'transparent',\n        plot_bgcolor: 'transparent',\n        xaxis: {\n          tickfont: { color: this.storeDarkMode ? 'white' : 'black' },\n          gridcolor: this.storeDarkMode ? '#111111' : '#eeeeee'\n        },\n        yaxis: {\n          tickfont: { color: this.storeDarkMode ? 'white' : 'black' },\n          gridcolor: this.storeDarkMode ? '#111111' : '#eeeeee'\n        }\n      }, {\n        responsive: true,\n        displaylogo: false\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day3.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day3.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day3.vue?vue&type=template&id=64bdf2d5&scoped=true\"\nimport script from \"./Day3.vue?vue&type=script&lang=js\"\nexport * from \"./Day3.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"64bdf2d5\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","proxy","staticRenderFns","components","Day","computed","watch","storeDarkMode","data","partOne","partTwo","traces","x","y","methods","v","memory","parts","dirs","draw","tr","t","height","hovermode","showlegend","margin","b","l","r","paper_bgcolor","plot_bgcolor","xaxis","tickfont","color","gridcolor","yaxis","responsive","displaylogo","component"],"sourceRoot":""}
{"version":3,"file":"js/6246.d0a1f61d.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2022/Day14.vue?141a","webpack://advent-of-code/src/components/2022/Day14.vue","webpack://advent-of-code/./src/components/2022/Day14.vue?c656","webpack://advent-of-code/./src/components/2022/Day14.vue","webpack://advent-of-code/./src/util/color.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":14,\"year\":2022,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":_vm.canvasOne.width,\"height\":_vm.canvasOne.height}})])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partTwo\",\"width\":_vm.canvasTwo.width,\"height\":_vm.canvasTwo.height}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"14\" :year=\"2022\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partOne\" class=\"canvas\" :width=\"canvasOne.width\" :height=\"canvasOne.height\" />\n      </div>\n    </template>\n    <template v-slot:partTwo>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partTwo\" class=\"canvas\" :width=\"canvasTwo.width\" :height=\"canvasTwo.height\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { createMultiColorGradient, VIRIDIS } from '@/util/color'\n\nconst ROCK = 0\nconst SAND = 1\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      canvasOne: {\n        height: 1000,\n        width: 1000\n      },\n      canvasTwo: {\n        height: 1000,\n        width: 1000\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const p1 = this.solve(input.concat(), false)\n      this.solutions.partOne = p1.count\n      const p2 = this.solve(input.concat(), true)\n      this.solutions.partTwo = p2.count\n\n      this.$nextTick(() => {\n        this.draw('partOne', this.canvasOne, p1)\n        this.draw('partTwo', this.canvasTwo, p2)\n      })\n    },\n    solve: function (input, addFloor) {\n      const xBounds = [500, 500]\n      const yBounds = [0, 0]\n\n      const grid = new Map()\n\n      input.forEach(line => {\n        const parts = line.split(' -> ').map(c => c.split(',').map(n => +n))\n        xBounds[0] = Math.min(xBounds[0], parts[0][0])\n        xBounds[1] = Math.max(xBounds[1], parts[0][0])\n        yBounds[0] = Math.min(yBounds[0], parts[0][1])\n        yBounds[1] = Math.max(yBounds[1], parts[0][1])\n\n        for (let i = 1; i < parts.length; i++) {\n          xBounds[0] = Math.min(xBounds[0], parts[i][0])\n          xBounds[1] = Math.max(xBounds[1], parts[i][0])\n          yBounds[0] = Math.min(yBounds[0], parts[i][1])\n          yBounds[1] = Math.max(yBounds[1], parts[i][1])\n\n          const from = parts[i - 1]\n          const to = parts[i]\n\n          if (from[0] === to[0]) {\n            // Same x, iterate y\n            const yMin = Math.min(from[1], to[1])\n            const yMax = Math.max(from[1], to[1])\n            for (let y = yMin; y <= yMax; y++) {\n              grid.set(`${from[0]},${y}`, { t: ROCK })\n            }\n          } else {\n            // Same y, iterate x\n            const xMin = Math.min(from[0], to[0])\n            const xMax = Math.max(from[0], to[0])\n            for (let x = xMin; x <= xMax; x++) {\n              grid.set(`${x},${from[1]}`, { t: ROCK })\n            }\n          }\n        }\n      })\n\n      if (addFloor) {\n        xBounds[0] -= yBounds[1]\n        xBounds[1] += yBounds[1]\n        yBounds[1] += 2\n        for (let x = xBounds[0] - yBounds[1]; x <= xBounds[1] + yBounds[1]; x++) {\n          grid.set(`${x},${yBounds[1]}`, { t: ROCK })\n        }\n      }\n\n      let count = 0\n      while (true) {\n        let sand = [500, 0]\n        const path = []\n\n        while (true) {\n          path.push(sand.concat())\n\n          if (sand[1] > yBounds[1]) {\n            // Overflow\n            return {\n              grid: grid,\n              count: count,\n              bounds: {\n                x: xBounds,\n                y: yBounds\n              },\n              path: path\n            }\n          }\n\n          const b = [sand[0], sand[1] + 1]\n          const bl = [sand[0] - 1, sand[1] + 1]\n          const br = [sand[0] + 1, sand[1] + 1]\n\n          if (!grid.has(`${b[0]},${b[1]}`)) {\n            sand = b\n          } else if (!grid.has(`${bl[0]},${bl[1]}`)) {\n            sand = bl\n          } else if (!grid.has(`${br[0]},${br[1]}`)) {\n            sand = br\n          } else {\n            grid.set(`${sand[0]},${sand[1]}`, { t: SAND, c: count++ })\n\n            if (sand[0] === 500 && sand[1] === 0) {\n              return {\n                grid: grid,\n                count: count,\n                bounds: {\n                  x: xBounds,\n                  y: yBounds\n                },\n                path: path\n              }\n            }\n            break\n          }\n        }\n      }\n    },\n    draw: function (id, dims, result) {\n      // Initialise the canvas\n      const canvas = document.getElementById(id)\n      const ctx = canvas.getContext('2d')\n      ctx.lineWidth = 1\n\n      // Create gradient\n      const sandGradient = createMultiColorGradient(VIRIDIS, result.count)\n\n      const factor = 5\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n      dims.width = (result.bounds.x[1] - result.bounds.x[0] + 1) * factor\n      dims.height = (result.bounds.y[1] - result.bounds.y[0] + 1) * factor\n\n      this.$nextTick(() => {\n        // Offset for better drawing accuracy\n        ctx.translate(-result.bounds.x[0] * factor, -result.bounds.y[0] * factor)\n        ctx.clearRect(0, 0, dims.width, dims.height)\n\n        result.grid.forEach((value, key) => {\n          const [x, y] = key.split(',').map(c => +c)\n          if (value.t === SAND) {\n            ctx.fillStyle = sandGradient[value.c]\n          } else if (value.t === ROCK) {\n            ctx.fillStyle = '#95a5a6'\n          }\n\n          ctx.fillRect(x * factor, y * factor, factor, factor)\n        })\n\n        result.path.forEach(p => {\n          ctx.fillStyle = '#c0392b'\n          ctx.fillRect(p[0] * factor, p[1] * factor, factor, factor)\n        })\n        ctx.translate(result.bounds.x[0] * factor, result.bounds.y[0] * factor)\n      })\n    }\n  }\n}\n</script>\n\n<style>\n.canvas-holder {\n  overflow-x: auto;\n  overflow-y: hidden;\n  height: 991px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day14.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day14.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day14.vue?vue&type=template&id=01d3fbc1\"\nimport script from \"./Day14.vue?vue&type=script&lang=js\"\nexport * from \"./Day14.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day14.vue?vue&type=style&index=0&id=01d3fbc1&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","const VIRIDIS = ['#440154', '#48186a', '#472d7b', '#424086', '#3b528b', '#33638d', '#2c728e', '#26828e', '#21918c', '#1fa088', '#28ae80', '#3fbc73', '#5ec962', '#84d44b', '#addc30', '#d8e219', '#fde725']\n\n/**\n * Converts a HEX value into an RGB object\n * @param {String} hex The hex color\n */\nconst hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    }\n    : null\n}\n\n/**\n * Converts the given R, G, B values into a HEX color\n * @param {Number} r The red color component\n * @param {Number} g The green color component\n * @param {Number} b The blue color component\n */\nconst rgbToHex = (r, g, b) => {\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n}\n\n/**\n * Creates a linear gradient between the two given colors with the given number of steps\n * @param {String} one The first color in HEX\n * @param {String} two The second color in HEX\n * @param {Number} steps The number of steps between the two colors\n */\nconst createColorGradient = (one, two, steps) => {\n  const oneRgb = hexToRgb(one)\n  const twoRgb = hexToRgb(two)\n\n  if (steps < 2) {\n    return [one]\n  }\n\n  const result = []\n  for (let i = 0; i < steps; i++) {\n    const iNorm = (i / (steps - 1))\n    result.push(rgbToHex(\n      Math.floor(oneRgb.r + iNorm * (twoRgb.r - oneRgb.r)),\n      Math.floor(oneRgb.g + iNorm * (twoRgb.g - oneRgb.g)),\n      Math.floor(oneRgb.b + iNorm * (twoRgb.b - oneRgb.b))\n    ))\n  }\n  return result\n}\n\nconst createMultiColorGradient = (colors, steps) => {\n  if (colors.length > steps) {\n    return colors.slice(0, steps)\n  }\n\n  const sections = colors.length - 1\n\n  let result = []\n\n  for (let i = 0; i < sections - 1; i++) {\n    result = result.concat(createColorGradient(colors[i], colors[i + 1], Math.max(1, Math.floor(steps / sections))))\n  }\n\n  while (result.length < steps) {\n    result.push(colors[colors.length - 1])\n  }\n\n  return result\n}\n\nexport {\n  hexToRgb,\n  rgbToHex,\n  createColorGradient,\n  createMultiColorGradient,\n  VIRIDIS\n}\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","canvasOne","width","height","proxy","canvasTwo","staticRenderFns","ROCK","SAND","components","Day","data","partOne","partTwo","methods","solve","input","xBounds","yBounds","grid","t","path","count","bounds","x","y","c","sand","draw","ctx","dims","result","component","VIRIDIS","hexToRgb","hex","exec","r","parseInt","g","b","rgbToHex","toString","slice","createColorGradient","one","two","steps","oneRgb","twoRgb","i","iNorm","push","Math","floor","createMultiColorGradient","colors","length","sections","concat","max"],"sourceRoot":""}
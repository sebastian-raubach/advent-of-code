{"version":3,"file":"js/5528.575e3e12.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GAGA,yBAEA,wBAEA,sDAEA,iCAEA,OACAQ,OAAAA,KACAC,KAAAA,EAAAA,GACAC,QAAAA,EAAAA,GACAC,SAAAA,EACA,IAGA,YACA,EACAC,MAAAA,WAEA,gBAmBA,MAhBA,4CAEAC,EAAAA,SAAAA,IAEA,sBACAC,EAAAA,SAAAA,EAAAA,SAAAA,KAAAA,IAEA,iBAGA,OADAC,EAAAA,OAAAA,EACA,KAEA,IAKAF,EAAAA,SAAAA,IACA,kBACAG,EAAAA,EACA,IAGA,8BAGA,eACA,EACAC,QAAAA,SAAAA,GACA,uBAEA,gBACA,CAEA,+BACA,oCAKA,GAHAC,EAAAA,GAAAA,KAAAA,QAAAA,EAAAA,SAAAA,IAGA,YACA,WAKA,0DAEA,WAEA,+BAIA,OADA,8CACA,GACA,CAEA,wCAEA,CACA,IC3G4P,I,UCOxPC,GAAY,OACd,EACA7B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAekB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2017/Day7.vue?1940","webpack://advent-of-code/src/components/2017/Day7.vue","webpack://advent-of-code/./src/components/2017/Day7.vue?6aef","webpack://advent-of-code/./src/components/2017/Day7.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":7,\"year\":2017,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"7\" :year=\"2017\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Split each row on tab and then map the values to numbers\n      // this.values = input[0].split('\\t').map(i => +i)\n      this.allNodes = input.map(r => {\n        // Split into node details and children\n        const parts = r.split(' -> ')\n        // Replace all brackets, then split on space\n        const left = parts[0].replace(/\\(/g, '').replace(/\\)/g, '').split(' ')\n        // Split into individual children\n        const right = parts.length > 1 ? parts[1].split(', ') : []\n\n        return {\n          parent: null,\n          name: left[0],\n          weight: +left[1],\n          children: right\n        }\n      })\n\n      this.solve()\n    },\n    solve: function () {\n      // Map from name to node\n      const mapping = new Map()\n\n      // Add all nodes\n      this.allNodes.forEach(n => mapping.set(n.name, n))\n\n      mapping.forEach(node => {\n        // If there are children\n        if (node.children.length > 0) {\n          node.children = node.children.map(c => {\n            // Get their mapping and add them instead of their name\n            const child = mapping.get(c)\n            // Remember the parent\n            child.parent = node\n            return child\n          })\n        }\n      })\n\n      // Find the root (the one without a parent)\n      let root\n      mapping.forEach(node => {\n        if (node.parent === null) {\n          root = node\n        }\n      })\n\n      this.solutions.partOne = root.name\n\n      // Solve part two by DFS from the source\n      this.recurse(root)\n    },\n    recurse: function (node) {\n      if (node.children.length < 1) {\n        // If it's a leaf, return its weight\n        return node.weight\n      } else {\n        // Else, compute the weight of each child by recursion\n        const childWeights = node.children.map(_ => 0)\n        for (let i = 0; i < node.children.length; i++) {\n          // Continue recursion for the child\n          childWeights[i] = this.recurse(node.children[i])\n\n          // We found the solution further up\n          if (isNaN(childWeights[i])) {\n            return NaN\n          }\n        }\n\n        // Check if there's a value that doesn't match the rest in the array\n        const wrongIndex = childWeights.findIndex(count => childWeights.filter(x => x === count).length === 1)\n\n        if (wrongIndex !== -1) {\n          // Get the diff between it and the next one over\n          const diff = childWeights[(wrongIndex + 1) % childWeights.length] - childWeights[wrongIndex]\n\n          // The solution is the original weight of the child plus the diff\n          this.solutions.partTwo = node.children[wrongIndex].weight + diff\n          return NaN\n        } else {\n          // Else, just sum up all children and add them to the original weight\n          return node.weight + childWeights.reduce((a, b) => a + b, 0)\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day7.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day7.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day7.vue?vue&type=template&id=4f2d0980\"\nimport script from \"./Day7.vue?vue&type=script&lang=js\"\nexport * from \"./Day7.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","parent","name","weight","children","solve","mapping","node","child","root","recurse","childWeights","component"],"sourceRoot":""}
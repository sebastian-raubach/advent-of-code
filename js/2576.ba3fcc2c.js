"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[2576],{64206:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day20)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day20.vue?vue&type=template&id=1d60609f&scoped=true\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":20,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partTwo\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partTwo\",\"width\":\"800\",\"height\":\"500\"}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day20.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day20vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      images: null,\n      round: 0,\n      bounds: null\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const algo = input[0].split('').map(c => c === '#' ? 1 : 0);\n      let image = new Map();\n\n      // Parse the grid\n      input.slice(2).forEach((r, y) => r.split('').forEach((c, x) => image.set(`${x},${y}`, c === '#' ? 1 : 0)));\n\n      // Keep track of all intermediate images for drawing\n      const images = [image];\n      // Keep track of background polarity\n      let polarity = 0;\n      for (let i = 0; i < 50; i++) {\n        // Enhance the image\n        image = this.enhance(image, algo, polarity);\n\n        // Switch polarity\n        if (algo[0] === 1) {\n          polarity = 1 - polarity;\n        }\n        if (i === 1) {\n          // Part one\n          this.solutions.partOne = this.count(image);\n        }\n\n        // Remember image\n        images.push(image);\n      }\n\n      // Part two\n      this.solutions.partTwo = this.count(image);\n      this.images = images;\n      this.round = 0;\n      this.$nextTick(() => this.drawInit());\n    },\n    count: function (image) {\n      let counter = 0;\n      // Count all hashes\n      image.forEach((value, key) => {\n        if (value) {\n          counter++;\n        }\n      });\n      return counter;\n    },\n    enhance: function (image, algo, polarity) {\n      const enhanced = new Map();\n\n      // Determine span in x and y of grid\n      let minX = Number.MAX_SAFE_INTEGER;\n      let minY = Number.MAX_SAFE_INTEGER;\n      let maxX = -Number.MAX_SAFE_INTEGER;\n      let maxY = -Number.MAX_SAFE_INTEGER;\n      image.forEach((value, key) => {\n        const coords = key.split(',').map(c => +c);\n        minX = Math.min(minX, coords[0]);\n        minY = Math.min(minY, coords[1]);\n        maxX = Math.max(maxX, coords[0]);\n        maxY = Math.max(maxY, coords[1]);\n      });\n      for (let y = minY - 1; y < maxY + 2; y++) {\n        for (let x = minX - 1; x < maxX + 2; x++) {\n          // Get the binary string based on the neighbors\n          const binaryString = this.getNeighbors(x, y).map(c => {\n            const coord = c.join(',');\n            if (image.has(coord)) {\n              return image.get(coord);\n            } else {\n              return polarity;\n            }\n          }).join('');\n\n          // Get the value from the algorighm\n          const index = parseInt(binaryString, 2);\n          if (algo[index]) {\n            enhanced.set(`${x},${y}`, 1);\n          } else {\n            enhanced.set(`${x},${y}`, 0);\n          }\n        }\n      }\n      return enhanced;\n    },\n    getNeighbors: function (x, y) {\n      return [[x - 1, y - 1], [x, y - 1], [x + 1, y - 1], [x - 1, y], [x, y], [x + 1, y], [x - 1, y + 1], [x, y + 1], [x + 1, y + 1]];\n    },\n    drawInit: function () {\n      this.bounds = {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      };\n      this.images.forEach(i => {\n        i.forEach((value, key) => {\n          const coords = key.split(',').map(c => +c);\n          this.bounds.left = Math.min(this.bounds.left, coords[0]);\n          this.bounds.right = Math.max(this.bounds.right, coords[0]);\n          this.bounds.top = Math.min(this.bounds.top, coords[1]);\n          this.bounds.bottom = Math.max(this.bounds.bottom, coords[1]);\n        });\n      });\n      this.canvas = document.getElementById('partTwo');\n      const factor = 2;\n      this.canvas.width = factor * (Math.abs(this.bounds.left) + Math.abs(this.bounds.right));\n      this.canvas.height = factor * (Math.abs(this.bounds.top) + Math.abs(this.bounds.bottom));\n      this.ctx = this.canvas.getContext('2d');\n      this.ctx.scale(factor, factor);\n      this.ctx.translate(Math.abs(this.bounds.left), Math.abs(this.bounds.top));\n      this.draw();\n    },\n    draw: function () {\n      this.ctx.fillStyle = '#006266';\n      this.ctx.fillRect(this.bounds.left, this.bounds.top, this.canvas.width, this.canvas.height);\n      this.ctx.fillStyle = '#C4E538';\n      const image = this.images[this.round];\n      image.forEach((value, key) => {\n        if (value) {\n          const coords = key.split(',').map(c => +c);\n          this.ctx.fillRect(coords[0], coords[1], 1, 1);\n        }\n      });\n      this.round = (this.round + 1) % this.images.length;\n      setTimeout(() => window.requestAnimationFrame(this.draw), 100);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2021/Day20.vue?vue&type=script&lang=js\n /* harmony default export */ const _2021_Day20vue_type_script_lang_js = (Day20vue_type_script_lang_js); \n;// CONCATENATED MODULE: ./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-12.use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day20.vue?vue&type=style&index=0&id=1d60609f&prod&scoped=true&lang=css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/components/2021/Day20.vue?vue&type=style&index=0&id=1d60609f&prod&scoped=true&lang=css\n\n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2021/Day20.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2021_Day20vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1d60609f\",\n  null\n  \n)\n\n/* harmony default export */ const Day20 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///64206\n")}}]);
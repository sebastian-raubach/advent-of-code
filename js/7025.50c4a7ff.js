"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[7025],{36537:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day14)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day14.vue?vue&type=template&id=1c94dd42\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":14,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day14.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day14vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      memory: {},\n      input: [],\n      masks: []\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Initialize everything\n      this.memory = {};\n      this.input = [];\n      this.masks = [];\n      // Loop through input\n      input.forEach(i => {\n        if (i.indexOf('mask') !== -1) {\n          // If it's a mask, parse it\n          this.masks.push(i.replace('mask = ', '').split(''));\n        } else {\n          // Otherwise, split on the equals\n          const parts = i.split(' = ');\n          // Get the memory index\n          const index = +parts[0].replace(/\\D/g, '');\n          // And get the binary representation of the value\n          const value = this.decimalToBinary(+parts[1], 36);\n          // Then push the configuration to an array\n          this.input.push({\n            index: index,\n            mask: this.masks[this.masks.length - 1],\n            value: value\n          });\n        }\n      });\n      this.solvePartOne();\n\n      // Reset the memory\n      this.memory = {};\n      this.solvePartTwo();\n    },\n    solvePartOne: function () {\n      this.input.forEach(i => {\n        // Set the memory at the given index to the corrected input\n        this.memory[i.index] = parseInt(this.overwriteBits(i.value, i.mask), 2);\n      });\n\n      // Sum over all set memory addresses\n      this.solutions.partOne = Object.keys(this.memory).map(k => this.memory[k]).reduce((a, b) => a + b);\n    },\n    solvePartTwo: function () {\n      // Loop over the input\n      this.input.forEach(i => {\n        // Convert the index to binary representation\n        const addressBits = this.decimalToBinary(i.index, 36).split('');\n        const mask = i.mask;\n\n        // First replace all mask 1's\n        for (let x = 0; x < mask.length; x++) {\n          if (mask[x] === '1') {\n            addressBits[x] = '1';\n          }\n        }\n\n        // Keep track of all final addresses\n        const finalAddresses = [];\n        // Get the number of Xs in the mask\n        const numberOfXs = mask.filter(x => x === 'X').length;\n\n        // Loop through all 2^#Xs combinations\n        for (let x = 0; x < Math.pow(2, numberOfXs); x++) {\n          // Convert the number to a binary\n          // This gives for #X = 2\n          // 00, 01, 10, 11\n          // For #X = 3 this results in\n          // 000, 001, 010, 011, 100, 101, 110, 111\n          // We then use these bits from right to left to fill the Xs in the address\n          const bin = this.decimalToBinary(x, numberOfXs);\n\n          // Copy the current address\n          const copy = JSON.parse(JSON.stringify(addressBits));\n\n          // Walk through the current address from the right, replacing the positions where the mask has an X with the binary representation of the current loop\n          let position = 0;\n          for (let y = addressBits.length - 1; y >= 0; y--) {\n            if (mask[y] === 'X') {\n              copy[y] = bin[bin.length - 1 - position];\n              position++;\n            }\n          }\n\n          // Push the address index\n          finalAddresses.push(parseInt(copy.join(''), 2));\n        }\n\n        // Replace all memory indices with the value\n        finalAddresses.forEach(f => {\n          this.memory[f] = parseInt(i.value, 2);\n        });\n      });\n\n      // Sum over all set memory addresses\n      this.solutions.partTwo = Object.keys(this.memory).map(k => this.memory[k]).reduce((a, b) => a + b);\n    },\n    /**\n     * Converts the given decimal to its binary reprentation enforcing a length of at least `length`\n     * @param dec The decimal number to convert\n     * @param length The minimal length of the binary string representation\n     * @returns The binary string representation of the decimal input with at least the specified length\n     */\n    decimalToBinary: function (dec, length) {\n      let result = (dec >>> 0).toString(2);\n      while (result.length < length) {\n        result = '0' + result;\n      }\n      return result;\n    },\n    /**\n     * Overwrites the positions in the input with the mask bits skipping `X` positions\n     * @param input The input to replace on\n     * @param mask The mask to replace with\n     * @returns The replaced input\n     */\n    overwriteBits: function (input, mask) {\n      return input.split('').map((bit, index) => mask[index] === 'X' ? bit : mask[index]).join('');\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2020/Day14.vue?vue&type=script&lang=js\n /* harmony default export */ const _2020_Day14vue_type_script_lang_js = (Day14vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2020/Day14.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2020_Day14vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day14 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36537\n")}}]);
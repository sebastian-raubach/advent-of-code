{"version":3,"file":"js/5826.e95079cc.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GAeA,MACA,EACA,EAhBA,uBAEA,sBACA,OAEAQ,KAAAA,IAAAA,KAAAA,EAAAA,GAAAA,UAAAA,EAAAA,EAAAA,GAAAA,SAEAC,MAAAA,EAAAA,GACA,IACA,6BAGA,eAMA,sCACA,uBAEA,kCAEAC,GAAAA,EAAAA,MAAAA,QAAAA,MAAAA,IAEA,iBAEA,gBACAC,MAAAA,EACAC,OAAAA,MAAAA,KAAAA,MAAAA,IAAAA,QAAAA,KAAAA,GAAAA,WAGA,4BAEAC,EAAAA,EAAAA,KAAAA,kBACA,yBAEAC,EAAAA,EAAAA,KAAAA,aAGA,oBACA,uBACA,0BAEA,CACA,CAEA,oBACA,mBACA,EACAC,aAAAA,WAEA,8FAEA,QACA,IAEA,+CACA,6BACAC,EAAAA,KAAAA,OAAAA,GAAAA,OAAAA,GACAC,EAAAA,GAKA,0BACA,EACAC,aAAAA,WAEAC,OAAAA,KAAAA,KAAAA,QAAAA,SAAAA,IAEA,2DAEA,mFAIA,oGAGA,iDACA,ICvG4P,I,UCOxPC,GAAY,OACd,EACA9B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAemB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2018/Day4.vue?d519","webpack://advent-of-code/src/components/2018/Day4.vue","webpack://advent-of-code/./src/components/2018/Day4.vue?9a5a","webpack://advent-of-code/./src/components/2018/Day4.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":4,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"4\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.parsed = input.map(i => {\n        // Split into timestamp and event\n        const parts = i.split('] ')\n        return {\n          // Parse the date\n          date: new Date(parts[0].substring(1, parts[0].length)),\n          // And store the event\n          event: parts[1]\n        }\n      }).sort((a, b) => a.date - b.date)\n\n      // Keep track of the guard data\n      this.guards = {}\n\n      let guardId\n      let sleepStart\n      let sleepEnd\n      // Go through all lines\n      for (let i = 0; i < this.parsed.length; i++) {\n        const line = this.parsed[i]\n\n        if (line.event.indexOf('Guard ') !== -1) {\n          // Parse the guard id\n          guardId = +line.event.replace(/\\D/g, '')\n\n          if (!this.guards[guardId]) {\n            // Then initialize the guard data if it doesn't exist yet\n            this.guards[guardId] = {\n              total: 0,\n              asleep: Array.from(Array(60).keys()).map(i => 0)\n            }\n          }\n        } else if (line.event === 'falls asleep') {\n          // Keep track of the start of the asleep interval\n          sleepStart = line.date.getMinutes()\n        } else if (line.event === 'wakes up') {\n          // Stop the asleep interval\n          sleepEnd = line.date.getMinutes()\n\n          // Increase all counters for this interval\n          for (let min = sleepStart; min < sleepEnd; min++) {\n            this.guards[guardId].total++\n            this.guards[guardId].asleep[min]++\n          }\n        }\n      }\n\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    solvePartOne: function () {\n      // Find the guard with the most asleep minutes\n      const maxGuard = +Object.keys(this.guards).sort((a, b) => this.guards[b].total - this.guards[a].total)[0]\n\n      let maxMinute = 0\n      let maxAmount = 0\n      // Then find the minute that this guard spends most asleep\n      for (let minute = 0; minute < this.guards[maxGuard].asleep.length; minute++) {\n        if (this.guards[maxGuard].asleep[minute] > maxAmount) {\n          maxAmount = this.guards[maxGuard].asleep[minute]\n          maxMinute = minute\n        }\n      }\n\n      // The result is the guard id times the minute\n      this.solutions.partOne = maxGuard * maxMinute\n    },\n    solvePartTwo: function () {\n      // For each guard\n      Object.keys(this.guards).forEach(g => {\n        // Find the maximum amount they spend asleep in any minute\n        this.guards[g].maxValue = Math.max(...this.guards[g].asleep)\n        // Then find the minute which they spend most asleep\n        this.guards[g].maxMinute = this.guards[g].asleep.indexOf(this.guards[g].maxValue)\n      })\n\n      // Find the guard that has the highest asleep value at any minute\n      const maxGuard = +Object.keys(this.guards).sort((a, b) => this.guards[b].maxValue - this.guards[a].maxValue)[0]\n\n      // Then times their id by that minute\n      this.solutions.partTwo = maxGuard * this.guards[maxGuard].maxMinute\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day4.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day4.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day4.vue?vue&type=template&id=67eca79a\"\nimport script from \"./Day4.vue?vue&type=script&lang=js\"\nexport * from \"./Day4.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","date","event","guardId","total","asleep","sleepStart","sleepEnd","solvePartOne","maxAmount","maxMinute","solvePartTwo","Object","component"],"sourceRoot":""}
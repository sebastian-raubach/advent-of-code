{"version":3,"file":"js/2334.47d69123.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GACA,6CAEA,qBACA,oBACA,EACAQ,aAAAA,SAAAA,GAEA,4BAEA,8DACA,gEAGA,0BACA,EACAC,aAAAA,SAAAA,GAEA,iBACA,aAGA,+BACA,eAEA,4BAEA,gCAEAC,EAAAA,KAAAA,OAAAA,EAAAA,EAAAA,EACA,CACA,eAEA,4BAEA,kCAEAC,EAAAA,KAAAA,OAAAA,EAAAA,EAAAA,EACA,CACA,CAEA,0EACA,EACAC,OAAAA,SAAAA,EAAAA,EAAAA,GAEA,WAYA,OAXAC,EAAAA,SAAAA,CAAAA,EAAAA,KAEA,UACAC,EAAAA,KAAAA,EACA,IAGA,qBACAA,EAAAA,MAGA,oCACA,EACAC,YAAAA,SAAAA,GAEA,+EACA,ICnF4P,I,UCOxPC,GAAY,OACd,EACA1B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAee,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2021/Day3.vue?761a","webpack://advent-of-code/src/components/2021/Day3.vue","webpack://advent-of-code/./src/components/2021/Day3.vue?f676","webpack://advent-of-code/./src/components/2021/Day3.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":3,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"3\" :year=\"2021\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const bits = input.map(i => i.split('').map(b => +b))\n\n      this.solvePartOne(bits)\n      this.solvePartTwo(bits)\n    },\n    solvePartOne: function (bits) {\n      // Get the bit count per position\n      const bitCount = this.getBitCount(bits)\n      // Calculate gamma and epsilon\n      const gamma = parseInt(bitCount.map(b => Math.floor(b / (bits.length / 2))).join(''), 2)\n      const epsilon = parseInt(bitCount.map(b => 1 - Math.floor(b / (bits.length / 2))).join(''), 2)\n\n      // Get the product for solution part one\n      this.solutions.partOne = gamma * epsilon\n    },\n    solvePartTwo: function (bits) {\n      // Take a copy of the array for each\n      let oxygen = bits.concat()\n      let co2 = bits.concat()\n\n      // Iterate over all positions\n      for (let i = 0; i < bits[0].length; i++) {\n        if (oxygen.length > 1) {\n          // Calculate the bit count for oxygen\n          const oxBc = this.getBitCount(oxygen)\n          // Calculate the most common bit at this position\n          const mcb = Math.floor(oxBc[i] / (oxygen.length / 2))\n          // Filter so we only keep the ones we want\n          oxygen = this.filter(oxygen, mcb, i)\n        }\n        if (co2.length > 1) {\n          // Calculate the bit count for co2\n          const coBc = this.getBitCount(co2)\n          // Calculate the least common bit at this position\n          const lcb = 1 - Math.floor(coBc[i] / (co2.length / 2))\n          // Filter so we only keep the ones we want\n          co2 = this.filter(co2, lcb, i)\n        }\n      }\n\n      this.solutions.partTwo = parseInt(oxygen[0].join(''), 2) * parseInt(co2[0].join(''), 2)\n    },\n    filter: function (arr, comp, i) {\n      // Remember the indices to delete\n      const toDelete = []\n      arr.forEach((o, index) => {\n        // Remove it if it's not the bit we want\n        if (o[i] !== comp) {\n          toDelete.push(index)\n        }\n      })\n      // If we are about to delete them all, remove the last one so we keep at least one\n      if (toDelete.length === arr.length) {\n        toDelete.pop()\n      }\n      // Filter out the ones we no longer want\n      return arr.filter((o, index) => toDelete.indexOf(index) === -1)\n    },\n    getBitCount: function (arrs) {\n      // Reduce the arrays to a single array with the count of 1 bits per dimension\n      return arrs.reduce((a, b) => a.map((v, i) => v + b[i]), new Array(arrs[0].length).fill(0))\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day3.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day3.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day3.vue?vue&type=template&id=2f7130a9\"\nimport script from \"./Day3.vue?vue&type=script&lang=js\"\nexport * from \"./Day3.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","solvePartOne","solvePartTwo","oxygen","co2","filter","arr","toDelete","getBitCount","component"],"sourceRoot":""}
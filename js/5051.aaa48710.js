"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[5051],{3898:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day16)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day16.vue?vue&type=template&id=1b4075ae\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":16,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(36100);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day16.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day16vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.parseInput(input);\n      this.solvePartOne();\n      this.solvePartTwo();\n    },\n    parseInput: function (input) {\n      this.ourTicket = null;\n      this.nearbyTickets = [];\n      this.fields = {};\n      let part = 0;\n      for (let i = 0; i < input.length; i++) {\n        // Empty rows indicate a new section\n        if (input[i] === '') {\n          part++;\n          continue;\n        }\n\n        // Skip ticket rows\n        if (input[i].indexOf('ticket') !== -1) {\n          continue;\n        }\n\n        // Handle the row depending on which part we're in\n        switch (part) {\n          case 0:\n            {\n              // Split the field and value\n              const parts = input[i].split(': ');\n              // Split the value ranges\n              const ranges = parts[1].split(' or ');\n              // Remember the field to range mapping\n              this.fields[parts[0]] = ranges.map(r => r.split('-').map(l => +l));\n              break;\n            }\n          case 1:\n            // This is our ticket, just split it\n            this.ourTicket = input[i].split(',').map(n => +n);\n            break;\n          case 2:\n            // These are other tickets, simply split them\n            this.nearbyTickets.push(input[i].split(',').map(n => +n));\n            break;\n        }\n      }\n    },\n    /**\n     * Checks whether the given ticket is valid\n     * @param t The ticket to check\n     * @returns `true` if the ticket is valid, `false` otherwise\n     */\n    isTicketValid: function (t) {\n      // Check if for EVERY value, there exists SOME field that has a valid range this value falls into\n      return t.every(v => Object.keys(this.fields).some(f => this.fields[f].some(r => r[0] <= v && r[1] >= v)));\n    },\n    solvePartOne: function () {\n      // Map all tickets to the sum of their invalid values\n      const filtered = this.nearbyTickets.map(t => {\n        // Filter out all valid values\n        const innerFiltered = t.filter(v => {\n          // Check if there's a field that matches the value\n          let found = false;\n          Object.keys(this.fields).forEach(f => {\n            if (this.fields[f].some(a => a[0] <= v && a[1] >= v)) {\n              found = true;\n            }\n          });\n          // If there is a match, don't include this one\n          return !found;\n        });\n        // Sum up all invalid values (PER TICKET)\n        return innerFiltered.reduce((a, b) => a + b, 0);\n      });\n\n      // Sum up all invalid values (ACROSS TICKETS)\n      this.solutions.partOne = filtered.reduce((a, b) => a + b);\n    },\n    solvePartTwo: function () {\n      // Remove invalid tickets\n      const validTickets = this.nearbyTickets.filter(t => this.isTicketValid(t));\n\n      // Get all distinct values for each position/field/column\n      const positionValues = Object.keys(this.fields).map((f, i) => {\n        const values = new Set();\n        validTickets.forEach(t => values.add(t[i]));\n        return Array.from(values);\n      });\n\n      // Create a copy of the fields, as we'll be deleting keys\n      const fieldCopy = JSON.parse(JSON.stringify(this.fields));\n      // Remember the mapping of field name to index\n      const fieldMapping = {};\n      // Get all position/field/column indices\n      let indices = Array.from(Array(Object.keys(fieldCopy).length).keys()).map(i => i);\n\n      // While there is an index that still hasn't been matched\n      while (indices.length > 0) {\n        // Map each index to the list of matching fields\n        const matchingFields = indices.map(i => {\n          return {\n            index: i,\n            // Filter the fields down to those where EVERY column value is in SOME of the ranges\n            matches: Object.keys(fieldCopy).filter(f => {\n              return positionValues[i].every(v => fieldCopy[f].some(a => a[0] <= v && a[1] >= v));\n            })\n          };\n        });\n\n        // Now, for each matching field\n        matchingFields.forEach(f => {\n          // If there is only one match, there's a unique mapping\n          if (f.matches.length === 1) {\n            // Remember the mapping\n            fieldMapping[f.matches[0]] = f.index;\n            // Delete this field, so we won't consider it again\n            delete fieldCopy[f.matches[0]];\n            // And delete the column index, as we've mapped it\n            indices = indices.filter(j => f.index !== j);\n          }\n        });\n      }\n\n      // The solution is using all fields containing 'departure' and multiplying their values together\n      this.solutions.partTwo = Object.keys(fieldMapping).filter(k => k.includes('departure')).map(k => this.ourTicket[fieldMapping[k]]).reduce((a, b) => a * b, 1);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2020/Day16.vue?vue&type=script&lang=js\n /* harmony default export */ const _2020_Day16vue_type_script_lang_js = (Day16vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2020/Day16.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2020_Day16vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day16 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3898\n")}}]);
{"version":3,"file":"js/8843.899584cb.js","mappings":"yKAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GACA,WAGAQ,EAAAA,GAAAA,MAAAA,IAAAA,SAAAA,GAAAA,SAAAA,EAAAA,IAAAA,SAAAA,GAAAA,SAAAA,EAAAA,KAAAA,MAAAA,IAAAA,SAAAA,GAAAA,EAAAA,KAAAA,OAGA,4BAGA,2CAEA,uCACA,EACAC,YAAAA,SAAAA,GAEA,+EACA,EACAC,SAAAA,SAAAA,GAEA,6CAEA,iBACA,OACA,gCACA,OACA,gCACA,OACA,sBACA,OACA,sBACA,OACA,eACA,OACA,qBACA,OACA,qBACA,OACA,uBACA,QACA,SAEA,EACAC,YAAAA,SAAAA,GAEA,SACAC,QAAAA,SAAAA,SAAAA,EAAAA,MAAAA,EAAAA,GAAAA,KAAAA,IAAAA,GAAAA,SAAAA,KACAC,OAAAA,SAAAA,SAAAA,EAAAA,MAAAA,EAAAA,GAAAA,KAAAA,IAAAA,GAAAA,SAAAA,KACAC,QAAAA,GACAC,SAAAA,EACAC,MAAAA,GAGA,iBACA,QAGA,4BAEA,yBAEA,SAEA,IACA,gBAKA,GAHAC,GAAAA,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,GAAAA,KAAAA,IAGA,WACA,MAKAC,EAAAA,MAAAA,SAAAA,SAAAA,EAAAA,GAAAA,SAAAA,KAGAA,EAAAA,SAAAA,EAAAA,EAAAA,EAEA,KACA,CACA,SAGA,2BAEA,MAEA,kEACA,QAEA,WAEA,6CAGAA,EAAAA,QAAAA,KAAAA,GAGAC,GAAAA,EAAAA,QACA,CAGAD,EAAAA,SAAAA,GAAAA,CACA,MAEA,kEACA,QAEA,qBACA,wDAGAA,EAAAA,QAAAA,KAAAA,GAGAC,GAAAA,EAAAA,QACA,CAGAD,EAAAA,SAAAA,GAAAA,CACA,CAEA,KACA,EAGA,QACA,ICtJ6P,I,UCOzPE,GAAY,OACd,EACA9B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAemB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2021/Day16.vue?095a","webpack://advent-of-code/src/components/2021/Day16.vue","webpack://advent-of-code/./src/components/2021/Day16.vue?4b9c","webpack://advent-of-code/./src/components/2021/Day16.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":16,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"16\" :year=\"2021\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const binary = []\n\n      // Convert the input into a binary array. First, convert hex to binary. Then pad to 4 digits, then push onto the array\n      input[0].split('').forEach(c => parseInt(c, 16).toString(2).padStart(4, '0').split('').forEach(b => binary.push(b)))\n\n      // Calculate the tree structure\n      const root = this.parsePacket(binary)\n\n      // Part one is the sum of version numbers\n      this.solutions.partOne = this.sumVersions(root)\n      // Part two is the total value based on the type id\n      this.solutions.partTwo = this.getTotal(root)\n    },\n    sumVersions: function (node) {\n      // Recursively calculate the version number sum as the sum of this version plus the sum of child versions\n      return node.version + node.packets.map(p => this.sumVersions(p)).reduce((a, b) => a + b, 0)\n    },\n    getTotal: function (node) {\n      // Calculate the total for each child packet\n      const subTotals = node.packets.map(p => this.getTotal(p))\n      // Then reduce them together using the rules\n      switch (node.typeId) {\n        case 0:\n          return subTotals.reduce((a, b) => a + b, 0)\n        case 1:\n          return subTotals.reduce((a, b) => a * b, 1)\n        case 2:\n          return Math.min(...subTotals)\n        case 3:\n          return Math.max(...subTotals)\n        case 4:\n          return node.value\n        case 5:\n          return subTotals[0] > subTotals[1] ? 1 : 0\n        case 6:\n          return subTotals[0] < subTotals[1] ? 1 : 0\n        case 7:\n          return subTotals[0] === subTotals[1] ? 1 : 0\n        default:\n          return 0\n      }\n    },\n    parsePacket: function (binary) {\n      // Create a new packet\n      const packet = {\n        version: parseInt(parseInt(binary.slice(0, 3).join(''), 2).toString(10)),\n        typeId: parseInt(parseInt(binary.slice(3, 6).join(''), 2).toString(10)),\n        packets: [],\n        endIndex: 0,\n        value: 0\n      }\n\n      switch (packet.typeId) {\n        case 4: {\n          // Literal packet\n          // Get the data part of the binary string\n          const num = binary.slice(6, binary.length)\n          // Check how many full parts there are in total\n          const parts = Math.floor(num.length / 5)\n          // Keep track of the digits\n          let digits = ''\n          // Run through each chunk\n          let index = 0\n          for (; index < parts * 5; index += 5) {\n            // Get the digit\n            digits += num.slice(index + 1, index + 5).join('')\n\n            // If the first bit was a zero, stop\n            if (num[index] === '0') {\n              break\n            }\n          }\n\n          // The value us the decimal of the binary\n          packet.value = parseInt(parseInt(digits, 2).toString(10))\n\n          // Set the end index\n          packet.endIndex = 6 + index + 5\n\n          break\n        }\n        default: {\n          // Operator\n          // Check if it's a length or a count specification\n          const isLength = parseInt(binary[6]) === 0\n\n          if (isLength) {\n            // Get the length of the bit array\n            const len = parseInt(parseInt(binary.slice(7, 7 + 15).join(''), 2).toString(10))\n            let index = 0\n            // While we haven't reaached the end yet\n            while (index < len) {\n              // Parse the child packet\n              const subPacket = this.parsePacket(binary.slice(22 + index, 22 + len))\n\n              // Remember it\n              packet.packets.push(subPacket)\n\n              // Adjust the index\n              index += subPacket.endIndex\n            }\n\n            // Remember the end index of THIS packet\n            packet.endIndex = 22 + index\n          } else {\n            // Get the number of child packets\n            const number = parseInt(parseInt(binary.slice(7, 7 + 11).join(''), 2).toString(10))\n            let index = 0\n            // Iterate through them\n            for (let p = 0; p < number; p++) {\n              const subPacket = this.parsePacket(binary.slice(18 + length + index, binary.length))\n\n              // Remember it\n              packet.packets.push(subPacket)\n\n              // Adjust the index\n              index += subPacket.endIndex\n            }\n\n            // Remember the end index of THIS packet\n            packet.endIndex = 18 + index\n          }\n\n          break\n        }\n      }\n\n      return packet\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day16.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day16.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day16.vue?vue&type=template&id=911e3fee\"\nimport script from \"./Day16.vue?vue&type=script&lang=js\"\nexport * from \"./Day16.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","input","sumVersions","getTotal","parsePacket","version","typeId","packets","endIndex","value","digits","packet","index","component"],"sourceRoot":""}
"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[2690],{3114:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day7)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day7.vue?vue&type=template&id=4173a07a\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":7,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partTwo\",fn:function(){return [_c('b-table',{attrs:{\"table-class\":\"mt-3\",\"items\":_vm.output,\"per-page\":10,\"current-page\":_vm.currentPage}}),_c('b-pagination',{attrs:{\"total-rows\":_vm.output.length,\"per-page\":10},model:{value:(_vm.currentPage),callback:function ($$v) {_vm.currentPage=$$v},expression:\"currentPage\"}})]},proxy:true}])})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day7.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day7vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      currentPage: 0,\n      output: []\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.mapping = new Map();\n      this.allLetters = new Set();\n      input.forEach(i => {\n        // Parse the individual parts\n        const parts = i.split(' must be finished before step ');\n        const from = parts[0].replace('Step ', '');\n        const to = parts[1].replace(' can begin.', '');\n\n        // Add them to the set of all letters\n        this.allLetters.add(from);\n        this.allLetters.add(to);\n\n        // Store them in reverse order, so each step knows its predecessors\n        if (!this.mapping.has(to)) {\n          this.mapping.set(to, [from]);\n        } else {\n          const temp = this.mapping.get(to);\n          temp.push(from);\n          this.mapping.set(to, temp);\n        }\n      });\n      this.solvePartOne();\n      this.solvePartTwo();\n    },\n    solvePartOne: function () {\n      const letters = new Set(this.allLetters);\n\n      // Get the initially available steps\n      const start = [...letters].filter(l => !this.mapping.has(l)).sort();\n\n      // Keep track of the completed steps\n      const seen = [];\n\n      // While there are steps to complete\n      while (letters.size > 0) {\n        // Get the ones that can run next\n        const next = [...letters].filter(l => this.mapping.has(l) && this.mapping.get(l).every(t => seen.includes(t))).sort();\n\n        // Add them all to the array\n        next.forEach(n => {\n          if (start.indexOf(n) === -1) {\n            start.push(n);\n          }\n        });\n        // Sort it\n        start.sort();\n\n        // Get the one with the lowest character\n        const current = start.shift();\n        // Mark it as complete\n        seen.push(current);\n        letters.delete(current);\n      }\n      this.solutions.partOne = seen.join('');\n    },\n    solvePartTwo: function () {\n      this.output = [];\n      const letters = new Set(this.allLetters);\n\n      // Get the initially available steps\n      const start = [...letters].filter(l => !this.mapping.has(l)).sort();\n      const seen = [];\n\n      // Keep track of what workers are doing\n      const workers = Array.from(Array(5).keys()).map(i => null);\n      let second = 0;\n      let freeWorkers;\n      while (letters.size > 0 || workers.some(w => w !== null)) {\n        // Add all finished steps to the seen array and free the worker\n        workers.forEach((w, i) => {\n          if (w !== null && w.second === second) {\n            seen.push(w.letter);\n            workers[i] = null;\n          }\n        });\n\n        // Get the indices of the free workers\n        freeWorkers = [];\n        workers.forEach((w, i) => {\n          if (w === null) {\n            freeWorkers.push(i);\n          }\n        });\n\n        // If any are free\n        if (freeWorkers.length > 0) {\n          // Determine the steps that can run next\n          const next = [...letters].filter(l => this.mapping.has(l) && this.mapping.get(l).every(t => seen.includes(t))).sort();\n\n          // Add each to the currently available array\n          next.forEach(n => {\n            if (start.indexOf(n) === -1) {\n              start.push(n);\n            }\n          });\n          // Sort it\n          start.sort();\n\n          // For each free worker\n          freeWorkers.forEach(i => {\n            // Check if there's a job to run\n            const current = start.shift();\n            if (current) {\n              // If so, delete it from the step list\n              letters.delete(current);\n\n              // And add the worker\n              workers[i] = {\n                letter: current,\n                second: second + current.charCodeAt(0) - 4\n              };\n            }\n          });\n        }\n\n        // Add the current state to the output for visualization\n        this.output.push({\n          second: second,\n          worker1: workers[0] ? workers[0].letter : '.',\n          worker2: workers[1] ? workers[1].letter : '.',\n          worker3: workers[2] ? workers[2].letter : '.',\n          worker4: workers[3] ? workers[3].letter : '.',\n          worker5: workers[4] ? workers[4].letter : '.',\n          done: seen.join('')\n        });\n\n        // Increment time\n        second++;\n      }\n      this.solutions.partTwo = second - 1;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2018/Day7.vue?vue&type=script&lang=js\n /* harmony default export */ const _2018_Day7vue_type_script_lang_js = (Day7vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2018/Day7.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2018_Day7vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day7 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3114\n")}}]);
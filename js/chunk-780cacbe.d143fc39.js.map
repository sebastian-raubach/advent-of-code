{"version":3,"sources":["webpack:///./src/assets/input/2020/Day-21.txt","webpack:///./src/assets/markdown sync ^\\.\\/.*\\.md$","webpack:///./src/assets/markdown/2020/Day-2.md","webpack:///./src/assets/input/2018/Day-19.txt","webpack:///./src/assets/input/2016/Day-2.txt","webpack:///./src/components/Day.vue?cddf","webpack:///./src/assets/input/2018/Day-11.txt","webpack:///./src/assets/markdown/2018/Day-6.md","webpack:///./src/assets/markdown/2018/Day-8.md","webpack:///./src/assets/input/2017/Day-5.txt","webpack:///./src/assets/input/2020/Day-15.txt","webpack:///./src/assets/markdown/2017/Day-13.md","webpack:///./src/assets/input/2017/Day-1.txt","webpack:///./src/assets/input/2018/Day-15.txt","webpack:///./src/assets/input/2018/Day-14.txt","webpack:///./node_modules/core-js/modules/es.string.split.js","webpack:///./src/assets/input/2020/Day-9.txt","webpack:///./src/assets/input/2018/Day-21.txt","webpack:///./src/assets/input/2020/Day-6.txt","webpack:///./node_modules/core-js/internals/regexp-exec-abstract.js","webpack:///./src/assets/markdown/2017/Day-16.md","webpack:///./src/assets/input/2017/Day-21.txt","webpack:///./src/assets/markdown/2016/Day-2.md","webpack:///./src/assets/markdown/2020/Day-17.md","webpack:///./src/assets/input/2018/Day-13.txt","webpack:///./src/assets/markdown/2018/Day-18.md","webpack:///./src/assets/input/2017/Day-20.txt","webpack:///./src/assets/markdown/2017/Day-9.md","webpack:///./src/assets/input/2018/Day-1.txt","webpack:///./src/assets/markdown/2018/Day-16.md","webpack:///./src/assets/markdown/2017/Day-1.md","webpack:///./src/assets/input/2020/Day-11.txt","webpack:///./src/assets/input/2017/Day-10.txt","webpack:///./src/assets/markdown/2018/Day-12.md","webpack:///./src/assets/input/2017/Day-13.txt","webpack:///./src/assets/markdown/2017/Day-15.md","webpack:///./src/assets/input/2020/Day-12.txt","webpack:///./src/assets/markdown/2020/Day-21.md","webpack:///./src/assets/markdown/2020/Day-25.md","webpack:///./src/assets/markdown/2021/Day-4.md","webpack:///./node_modules/core-js/internals/this-number-value.js","webpack:///./src/assets/input/2020/Day-7.txt","webpack:///./src/assets/markdown/2020/Day-3.md","webpack:///./src/assets/markdown/2020/Day-9.md","webpack:///./src/assets/markdown/2018/Day-2.md","webpack:///./node_modules/core-js/internals/is-regexp.js","webpack:///./src/assets/markdown/2018/Day-3.md","webpack:///./src/assets/markdown/2017/Day-11.md","webpack:///./src/assets/input/2017/Day-23.txt","webpack:///./src/assets/input/2017/Day-12.txt","webpack:///./src/assets/markdown/2018/Day-7.md","webpack:///./src/components/Day.vue?e6ed","webpack:///src/components/Day.vue","webpack:///./src/components/Day.vue?966f","webpack:///./src/components/Day.vue?5a8b","webpack:///./src/assets/markdown/2017/Day-25.md","webpack:///./src/assets/markdown/2017/Day-5.md","webpack:///./src/assets/markdown/2017/Day-19.md","webpack:///./src/assets/markdown/2020/Day-4.md","webpack:///./src/assets/input/2017/Day-9.txt","webpack:///./src/assets/input/2017/Day-7.txt","webpack:///./src/assets/input/2018/Day-8.txt","webpack:///./src/assets/input/2020/Day-14.txt","webpack:///./src/assets/input/2020/Day-4.txt","webpack:///./src/assets/markdown/2018/Day-11.md","webpack:///./src/assets/markdown/2021/Day-8.md","webpack:///./node_modules/core-js/internals/whitespaces.js","webpack:///./node_modules/core-js/internals/string-trim.js","webpack:///./src/assets/markdown/2017/Day-20.md","webpack:///./src/assets/input/2018/Day-16.txt","webpack:///./src/assets/markdown/2017/Day-22.md","webpack:///./src/assets/markdown/2017/Day-4.md","webpack:///./src/assets/input/2018/Day-6.txt","webpack:///./src/assets/input/2017/Day-19.txt","webpack:///./src/assets/input/2017/Day-6.txt","webpack:///./src/assets/markdown/2020/Day-1.md","webpack:///./src/assets/input/2020/Day-23.txt","webpack:///./src/assets/input/2017/Day-8.txt","webpack:///./src/assets/input/2018/Day-18.txt","webpack:///./src/assets/input/2021/Day-8.txt","webpack:///./src/assets/markdown/2020/Day-13.md","webpack:///./src/assets/markdown/2017/Day-8.md","webpack:///./src/assets/markdown/2020/Day-23.md","webpack:///./src/assets/input/2021/Day-6.txt","webpack:///./node_modules/core-js/internals/inherit-if-required.js","webpack:///./src/assets/input/2018/Day-17.txt","webpack:///./src/assets/input/2017/Day-16.txt","webpack:///./src/assets/input/2020/Day-22.txt","webpack:///./src/assets/markdown/2017/Day-10.md","webpack:///./src/assets/markdown/2018/Day-22.md","webpack:///./src/assets/markdown/2020/Day-6.md","webpack:///./src/assets/markdown/2017/Day-2.md","webpack:///./src/assets/markdown/2020/Day-20.md","webpack:///./node_modules/core-js/internals/advance-string-index.js","webpack:///./src/assets/markdown/2018/Day-14.md","webpack:///./src/assets/markdown/2018/Day-13.md","webpack:///./src/assets/input/2020/Day-2.txt","webpack:///./src/assets/input/2018/Day-5.txt","webpack:///./src/assets/markdown/2021/Day-3.md","webpack:///./src/assets/input/2021/Day-4.txt","webpack:///./src/assets/markdown/2016/Day-1.md","webpack:///./src/assets/markdown/2021/Day-7.md","webpack:///./src/assets/input/2018/Day-4.txt","webpack:///./src/assets/input/2017/Day-18.txt","webpack:///./src/assets/input sync ^\\.\\/.*\\.txt$","webpack:///./src/assets/input/2017/Day-4.txt","webpack:///./src/assets/markdown/2018/Day-17.md","webpack:///./src/assets/input/2020/Day-16.txt","webpack:///./src/assets/input/2020/Day-17.txt","webpack:///./src/assets/input/2017/Day-2.txt","webpack:///./src/assets/markdown/2020/Day-7.md","webpack:///./src/assets/markdown/2020/Day-22.md","webpack:///./node_modules/core-js/modules/es.number.constructor.js","webpack:///./src/assets/input/2021/Day-5.txt","webpack:///./src/assets/input/2018/Day-7.txt","webpack:///./src/assets/input/2020/Day-20.txt","webpack:///./src/assets/input/2017/Day-24.txt","webpack:///./src/assets/input/2018/Day-20.txt","webpack:///./src/assets/input/2020/Day-10.txt","webpack:///./src/assets/input/2020/Day-1.txt","webpack:///./src/assets/input/2018/Day-2.txt","webpack:///./src/assets/markdown/2020/Day-16.md","webpack:///./src/assets/markdown/2020/Day-15.md","webpack:///./src/assets/input/2016/Day-1.txt","webpack:///./src/assets/markdown/2017/Day-17.md","webpack:///./src/assets/input/2020/Day-5.txt","webpack:///./src/assets/markdown/2020/Day-8.md","webpack:///./src/assets/input/2021/Day-1.txt","webpack:///./src/assets/markdown/2018/Day-10.md","webpack:///./src/assets/markdown/2020/Day-11.md","webpack:///./src/assets/markdown/2017/Day-18.md","webpack:///./src/assets/markdown/2021/Day-6.md","webpack:///./src/assets/input/2020/Day-8.txt","webpack:///./src/assets/markdown/2018/Day-15.md","webpack:///./src/assets/markdown/2020/Day-18.md","webpack:///./src/assets/markdown/2017/Day-24.md","webpack:///./src/assets/markdown/2018/Day-1.md","webpack:///./src/assets/markdown/2021/Day-1.md","webpack:///./src/assets/input/2020/Day-13.txt","webpack:///./src/assets/markdown/2017/Day-12.md","webpack:///./src/assets/markdown/2018/Day-4.md","webpack:///./src/assets/input/2018/Day-10.txt","webpack:///./src/assets/input/2017/Day-22.txt","webpack:///./src/assets/input/2020/Day-25.txt","webpack:///./src/assets/input/2020/Day-3.txt","webpack:///./src/assets/markdown/2020/Day-10.md","webpack:///./src/assets/input/2021/Day-3.txt","webpack:///./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","webpack:///./src/assets/markdown/2021/Day-5.md","webpack:///./src/assets/markdown/2020/Day-14.md","webpack:///./src/assets/markdown/2017/Day-3.md","webpack:///./src/assets/input/2017/Day-25.txt","webpack:///./src/assets/markdown/2018/Day-5.md","webpack:///./src/assets/markdown/2017/Day-7.md","webpack:///./src/assets/input/2021/Day-2.txt","webpack:///./src/assets/input/2018/Day-3.txt","webpack:///./src/assets/markdown/2020/Day-24.md","webpack:///./src/assets/markdown/2020/Day-19.md","webpack:///./src/assets/input/2018/Day-23.txt","webpack:///./src/assets/input/2018/Day-12.txt","webpack:///./src/assets/markdown/2020/Day-12.md","webpack:///./src/assets/input/2020/Day-19.txt","webpack:///./src/assets/markdown/2021/Day-2.md","webpack:///./src/assets/markdown/2018/Day-9.md","webpack:///./src/assets/input/2021/Day-7.txt","webpack:///./src/assets/markdown/2020/Day-5.md","webpack:///./src/assets/input/2017/Day-15.txt","webpack:///./src/assets/markdown/2017/Day-6.md","webpack:///./src/assets/input/2020/Day-18.txt","webpack:///./src/assets/input/2020/Day-24.txt","webpack:///./src/assets/input/2017/Day-17.txt","webpack:///./src/assets/input/2018/Day-9.txt","webpack:///./src/assets/input/2017/Day-3.txt","webpack:///./src/assets/input/2017/Day-11.txt","webpack:///./src/assets/input/2018/Day-22.txt"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","apply","call","uncurryThis","fixRegExpWellKnownSymbolLogic","isRegExp","anObject","requireObjectCoercible","speciesConstructor","advanceStringIndex","toLength","toString","getMethod","arraySlice","callRegExpExec","regexpExec","stickyHelpers","fails","UNSUPPORTED_Y","MAX_UINT32","min","Math","$push","push","exec","stringSlice","slice","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","re","originalExec","this","arguments","result","split","length","SPLIT","nativeSplit","maybeCallNative","internalSplit","separator","limit","string","lim","undefined","match","lastIndex","lastLength","output","flags","ignoreCase","multiline","unicode","sticky","lastLastIndex","separatorCopy","RegExp","source","index","O","splitter","rx","S","res","done","value","C","unicodeMatching","p","q","A","z","i","global","isCallable","classof","TypeError","R","valueOf","isObject","wellKnownSymbol","MATCH","it","render","_vm","_h","$createElement","_c","_self","staticClass","_v","_s","day","solvedDays","year","title","_e","attrs","name","markdown","partOne","directives","rawName","modifiers","partTwo","on","$event","preventDefault","onSubmit","editingEnabled","model","callback","$$v","input","expression","solutions","_t","target","select","staticRenderFns","components","BIconCaretRightFill","BIconCaretLeftFill","props","type","Number","default","data","computed","taskInput","parts","splitData","methods","$emit","mounted","component","whitespaces","replace","whitespace","ltrim","rtrim","createMethod","TYPE","$this","start","end","trim","setPrototypeOf","dummy","Wrapper","NewTarget","NewTargetPrototype","constructor","prototype","charAt","DESCRIPTORS","isForced","redefine","hasOwn","inheritIfRequired","isPrototypeOf","isSymbol","toPrimitive","getOwnPropertyNames","f","getOwnPropertyDescriptor","defineProperty","thisNumberValue","NUMBER","NativeNumber","NumberPrototype","charCodeAt","toNumeric","primValue","toNumber","argument","first","third","radix","maxCode","digits","NaN","parseInt","key","NumberWrapper","n","j","createNonEnumerableProperty","SPECIES","RegExpPrototype","KEY","FORCED","SHAM","SYMBOL","DELEGATES_TO_SYMBOL","DELEGATES_TO_EXEC","execCalled","uncurriedNativeRegExpMethod","nativeMethod","regexp","str","arg2","forceStringMethod","uncurriedNativeMethod","$exec","String"],"mappings":"kHAAA,OAAe,w3mB,uBCAf,IAAIA,EAAM,CACT,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,kBAAmB,OACnB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,kBAAmB,OACnB,mBAAoB,OACpB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,kBAAmB,OACnB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,OACnB,kBAAmB,QAIpB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,Q,oCCjGpB,OAAe,0mF,oCCAf,OAAe,0c,oCCAf,OAAe,ulF,oCCAf,W,oCCAA,OAAe,qB,oCCAf,OAAe,o9H,oCCAf,OAAe,8hH,oCCAf,OAAe,s3L,oCCAf,OAAe,8B,oCCAf,OAAe,kyR,oCCAf,OAAe,unE,kCCAf,OAAe,+kC,oCCAf,OAAe,uB,kCCCf,IAAIY,EAAQ,EAAQ,QAChBC,EAAO,EAAQ,QACfC,EAAc,EAAQ,QACtBC,EAAgC,EAAQ,QACxCC,EAAW,EAAQ,QACnBC,EAAW,EAAQ,QACnBC,EAAyB,EAAQ,QACjCC,EAAqB,EAAQ,QAC7BC,EAAqB,EAAQ,QAC7BC,EAAW,EAAQ,QACnBC,EAAW,EAAQ,QACnBC,EAAY,EAAQ,QACpBC,EAAa,EAAQ,QACrBC,EAAiB,EAAQ,QACzBC,EAAa,EAAQ,QACrBC,EAAgB,EAAQ,QACxBC,EAAQ,EAAQ,QAEhBC,EAAgBF,EAAcE,cAC9BC,EAAa,WACbC,EAAMC,KAAKD,IACXE,EAAQ,GAAGC,KACXC,EAAOrB,EAAY,IAAIqB,MACvBD,EAAOpB,EAAYmB,GACnBG,EAActB,EAAY,GAAGuB,OAI7BC,GAAqCV,GAAM,WAE7C,IAAIW,EAAK,OACLC,EAAeD,EAAGJ,KACtBI,EAAGJ,KAAO,WAAc,OAAOK,EAAa5B,MAAM6B,KAAMC,YACxD,IAAIC,EAAS,KAAKC,MAAML,GACxB,OAAyB,IAAlBI,EAAOE,QAA8B,MAAdF,EAAO,IAA4B,MAAdA,EAAO,MAI5D5B,EAA8B,SAAS,SAAU+B,EAAOC,EAAaC,GACnE,IAAIC,EAqDJ,OAzCEA,EAV2B,KAA3B,OAAOL,MAAM,QAAQ,IAEc,GAAnC,OAAOA,MAAM,QAAS,GAAGC,QACO,GAAhC,KAAKD,MAAM,WAAWC,QACU,GAAhC,IAAID,MAAM,YAAYC,QAEtB,IAAID,MAAM,QAAQC,OAAS,GAC3B,GAAGD,MAAM,MAAMC,OAGC,SAAUK,EAAWC,GACnC,IAAIC,EAAS9B,EAASJ,EAAuBuB,OACzCY,OAAgBC,IAAVH,EAAsBrB,EAAaqB,IAAU,EACvD,GAAY,IAARE,EAAW,MAAO,GACtB,QAAkBC,IAAdJ,EAAyB,MAAO,CAACE,GAErC,IAAKpC,EAASkC,GACZ,OAAOrC,EAAKkC,EAAaK,EAAQF,EAAWG,GAE9C,IAQIE,EAAOC,EAAWC,EARlBC,EAAS,GACTC,GAAST,EAAUU,WAAa,IAAM,KAC7BV,EAAUW,UAAY,IAAM,KAC5BX,EAAUY,QAAU,IAAM,KAC1BZ,EAAUa,OAAS,IAAM,IAClCC,EAAgB,EAEhBC,EAAgB,IAAIC,OAAOhB,EAAUiB,OAAQR,EAAQ,KAEzD,MAAOJ,EAAQ1C,EAAKa,EAAYuC,EAAeb,GAAS,CAEtD,GADAI,EAAYS,EAAcT,UACtBA,EAAYQ,IACd9B,EAAKwB,EAAQtB,EAAYgB,EAAQY,EAAeT,EAAMa,QAClDb,EAAMV,OAAS,GAAKU,EAAMa,MAAQhB,EAAOP,QAAQjC,EAAMqB,EAAOyB,EAAQlC,EAAW+B,EAAO,IAC5FE,EAAaF,EAAM,GAAGV,OACtBmB,EAAgBR,EACZE,EAAOb,QAAUQ,GAAK,MAExBY,EAAcT,YAAcD,EAAMa,OAAOH,EAAcT,YAK7D,OAHIQ,IAAkBZ,EAAOP,QACvBY,GAAetB,EAAK8B,EAAe,KAAK/B,EAAKwB,EAAQ,IACpDxB,EAAKwB,EAAQtB,EAAYgB,EAAQY,IACjCN,EAAOb,OAASQ,EAAM7B,EAAWkC,EAAQ,EAAGL,GAAOK,GAGnD,IAAId,WAAMU,EAAW,GAAGT,OACjB,SAAUK,EAAWC,GACnC,YAAqBG,IAAdJ,GAAqC,IAAVC,EAAc,GAAKtC,EAAKkC,EAAaN,KAAMS,EAAWC,IAErEJ,EAEhB,CAGL,SAAeG,EAAWC,GACxB,IAAIkB,EAAInD,EAAuBuB,MAC3B6B,OAAwBhB,GAAbJ,OAAyBI,EAAY/B,EAAU2B,EAAWJ,GACzE,OAAOwB,EACHzD,EAAKyD,EAAUpB,EAAWmB,EAAGlB,GAC7BtC,EAAKoC,EAAe3B,EAAS+C,GAAInB,EAAWC,IAOlD,SAAUC,EAAQD,GAChB,IAAIoB,EAAKtD,EAASwB,MACd+B,EAAIlD,EAAS8B,GACbqB,EAAMzB,EAAgBC,EAAesB,EAAIC,EAAGrB,EAAOF,IAAkBF,GAEzE,GAAI0B,EAAIC,KAAM,OAAOD,EAAIE,MAEzB,IAAIC,EAAIzD,EAAmBoD,EAAIL,QAE3BW,EAAkBN,EAAGT,QACrBH,GAASY,EAAGX,WAAa,IAAM,KACtBW,EAAGV,UAAY,IAAM,KACrBU,EAAGT,QAAU,IAAM,KACnBjC,EAAgB,IAAM,KAI/ByC,EAAW,IAAIM,EAAE/C,EAAgB,OAAS0C,EAAGJ,OAAS,IAAMI,EAAIZ,GAChEN,OAAgBC,IAAVH,EAAsBrB,EAAaqB,IAAU,EACvD,GAAY,IAARE,EAAW,MAAO,GACtB,GAAiB,IAAbmB,EAAE3B,OAAc,OAAuC,OAAhCpB,EAAe6C,EAAUE,GAAc,CAACA,GAAK,GACxE,IAAIM,EAAI,EACJC,EAAI,EACJC,EAAI,GACR,MAAOD,EAAIP,EAAE3B,OAAQ,CACnByB,EAASd,UAAY3B,EAAgB,EAAIkD,EACzC,IACI3E,EADA6E,EAAIxD,EAAe6C,EAAUzC,EAAgBO,EAAYoC,EAAGO,GAAKP,GAErE,GACQ,OAANS,IACC7E,EAAI2B,EAAIV,EAASiD,EAASd,WAAa3B,EAAgBkD,EAAI,IAAKP,EAAE3B,WAAaiC,EAEhFC,EAAI3D,EAAmBoD,EAAGO,EAAGF,OACxB,CAEL,GADA3C,EAAK8C,EAAG5C,EAAYoC,EAAGM,EAAGC,IACtBC,EAAEnC,SAAWQ,EAAK,OAAO2B,EAC7B,IAAK,IAAIE,EAAI,EAAGA,GAAKD,EAAEpC,OAAS,EAAGqC,IAEjC,GADAhD,EAAK8C,EAAGC,EAAEC,IACNF,EAAEnC,SAAWQ,EAAK,OAAO2B,EAE/BD,EAAID,EAAI1E,GAIZ,OADA8B,EAAK8C,EAAG5C,EAAYoC,EAAGM,IAChBE,OAGT1C,EAAmCT,I,kCC3JvC,OAAe,imT,oCCAf,OAAe,qb,oCCAf,OAAe,26mB,uBCAf,IAAIsD,EAAS,EAAQ,QACjBtE,EAAO,EAAQ,QACfI,EAAW,EAAQ,QACnBmE,EAAa,EAAQ,QACrBC,EAAU,EAAQ,QAClB3D,EAAa,EAAQ,QAErB4D,EAAYH,EAAOG,UAIvB5E,EAAOC,QAAU,SAAU4E,EAAGf,GAC5B,IAAIrC,EAAOoD,EAAEpD,KACb,GAAIiD,EAAWjD,GAAO,CACpB,IAAIQ,EAAS9B,EAAKsB,EAAMoD,EAAGf,GAE3B,OADe,OAAX7B,GAAiB1B,EAAS0B,GACvBA,EAET,GAAmB,WAAf0C,EAAQE,GAAiB,OAAO1E,EAAKa,EAAY6D,EAAGf,GACxD,MAAMc,EAAU,iD,oCCnBlB,OAAe,m2D,kCCAf,OAAe,2uH,oCCAf,OAAe,g3F,oCCAf,OAAe,o+M,kCCAf,OAAe,k/sB,oCCAf,OAAe,u4H,oCCAf,OAAe,27jD,kCCAf,OAAe,k8G,kCCAf,OAAe,yjJ,oCCAf,OAAe,87L,oCCAf,OAAe,4iG,kCCAf,OAAe,mmS,kCCAf,OAAe,mE,oCCAf,OAAe,k1J,oCCAf,OAAe,iV,oCCAf,OAAe,i+I,oCCAf,OAAe,u4G,oCCAf,OAAe,87F,oCCAf,OAAe,4tK,oCCAf,OAAe,g6I,uBCAf,IAAIxE,EAAc,EAAQ,QAI1BJ,EAAOC,QAAUG,EAAY,GAAI0E,U,oCCJjC,OAAe,qu4C,oCCAf,OAAe,s+H,oCCAf,OAAe,+xG,kCCAf,OAAe,qkG,uBCAf,IAAIC,EAAW,EAAQ,QACnBJ,EAAU,EAAQ,QAClBK,EAAkB,EAAQ,QAE1BC,EAAQD,EAAgB,SAI5BhF,EAAOC,QAAU,SAAUiF,GACzB,IAAI5E,EACJ,OAAOyE,EAASG,UAAmCtC,KAA1BtC,EAAW4E,EAAGD,MAA0B3E,EAA0B,UAAfqE,EAAQO,M,kCCVtF,OAAe,q6E,kCCAf,OAAe,mpC,oCCAf,OAAe,uU,oCCAf,OAAe,8rpC,oCCAf,OAAe,+4J,2CCAf,IAAIC,EAAS,WAAa,IAAIC,EAAIrD,KAASsD,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,QAAQ,CAACF,EAAG,MAAM,CAACE,YAAY,qDAAqD,CAACF,EAAG,KAAK,CAACH,EAAIM,GAAG,OAAON,EAAIO,GAAGP,EAAIQ,MAAOR,EAAIS,WAAWT,EAAIU,MAAMV,EAAIQ,IAAM,GAAI,CAACR,EAAIM,GAAG,MAAMN,EAAIO,GAAGP,EAAIS,WAAWT,EAAIU,MAAMV,EAAIQ,IAAM,GAAGG,SAASX,EAAIY,MAAM,GAAGT,EAAG,iBAAiB,CAACA,EAAG,WAAW,CAACU,MAAM,CAAC,SAAWb,EAAIQ,KAAO,EAAE,GAAK,CAAEM,KAAO,QAAUd,EAAIU,KAAO,SAAWV,EAAIQ,IAAM,MAAQ,CAACL,EAAG,uBAAuB,GAAGA,EAAG,WAAW,CAACU,MAAM,CAAC,SAAWb,EAAIQ,KAAOR,EAAIS,WAAWT,EAAIU,MAAM3D,OAAO,GAAK,CAAE+D,KAAO,QAAUd,EAAIU,KAAO,SAAWV,EAAIQ,IAAM,MAAQ,CAACL,EAAG,wBAAwB,IAAI,IAAI,GAAIH,EAAIe,UAAYf,EAAIe,SAASC,QAASb,EAAG,MAAM,CAACE,YAAY,QAAQ,CAACF,EAAG,WAAW,CAACc,WAAW,CAAC,CAACH,KAAK,WAAWI,QAAQ,sBAAsBC,UAAU,CAAC,YAAW,MAAS,CAACnB,EAAIM,GAAG,iBAAiBH,EAAG,aAAa,CAACU,MAAM,CAAC,GAAK,aAAa,CAACV,EAAG,SAAS,CAACE,YAAY,QAAQ,CAACF,EAAG,eAAe,CAACU,MAAM,CAAC,OAASb,EAAIe,SAASC,YAAY,IAAI,IAAI,GAAGhB,EAAIY,KAAMZ,EAAIe,UAAYf,EAAIe,SAASK,QAASjB,EAAG,MAAM,CAACE,YAAY,QAAQ,CAACF,EAAG,WAAW,CAACc,WAAW,CAAC,CAACH,KAAK,WAAWI,QAAQ,sBAAsBC,UAAU,CAAC,YAAW,MAAS,CAACnB,EAAIM,GAAG,iBAAiBH,EAAG,aAAa,CAACU,MAAM,CAAC,GAAK,aAAa,CAACV,EAAG,SAAS,CAACE,YAAY,QAAQ,CAACF,EAAG,eAAe,CAACU,MAAM,CAAC,OAASb,EAAIe,SAASK,YAAY,IAAI,IAAI,GAAGpB,EAAIY,KAAKT,EAAG,KAAK,CAACH,EAAIM,GAAG,WAAWH,EAAG,SAAS,CAACkB,GAAG,CAAC,OAAS,SAASC,GAAgC,OAAxBA,EAAOC,iBAAwBvB,EAAIwB,SAAS1G,MAAM,KAAM8B,cAAc,CAACuD,EAAG,eAAe,CAACU,MAAM,CAAC,MAAQ,aAAa,YAAc,wCAAwC,YAAY,eAAe,CAACV,EAAG,kBAAkB,CAACU,MAAM,CAAC,KAAO,IAAI,GAAK,aAAa,KAAO,OAAO,UAAYb,EAAIyB,gBAAgBC,MAAM,CAAC7C,MAAOmB,EAAS,MAAE2B,SAAS,SAAUC,GAAM5B,EAAI6B,MAAMD,GAAKE,WAAW,YAAY,GAAG3B,EAAG,WAAW,CAACU,MAAM,CAAC,KAAO,UAAUQ,GAAG,CAAC,MAAQ,SAASC,GAAgC,OAAxBA,EAAOC,iBAAwBvB,EAAIwB,SAAS1G,MAAM,KAAM8B,cAAc,CAACoD,EAAIM,GAAG,UAAU,QAA8B9C,IAA1BwC,EAAI+B,UAAUf,SAAmD,OAA1BhB,EAAI+B,UAAUf,QAAkB,CAACb,EAAG,KAAK,CAACE,YAAY,QAAQ,CAACL,EAAIM,GAAG,qBAAqBN,EAAIgC,GAAG,WAAW7B,EAAG,eAAe,CAACE,YAAY,OAAOQ,MAAM,CAAC,SAAW,GAAG,MAAQb,EAAI+B,UAAUf,SAASK,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOA,EAAOW,OAAOC,cAAclC,EAAIY,UAAgCpD,IAA1BwC,EAAI+B,UAAUX,SAAmD,OAA1BpB,EAAI+B,UAAUX,QAAkB,CAACjB,EAAG,KAAK,CAACH,EAAIM,GAAG,qBAAqBN,EAAIgC,GAAG,WAAW7B,EAAG,eAAe,CAACE,YAAY,OAAOQ,MAAM,CAAC,SAAW,GAAG,MAAQb,EAAI+B,UAAUX,SAASC,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOA,EAAOW,OAAOC,cAAclC,EAAIY,MAAM,IACllFuB,EAAkB,G,8ECqDtB,GACEC,WAAY,CACVC,oBAAJ,OACIC,mBAAJ,QAEEC,MAAO,CACL/B,IAAK,CACHgC,KAAMC,OACNC,QAAS,GAEXhC,KAAM,CACJ8B,KAAMC,OACNC,QAAS,MAEXX,UAAW,CACTS,KAAM9H,OACNgI,QAAS,WACP,MAAO,CACL1B,QAAS,KACTI,QAAS,SAKjBuB,KAAM,WACJ,MAAO,CACLd,MAAO,OAGXe,SAAU,OAAZ,OAAY,CAAZ,kBACA,gBACA,oBAFA,IAIIC,UAAW,WACT,IACE,OAAO,EAAf,OAAe,CAAf,gEACA,SACQ,OAAO,OAGX9B,SAAU,WACR,IAAN,EAEM,IACEA,EAAW,EAAnB,OAAmB,CAAnB,+DACA,UAIM,GAAIA,EAAU,CACZ,IAAR,oCAEQ,MAAO,CACLC,QAAS8B,EAAM,GACf1B,QAAS0B,EAAM/F,OAAS,EAAI+F,EAAM,GAAK,MAGzC,MAAO,CACL9B,QAAS,KACTI,QAAS,OAIf2B,UAAW,WACT,OAAIpG,KAAKkF,MACAlF,KAAKkF,MAAM/E,MAAM,SAEjB,QAIbkG,QAAS,CACPxB,SAAU,WACR7E,KAAKsG,MAAM,gBAAiBtG,KAAKoG,aAGrCG,QAAS,WACHvG,KAAKkG,YACPlG,KAAKkF,MAAQlF,KAAKkG,aCpIqT,I,wBCQzUM,EAAY,eACd,EACApD,EACAoC,GACA,EACA,KACA,KACA,MAIa,aAAAgB,E,6CCnBf,OAAe,s+H,oCCAf,OAAe,ylE,oCCAf,OAAe,yvE,kCCAf,OAAe,4nJ,oCCAf,OAAe,2uqB,kCCAf,OAAe,q60B,kCCAf,OAAe,4vlC,kCCAf,OAAe,q8b,oCCAf,OAAe,okrB,kCCAf,OAAe,02H,oCCAf,OAAe,m6N,mBCCfvI,EAAOC,QAAU,iD,uBCDjB,IAAIG,EAAc,EAAQ,QACtBI,EAAyB,EAAQ,QACjCI,EAAW,EAAQ,QACnB4H,EAAc,EAAQ,QAEtBC,EAAUrI,EAAY,GAAGqI,SACzBC,EAAa,IAAMF,EAAc,IACjCG,EAAQnF,OAAO,IAAMkF,EAAaA,EAAa,KAC/CE,EAAQpF,OAAOkF,EAAaA,EAAa,MAGzCG,EAAe,SAAUC,GAC3B,OAAO,SAAUC,GACf,IAAIrG,EAAS9B,EAASJ,EAAuBuI,IAG7C,OAFW,EAAPD,IAAUpG,EAAS+F,EAAQ/F,EAAQiG,EAAO,KACnC,EAAPG,IAAUpG,EAAS+F,EAAQ/F,EAAQkG,EAAO,KACvClG,IAIX1C,EAAOC,QAAU,CAGf+I,MAAOH,EAAa,GAGpBI,IAAKJ,EAAa,GAGlBK,KAAML,EAAa,K,oCC7BrB,OAAe,i5H,kCCAf,OAAe,82lD,6DCAf,OAAe,4xO,oCCAf,OAAe,m3C,oCCAf,OAAe,gf,oCCAf,OAAe,k3vC,oCCAf,OAAe,wE,kCCAf,OAAe,+hE,oCCAf,OAAe,0B,kCCAf,OAAe,m/yB,oCCAf,OAAe,ujF,oCCAf,OAAe,0+gB,oCCAf,OAAe,qmN,oCCAf,OAAe,8uD,oCCAf,OAAe,4lJ,oCCAf,OAAe,wmB,qBCAf,IAAInE,EAAa,EAAQ,QACrBK,EAAW,EAAQ,QACnBoE,EAAiB,EAAQ,QAG7BnJ,EAAOC,QAAU,SAAU8I,EAAOK,EAAOC,GACvC,IAAIC,EAAWC,EAUf,OAPEJ,GAEAzE,EAAW4E,EAAYF,EAAMI,cAC7BF,IAAcD,GACdtE,EAASwE,EAAqBD,EAAUG,YACxCF,IAAuBF,EAAQI,WAC/BN,EAAeJ,EAAOQ,GACjBR,I,oCChBT,OAAe,q3/B,kCCAf,OAAe,y7+C,oCCAf,OAAe,sO,oCCAf,OAAe,+yO,oCCAf,OAAe,2gX,oCCAf,OAAe,+iG,oCCAf,OAAe,wsE,oCCAf,OAAe,spO,oCCCf,IAAIW,EAAS,EAAQ,QAAiCA,OAItD1J,EAAOC,QAAU,SAAU6D,EAAGJ,EAAON,GACnC,OAAOM,GAASN,EAAUsG,EAAO5F,EAAGJ,GAAOvB,OAAS,K,oCCNtD,OAAe,y6H,oCCAf,OAAe,6mL,oCCAf,OAAe,khqB,kCCAf,OAAe,i2hD,kCCAf,OAAe,itL,oCCAf,OAAe,0zQ,oCCAf,OAAe,s9D,oCCAf,OAAe,s0G,kCCAf,OAAe,o5uC,oCCAf,OAAe,wZ,qBCAf,IAAIhD,EAAM,CACT,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,mBAAoB,OACpB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,QACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,mBAAoB,OACpB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,mBAAoB,OACpB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,oBAAqB,OACrB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,OACpB,mBAAoB,QAIrB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,Q,oCCvGpB,OAAe,szuB,oCCAf,OAAe,wpL,oCCAf,OAAe,uhmB,kCCAf,OAAe,+F,kCCAf,OAAe,62C,kCCAf,OAAe,uqH,kCCAf,OAAe,q2X,kCCCf,IAAIqK,EAAc,EAAQ,QACtBlF,EAAS,EAAQ,QACjBrE,EAAc,EAAQ,QACtBwJ,EAAW,EAAQ,QACnBC,EAAW,EAAQ,QACnBC,EAAS,EAAQ,QACjBC,EAAoB,EAAQ,QAC5BC,EAAgB,EAAQ,QACxBC,EAAW,EAAQ,QACnBC,EAAc,EAAQ,QACtBhJ,EAAQ,EAAQ,QAChBiJ,EAAsB,EAAQ,QAA8CC,EAC5EC,EAA2B,EAAQ,QAAmDD,EACtFE,EAAiB,EAAQ,QAAuCF,EAChEG,EAAkB,EAAQ,QAC1BrB,EAAO,EAAQ,QAA4BA,KAE3CsB,EAAS,SACTC,EAAehG,EAAO+F,GACtBE,EAAkBD,EAAahB,UAC/B7E,EAAYH,EAAOG,UACnB9D,EAAaV,EAAY,GAAGuB,OAC5BgJ,EAAavK,EAAY,GAAGuK,YAI5BC,EAAY,SAAU3G,GACxB,IAAI4G,EAAYX,EAAYjG,EAAO,UACnC,MAA2B,iBAAb4G,EAAwBA,EAAYC,EAASD,IAKzDC,EAAW,SAAUC,GACvB,IACIC,EAAOC,EAAOC,EAAOC,EAASC,EAAQjJ,EAAQuB,EAAO9D,EADrDsF,EAAKgF,EAAYa,EAAU,UAE/B,GAAId,EAAS/E,GAAK,MAAMN,EAAU,6CAClC,GAAiB,iBAANM,GAAkBA,EAAG/C,OAAS,EAGvC,GAFA+C,EAAKgE,EAAKhE,GACV8F,EAAQL,EAAWzF,EAAI,GACT,KAAV8F,GAA0B,KAAVA,GAElB,GADAC,EAAQN,EAAWzF,EAAI,GACT,KAAV+F,GAA0B,MAAVA,EAAe,OAAOI,SACrC,GAAc,KAAVL,EAAc,CACvB,OAAQL,EAAWzF,EAAI,IACrB,KAAK,GAAI,KAAK,GAAIgG,EAAQ,EAAGC,EAAU,GAAI,MAC3C,KAAK,GAAI,KAAK,IAAKD,EAAQ,EAAGC,EAAU,GAAI,MAC5C,QAAS,OAAQjG,EAInB,IAFAkG,EAAStK,EAAWoE,EAAI,GACxB/C,EAASiJ,EAAOjJ,OACXuB,EAAQ,EAAGA,EAAQvB,EAAQuB,IAI9B,GAHA9D,EAAO+K,EAAWS,EAAQ1H,GAGtB9D,EAAO,IAAMA,EAAOuL,EAAS,OAAOE,IACxC,OAAOC,SAASF,EAAQF,GAE5B,OAAQhG,GAKZ,GAAI0E,EAASY,GAASC,EAAa,UAAYA,EAAa,QAAUA,EAAa,SAAU,CAQ3F,IAPA,IAcqBc,EAdjBC,EAAgB,SAAgBvH,GAClC,IAAIwH,EAAIzJ,UAAUG,OAAS,EAAI,EAAIsI,EAAaG,EAAU3G,IACtDmF,EAAQrH,KAEZ,OAAOiI,EAAcU,EAAiBtB,IAAUlI,GAAM,WAAcqJ,EAAgBnB,MAChFW,EAAkBjK,OAAO2L,GAAIrC,EAAOoC,GAAiBC,GAElD5L,EAAO8J,EAAcQ,EAAoBM,GAAgB,oLAOhEvI,MAAM,KAAMwJ,EAAI,EAAQ7L,EAAKsC,OAASuJ,EAAGA,IACrC5B,EAAOW,EAAcc,EAAM1L,EAAK6L,MAAQ5B,EAAO0B,EAAeD,IAChEjB,EAAekB,EAAeD,EAAKlB,EAAyBI,EAAcc,IAG9EC,EAAc/B,UAAYiB,EAC1BA,EAAgBlB,YAAcgC,EAC9B3B,EAASpF,EAAQ+F,EAAQgB,K,kCCtF3B,OAAe,2lT,kCCAf,OAAe,y8J,kCCAf,OAAe,+2lB,kCCAf,OAAe,yX,kCCAf,OAAe,wwb,kCCAf,OAAe,gb,kCCAf,OAAe,orC,kCCAf,OAAe,u2N,kCCAf,OAAe,kwI,kCCAf,OAAe,60H,kCCAf,OAAe,imB,kCCAf,OAAe,ysG,kCCAf,OAAe,m8W,kCCAf,OAAe,o0I,kCCAf,OAAe,uxX,kCCAf,OAAe,yxK,kCCAf,OAAe,0uK,kCCAf,OAAe,2vK,kCCAf,OAAe,iqH,kCCAf,OAAe,00L,kCCAf,OAAe,o4c,kCCAf,OAAe,o/F,kCCAf,OAAe,89E,kCCAf,OAAe,usH,kCCAf,OAAe,+1H,kCCAf,OAAe,gP,kCCAf,OAAe,m5E,kCCAf,OAAe,g3I,kCCAf,OAAe,kpgB,kCCAf,OAAe,krB,kCCAf,OAAe,kC,kCCAf,OAAe,k7U,kCCAf,OAAe,o0M,kCCAf,OAAe,+rb,kCCEf,EAAQ,QACR,IAAIpL,EAAc,EAAQ,QACtByJ,EAAW,EAAQ,QACnB7I,EAAa,EAAQ,QACrBE,EAAQ,EAAQ,QAChB8D,EAAkB,EAAQ,QAC1B2G,EAA8B,EAAQ,QAEtCC,EAAU5G,EAAgB,WAC1B6G,EAAkBrI,OAAOiG,UAE7BzJ,EAAOC,QAAU,SAAU6L,EAAKrK,EAAMsK,EAAQC,GAC5C,IAAIC,EAASjH,EAAgB8G,GAEzBI,GAAuBhL,GAAM,WAE/B,IAAIyC,EAAI,GAER,OADAA,EAAEsI,GAAU,WAAc,OAAO,GACZ,GAAd,GAAGH,GAAKnI,MAGbwI,EAAoBD,IAAwBhL,GAAM,WAEpD,IAAIkL,GAAa,EACbvK,EAAK,IAkBT,MAhBY,UAARiK,IAIFjK,EAAK,GAGLA,EAAG2H,YAAc,GACjB3H,EAAG2H,YAAYoC,GAAW,WAAc,OAAO/J,GAC/CA,EAAGoB,MAAQ,GACXpB,EAAGoK,GAAU,IAAIA,IAGnBpK,EAAGJ,KAAO,WAAiC,OAAnB2K,GAAa,EAAa,MAElDvK,EAAGoK,GAAQ,KACHG,KAGV,IACGF,IACAC,GACDJ,EACA,CACA,IAAIM,EAA8BjM,EAAY,IAAI6L,IAC9C7D,EAAU3G,EAAKwK,EAAQ,GAAGH,IAAM,SAAUQ,EAAcC,EAAQC,EAAKC,EAAMC,GAC7E,IAAIC,EAAwBvM,EAAYkM,GACpCM,EAAQL,EAAO9K,KACnB,OAAImL,IAAU5L,GAAc4L,IAAUf,EAAgBpK,KAChDyK,IAAwBQ,EAInB,CAAE1I,MAAM,EAAMC,MAAOoI,EAA4BE,EAAQC,EAAKC,IAEhE,CAAEzI,MAAM,EAAMC,MAAO0I,EAAsBH,EAAKD,EAAQE,IAE1D,CAAEzI,MAAM,MAGjB6F,EAASgD,OAAOpD,UAAWqC,EAAK1D,EAAQ,IACxCyB,EAASgC,EAAiBI,EAAQ7D,EAAQ,IAGxC4D,GAAML,EAA4BE,EAAgBI,GAAS,QAAQ,K,kCCxEzE,OAAe,o3F,kCCAf,OAAe,8mM,kCCAf,OAAe,2yE,kCCAf,OAAe,qlD,kCCAf,OAAe,g7F,kCCAf,OAAe,s0H,kCCAf,OAAe,4kR,kCCAf,OAAe,6s5B,kCCAf,OAAe,gjI,kCCAf,OAAe,owL,kCCAf,OAAe,6y6C,mCCAf,OAAe,igB,kCCAf,OAAe,wpJ,kCCAf,OAAe,mre,kCCAf,OAAe,ozG,kCCAf,OAAe,q/H,kCCAf,OAAe,g1H,kCCAf,OAAe,+3G,kCCAf,OAAe,yE,kCCAf,OAAe,m1F,kCCAf,OAAe,muoB,kCCAf,OAAe,m4oB,kCCAf,OAAe,oB,kCCAf,OAAe,+D,kCCAf,OAAe,uB,kCCAf,OAAe,8pqB,kCCAf,OAAe","file":"js/chunk-780cacbe.d143fc39.js","sourcesContent":["export default \"qgct fxctfc zbqfz zxdkrx hrqbs hgmsn ndqtf rmn cxfz slzctfh xvj xrqj nslqr bnxl rsprgcj vvchk gfhdct xsbt qbkjvg xtpdql mpvnt ssffbt gtl lxjtns prxmdlz mjlqj clg mrjqg qdtjjz fkxf vzzz qdfpq cqkrhx vbmz ljcvh mvdgf clmxkbn nmqlz vjzc bqrqj sqnbsg tn knprxg rbxz qzqzj qmcrpm grzv (contains wheat, eggs)\\njthsmn qdtjjz qkhft slzctfh ksfbnhz rsprgcj tn clg zjtlrq ttqgh rclxmm llqfr kl qdfpq lxjtns cxfz mgx vjzc ncjv vrqb jmrx qmcrpm prxmdlz zsgnd vhbmztr gscdgj mrjqg sxxnb rkgbgn dxzmr nnxmgx cjp qzdpffs tbvh dxldm rxhrpjv jtgsn khqt jgdf jtlfh pdvqs kzpmt nslqr vzzz rmsgmj nkjcr bnxl lqtqm xlkgtc jcs cqkrhx xxhtdkp qnljhd kkhq gmdldb (contains soy, peanuts, sesame)\\nglx bzxh slrc qhzqq vdlj xmm vjzc dsksm qrnkl xpjd ttqgh qdfpq dtnzp tfrpccb lchdf sjg mgx xkzk qmcrpm jlfm knprxg xngkf mpvnt gfhdct vmcsb cjp zdvr ncjv ssffbt dxzmr xkkjl ltcxqdbm rxdns qdtjjz qpfh clg vzzz gtl prxmdlz jcs mct xsbt lxjtns hgmsn jbpz rxhrpjv fkxf vqbb qckgcc (contains peanuts, fish, sesame)\\ntxhkk mvdgf llqfr clg vbmz tfrpccb rjmk bkzgpg cxfz qdfpq prxmdlz vqbb jmrx kl mjlqj zbqfz sfkf pgzgn qjtrpj jpdxvmv qpfh vrhj zpsbc vjzc ncjv crbxx cklx lxjtns zxdkrx gmdldb jgdf kvzpzvt fkhcbzbk rsprgcj rkgbgn mbllkbf grzv qc pdvqs jrbfkg kkhq qckgcc dxzmr qzdpffs hfjrp ljcvh vzzz fsjbdt qzqzj vsbttl qmcrpm tcnhp qrnkl hlsbn mgx (contains soy, eggs, sesame)\\nqzdpffs vvchk xtzt drqg tn mzr lxjtns grzv hjg hsfx qnljhd mpvnt zkvlf mmdmtg knprxg xjjk llqfr cklx rmc cxfz gpjkqrq zxjksd zpsbc xkkjl nkjcr mtzqr zsgnd jlrtmv vjzc qdtjjz fpqc crbxx ncjv cqkrhx lzkmdq vhcqpn mct fhtn qqgq xxhtdkp dsksm rxdns vrhj qgct mgx nslqr slg qhzqq jcs vzzz prxmdlz sskfj pgzgn gfhvs kcncjpk pbblp hbkmd clg fsjbdt qckgcc zjtlrq nnxmgx rkgbgn sxxnb tcnhp qmzzgr slzctfh vbmz bqrqj sjg zdxn rxhrpjv tfrpccb bkzgpg rgmlds ltcxqdbm rpmf (contains eggs, sesame)\\nzdvr zxdkrx gmcm xmm tbvh mct jlfm sfxsj qpfh ltcxqdbm jtlfh qmzzgr fkhcbzbk tfbpk lqkxpxr ssfb knprxg gxnjk dsksm mgx cjjd qckgcc tn gfhvs zjtlrq fhtn cqkrhx tcnhp qc qdfpq bkzgpg bzxh hbkmd rkgbgn lzkmdq hbpsp xkzk pdvqs vhbmztr ssffbt nfzz zsgnd dqf sdcdmn cklx xsrk pjlz ncjv vdlj hfjrp dxldm lxjtns gmdldb qzdpffs xtpdql slg pdfv jncfpc clg qhzqq prxmdlz vzzz dxzmr vvchk pgzgn (contains eggs, nuts, fish)\\ndrqg sfkf kl pjlz bqrqj tcnhp gfhvs bnxl llqfr csdslq jglqz qbkjvg fsrmcx ffpfsv mgx bbltf xqpph ssb vzzz xrqj zdxn dsksm gmcm xngkf lqkxpxr xsbt cxfz xxhtdkp lxjtns vdlj rxdns rmsgmj qmzzgr rbxz jbpz vrhj rkms gtl clg pdfv prhkvr knprxg bqdtr qrnkl mzr gscdgj zpsbc zkvlf fkhcbzbk qzqzj prxmdlz qdfpq txhkk xvj jpdxvmv mjlqj mct rtkk mrjqg mpvnt fxctfc qjtrpj jmrx vbmz hfjrp zxjksd qmcrpm sjg vvchk xmm hlsbn sbkksv cklx jlrtmv sxxnb glx vsbttl jrbfkg mvdgf xsrk vjzc (contains eggs, sesame, nuts)\\nrmsgmj pdvqs xxhtdkp nmqlz sskfj cxfz xlkgtc jrbfkg ttjvqs tfrpccb xjjk knprxg mct qqgq ltcxqdbm zdvr dsksm pbblp mtzqr slg ncjv ssfb rbxz bnkss zjtlrq gxnjk gpjkqrq tcnhp xctvtxzl lqkxpxr fpqc ffpfsv vrqb jbpz slzctfh cjjd tn qdfpq hlsbn vzzz rtkk lzkmdq gfhdct rkms zkvlf pgzgn vqbb vrhj txhkk bqrqj mjlqj vjzc rmc ksfbnhz dtkcj nzqlgz jcs zdxn xngkf fhtn nkjcr sdcdmn gscdgj jthsmn dqf hrqbs jncfpc bbltf zbqfz clg jpdxvmv xsrk lxjtns khqt mmdmtg lchdf vbmz jmrx sbkksv sqnbsg drqg gmcm nnxmgx rxdns kkhq mzr rxhrpjv ssb bqdtr vvchk (contains shellfish)\\nmjlqj dxldm bqrqj zxdkrx lxjtns xctvtxzl kvzpzvt jncfpc nnxmgx xtzt ssfb mmdmtg mct ktzlr bzxh xjjk cxfz qmzzgr hlsbn jrbfkg vqbb gmdldb ndqtf zxjksd sqnbsg bnkss sfkf vrhj qnljhd ncjv nmqlz gpjkqrq slg kzpmt drqg xqpph cjp bnxl zpsbc rmsgmj zjtlrq qdfpq clg mvdgf rbxz jmrx qmcrpm jtlfh prxmdlz gtl ssffbt ktgqpk vhbmztr vzzz (contains eggs, sesame, peanuts)\\nvqbb xngkf nkjcr drqg sfkf xsbt jthsmn prxmdlz clg sqnbsg clmxkbn zdxn tbvh cqkrhx kvzpzvt rxhrpjv vmcsb dtnzp mvdgf qnljhd txhkk lxjtns mmdmtg ttqgh qdfpq pgzgn dqf ssb kkhq ncjv cxfz vzzz rmsgmj ssfb ltcxqdbm jncfpc vjzc csdslq bqdtr prhkvr rkms (contains soy, sesame)\\nqdfpq hgmsn jbpz sskfj xtpdql ljcvh mct qrnkl qmzzgr lqtqm xxhtdkp rxhrpjv ttjvqs bbltf rxdns vzzz prxmdlz hrqbs vdlj xmm drqg nfzz qckgcc gmcm hbpsp dsksm ffpfsv vqbb mjlqj mmdmtg jlrtmv ktgqpk hbkmd fpqc sfkf dqf ktzlr xkkjl rbxz tfbpk vmcsb tbvh kl gfhvs knprxg nnxmgx ksfbnhz fkxf bqrqj qhzqq bqdtr qjtrpj mbllkbf xsrk qbkjvg lzkmdq ttqgh rjmk gmltxp xjjk lqkxpxr cqkrhx cxfz crbxx vbmz zsgnd lxjtns jgdf hfjrp pdfv clg mpvnt bnkss gbk zxjksd nkjcr sdcdmn (contains wheat)\\nkl bqdtr mgx jcs nfzz knprxg lqtqm clg slg jglqz gmdldb sqnbsg qmcrpm pgzgn tbvh nzqlgz llqfr tfbpk fxctfc qnljhd cxfz vzzz nkjcr pbblp hfjrp clmxkbn rxhrpjv ncjv bnkss slrc prhkvr qpfh tcnhp xsrk kkhq hrqbs qgct gscdgj vbmz xrqj pdfv sfkf khqt xpjd rjmk lxjtns qdfpq vhcqpn ttqgh bnxl zjtlrq qqgq lchdf jgdf jpdxvmv mmdmtg sdcdmn (contains nuts, peanuts)\\nvrhj bnxl vsbttl qdtjjz ncjv bbltf mgx xpjd mbllkbf hgmsn xqpph vzzz dxldm tcnhp vhbmztr jthsmn mpvnt prhkvr gbk rxhrpjv ffpfsv clmxkbn rsprgcj qbkjvg tbvh rmc kvzpzvt qsgcg nnxmgx qdfpq xlkgtc rgmlds pgzgn bqdtr vdlj kkhq sqnbsg cqkrhx qgct ttqgh rkms xtzt nmqlz vbmz vmcsb mtzqr nslqr llqfr zxjksd cxfz fxctfc dtnzp slrc grzv nkjcr sdcdmn xtpdql gxnjk lxjtns mvdgf qzdpffs mct csdslq knprxg zkvlf vvchk nzqlgz crbxx pdvqs prxmdlz bnkss ktgqpk ltcxqdbm qrnkl gtl gmdldb jncfpc tn jmrx qckgcc gpjkqrq dxzmr rclxmm rkgbgn bqrqj xjjk (contains sesame, fish)\\nnzqlgz ffpfsv qjtrpj vjzc mzr bqdtr gmcm kkhq vmcsb vhbmztr ssfb hbkmd rxdns mjlqj knprxg qmzzgr qc tfrpccb cjp vzzz ltcxqdbm tqgjg mbllkbf sfxsj xngkf jtlfh ncjv hfjrp jmrx vvchk rclxmm dtnzp fsjbdt sfkf qbkjvg gmltxp jncfpc clg bzxh xxhtdkp xjjk dtkcj qdfpq bqrqj drqg gfhvs nfzz tfbpk jlrtmv prxmdlz zdvr fhtn sskfj qsgcg lxjtns (contains fish, eggs)\\nllqfr zsgnd vvchk hjg qmzzgr vzzz jncfpc gxnjk sfxsj fsrmcx zbqfz glx qzdpffs bbltf rkgbgn qc gbk xkkjl xxhtdkp tqgjg jmrx nkjcr slg rjmk vrhj nnxmgx gmcm rxhrpjv ltcxqdbm bqrqj ksfbnhz hbkmd rtkk mbllkbf bkzgpg ssb qjtrpj vbmz zjtlrq kzpmt clg qsgcg bqdtr mgx lxjtns crbxx qhzqq pgzgn sbkksv rgmlds jgdf jlrtmv ncjv ktzlr gpjkqrq cxfz qzqzj bqg dxzmr vhcqpn jpdxvmv pdvqs hrqbs rxdns kvzpzvt fsjbdt lzkmdq jbpz knprxg xsbt kkhq dtnzp qdfpq gfhdct sfkf tbvh cjjd vqbb xjjk (contains sesame, nuts)\\nqqgq xmm fhtn tcnhp prxmdlz sskfj ksfbnhz tbvh ncjv rkms nkjcr sjg grzv jmrx vhbmztr knprxg pdfv khqt qhzqq cjp zsgnd txhkk xpjd ltcxqdbm cqkrhx fkhcbzbk hbpsp slzctfh qsgcg gmcm tfrpccb jlrtmv qdfpq tfbpk vdlj fxctfc jpdxvmv gpjkqrq clg vhcqpn zkvlf crbxx zjtlrq ssfb ttqgh xqpph qjtrpj rpmf vqbb pgzgn hfjrp vzzz gtl vjzc mjlqj qdtjjz lxjtns qpfh zdxn xtpdql (contains fish, peanuts)\\ngrzv pbblp vhbmztr qjtrpj zsgnd dxldm pdfv rxdns vrhj cqkrhx clmxkbn vsbttl lchdf slzctfh bqrqj vdlj mgx zxjksd ssffbt ncjv mmdmtg sqnbsg vzzz qckgcc jrbfkg lxjtns slg cklx zpsbc jlrtmv pdvqs ffpfsv jncfpc vrqb knprxg qdfpq rtkk dqf rbxz xpjd qc rmn ttqgh zjtlrq tbvh clg hfjrp bqg sdcdmn bkzgpg zdvr mct csdslq qgct gmdldb bnkss qsgcg prxmdlz xrqj dsksm (contains nuts, shellfish, fish)\\nrtkk jncfpc zxjksd zsgnd clg crbxx sdcdmn vbmz rkms hlsbn xsbt tfrpccb zdvr prhkvr vzzz slzctfh txhkk knprxg drqg slrc rgmlds xxhtdkp lxjtns mct qqgq grzv zpsbc gbk qmzzgr fpqc nnxmgx kl hjg jlfm kzpmt lqtqm xtpdql rmc hbkmd rxdns rmsgmj sqnbsg xqpph rclxmm zkvlf jmrx cklx mrjqg qmcrpm kcncjpk pbblp fkxf ncjv fsrmcx pgzgn xvj sjg rkgbgn cjp dsksm nmqlz zxdkrx sbkksv tcnhp ljcvh prxmdlz gfhvs mjlqj qc ssb cxfz bzxh dtkcj ksfbnhz hfjrp mgx mtzqr bqdtr sskfj cjjd ltcxqdbm fxctfc ktzlr nfzz dqf kvzpzvt (contains shellfish)\\nrtkk xrqj xctvtxzl gmltxp qzdpffs bqrqj gpjkqrq xpjd xngkf jcs nslqr slzctfh rsprgcj ksfbnhz qdtjjz jthsmn ttjvqs nkjcr xjjk qgct ncjv xkzk ktgqpk mct xlkgtc xsrk sdcdmn hrqbs jrbfkg jglqz vdlj slrc vqbb nzqlgz prxmdlz tcnhp qckgcc zxjksd vzzz bqdtr slg ffpfsv qkhft lqtqm clg dxzmr cxfz jtlfh jncfpc lxjtns gfhdct sjg ljcvh hjg qzqzj dsksm ktzlr knprxg rclxmm kzpmt vrqb rkgbgn sfxsj cqkrhx vhbmztr (contains fish, eggs, peanuts)\\nkkhq tbvh knprxg qdfpq rpmf rkms mct cjp ttqgh qjtrpj cklx rxdns tn rgmlds mrjqg mbllkbf qnljhd pdfv pdvqs jgdf pjlz ssfb xsbt clg crbxx qrnkl rsprgcj llqfr fxctfc clmxkbn jlfm txhkk hbpsp fsjbdt gmcm lzkmdq nslqr xjjk vzzz kl ssb ktgqpk prxmdlz nmqlz sfkf rmsgmj rkgbgn ssffbt gscdgj lchdf lxjtns gfhvs jncfpc csdslq xpjd qdtjjz hgmsn cxfz (contains peanuts, shellfish)\\njlfm knprxg nkjcr slg vzzz fkxf ffpfsv rclxmm rmn ncjv cjjd mbllkbf xxhtdkp rtkk txhkk hsfx mvdgf clg qbkjvg fkhcbzbk sskfj fpqc khqt zjtlrq dqf cqkrhx hrqbs sfkf qdfpq vjzc vsbttl vrqb lqkxpxr cxfz bnxl xsrk hbpsp vqbb kkhq bnkss hfjrp qrnkl lzkmdq zkvlf drqg gfhdct lchdf pjlz lxjtns fsrmcx dxzmr (contains sesame, peanuts)\\nrxdns qhzqq clg mrjqg ndqtf jrbfkg cqkrhx sdcdmn qdfpq cxfz xvj fpqc xkkjl dxldm bnxl dxzmr fkhcbzbk vjzc hjg qpfh rpmf xpjd mpvnt nkjcr qzqzj drqg jbpz gbk fxctfc jlfm xtpdql bzxh sfxsj zxdkrx ffpfsv hfjrp tfrpccb khqt qc rkgbgn nmqlz rmn ssffbt slzctfh mzr xsbt qckgcc knprxg lxjtns prxmdlz gfhvs bnkss kcncjpk vzzz gscdgj mmdmtg ssfb zsgnd xxhtdkp (contains eggs, nuts, peanuts)\\nxtzt tfrpccb vrqb rxhrpjv cxfz gfhvs llqfr sqnbsg jlfm rsprgcj tn jncfpc rgmlds csdslq ssfb qdtjjz qmzzgr nslqr rmn fsrmcx gbk rjmk vbmz rkgbgn zsgnd prxmdlz qpfh dqf pdvqs vdlj zjtlrq rclxmm qrnkl qgct vqbb qzqzj rxdns zkvlf zdxn knprxg bzxh gmdldb cklx zxjksd vvchk zpsbc sxxnb lxjtns qdfpq ljcvh jthsmn ksfbnhz gfhdct zbqfz mjlqj ssb kzpmt vzzz fxctfc xngkf nkjcr sfkf kkhq jgdf clg bqdtr xxhtdkp (contains wheat, nuts)\\ncjjd ttqgh jthsmn cxfz dtnzp ksfbnhz slrc rtkk rbxz hjg clg tfbpk tqgjg kl lxjtns tn ncjv bnkss jtlfh xkzk vrhj crbxx ssfb zpsbc gmcm qc jncfpc mzr vbmz gscdgj qsgcg knprxg xqpph bnxl hfjrp nzqlgz qnljhd pgzgn vmcsb xmm qdfpq cklx ffpfsv sxxnb vzzz (contains nuts)\\npjlz zbqfz xsbt cxfz vsbttl sbkksv mtzqr dxldm lqkxpxr vqbb gtl mjlqj vhbmztr slg glx khqt mmdmtg nslqr zkvlf cjjd ncjv tfrpccb xkzk xlkgtc kcncjpk jgdf hbkmd mbllkbf prhkvr kl vzzz rgmlds rsprgcj gbk lxjtns dtkcj bbltf rkgbgn knprxg prxmdlz qdfpq rpmf jtlfh xvj jtgsn vrhj bqdtr vvchk bqrqj jlrtmv gfhvs hsfx xtpdql cqkrhx xjjk (contains soy)\\nrmsgmj txhkk slg nfzz mmdmtg ssb lchdf mct csdslq pgzgn qgct xmm bnkss ljcvh gbk jmrx clg zsgnd vvchk ktgqpk bzxh fxctfc slzctfh tcnhp kcncjpk vrhj nkjcr cqkrhx clmxkbn gmltxp fpqc xtzt rclxmm sdcdmn qbkjvg dxldm dxzmr fkxf vqbb vhcqpn qsgcg lqtqm jbpz lzkmdq mtzqr xtpdql qc cjp sjg bkzgpg bqg rgmlds qdtjjz qckgcc prxmdlz mpvnt knprxg xngkf mjlqj nmqlz xxhtdkp zpsbc mrjqg qdfpq rmn cklx jpdxvmv glx xctvtxzl sfkf bqrqj zbqfz zkvlf rxdns gfhdct sskfj mgx qhzqq kvzpzvt cxfz gpjkqrq gmcm jglqz xkzk lxjtns xpjd rbxz xvj grzv hbkmd slrc dtkcj ncjv xqpph zdxn (contains shellfish, wheat, fish)\\nttqgh qzqzj lxjtns rbxz xpjd dxldm fsrmcx pjlz nslqr khqt crbxx pbblp pdfv hrqbs mbllkbf rmc zbqfz prxmdlz ncjv llqfr gxnjk ltcxqdbm qdfpq gfhdct dsksm vhcqpn ssb cjp nmqlz vrqb cjjd slzctfh vqbb zsgnd rmsgmj ktzlr hfjrp cxfz vvchk qbkjvg gscdgj txhkk kcncjpk zpsbc mtzqr sxxnb jmrx knprxg nfzz vzzz fhtn rkms jncfpc nzqlgz jgdf ksfbnhz qgct (contains nuts)\\nltcxqdbm clg xkzk jgdf clmxkbn bnxl pdfv nslqr ncjv rpmf ttjvqs lzkmdq vzzz jcs qnljhd hrqbs gscdgj txhkk tqgjg kvzpzvt knprxg fxctfc drqg dsksm ttqgh fkhcbzbk xsrk sjg gmcm xtpdql prxmdlz gfhvs qdfpq kcncjpk ktzlr qjtrpj cklx gpjkqrq jtgsn cxfz dxzmr qzdpffs sbkksv ssb sfkf jmrx nfzz vvchk xngkf gfhdct vhbmztr tn vrhj fkxf xkkjl mmdmtg mct kl lqkxpxr (contains soy, shellfish)\\nlzkmdq dsksm qzdpffs xctvtxzl nmqlz xxhtdkp lqkxpxr hjg zpsbc nkjcr qhzqq bzxh rsprgcj zxdkrx nzqlgz hbpsp dqf xsbt jpdxvmv qkhft csdslq xmm mbllkbf xsrk jbpz prxmdlz slrc qdfpq gmcm glx prhkvr zsgnd bqg fpqc clg zjtlrq nnxmgx pgzgn mzr mvdgf ncjv rgmlds knprxg dxzmr xvj gmltxp lxjtns mpvnt xtzt xtpdql zdxn kcncjpk gbk cxfz fxctfc sskfj sdcdmn bbltf vvchk jthsmn jmrx gmdldb cklx (contains peanuts, wheat)\\nrtkk kl fsrmcx prxmdlz lqkxpxr hfjrp fpqc jmrx vzzz xtpdql gscdgj ltcxqdbm zxjksd bnxl lxjtns bqdtr mrjqg qgct xlkgtc bnkss txhkk qkhft hsfx cjjd csdslq kzpmt gmdldb ljcvh clmxkbn xmm jglqz vrhj rmc xkkjl knprxg tfrpccb jtlfh lchdf rxhrpjv vjzc qqgq sxxnb qckgcc fxctfc tbvh xkzk jlrtmv qbkjvg rbxz hbkmd jthsmn bbltf nslqr mgx clg cxfz jlfm gtl kcncjpk cjp gpjkqrq qzdpffs xsbt xjjk qdfpq tfbpk ktzlr nnxmgx xxhtdkp prhkvr qrnkl fhtn cklx sqnbsg slg glx (contains wheat)\\nprhkvr tfbpk prxmdlz sdcdmn xrqj mvdgf sbkksv lxjtns hbpsp fsjbdt llqfr rpmf zpsbc rbxz mjlqj fsrmcx gmltxp mrjqg jtlfh bqdtr jpdxvmv tbvh bqrqj ndqtf bnkss sfxsj nkjcr xvj rclxmm sxxnb hgmsn knprxg qdfpq mmdmtg mgx jlfm cqkrhx fpqc zxjksd bkzgpg fkxf xpjd clmxkbn ncjv clg xqpph xsbt fhtn qzqzj nnxmgx lchdf bnxl gmdldb qnljhd khqt rmn vzzz dxzmr (contains nuts)\\ncxfz mjlqj lxjtns kvzpzvt mrjqg qmcrpm clg ssffbt ndqtf rmsgmj dqf ttjvqs ksfbnhz tcnhp gmcm zsgnd hbpsp xtzt qjtrpj jbpz slzctfh qpfh hjg xjjk knprxg fkhcbzbk prhkvr cqkrhx lqkxpxr zpsbc qnljhd xkkjl lchdf xtpdql vzzz sjg ncjv bkzgpg pdfv sdcdmn cjjd ltcxqdbm vdlj csdslq nnxmgx mct jtgsn qckgcc bbltf jlfm bzxh dtnzp tfbpk gpjkqrq xqpph qc bqrqj vvchk ssfb glx lqtqm xngkf nslqr qzqzj gbk sfxsj prxmdlz xkzk (contains soy, nuts, peanuts)\\nslzctfh mbllkbf xvj sfxsj xtzt rmc rkms qmcrpm hgmsn dsksm knprxg rsprgcj jpdxvmv qrnkl rxhrpjv rbxz xqpph sjg xctvtxzl mzr lxjtns ncjv dqf prxmdlz nkjcr nmqlz hrqbs gmltxp gxnjk sbkksv mtzqr mvdgf clg ndqtf jbpz kvzpzvt cjjd hfjrp gmcm jrbfkg xrqj zpsbc gpjkqrq bzxh qzqzj qdfpq qsgcg hbpsp hjg qmzzgr mct mgx qbkjvg jgdf drqg fxctfc dxzmr cklx qpfh jtlfh rxdns dtnzp xxhtdkp jtgsn zbqfz jlfm lzkmdq vzzz nnxmgx xtpdql xkzk vhbmztr dxldm gfhvs jncfpc qjtrpj ttjvqs ssfb bqg (contains fish)\\nprxmdlz mtzqr tfbpk xqpph hrqbs clg zxdkrx lchdf vzzz gmcm ksfbnhz dtkcj mbllkbf tbvh sqnbsg dtnzp qdfpq kkhq dxldm mzr xngkf qkhft jglqz hbkmd zkvlf ncjv cqkrhx xmm kzpmt gbk qhzqq mmdmtg xxhtdkp jpdxvmv kcncjpk mgx cxfz ktzlr hlsbn prhkvr lxjtns xpjd cjjd gpjkqrq sxxnb qjtrpj qqgq sbkksv mvdgf jtgsn slg ktgqpk fhtn rtkk rxdns qrnkl ssb dxzmr mct lzkmdq fsjbdt sjg rxhrpjv rkgbgn xctvtxzl mpvnt (contains wheat)\\npdvqs rjmk clg mgx zdxn qzqzj qzdpffs rpmf jcs zxdkrx jtlfh rbxz kkhq rgmlds ljcvh sqnbsg dsksm zkvlf bqg qhzqq tn hsfx lchdf qgct lqtqm jthsmn lxjtns xctvtxzl nfzz hbkmd slrc pjlz jtgsn vzzz mjlqj kzpmt pbblp knprxg mrjqg txhkk mct ssfb bqrqj clmxkbn rmsgmj jlfm mmdmtg xsrk pgzgn prxmdlz jncfpc hrqbs bnxl nkjcr zjtlrq xrqj mvdgf gmcm tcnhp lqkxpxr zbqfz zpsbc gxnjk fsjbdt gbk kl hgmsn dqf rsprgcj vqbb qmcrpm jmrx qsgcg tbvh fsrmcx hlsbn lzkmdq slzctfh ssffbt gfhdct qc xkzk vvchk cxfz qmzzgr fhtn vrqb rkms kcncjpk pdfv gscdgj xtpdql cjp sfkf vsbttl sjg qdfpq (contains sesame, soy, nuts)\\ncklx vzzz fhtn ncjv hgmsn xkzk nslqr rmn ffpfsv fpqc qmcrpm zxdkrx gfhvs sskfj rxdns cqkrhx qjtrpj mvdgf xmm jncfpc vsbttl kl ssfb xsbt zjtlrq gmltxp mzr jtlfh ktgqpk knprxg xxhtdkp nzqlgz clg pdfv drqg qmzzgr lxjtns kkhq rgmlds glx bnxl qsgcg jbpz hlsbn qdfpq cxfz (contains shellfish)\\nkvzpzvt qgct mvdgf hgmsn jrbfkg qdfpq ssffbt gfhvs prhkvr clg bbltf rbxz lxjtns vzzz dsksm tqgjg txhkk slg gbk crbxx rsprgcj qnljhd qzqzj rmc vrhj hrqbs jgdf qbkjvg vqbb gmcm zxjksd khqt rclxmm ksfbnhz jtgsn mjlqj ssb gmdldb xlkgtc ktzlr ssfb qdtjjz cxfz knprxg rmn xmm ffpfsv vdlj qqgq bnkss xkzk ncjv glx mrjqg bqdtr pdfv lqtqm bqrqj dxldm nzqlgz gfhdct xpjd tfbpk vbmz jncfpc lchdf kkhq (contains nuts, fish)\\nbqrqj bqdtr vzzz jthsmn vmcsb fsrmcx ncjv xkkjl xqpph slg sdcdmn ssffbt gscdgj gfhvs xlkgtc zkvlf drqg mvdgf hbkmd nzqlgz dxldm slrc qc cjjd vjzc lxjtns zdxn rpmf vdlj xctvtxzl xvj tfrpccb jtgsn sxxnb bbltf kkhq fpqc clg kvzpzvt xtzt qdfpq nnxmgx cklx mrjqg xsrk ttjvqs lchdf qmcrpm kcncjpk nslqr rmc vhcqpn cqkrhx prxmdlz jrbfkg lqkxpxr rsprgcj bzxh lzkmdq ffpfsv vrhj cjp qrnkl qzdpffs vhbmztr hfjrp tcnhp dxzmr fxctfc jgdf rmn mgx rkgbgn gmltxp lqtqm jmrx kl vrqb ltcxqdbm fhtn knprxg (contains peanuts)\\ngmcm xxhtdkp cqkrhx lqtqm vzzz jpdxvmv grzv ncjv sskfj dxldm kzpmt zdxn zbqfz rclxmm fkhcbzbk vvchk cxfz prxmdlz lqkxpxr vjzc clg jgdf vrqb rsprgcj nzqlgz fhtn jmrx pjlz bnxl bnkss qmzzgr fxctfc qrnkl lxjtns qdfpq slrc slg tcnhp nfzz mbllkbf hlsbn kkhq zxdkrx gmdldb gscdgj (contains sesame, wheat, shellfish)\\ngxnjk lqkxpxr kvzpzvt vzzz cqkrhx jrbfkg lxjtns xtzt jcs qzdpffs txhkk kzpmt xkkjl vrqb mtzqr fkhcbzbk jtgsn mct prhkvr rmsgmj sdcdmn qkhft ndqtf mjlqj gtl tfbpk mgx jglqz ktgqpk zxjksd xrqj gfhvs knprxg clg hbkmd xmm vjzc rxhrpjv rmc vmcsb nfzz xpjd cjjd sjg ssb fpqc qdfpq llqfr jthsmn vqbb rkms ktzlr ncjv jncfpc qsgcg sfkf cxfz xngkf xxhtdkp glx qmzzgr hrqbs zpsbc bnkss dxldm vbmz tbvh cjp qzqzj (contains soy)\\npdfv bkzgpg lchdf dsksm rkms vhbmztr ttjvqs slrc csdslq mtzqr mzr qrnkl slzctfh vhcqpn ndqtf bqdtr ncjv gfhvs dxldm qdfpq bqg sdcdmn nmqlz xtpdql prxmdlz dtkcj rbxz rjmk qc qkhft kkhq ffpfsv jtlfh vrhj vzzz fxctfc rmc mct sqnbsg pdvqs xkkjl dqf rmsgmj lxjtns rtkk jlrtmv jbpz jrbfkg zdvr nslqr hlsbn fsjbdt jncfpc nzqlgz llqfr sfkf ttqgh gmcm qnljhd pjlz ljcvh mgx fkhcbzbk gpjkqrq clg qsgcg vrqb xrqj cxfz jgdf dxzmr tcnhp rxhrpjv tbvh ktzlr (contains wheat, soy, shellfish)\\ntn bzxh bqrqj csdslq jlfm jtlfh qdtjjz bnxl jthsmn gmcm lxjtns kvzpzvt jpdxvmv xjjk nmqlz rgmlds hlsbn khqt jlrtmv qbkjvg prxmdlz bqg nkjcr vzzz jbpz knprxg qckgcc nfzz pbblp hgmsn hfjrp ktzlr ktgqpk hbkmd qmcrpm gxnjk xsbt qjtrpj fsrmcx gmdldb xctvtxzl cjp cxfz jtgsn rkms vvchk qdfpq rjmk sfkf rmsgmj xngkf zxdkrx mvdgf clg bkzgpg lzkmdq hjg (contains sesame)\\nkkhq crbxx bqg rkms ncjv rclxmm gfhvs lxjtns vzzz bbltf kcncjpk jncfpc jlrtmv dsksm slg mjlqj xngkf fpqc kl cjjd sdcdmn knprxg grzv rmc lqkxpxr clmxkbn vvchk qzdpffs ksfbnhz zjtlrq bqdtr bnkss xsbt fsjbdt rxdns rjmk slrc zsgnd cxfz xjjk bqrqj bkzgpg vdlj qbkjvg xpjd clg prxmdlz vjzc rbxz sjg rtkk ktzlr sfxsj jbpz khqt qjtrpj pjlz fkhcbzbk ttqgh ssfb ffpfsv xctvtxzl mpvnt rmn ssb hlsbn vrhj rxhrpjv qmzzgr rkgbgn (contains fish, soy)\\nrmsgmj ttqgh jmrx vrqb xlkgtc csdslq rjmk jncfpc vjzc qnljhd knprxg ssffbt zxjksd ltcxqdbm slzctfh vdlj pbblp rgmlds xrqj fsrmcx sdcdmn lchdf xkzk sbkksv cjp sxxnb cxfz jtlfh clg bzxh gscdgj khqt cqkrhx pdfv nmqlz pgzgn vsbttl gfhdct qc qhzqq xmm gxnjk zkvlf rkgbgn jgdf xctvtxzl zxdkrx rmn nkjcr mgx vqbb mzr prxmdlz bnxl cklx ncjv dqf qpfh rmc hbpsp lxjtns clmxkbn mct ljcvh ttjvqs xxhtdkp pdvqs vzzz qdtjjz (contains shellfish, fish)\\ncjp clg xsrk gxnjk hbkmd qzqzj mzr rmsgmj mtzqr qgct qmzzgr vdlj hjg bzxh nslqr drqg dtkcj prxmdlz fpqc fkxf tfrpccb csdslq mbllkbf mgx hlsbn knprxg gfhvs vzzz txhkk cqkrhx xjjk jlfm rpmf kl ncjv lxjtns nkjcr rmn qrnkl hsfx qpfh qdfpq fhtn zkvlf qbkjvg rxhrpjv qqgq hfjrp xctvtxzl rkgbgn ttjvqs jtgsn (contains nuts)\\nzkvlf rclxmm hlsbn gpjkqrq qqgq dxzmr xlkgtc hbpsp zpsbc tfrpccb gscdgj sxxnb ttqgh rxdns lqkxpxr fkhcbzbk mct bnkss prxmdlz rmsgmj qmcrpm kzpmt jrbfkg ncjv vzzz slzctfh xctvtxzl dxldm hsfx ssfb qsgcg cxfz sskfj xkkjl fhtn gxnjk xtpdql nmqlz vbmz ffpfsv jtlfh cklx gmcm nslqr llqfr qzdpffs rkgbgn sbkksv rtkk tqgjg clg nkjcr pgzgn pdvqs vrqb sfxsj lxjtns jgdf qdtjjz prhkvr pbblp knprxg vqbb qnljhd khqt jbpz vsbttl drqg qhzqq (contains soy, sesame, peanuts)\\nvhbmztr bqrqj jtlfh gmdldb xjjk jlrtmv tqgjg gfhvs ndqtf rgmlds sdcdmn fsjbdt zbqfz ltcxqdbm hbpsp jbpz dqf sxxnb rtkk ncjv prxmdlz sfxsj llqfr rkms cxfz xtzt glx mpvnt xctvtxzl zxjksd gtl zxdkrx knprxg kzpmt pjlz khqt qdfpq tcnhp bqdtr fkxf vjzc mjlqj fxctfc lzkmdq zsgnd clg pbblp kvzpzvt qjtrpj jncfpc nmqlz ljcvh vzzz fsrmcx (contains soy, nuts)\\nrxdns mtzqr ttqgh dtkcj tn knprxg xqpph qbkjvg nzqlgz hbpsp ncjv dtnzp rbxz jrbfkg ssfb gmcm qckgcc xsrk pbblp qmzzgr sfkf jmrx cjjd rkgbgn fpqc zxjksd gmltxp cqkrhx glx xkkjl sdcdmn gbk jtlfh gscdgj cxfz lxjtns gfhvs jgdf tqgjg xvj vsbttl qc qgct mgx rxhrpjv gpjkqrq qzdpffs prxmdlz xsbt qzqzj xtzt ssb zkvlf vzzz mrjqg qdfpq qrnkl dsksm ljcvh nfzz xngkf bnxl lchdf kvzpzvt rmn khqt ndqtf hrqbs xjjk qnljhd ksfbnhz mmdmtg mvdgf xlkgtc bkzgpg mbllkbf (contains wheat, soy, nuts)\";","var map = {\n\t\"./2016/Day-1.md\": \"94a7\",\n\t\"./2016/Day-2.md\": \"1a5c\",\n\t\"./2017/Day-1.md\": \"268f\",\n\t\"./2017/Day-10.md\": \"7bbc\",\n\t\"./2017/Day-11.md\": \"4575\",\n\t\"./2017/Day-12.md\": \"cc62\",\n\t\"./2017/Day-13.md\": \"0dec\",\n\t\"./2017/Day-15.md\": \"2e1e\",\n\t\"./2017/Day-16.md\": \"16ea\",\n\t\"./2017/Day-17.md\": \"bc2d\",\n\t\"./2017/Day-18.md\": \"c7a0\",\n\t\"./2017/Day-19.md\": \"51c2\",\n\t\"./2017/Day-2.md\": \"853a\",\n\t\"./2017/Day-20.md\": \"58db\",\n\t\"./2017/Day-22.md\": \"5b3d\",\n\t\"./2017/Day-24.md\": \"ca96\",\n\t\"./2017/Day-25.md\": \"4b17\",\n\t\"./2017/Day-3.md\": \"dbfa\",\n\t\"./2017/Day-4.md\": \"5d03\",\n\t\"./2017/Day-5.md\": \"4b88\",\n\t\"./2017/Day-6.md\": \"f316\",\n\t\"./2017/Day-7.md\": \"df70\",\n\t\"./2017/Day-8.md\": \"6cc0\",\n\t\"./2017/Day-9.md\": \"2389\",\n\t\"./2018/Day-1.md\": \"cab1\",\n\t\"./2018/Day-10.md\": \"c482\",\n\t\"./2018/Day-11.md\": \"5758\",\n\t\"./2018/Day-12.md\": \"2b5d\",\n\t\"./2018/Day-13.md\": \"8eb8\",\n\t\"./2018/Day-14.md\": \"8d55\",\n\t\"./2018/Day-15.md\": \"c8fd\",\n\t\"./2018/Day-16.md\": \"24d0\",\n\t\"./2018/Day-17.md\": \"9d8e\",\n\t\"./2018/Day-18.md\": \"21b3\",\n\t\"./2018/Day-2.md\": \"4348\",\n\t\"./2018/Day-22.md\": \"7bfd\",\n\t\"./2018/Day-3.md\": \"4563\",\n\t\"./2018/Day-4.md\": \"ce0b\",\n\t\"./2018/Day-5.md\": \"de80\",\n\t\"./2018/Day-6.md\": \"0870\",\n\t\"./2018/Day-7.md\": \"49a1\",\n\t\"./2018/Day-8.md\": \"091e\",\n\t\"./2018/Day-9.md\": \"ee96\",\n\t\"./2020/Day-1.md\": \"6353\",\n\t\"./2020/Day-10.md\": \"d2f0\",\n\t\"./2020/Day-11.md\": \"c728\",\n\t\"./2020/Day-12.md\": \"e9f8\",\n\t\"./2020/Day-13.md\": \"6ca2\",\n\t\"./2020/Day-14.md\": \"da62\",\n\t\"./2020/Day-15.md\": \"bb94\",\n\t\"./2020/Day-16.md\": \"bb2d\",\n\t\"./2020/Day-17.md\": \"1cb9\",\n\t\"./2020/Day-18.md\": \"ca54\",\n\t\"./2020/Day-19.md\": \"e6ee\",\n\t\"./2020/Day-2.md\": \"0312\",\n\t\"./2020/Day-20.md\": \"89df\",\n\t\"./2020/Day-21.md\": \"307a\",\n\t\"./2020/Day-22.md\": \"a8ab\",\n\t\"./2020/Day-23.md\": \"6ebe\",\n\t\"./2020/Day-24.md\": \"e5cf\",\n\t\"./2020/Day-25.md\": \"39ed\",\n\t\"./2020/Day-3.md\": \"40f7\",\n\t\"./2020/Day-4.md\": \"5256\",\n\t\"./2020/Day-5.md\": \"f177\",\n\t\"./2020/Day-6.md\": \"7dd3\",\n\t\"./2020/Day-7.md\": \"a80f\",\n\t\"./2020/Day-8.md\": \"c115\",\n\t\"./2020/Day-9.md\": \"42ba\",\n\t\"./2021/Day-1.md\": \"cac7\",\n\t\"./2021/Day-2.md\": \"eccb\",\n\t\"./2021/Day-3.md\": \"9280\",\n\t\"./2021/Day-4.md\": \"3d12\",\n\t\"./2021/Day-5.md\": \"d9cc\",\n\t\"./2021/Day-6.md\": \"c7dc\",\n\t\"./2021/Day-7.md\": \"964b\",\n\t\"./2021/Day-8.md\": \"576a\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"0221\";","export default \"Your flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via [toboggan](https://en.wikipedia.org/wiki/Toboggan).\\n\\nThe shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. \\\"Something's wrong with our computers; we can't log in!\\\" You ask if you can take a look.\\n\\nTheir password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the Official Toboggan Corporate Policy that was in effect when they were chosen.\\n\\nTo try to debug the problem, they have created a list (your puzzle input) of **passwords** (according to the corrupted database) and the **corporate policy when that password was set**.\\n\\nFor example, suppose you have the following list:\\n\\n```\\n1-3 a: abcde\\n1-3 b: cdefg\\n2-9 c: ccccccccc\\n```\\n\\nEach line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, `1-3 a` means that the password must contain `a` at least `1` time and at most `3` times.\\n\\nIn the above example, **`2`** passwords are valid. The middle password, `cdefg`, is not; it contains no instances of `b`, but needs at least `1`. The first and third passwords are valid: they contain one `a` or nine `c`, both within the limits of their respective policies.\\n\\n**How many passwords are valid** according to their policies?\\n\\n[comment]: <> (PART 2)\\n\\nWhile it appears you validated the passwords correctly, they don't seem to be what the Official Toboggan Corporate Authentication System is expecting.\\n\\nThe shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently.\\n\\nEach policy actually describes two **positions in the password**, where `1` means the first character, `2` means the second character, and so on. (Be careful; Toboggan Corporate Policies have no concept of \\\"index zero\\\"!) **Exactly one of these positions** must contain the given letter. Other occurrences of the letter are irrelevant for the purposes of policy enforcement.\\n\\nGiven the same example list from above:\\n\\n- `1-3 a`: `abcde` is **valid**: position `1` contains `a` and position `3` does not.\\n- `1-3 b`: `cdefg` is **invalid**: neither position `1` nor position `3` contains `b`.\\n- `2-9 c`: `ccccccccc` is **invalid**: both position `2` and position `9` contain `c`.\\n\\n**How many passwords are valid** according to the new interpretation of the policies?\\n\\n\";","export default \"#ip 4\\naddi 4 16 4\\nseti 1 2 3\\nseti 1 6 1\\nmulr 3 1 2\\neqrr 2 5 2\\naddr 2 4 4\\naddi 4 1 4\\naddr 3 0 0\\naddi 1 1 1\\ngtrr 1 5 2\\naddr 4 2 4\\nseti 2 8 4\\naddi 3 1 3\\ngtrr 3 5 2\\naddr 2 4 4\\nseti 1 4 4\\nmulr 4 4 4\\naddi 5 2 5\\nmulr 5 5 5\\nmulr 4 5 5\\nmuli 5 11 5\\naddi 2 5 2\\nmulr 2 4 2\\naddi 2 18 2\\naddr 5 2 5\\naddr 4 0 4\\nseti 0 6 4\\nsetr 4 8 2\\nmulr 2 4 2\\naddr 4 2 2\\nmulr 4 2 2\\nmuli 2 14 2\\nmulr 2 4 2\\naddr 5 2 5\\nseti 0 1 0\\nseti 0 5 4\";","export default \"LRULLRLDUUUDUDDDRLUDRDLDDLUUDLDDLRDRLDRLLURRULURLDRLDUDURLURRULLDDDUDDRRRDLRRDDLDURDULLRDLLLDRDLLDULDUDLLDLDRUDLLDLDDRRRDRLUDRDDLUDRRDUDUDLLDDUUDLRDUDRRUDUDRULRULUDRUUDLDLULLRLDLDDRULLRLLLULUULDURURLUUULDURLDDDURRUUDURDDDULDLURLRDRURDRUDRLLDLDRUURLLLRDRURUDLRLUDULLDDURLRURDLRDUUURRLULRRLDDULUUURLRRRLLLLLURDDRUULUDRRRUDDLLULRRUULDRDDULRLDDDRRUULUDRLRUDURUUULDLDULUUDURLLLRRDDRDLURDDDLDDDLRDRLDDURLRLLRUDRRLLDDDDDURDURRDDULDULLRULDRUURDRRDUDDUDDDDRRDULDUURDRUDRLDULRULURLLRRDRDRDLUUDRRLRLDULDDLUUUUUURRLRRRULLDDDRLRDRRRRRRRDUUDLLUDURUDDLURRUDL\\nUDUUURRLRLLDDRRDRRRLDDDLURURLLUDDRLUUDRRRDURRLLRURDLLRRDUUDDDDRDRURRLLLLURDLRRRULLLDLLLUDDLDRRRDLDUUDDRDUDDUURDDLULULDURDURDRUULURURRURDUURUDRRUDRLLLLRRDLLDRDDRLLURDDDUDUDUDRUURDDRUURDLRUUDDRDUURUDDLLUURDLUDRUUDRRDLLUUURDULUULDUUDLLULUUDLUDRUUDUUURLDDDRLRURDDULLRDRULULUDLUUDDDUUDLDUUDRULLDUURDDRUDURULDRDDLRUULRRRDLDLRDULRDDRLLRRLURDLDRUDLRLUDLRLDLDURRUULRLUURDULDRRULLRULRDLLDLDUDRUDDUDLDDURDDDRDLUDRULRUULLRURLDDDRDLRRDRULURULDULRDLDULDURDRDRDRDURDRLUURLRDDLDDRLDDRURLLLURURDULDUDDLLUURDUUUDRUDDRDLDRLRLDURRULDULUUDDLRULDLRRRRDLLDRUUDRLLDLUDUULRDRDLRUUDLRRDDLUULDUULRUDRURLDDDURLRRULURR\\nLDURLLLRLLLUURLLULDLRLLDLURULRULRDUDLDDUDRLRRDLULLDDULUUULDRLDURURLURLDLRUDULLLULDUURLLRDLUULRULLLULRDRULUDLUUULDDURLUDDUDDRDLDRDRUDLUURDDLULDUULURLUULRDRDLURUDRUDLDRLUUUUULUDUDRRURUDRULDLDRDRLRURUUDRDLULLUDLLRUUDUUDUDLLRRRLDUDDDRDUDLDLLULRDURULLLUDLLRUDDUUDRLDUULLDLUUDUULURURLLULDUULLDLUDUURLURDLUULRRLLRUDRDLLLRRRLDDLUULUURLLDRDLUUULLDUDLLLLURDULLRUDUUULLDLRLDRLLULDUDUDRULLRRLULURUURLRLURRLRRRDDRLUDULURUDRRDLUDDRRDRUDRUDLDDRLRDRRLDDRLLDDDULDLRLDURRRRRULRULLUUULUUUDRRDRDRLLURRRRUULUDDUDDDLDURDRLDLLLLLRDUDLRDRUULU\\nURURRUUULLLLUURDULULLDLLULRUURRDRRLUULRDDRUDRRDUURDUDRUDDRUULURULDRLDRDDDLDLRLUDDRURULRLRLLLDLRRUDLLLLRLULDLUUDUUDRDLRRULLRDRLRLUUDDRRLLDDRULLLRLLURDLRRRRRLLDDRRDLDULDULLDLULLURURRLULRLRLLLLURDDRDDDUUDRRRDUUDDLRDLDRRLLRURUDUUUDLDUULLLRLURULRULRDRLLLDLDLRDRDLLLRUURDDUDDLULRULDLRULUURLLLRRLLLLLLRUURRLULRUUUDLDUDLLRRDDRUUUURRRDRRDULRDUUDULRRRDUUUUURRDUURRRRLDUDDRURULDDURDDRDLLLRDDURUDLLRURLRRRUDDLULULDUULURLUULRDLRDUDDRUULLLRURLDLRRLUDLULDRLUDDDRURUULLDLRLLLDULUDDRLRULURLRDRRDDLDLURUDDUUURRDDLUDDRDUULRRDLDRLLLULLRULRURULRLULULRDUD\\nRUDLLUDRRDRRLRURRULRLRDUDLRRLRDDUDRDLRRLLRURRDDLRLLRRURULRUULDUDUULDULDLRLRDLRDLRUURLDRLUDRRDDDRDRRRDDLLLRRLULLRRDDUDULRDRDUURLDLRULULUDLLDRUDUURRUDLLRDRLRRUUUDLDUDRRULLDURRDUDDLRURDLDRLULDDURRLULLRDDDRLURLULDLRUDLURDURRUDULDUUDLLLDDDUUURRRDLLDURRDLULRULULLRDURULLURDRLLRUUDDRRUDRDRRRURUUDLDDRLDRURULDDLLULULURDLDLDULLRLRDLLUUDDUDUDDDDRURLUDUDDDRRUDDLUDULLRDLDLURDDUURDLRLUUDRRULLRDLDDDLDULDUDRDUUULULDULUDLULRLRUULLDURLDULDRDLLDULLLULRLRD\";","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day.vue?vue&type=style&index=0&lang=css&\"","export default \"8141\";","export default \"The device on your wrist beeps several times, and once again you feel like you're falling.\\n\\n\\\"Situation critical,\\\" the device announces. \\\"Destination indeterminate. Chronal interference detected. Please specify new target coordinates.\\\"\\n\\nThe device then produces a list of coordinates (your puzzle input). Are they places it thinks are safe or dangerous? It recommends you check manual page 729. The Elves did not give you a manual.\\n\\n**If they're dangerous**, maybe you can minimize the danger by finding the coordinate that gives the largest distance from the other points.\\n\\nUsing only the [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry), determine the **area** around each coordinate by counting the number of [integer](https://en.wikipedia.org/wiki/Integer) X,Y locations that are **closest** to that coordinate (and aren't **tied in distance** to any other coordinate).\\n\\nYour goal is to find the size of the **largest area** that isn't infinite. For example, consider the following list of coordinates:\\n\\n```\\n1, 1\\n1, 6\\n8, 3\\n3, 4\\n5, 5\\n8, 9\\n```\\n\\nIf we name these coordinates `A` through `F`, we can draw them on a grid, putting `0,0` at the top left:\\n\\n```\\n..........\\n.A........\\n..........\\n........C.\\n...D......\\n.....E....\\n.B........\\n..........\\n..........\\n........F.\\n```\\n\\nThis view is partial - the actual grid extends infinitely in all directions. Using the Manhattan distance, each location's closest coordinate can be determined, shown here in lowercase:\\n\\n```\\naaaaa.cccc\\naAaaa.cccc\\naaaddecccc\\naadddeccCc\\n..dDdeeccc\\nbb.deEeecc\\nbBb.eeee..\\nbbb.eeefff\\nbbb.eeffff\\nbbb.ffffFf\\n```\\n\\nLocations shown as `.` are equally far from two or more coordinates, and so they don't count as being closest to any.\\n\\nIn this example, the areas of coordinates A, B, C, and F are infinite - while not shown here, their areas extend forever outside the visible grid. However, the areas of coordinates D and E are finite: D is closest to 9 locations, and E is closest to 17 (both including the coordinate's location itself). Therefore, in this example, the size of the largest area is **`17`**.\\n\\n**What is the size of the largest area** that isn't infinite?\\n\\n[comment]: <> (PART 2)\\n\\nOn the other hand, **if the coordinates are safe**, maybe the best you can do is try to find a **region** near as many coordinates as possible.\\n\\nFor example, suppose you want the sum of the [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry) to all of the coordinates to be **less than 32**. For each location, add up the distances to all of the given coordinates; if the total of those distances is less than 32, that location is within the desired region. Using the same coordinates as above, the resulting region looks like this:\\n\\n```\\n..........\\n.A........\\n..........\\n...###..C.\\n..#D###...\\n..###E#...\\n.B.###....\\n..........\\n..........\\n........F.\\n```\\n\\nIn particular, consider the highlighted location `4,3` located at the top middle of the region. Its calculation is as follows, where `abs()` is the [absolute value](https://en.wikipedia.org/wiki/Absolute_value) function:\\n\\n- Distance to coordinate `A`: `abs(4-1) + abs(3-1) =  5`\\n- Distance to coordinate `B`: `abs(4-1) + abs(3-6) =  6`\\n- Distance to coordinate `C`: `abs(4-8) + abs(3-3) =  4`\\n- Distance to coordinate `D`: `abs(4-3) + abs(3-4) =  2`\\n- Distance to coordinate `E`: `abs(4-5) + abs(3-5) =  3`\\n- Distance to coordinate `F`: `abs(4-8) + abs(3-9) = 10`\\n- Total distance: `5 + 6 + 4 + 2 + 3 + 10 = 30`\\n\\nBecause the total distance to all coordinates (`30`) is less than 32, the location is **within** the region.\\n\\nThis region, which also includes coordinates D and E, has a total size of **16**.\\n\\nYour actual region will need to be much larger than this example, though, instead including all locations with a total distance of less than **10000**.\\n\\n**What is the size of the region containing all locations which have a total distance to all given coordinates of less than 10000?**\";","export default \"The sleigh is much easier to pull than you'd expect for something its weight. Unfortunately, neither you nor the Elves know which way the North Pole is from here.\\n\\nYou check your wrist device for anything that might help. It seems to have some kind of navigation system! Activating the navigation system produces more bad news: \\\"Failed to start navigation system. Could not read software license file.\\\"\\n\\nThe navigation system's license file consists of a list of numbers (your puzzle input). The numbers define a data structure which, when processed, produces some kind of [tree](https://en.wikipedia.org/wiki/Tree_(data_structure)) that can be used to calculate the license number.\\n\\nThe **tree** is made up of **nodes**; a single, outermost node forms the tree's **root**, and it contains all other nodes in the tree (or contains nodes that contain nodes, and so on).\\n\\nSpecifically, a node consists of:\\n\\n- A **header**, which is always exactly two numbers:\\n   - The quantity of child nodes.\\n   - The quantity of metadata entries.\\n- Zero or more **child nodes** (as specified in the header).\\n- One or more **metadata entries** (as specified in the header).\\n\\nEach child node is itself a node that has its own header, child nodes, and metadata. For example:\\n\\n```\\n2 3 0 3 10 11 12 1 1 0 1 99 2 1 1 2\\nA----------------------------------\\n    B----------- C-----------\\n                     D-----\\n```\\n\\nIn this example, each node of the tree is also marked with an underline starting with a letter for easier identification. In it, there are four nodes:\\n\\n- `A`, which has `2` child nodes (`B`, `C`) and `3` metadata entries (`1`, `1`, `2`).\\n- `B`, which has `0` child nodes and `3` metadata entries (`10`, `11`, `12`).\\n- `C`, which has `1` child node (`D`) and `1` metadata entry (`2`).\\n- `D`, which has `0` child nodes and `1` metadata entry (`99`).\\n\\nThe first check done on the license file is to simply add up all of the metadata entries. In this example, that sum is `1+1+2+10+11+12+2+99=`**`138`**.\\n\\n**What is the sum of all metadata entries?**\\n\\n[comment]: <> (PART 2)\\n\\nThe second check is slightly more complicated: you need to find the value of the root node (`A` in the example above).\\n\\nThe **value of a node** depends on whether it has child nodes.\\n\\nIf a node has **no child nodes**, its value is the sum of its metadata entries. So, the value of node `B` is `10+11+12=33`, and the value of node `D` is `99`.\\n\\nHowever, if a node **does have child nodes**, the metadata entries become indexes which refer to those child nodes. A metadata entry of `1` refers to the first child node, `2` to the second, `3` to the third, and so on. The value of this node is the sum of the values of the child nodes referenced by the metadata entries. If a referenced child node does not exist, that reference is skipped. A child node can be referenced multiple time and counts each time it is referenced. A metadata entry of `0` does not refer to any child node.\\n\\nFor example, again using the above nodes:\\n\\n- Node `C` has one metadata entry, `2`. Because node `C` has only one child node, `2` references a child node which does not exist, and so the value of node `C` is `0`.\\n- Node `A` has three metadata entries: `1`, `1`, and `2`. The `1` references node `A`'s first child node, `B`, and the `2` references node `A`'s second child node, `C`. Because node `B` has a value of `33` and node `C` has a value of `0`, the value of node `A` is `33+33+0=`**`66`**.\\n\\nSo, in this example, the value of the root node is `66`.\\n\\n**What is the value of the root node?**\";","export default \"2\\n2\\n-1\\n1\\n-1\\n1\\n1\\n-5\\n-5\\n-1\\n0\\n-8\\n-2\\n-11\\n-4\\n-5\\n-10\\n-4\\n-9\\n-9\\n1\\n1\\n-11\\n-8\\n-19\\n-14\\n-6\\n-2\\n-1\\n-11\\n-23\\n-8\\n-7\\n-9\\n-26\\n-1\\n-8\\n-11\\n-34\\n0\\n-22\\n-17\\n-41\\n-12\\n-43\\n-33\\n-15\\n0\\n2\\n-41\\n-41\\n-26\\n-48\\n-52\\n-47\\n-30\\n-38\\n-20\\n-4\\n-21\\n-17\\n-19\\n-55\\n-32\\n-12\\n-55\\n1\\n-34\\n-8\\n-15\\n-59\\n-56\\n-16\\n-23\\n-43\\n-5\\n-41\\n-56\\n-32\\n-67\\n-14\\n0\\n-28\\n-32\\n-7\\n-54\\n-19\\n-9\\n-24\\n-63\\n-2\\n-60\\n-5\\n-78\\n-11\\n-84\\n-50\\n-36\\n-72\\n-14\\n-30\\n-4\\n-62\\n-6\\n-1\\n-69\\n-17\\n-33\\n-32\\n-45\\n-71\\n-87\\n-71\\n-60\\n-19\\n-80\\n-11\\n-106\\n-45\\n-27\\n-23\\n-51\\n-77\\n-67\\n-103\\n-17\\n-98\\n-109\\n-91\\n-125\\n-68\\n-39\\n-34\\n-96\\n-49\\n-64\\n-38\\n-105\\n-31\\n-100\\n-89\\n-108\\n-69\\n-36\\n-94\\n-38\\n-124\\n-123\\n-79\\n-92\\n-42\\n-14\\n-87\\n-68\\n-17\\n-36\\n-21\\n-54\\n-98\\n-79\\n-142\\n-25\\n-60\\n-112\\n-99\\n-64\\n-15\\n-78\\n-37\\n-64\\n-15\\n-129\\n-32\\n-102\\n-74\\n-112\\n1\\n-146\\n-151\\n-147\\n-153\\n-4\\n-181\\n-22\\n-176\\n-4\\n-57\\n-151\\n-86\\n-121\\n-38\\n-137\\n-160\\n-156\\n-72\\n-73\\n-149\\n-64\\n-182\\n-117\\n-146\\n-180\\n-195\\n-27\\n-194\\n-191\\n-108\\n-153\\n-40\\n-149\\n-100\\n-120\\n-207\\n-83\\n-94\\n-73\\n-200\\n-95\\n-155\\n-94\\n-76\\n-9\\n-149\\n-70\\n-125\\n-49\\n-146\\n-223\\n-68\\n-139\\n-26\\n-132\\n-142\\n-165\\n-2\\n-45\\n-154\\n-129\\n-130\\n-185\\n-60\\n-34\\n-173\\n-91\\n-37\\n-40\\n-153\\n-189\\n-236\\n-95\\n-128\\n-46\\n-14\\n-53\\n-245\\n-67\\n-9\\n-208\\n-244\\n-198\\n-74\\n-62\\n-104\\n-51\\n-251\\n-48\\n-50\\n-115\\n-76\\n-79\\n-32\\n-82\\n-65\\n-185\\n-124\\n-32\\n-189\\n-124\\n-174\\n1\\n-273\\n-223\\n-275\\n-238\\n-200\\n-184\\n-229\\n-195\\n-152\\n-63\\n-150\\n-73\\n-44\\n-54\\n-187\\n-49\\n-250\\n-192\\n-290\\n-282\\n-266\\n-214\\n-117\\n-199\\n-83\\n-104\\n-251\\n-176\\n-262\\n-296\\n-39\\n-259\\n-87\\n-132\\n-166\\n-67\\n-194\\n1\\n-294\\n-8\\n-3\\n-264\\n-217\\n-228\\n-233\\n-241\\n-294\\n-210\\n-72\\n-307\\n-259\\n-33\\n-101\\n-103\\n-235\\n-100\\n-110\\n-253\\n-292\\n-134\\n-269\\n-52\\n-265\\n-15\\n-29\\n-272\\n-126\\n-210\\n-151\\n-308\\n-40\\n-40\\n-112\\n-268\\n-185\\n-346\\n-237\\n-287\\n-34\\n-302\\n-41\\n-25\\n-191\\n-29\\n-170\\n-95\\n-315\\n-278\\n-160\\n-220\\n-99\\n-126\\n-224\\n-33\\n-350\\n-76\\n-138\\n-340\\n-284\\n-268\\n-128\\n-238\\n-197\\n-93\\n-110\\n-120\\n-190\\n-140\\n-64\\n-217\\n-296\\n-103\\n-363\\n-199\\n-254\\n-233\\n-190\\n-282\\n-136\\n-174\\n-309\\n-61\\n-206\\n-18\\n-105\\n-111\\n-163\\n-287\\n-188\\n-145\\n-294\\n-251\\n-398\\n-265\\n-273\\n-50\\n-250\\n-376\\n-5\\n-357\\n-6\\n-8\\n-198\\n-20\\n-82\\n-158\\n-122\\n-196\\n-97\\n-183\\n-48\\n-428\\n-36\\n-88\\n-424\\n-35\\n-380\\n-109\\n-209\\n-323\\n-394\\n-102\\n-276\\n-153\\n-229\\n-320\\n-391\\n-7\\n-328\\n-127\\n-430\\n-102\\n-372\\n-447\\n-222\\n-401\\n-184\\n-183\\n-49\\n-239\\n-413\\n-101\\n-187\\n-289\\n-12\\n-418\\n-248\\n-279\\n-318\\n-134\\n-443\\n-272\\n-456\\n-143\\n-3\\n-209\\n-276\\n-414\\n-189\\n-302\\n-238\\n-241\\n-106\\n-332\\n-375\\n-400\\n-476\\n-9\\n-95\\n-412\\n-52\\n-127\\n-442\\n-278\\n-25\\n-446\\n-411\\n-39\\n-55\\n-80\\n-234\\n-361\\n-223\\n-384\\n-283\\n-47\\n-164\\n-18\\n-38\\n-87\\n-393\\n-93\\n-380\\n-493\\n-73\\n-150\\n-241\\n-378\\n-211\\n-516\\n-349\\n-520\\n-38\\n-397\\n-406\\n-16\\n-461\\n-276\\n-448\\n-316\\n-376\\n-156\\n-369\\n-216\\n-431\\n-309\\n-400\\n-135\\n-523\\n-40\\n-508\\n-87\\n-25\\n-151\\n-355\\n-141\\n-3\\n-495\\n-153\\n-438\\n-343\\n-161\\n-66\\n-455\\n-70\\n-248\\n-278\\n-548\\n-300\\n-337\\n-290\\n-551\\n-200\\n-68\\n-540\\n-476\\n-395\\n-245\\n-318\\n-424\\n-112\\n-556\\n-541\\n-94\\n-148\\n-542\\n-100\\n-120\\n-199\\n-569\\n-471\\n-298\\n-16\\n-453\\n-469\\n-50\\n-500\\n-84\\n-435\\n-579\\n-287\\n-522\\n-77\\n-83\\n-347\\n-437\\n-171\\n-231\\n-139\\n-350\\n-357\\n-221\\n-214\\n-224\\n-148\\n-125\\n-385\\n-255\\n-38\\n-320\\n-254\\n-517\\n-532\\n-80\\n-286\\n-58\\n-97\\n-390\\n-309\\n-548\\n-319\\n-323\\n-238\\n-297\\n-12\\n-312\\n-517\\n-434\\n-466\\n-103\\n-621\\n-448\\n-503\\n-72\\n-601\\n-287\\n-61\\n-577\\n-87\\n-143\\n-33\\n-482\\n-275\\n-529\\n-340\\n-279\\n-130\\n-512\\n-63\\n-109\\n-528\\n-22\\n-549\\n-317\\n-375\\n-377\\n-385\\n-23\\n-191\\n-138\\n-509\\n-40\\n-565\\n-559\\n-14\\n-547\\n-28\\n-159\\n-153\\n-585\\n-508\\n-582\\n-431\\n-580\\n-637\\n-561\\n-513\\n-243\\n-420\\n-298\\n-485\\n-132\\n-613\\n-157\\n-521\\n-596\\n-61\\n-420\\n-498\\n-577\\n-563\\n-354\\n-662\\n-264\\n-273\\n-111\\n-597\\n-466\\n-389\\n-345\\n-306\\n-102\\n-57\\n-596\\n-1\\n-45\\n-12\\n-619\\n-47\\n-43\\n0\\n-323\\n-9\\n-319\\n-529\\n-402\\n-238\\n-191\\n-487\\n-315\\n-65\\n-386\\n-110\\n-605\\n-363\\n-461\\n-6\\n-95\\n-95\\n2\\n-596\\n-454\\n-618\\n-83\\n-481\\n-283\\n-386\\n-247\\n-417\\n-707\\n-564\\n-603\\n-17\\n-712\\n-140\\n-336\\n-567\\n-443\\n-36\\n-476\\n-251\\n-735\\n-589\\n-198\\n-197\\n-476\\n-49\\n-736\\n-422\\n-383\\n-569\\n-732\\n-1\\n-104\\n-261\\n-352\\n-453\\n-273\\n-344\\n-66\\n-307\\n-698\\n-158\\n-238\\n-280\\n-207\\n-624\\n-491\\n-765\\n-506\\n-146\\n-616\\n-711\\n-650\\n-655\\n-393\\n-19\\n-315\\n-311\\n-572\\n-675\\n-533\\n-156\\n-373\\n-744\\n-142\\n-582\\n-491\\n-796\\n-777\\n-125\\n-483\\n-426\\n-510\\n-560\\n-700\\n-778\\n-407\\n-440\\n-409\\n-238\\n-738\\n-477\\n-147\\n-152\\n-317\\n-110\\n-323\\n-788\\n-601\\n-202\\n-517\\n-487\\n-726\\n-300\\n-1\\n-554\\n-448\\n-15\\n-191\\n-531\\n-568\\n-466\\n-527\\n-132\\n-254\\n-290\\n-8\\n-400\\n-655\\n-788\\n-376\\n-249\\n-662\\n-315\\n-378\\n-41\\n-793\\n-163\\n-29\\n-327\\n-839\\n-133\\n-124\\n-129\\n-673\\n-32\\n-605\\n-393\\n-664\\n-374\\n-135\\n-366\\n-717\\n-93\\n-601\\n-763\\n-788\\n-494\\n-802\\n-282\\n-443\\n-491\\n-461\\n-197\\n-83\\n-96\\n-162\\n-97\\n-161\\n-232\\n-144\\n-472\\n-118\\n-429\\n-387\\n-724\\n-789\\n-636\\n-298\\n-484\\n-720\\n-526\\n-382\\n-102\\n-449\\n-846\\n-525\\n-547\\n-696\\n-524\\n-272\\n-843\\n-286\\n-247\\n-838\\n-447\\n-489\\n-797\\n-483\\n-386\\n-775\\n-340\\n-772\\n-158\\n-293\\n-256\\n-432\\n-812\\n-273\\n-93\\n-487\\n-264\\n-594\\n-330\\n-712\\n-798\\n-131\\n-591\\n-539\\n-677\\n-455\\n-470\\n-108\\n-573\\n-57\\n-845\\n-383\\n-273\\n-890\\n-747\\n-913\\n-648\\n-625\\n-650\\n-544\\n-137\\n-490\\n-434\\n-734\\n-182\\n-355\\n-859\\n-835\\n-141\\n-536\\n-874\\n-102\\n-940\\n-359\\n-83\\n-800\\n-894\\n-712\\n-470\\n-687\\n-578\\n-435\\n-935\\n-400\\n-780\\n-814\\n-458\\n-892\\n-481\\n-371\\n-761\\n-348\\n-388\\n-891\\n-764\\n-297\\n-536\\n-695\\n-314\\n-336\\n-978\\n-379\\n-462\\n-597\\n-533\\n-561\\n-9\\n-474\\n-292\\n-560\\n-420\\n-828\\n-721\\n-769\\n-874\\n-157\\n-495\\n-771\\n-899\\n-571\\n-98\\n-282\\n-233\\n-203\\n-982\\n-416\\n-142\\n-993\\n-540\\n-979\\n-851\\n-506\\n-238\\n-292\\n-184\\n-695\\n-195\\n-632\\n-575\\n-962\\n-76\\n-546\\n-705\\n-13\\n-271\\n-222\\n-124\\n-380\\n2\\n-1003\\n-251\\n-525\\n-228\\n-644\\n-159\\n-624\\n-477\\n-912\\n-712\\n-343\\n-263\\n-88\\n-745\\n-85\\n-374\\n-675\\n-804\\n-610\\n-854\\n-511\\n-612\\n-964\\n-731\\n-358\\n-495\\n-946\\n-466\\n-364\\n-1053\\n-57\\n-101\\n-829\\n-155\\n-600\";","export default \"6,13,1,15,2,0\";","export default \"You need to cross a vast **firewall**. The firewall consists of several layers, each with a **security scanner** that moves back and forth across the layer. To succeed, you must not be detected by a scanner.\\n\\nBy studying the firewall briefly, you are able to record (in your puzzle input) the **depth** of each layer and the **range** of the scanning area for the scanner within it, written as `depth: range`. Each layer has a thickness of exactly `1`. A layer at depth `0` begins immediately inside the firewall; a layer at depth 1 would start immediately after that.\\n\\nFor example, suppose you've recorded the following:\\n\\n```\\n0: 3\\n1: 2\\n4: 4\\n6: 4\\n```\\n\\nThis means that there is a layer immediately inside the firewall (with range `3`), a second layer immediately after that (with range `2`), a third layer which begins at depth `4` (with range `4`), and a fourth layer which begins at depth `6` (also with range `4`). Visually, it might look like this:\\n\\n```\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... ... [ ] ... [ ]\\n[ ] [ ]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n```\\n\\nWithin each layer, a security scanner moves back and forth within its range. Each security scanner starts at the top and moves down until it reaches the bottom, then moves up until it reaches the top, and repeats. A security scanner takes **one picosecond** to move one step. Drawing scanners as `S`, the first few picoseconds look like this:\\n\\n```\\nPicosecond 0:\\n 0   1   2   3   4   5   6\\n[S] [S] ... ... [S] ... [S]\\n[ ] [ ]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\nPicosecond 1:\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... ... [ ] ... [ ]\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\nPicosecond 2:\\n 0   1   2   3   4   5   6\\n[ ] [S] ... ... [ ] ... [ ]\\n[ ] [ ]         [ ]     [ ]\\n[S]             [S]     [S]\\n                [ ]     [ ]\\n\\nPicosecond 3:\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... ... [ ] ... [ ]\\n[S] [S]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [S]     [S]\\n```\\n\\nYour plan is to hitch a ride on a packet about to move through the firewall. The packet will travel along the top of each layer, and it moves at **one layer per picosecond**. Each picosecond, the packet moves one layer forward (its first move takes it into layer `0`), and then the scanners move one step. If there is a scanner at the top of the layer **as your packet enters it**, you are **caught**. (If a scanner moves into the top of its layer while you are there, you are **not** caught: it doesn't have time to notice you before you leave.) If you were to do this in the configuration above, marking your current position with parentheses, your passage through the firewall would look like this:\\n\\n```\\nInitial state:\\n 0   1   2   3   4   5   6\\n[S] [S] ... ... [S] ... [S]\\n[ ] [ ]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\nPicosecond 0:\\n 0   1   2   3   4   5   6\\n(S) [S] ... ... [S] ... [S]\\n[ ] [ ]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n( ) [ ] ... ... [ ] ... [ ]\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n\\nPicosecond 1:\\n 0   1   2   3   4   5   6\\n[ ] ( ) ... ... [ ] ... [ ]\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n[ ] (S) ... ... [ ] ... [ ]\\n[ ] [ ]         [ ]     [ ]\\n[S]             [S]     [S]\\n                [ ]     [ ]\\n\\n\\nPicosecond 2:\\n 0   1   2   3   4   5   6\\n[ ] [S] (.) ... [ ] ... [ ]\\n[ ] [ ]         [ ]     [ ]\\n[S]             [S]     [S]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n[ ] [ ] (.) ... [ ] ... [ ]\\n[S] [S]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [S]     [S]\\n\\n\\nPicosecond 3:\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... (.) [ ] ... [ ]\\n[S] [S]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [S]     [S]\\n\\n 0   1   2   3   4   5   6\\n[S] [S] ... (.) [ ] ... [ ]\\n[ ] [ ]         [ ]     [ ]\\n[ ]             [S]     [S]\\n                [ ]     [ ]\\n\\n\\nPicosecond 4:\\n 0   1   2   3   4   5   6\\n[S] [S] ... ... ( ) ... [ ]\\n[ ] [ ]         [ ]     [ ]\\n[ ]             [S]     [S]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... ... ( ) ... [ ]\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n\\nPicosecond 5:\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... ... [ ] (.) [ ]\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n[ ] [S] ... ... [S] (.) [S]\\n[ ] [ ]         [ ]     [ ]\\n[S]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n\\nPicosecond 6:\\n 0   1   2   3   4   5   6\\n[ ] [S] ... ... [S] ... (S)\\n[ ] [ ]         [ ]     [ ]\\n[S]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... ... [ ] ... ( )\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n```\\n\\nIn this situation, you are **caught** in layers `0` and `6`, because your packet entered the layer when its scanner was at the top when you entered it. You are **not** caught in layer `1`, since the scanner moved into the top of the layer once you were already there.\\n\\nThe **severity** of getting caught on a layer is equal to its **depth** multiplied by its **range**. (Ignore layers in which you do not get caught.) The severity of the whole trip is the sum of these values. In the example above, the trip severity is `0*3 + 6*4 = 24`.\\n\\nGiven the details of the firewall you've recorded, if you leave immediately, **what is the severity of your whole trip**?\\n\\n[comment]: <> (PART 2)\\n\\nNow, you need to pass through the firewall without being caught - easier said than done.\\n\\nYou can't control the speed of the packet, but you can **delay** it any number of picoseconds. For each picosecond you delay the packet before beginning your trip, all security scanners move one step. You're not in the firewall during this time; you don't enter layer `0` until you stop delaying the packet.\\n\\nIn the example above, if you delay `10` picoseconds (picoseconds `0` - `9`), you won't get caught:\\n\\n```\\nState after delaying:\\n 0   1   2   3   4   5   6\\n[ ] [S] ... ... [ ] ... [ ]\\n[ ] [ ]         [ ]     [ ]\\n[S]             [S]     [S]\\n                [ ]     [ ]\\n\\nPicosecond 10:\\n 0   1   2   3   4   5   6\\n( ) [S] ... ... [ ] ... [ ]\\n[ ] [ ]         [ ]     [ ]\\n[S]             [S]     [S]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n( ) [ ] ... ... [ ] ... [ ]\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n\\nPicosecond 11:\\n 0   1   2   3   4   5   6\\n[ ] ( ) ... ... [ ] ... [ ]\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n[S] (S) ... ... [S] ... [S]\\n[ ] [ ]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n\\nPicosecond 12:\\n 0   1   2   3   4   5   6\\n[S] [S] (.) ... [S] ... [S]\\n[ ] [ ]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n[ ] [ ] (.) ... [ ] ... [ ]\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n\\nPicosecond 13:\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... (.) [ ] ... [ ]\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n[ ] [S] ... (.) [ ] ... [ ]\\n[ ] [ ]         [ ]     [ ]\\n[S]             [S]     [S]\\n                [ ]     [ ]\\n\\n\\nPicosecond 14:\\n 0   1   2   3   4   5   6\\n[ ] [S] ... ... ( ) ... [ ]\\n[ ] [ ]         [ ]     [ ]\\n[S]             [S]     [S]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... ... ( ) ... [ ]\\n[S] [S]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [S]     [S]\\n\\n\\nPicosecond 15:\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... ... [ ] (.) [ ]\\n[S] [S]         [ ]     [ ]\\n[ ]             [ ]     [ ]\\n                [S]     [S]\\n\\n 0   1   2   3   4   5   6\\n[S] [S] ... ... [ ] (.) [ ]\\n[ ] [ ]         [ ]     [ ]\\n[ ]             [S]     [S]\\n                [ ]     [ ]\\n\\n\\nPicosecond 16:\\n 0   1   2   3   4   5   6\\n[S] [S] ... ... [ ] ... ( )\\n[ ] [ ]         [ ]     [ ]\\n[ ]             [S]     [S]\\n                [ ]     [ ]\\n\\n 0   1   2   3   4   5   6\\n[ ] [ ] ... ... [ ] ... ( )\\n[S] [S]         [S]     [S]\\n[ ]             [ ]     [ ]\\n                [ ]     [ ]\\n```\\n\\nBecause all smaller delays would get you caught, the fewest number of picoseconds you would need to delay to get through safely is `10`.\\n\\n**What is the fewest number of picoseconds** that you need to delay the packet to pass through the firewall without being caught?\";","export default \"31813174349235972159811869755166343882958376474278437681632495222499211488649543755655138842553867246131245462881756862736922925752647341673342756514856663979496747158241792857625471323535183222497949751644488277317173496124473893452425118133645984488759128897146498831373795721661696492622276282881218371273973538163779782435211491196616375135472517935481964439956844536136823757764494967297251545389464472794474447941564778733926532741752757865243946976266426548341889873514383464142659425122786667399143335772174973128383869893325977319651839516694295534146668728822393452626321892357192574444856264721585365164945647254645264693957898373214897848424966266582991272496771159583715456714645585576641458358326521858518319315233857473695712238323787254556597566461188452279853766184333696344395818615215846348586541164194624371353556812548945447432787795489443312941687221314432694115847863129826532628228386894683392352799514942665396273726821936346663485499159141368443782475714679953213388375939519711591262489869326145476958378464652451441434846382474578535468433514121336844727988128998543975147649823215332929623574231738442281161294838499441799996857746549441142859199799125595761724782225452394593514388571187279266291364278184761833324476838939898258225748562345853633364314923186685534864178665214135631494876474186833392929124337161222959459117554238429216916532175247326391321525832362274683763488347654497889261543959591212539851835354335598844669618391876623638137926893582131945361264841733341247646125278489995838369127582438419889922365596554237153412394494932582424222479798382932335239274297663365164912953364777876187522324991837775492621675953397843833247525599771974555545348388871578347332456586949283657613841414576976542343934911424716613479249893113961925713317644349946444271959375981158445151659431844142242547191181944395897963146947935463718145169266129118413523541222444997678726644615185324461293228124456118853885552279849917342474792984425629248492847827653133583215539325866881662159421987315186914769478947389188382383546881622246793781846254253759714573354544997853153798862436887889318646643359555663135476261863\";","export default \"################################\\n##########..####################\\n##########..G###################\\n##########..#.....########.#####\\n##########........########G#####\\n############...#..########.#####\\n################....######.#####\\n#################..G####...#####\\n################...#..#....#####\\n################...G..#.....E###\\n##############.G..........G....#\\n###########.G...G..............#\\n###########G..#####..........###\\n###########..#######.........###\\n##########.G#########........#.#\\n#########...#########....G.....#\\n#########...#########.........##\\n##..........#########.........##\\n######....G.#########.....E....#\\n##...........#######.......#...#\\n#...G.........#####E.......#####\\n##....................#..#######\\n##.G.................##.########\\n##..#GG.............###...#..###\\n#G..#..G.G........G.####.#..E###\\n#.....#.##...........###.....###\\n#######...............###EE..###\\n########.....E........###....###\\n########..............####..####\\n##########....E....#...###.#####\\n###########...EE....#.##########\\n################################\";","export default \"540561\";","'use strict';\nvar apply = require('../internals/function-apply');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar isRegExp = require('../internals/is-regexp');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar getMethod = require('../internals/get-method');\nvar arraySlice = require('../internals/array-slice-simple');\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\nvar regexpExec = require('../internals/regexp-exec');\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\nvar fails = require('../internals/fails');\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\nvar MAX_UINT32 = 0xFFFFFFFF;\nvar min = Math.min;\nvar $push = [].push;\nvar exec = uncurryThis(/./.exec);\nvar push = uncurryThis($push);\nvar stringSlice = uncurryThis(''.slice);\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    // eslint-disable-next-line regexp/no-empty-group -- required for testing\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = toString(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return call(nativeSplit, string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = call(regexpExec, separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          push(output, stringSlice(string, lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !exec(separatorCopy, '')) push(output, '');\n      } else push(output, stringSlice(string, lastLastIndex));\n      return output.length > lim ? arraySlice(output, 0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.es/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);\n      return splitter\n        ? call(splitter, separator, O, limit)\n        : call(internalSplit, toString(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (string, limit) {\n      var rx = anObject(this);\n      var S = toString(string);\n      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);\n\n      if (res.done) return res.value;\n\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (UNSUPPORTED_Y ? 'g' : 'y');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;\n        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          push(A, stringSlice(S, p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            push(A, z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      push(A, stringSlice(S, p));\n      return A;\n    }\n  ];\n}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);\n","export default \"16\\n45\\n42\\n47\\n31\\n38\\n4\\n7\\n44\\n10\\n18\\n24\\n48\\n28\\n19\\n23\\n32\\n1\\n37\\n9\\n36\\n8\\n41\\n49\\n13\\n15\\n11\\n27\\n5\\n6\\n12\\n45\\n14\\n7\\n34\\n10\\n21\\n50\\n29\\n16\\n17\\n18\\n19\\n20\\n31\\n52\\n22\\n23\\n26\\n42\\n13\\n24\\n28\\n46\\n25\\n30\\n58\\n27\\n53\\n49\\n35\\n91\\n47\\n54\\n74\\n51\\n98\\n55\\n33\\n40\\n59\\n36\\n76\\n37\\n38\\n100\\n52\\n107\\n57\\n60\\n67\\n81\\n62\\n68\\n69\\n73\\n117\\n132\\n70\\n71\\n143\\n77\\n74\\n105\\n122\\n75\\n88\\n196\\n89\\n145\\n114\\n146\\n155\\n119\\n127\\n142\\n148\\n130\\n137\\n160\\n237\\n141\\n207\\n147\\n229\\n219\\n152\\n162\\n365\\n163\\n164\\n253\\n288\\n203\\n233\\n241\\n246\\n269\\n249\\n257\\n267\\n271\\n278\\n284\\n325\\n423\\n293\\n299\\n309\\n549\\n314\\n526\\n326\\n512\\n396\\n653\\n436\\n444\\n449\\n562\\n575\\n495\\n506\\n634\\n524\\n566\\n804\\n952\\n583\\n758\\n613\\n763\\n608\\n623\\n640\\n762\\n1145\\n722\\n1305\\n1010\\n1263\\n939\\n1019\\n955\\n1370\\n1001\\n1191\\n1768\\n1090\\n1107\\n1149\\n1853\\n1223\\n1196\\n1221\\n1231\\n1248\\n1772\\n1362\\n1723\\n1907\\n2311\\n2109\\n1894\\n1940\\n1956\\n2187\\n2419\\n2091\\n2960\\n2150\\n3046\\n5379\\n2321\\n2355\\n2469\\n3142\\n2427\\n2417\\n4373\\n2479\\n2610\\n3085\\n3471\\n3630\\n3801\\n3834\\n3850\\n3896\\n4031\\n4047\\n5233\\n4836\\n6277\\n4471\\n8269\\n8101\\n8502\\n7556\\n4772\\n6365\\n4906\\n6510\\n4896\\n5564\\n11282\\n6240\\n6556\\n7367\\n10541\\n7635\\n8305\\n7897\\n12148\\n8078\\n14443\\n11598\\n22521\\n11146\\n12541\\n12120\\n9802\\n9668\\n9678\\n10336\\n12531\\n10460\\n11136\\n11452\\n11804\\n12796\\n13607\\n13923\\n21242\\n15713\\n17699\\n16202\\n15975\\n17746\\n28882\\n19346\\n25515\\n19470\\n21922\\n23572\\n20004\\n19480\\n20014\\n22264\\n32142\\n21596\\n26403\\n22940\\n44995\\n24600\\n26719\\n27530\\n29898\\n31688\\n36206\\n32177\\n35455\\n46417\\n37760\\n38816\\n49912\\n38950\\n39474\\n39484\\n49975\\n62414\\n56777\\n41610\\n54441\\n44536\\n47540\\n53122\\n49659\\n86618\\n51319\\n54249\\n57428\\n61586\\n63865\\n67632\\n88027\\n73215\\n136277\\n76576\\n97199\\n78424\\n78434\\n100662\\n224304\\n111405\\n86146\\n142923\\n96051\\n126337\\n92076\\n98859\\n100978\\n118114\\n125060\\n105568\\n134004\\n223682\\n131497\\n137080\\n140847\\n223226\\n173877\\n156858\\n155000\\n164570\\n197644\\n186808\\n212067\\n178222\\n182197\\n194910\\n188127\\n221111\\n193054\\n256557\\n259064\\n289630\\n239572\\n298622\\n324551\\n309719\\n467852\\n268577\\n277927\\n328877\\n348054\\n464735\\n343666\\n319570\\n392554\\n360419\\n394264\\n366349\\n370324\\n383037\\n555329\\n381181\\n432626\\n710015\\n496129\\n498636\\n559142\\n517499\\n664971\\n546504\\n578296\\n743456\\n588147\\n721431\\n1086783\\n663236\\n685919\\n679989\\n689894\\n726768\\n730743\\n1401420\\n736673\\n751505\\n813807\\n877310\\n879817\\n1598741\\n1013628\\n1353130\\n1329801\\n1452174\\n2325509\\n1211475\\n1124800\\n3046940\\n1268136\\n1251383\\n1343225\\n1393979\\n1349155\\n1365908\\n1740396\\n2215227\\n1457511\\n2145446\\n1631322\\n1488178\\n1565312\\n1691117\\n2207111\\n2392936\\n2138428\\n2281764\\n2817979\\n2336275\\n2582311\\n2376183\\n2462858\\n3179295\\n2519519\\n3573019\\n3644319\\n2831403\\n2715063\\n2806666\\n2823419\\n2945689\\n3633624\\n3850447\\n4720739\\n3053490\\n4319581\\n3256429\\n3829545\\n4657947\\n5326185\\n4420192\\n5949202\\n5641398\\n4799133\\n4839041\\n4895702\\n4982377\\n5234582\\n7630536\\n5630085\\n7150984\\n5538482\\n6652964\\n5752355\\n8725247\\n5999179\\n6309919\\n10419371\\n6883035\\n11579287\\n7085974\\n7676621\\n9470943\\n13986540\\n9219325\\n9259233\\n9878079\\n9694835\\n16418550\\n9734743\\n18420082\\n12283049\\n12652143\\n11290837\\n11168567\\n11537661\\n11751534\\n12062274\\n22346978\\n17847580\\n16004754\\n21911376\\n13969009\\n14559656\\n14762595\\n16305299\\n16895946\\n18478558\\n18914160\\n32883169\\n31646119\\n19429578\\n36325524\\n26824869\\n24345323\\n22706228\\n33637815\\n22459404\\n36407597\\n22920101\\n23289195\\n37265884\\n45626329\\n39107918\\n57586476\\n37682696\\n28528665\\n28731604\\n29322251\\n31067894\\n33201245\\n45379505\\n48161182\\n38343738\\n42349679\\n41888982\\n42718773\\n66839060\\n45165632\\n57260269\\n67838909\\n45748599\\n46209296\\n51448766\\n71247438\\n51817860\\n57850916\\n58053855\\n62523496\\n61729910\\n99412606\\n61932849\\n99979042\\n60390145\\n88467372\\n71544983\\n81062511\\n103618892\\n80232720\\n84238661\\n84607755\\n87884405\\n106599441\\n133274893\\n91957895\\n97197365\\n104060212\\n142165569\\n113972262\\n109668776\\n109871715\\n115904771\\n149614315\\n122120055\\n153890744\\n122322994\\n131935128\\n140622865\\n144628806\\n164471381\\n151777703\\n161295231\\n236586701\\n172492160\\n188298873\\n286794375\\n194483846\\n189155260\\n236295256\\n353626641\\n206866141\\n301918096\\n231991770\\n219540491\\n292400568\\n225776486\\n238227765\\n244443049\\n254258122\\n274100697\\n262945859\\n355779077\\n309100187\\n332927679\\n313072934\\n480966838\\n333787391\\n425450516\\n360791033\\n493660516\\n383639106\\n552468170\\n396021401\\n432642627\\n426406632\\n438857911\\n445316977\\n889681917\\n499877183\\n464004251\\n470219535\\n482670814\\n498701171\\n517203981\\n537046556\\n572046046\\n622173121\\n948489571\\n646860325\\n673863967\\n890410883\\n694578424\\n744430139\\n968920706\\n1391290464\\n779660507\\n1139377102\\n822428033\\n982363533\\n865264543\\n902862162\\n909321228\\n934223786\\n998578354\\n946675065\\n1159219677\\n981371985\\n1015905152\\n1089250027\\n1512584004\\n1728150078\\n1556181553\\n1712838916\\n1537271208\\n1368442391\\n1474238931\\n1439008563\\n1524090646\\n1602088540\\n2292244511\\n1644925050\\n1687692576\\n1725290195\\n1907899582\\n2804144727\\n2881026395\\n2420913996\\n1880898851\\n3633189777\\n1928047050\\n2105155179\\n2457692418\\n2539995798\\n3833305257\\n5435393797\\n2089807806\\n2924623944\\n3119163981\\n3076327471\\n3013367441\\n7540548976\\n2963099209\\n3568591427\\n3970706657\\n4658292491\\n4108606572\\n4420894649\\n3830445374\\n3808945901\\n3986054030\\n4033202229\\n4017854856\\n6132531422\\n4194962985\\n4385739468\\n4562847597\\n4547500224\\n6581958868\\n5014431750\\n6984074098\\n5052907015\\n8251340023\\n5976466650\\n7399106909\\n6531690636\\n6772045110\\n6793544583\\n7377537328\\n7639391275\\n8194685369\\n11594069894\\n7794999931\\n7816499404\\n7826800757\\n10726653621\\n18971607222\\n15194036732\\n8580702453\\n9438646483\\n8933239692\\n15979809362\\n9561931974\\n21775995600\\n10990898400\\n11029373665\\n12847906946\\n14171081911\\n25161980311\\n13303735746\\n13325235219\\n13565589693\\n14432935858\\n15016928603\\n15455890679\\n17388732731\\n15611499335\\n15621800688\\n21717552021\\n31156198504\\n19000578457\\n34593407910\\n24913049054\\n17513942145\\n18371886175\\n22258474911\\n24354608884\\n40776574057\\n24316133619\\n25423834258\\n27736671604\\n26151642692\\n33433514315\\n26628970965\\n26869325439\\n26890824912\\n27998525551\\n29888826537\\n36514520602\\n49127800350\\n31233300023\\n33125441480\\n33135742833\\n44383267584\\n67729150743\\n41868551029\\n42937776403\\n35885828320\\n39772417056\\n40630361086\\n57788123199\\n49739967877\\n50467776311\\n51185459058\\n78823604723\\n62776653232\\n52780613657\\n53498296404\\n57862270988\\n92065576753\\n58124124935\\n57887352088\\n136710956811\\n64358741503\\n90240193367\\n82875710710\\n66261184313\\n102245538572\\n75658245376\\n89512384933\\n86353604631\\n80402778142\\n155026152229\\n110642884645\\n131588237200\\n100207744188\\n100925426935\\n101653235369\\n110667965745\\n106278910061\\n110904738592\\n148102464355\\n166756382773\\n115749623076\\n133545597464\\n259007202947\\n144761519645\\n168506722885\\n185121249282\\n149136895023\\n141919429689\\n146663962455\\n202578662304\\n156061023518\\n197258343223\\n210850628833\\n180610522330\\n211112482780\\n322817406291\\n217183648653\\n201133171123\\n211593392680\\n207932145430\\n303537253284\\n222028533137\\n244450336056\\n332933271729\\n329882768927\\n249295220540\\n275465027153\\n286680949334\\n334258144305\\n288583392144\\n455562818836\\n410510807734\\n349851575119\\n302724985973\\n403711833427\\n336671545848\\n377868865553\\n699094199878\\n492648675806\\n640208799132\\n562145976487\\n412726563803\\n409065316553\\n508709482471\\n579002280437\\n737099011862\\n466478869193\\n1261240176365\\n618466161071\\n1034565099273\\n524760247693\\n933825564246\\n575264341478\\n925115916597\\n864870962460\\n711790302526\\n639396531821\\n706436819400\\n898817522335\\n1355565172933\\n714540411401\\n1223854447571\\n821791880356\\n1331349831653\\n875544185746\\n879205432996\\n1033469730164\\n917774799024\\n1084945030264\\n991239116886\\n1143226408764\\n1041743210671\\n1333006572472\\n1100024589171\\n1811814891697\\n1164156779514\\n1214660873299\\n1287054644004\\n1345833351221\\n1353936943222\\n1697336066102\\n2002719829288\\n1909013915910\\n1536332291757\\n1906736910620\\n1590084597147\\n3252570261841\\n1700997313352\\n1796980232020\\n1754749618742\\n2184969619435\\n1951244529188\\n2141767799842\\n2032982327557\\n2091263706057\\n2205899990185\\n3610011229262\\n2264181368685\\n2314685462470\\n4112636900805\\n3703717142640\\n3472024263439\\n2640991587226\\n2699770294443\\n3150917175242\\n3126416888904\\n3539052121045\\n3291081910499\\n3497977545372\\n3344834215889\\n3387064829167\\n3455746932094\\n5561255758450\\n3551729850762\\n3787731946299\\n3984226856745\\n5654961671828\\n7313728371902\\n4124246033614\\n4297163696242\\n4470081358870\\n7771958803044\\n7135144031987\\n8906089974339\\n9126985935267\\n6180043708271\\n5767408476130\\n5340761881669\\n5826187183347\\n9100307879495\\n14441069761164\\n6635916126388\\n8727826710836\\n6731899045056\\n6842811761261\\n6938794679929\\n8021811209632\\n7339461797061\\n7535956707507\\n7911977979913\\n9779207705442\\n8421409729856\\n8594327392484\\n8767245055112\\n11809543155931\\n15119969587111\\n11520805589940\\n12006230891618\\n20621113469435\\n17118669502503\\n11108170357799\\n11166949065016\\n14378768468768\\n15736224005883\\n13367815171444\\n13478727887649\\n14071360842117\\n15933789189545\\n14182273558322\\n13781606441190\\n14278256476990\\n14875418504568\\n15251439776974\\n15447934687420\\n16333387709769\\n20946156770458\\n22628975947739\\n17361572447596\\n20288050645052\\n22687754654956\\n32466962360398\\n30404748551886\\n22275119422815\\n24475985529243\\n25179531199916\\n35996791119183\\n24534764236460\\n26846543059093\\n31185228966519\\n27439176013561\\n27260334328839\\n27852967283307\\n27963879999512\\n28657024945758\\n28059862918180\\n47914897047818\\n30126858281542\\n30699374464394\\n38608507132584\\n33694960157365\\n70543872995557\\n49121662481908\\n37649623092648\\n42563170067867\\n49714295436376\\n52026074259009\\n58759237382574\\n54106877387932\\n49010749765703\\n51381307295553\\n51795098565299\\n79286408587848\\n101036824024712\\n57387192610381\\n54699510342400\\n97367744515158\";","export default \"#ip 5\\nseti 123 0 3\\nbani 3 456 3\\neqri 3 72 3\\naddr 3 5 5\\nseti 0 0 5\\nseti 0 0 3\\nbori 3 65536 2\\nseti 14070682 0 3\\nbani 2 255 1\\naddr 3 1 3\\nbani 3 16777215 3\\nmuli 3 65899 3\\nbani 3 16777215 3\\ngtir 256 2 1\\naddr 1 5 5\\naddi 5 1 5\\nseti 27 8 5\\nseti 0 3 1\\naddi 1 1 4\\nmuli 4 256 4\\ngtrr 4 2 4\\naddr 4 5 5\\naddi 5 1 5\\nseti 25 8 5\\naddi 1 1 1\\nseti 17 9 5\\nsetr 1 4 2\\nseti 7 5 5\\neqrr 3 0 1\\naddr 1 5 5\\nseti 5 4 5\";","export default \"qzbw\\nqez\\n\\nxgedfibnyuhqsrazlwtpocj\\nfxgpoqijdzybletckwaunsr\\npwnqsizrfcbyljexgouatd\\nljtperqsodghnufiycxwabz\\n\\nuk\\nkupacjlriv\\ndku\\nqunk\\n\\nyjnprofmcuhdlawt\\nfrmhulyncvweatodzjp\\nfhadtrcyjzwlnpumo\\nhrcutablndyjpfmwo\\n\\nrdclv\\nlrvdc\\ncrldv\\ndvrcl\\nvrlcd\\n\\ndqrwajpb\\nasrfpdjwbq\\nwjdtarq\\n\\nnalkhgoi\\nbmiad\\nsdvpiyerma\\nami\\n\\nsmg\\nwlmdftcr\\nmk\\nmy\\n\\nebaxsun\\nuaxnebs\\nsuxnbea\\neanxusb\\naexusnb\\n\\nzoxegrfd\\nqorjv\\noqr\\nvor\\nroq\\n\\njpasdnrcvhglft\\ndgkstavnhjrclfx\\ncrtndjglfvwahq\\nhjclinvdtagrkf\\ngjfcdtuhlanvr\\n\\nexiopqbgrj\\nundhwyfkvltis\\n\\nnpsxwlyog\\nudylki\\n\\nbnuwck\\nnuack\\n\\ncahpwtlozkm\\nghnpzfqmoxabi\\n\\nhvwgxesraocbpnf\\newvranqcpbghoxf\\npaxfnwoegrhcvub\\nqbrawpfscexngvho\\nahpxognlrvebwfc\\n\\nagqmwpvlb\\nwaklrnbqyp\\nblquawtp\\nqltabwp\\n\\nrymhgolkustipjxbzqnafe\\nfrzqjiuktbsxmahdepylg\\n\\nzricqdofygvtbsjmeu\\nvudjctzynegboiafqmrsx\\nrsbefoytcqgiuvzdjm\\nzucobitsgyjrfqemvd\\n\\ny\\nyc\\ntg\\nlavoqef\\nby\\n\\nfevykin\\nwxytrhqk\\n\\npxbclzknowyq\\nlybwkpcoqxn\\noknlpbxcyqw\\n\\nl\\nf\\ngixvd\\n\\nunogwsfavzkhi\\nsiohufnkzgavw\\nahitunswfvkzog\\ngvhknzuaisfow\\nukasozfihnwgv\\n\\nulhgwo\\nghluo\\nogulh\\noughl\\nlphuog\\n\\nnike\\nbkn\\n\\ngefzwrdjsqx\\nfegzsjwxrpqh\\n\\nlfknweboxyrpajmig\\ngkpafnieojybrwl\\niafesdyulrkpgnwbjo\\n\\nzjoiqtgpwxdach\\niajdhqucpxtzgl\\n\\nyhav\\nvnshac\\nhcav\\nhvw\\ncyvh\\n\\nhwz\\nwhz\\n\\ndhunracmzksvxopjgtbqi\\nvqhpowubyzirdksmgca\\n\\nckrhefz\\nrkvexdfzcbh\\nheczkrf\\n\\nrbsldt\\nqgr\\n\\na\\nea\\na\\n\\nwnadxkgehtpsv\\ngwnexkavshpd\\nbfkdpansvhewxg\\nkvtwdnsahpxge\\nxnhdpvekwgsa\\n\\nydajvctr\\ndrcejtgin\\n\\nkw\\ncbmj\\nl\\nt\\nn\\n\\ngyzlnp\\nzahsyu\\nrek\\n\\nvjdmhsorqw\\nwhdjoqvrms\\nrhsjqdmov\\nomdsqjrzhv\\n\\nrcxsgnluhtqey\\nldejuqpykrtc\\n\\nrylcqxt\\nwlgtzyrcf\\nyrltc\\nrclpyt\\n\\nfrke\\nkfe\\n\\nnchvxtqarsejld\\nrkhntaexcbqljod\\nqhdepzrxljtifcan\\n\\nuyfshgxzbqvrdwintjlmec\\noyrvdwtgeczsfbmluqih\\nkabdlqytwgfrhmuevczpsi\\n\\nguwmkrfyex\\nfxekmrygwu\\nwfgremukiyx\\naywegkrmxufl\\nwukygimrxfe\\n\\nm\\nm\\nm\\nm\\nm\\n\\nhbgnkqe\\nkhgn\\n\\nhngypzmd\\noixyanpdg\\n\\nqbdklpvhjaeif\\nkzaiglyjfpmeurn\\n\\nynsm\\nsmjn\\nnsyum\\n\\nmpcztqkydxifv\\nzdqfvxtmpcyk\\nzkcmxfpqvydt\\nyopktfnqrmvxdczw\\nmdckxypvztqf\\n\\nva\\nbvhg\\n\\nfe\\nef\\n\\nn\\nhpmqn\\nn\\ndn\\n\\nnjxazhtevsmlir\\ntxmsijvaezwn\\ntezacmwsvinxj\\n\\ngvzpbmeijyhaukflcrdqw\\nsivlhgumyzkdrjfeoxqtc\\n\\nouq\\nh\\n\\ncsxewy\\nkxoscmw\\nucnvwsxg\\nhfocysxmiwe\\nwcsmx\\n\\nretcxugsdwjnykm\\nsfhudnxoqwjktyzarc\\nrklvinxudpsbywtjc\\n\\ncwfizpyguatbodsqemxrjknlv\\nujikxwsmntcloyqgaebrzfdvp\\njreyubofkpdnzsimxwvgaqtlc\\nnuewfvmlidsatzqbkcjgorpyx\\n\\nycqolubpktxwshegafvm\\ndjnlhafsreuzgxkb\\n\\nodasxjtqcepgrzl\\njsoelxpqgtczam\\nqiajrhesdzoxfplcgt\\n\\nvnthkurzf\\nbnfpqutvekra\\n\\ngujxqsnitohp\\ntchxqjgoiu\\n\\nhgparlm\\nmjxghlqzp\\nfmlpahcg\\n\\ndeptkcyasiwgfonv\\nptqufxjhcyglrzdov\\n\\nawnxeshvrbcjm\\nxreswnhbcmvja\\naxvwnsejrmbhc\\nxajcmrnevhwbs\\nsjxhcbearmwnv\\n\\nwoystmzcbgrljqhxdiukn\\nmzhlbgcwjusnortdqky\\ntunrjlzmqosygbwhkcd\\n\\nagh\\nahg\\nagh\\nhga\\nhag\\n\\ncmzkthbquilgwypreno\\ntsmezpqlwkhrcginuo\\ngmniotwlpzyqceukrh\\nwztuikrglhqocnpme\\nekqchwogpliumrtzn\\n\\njqadntioypevlwcksmb\\nhymnfzcvtdaxsekrqijo\\ndvqmgiacknyoesjt\\n\\ncdnbkfzev\\nbfvdwcezk\\nkzeblcdvf\\nvfdkneczb\\nfdeovjczystkib\\n\\nrzc\\npma\\nzwvx\\nzyrlt\\n\\nlmwvudafhnczxibsgpjkreoq\\ndurlgqhmvpxofsiejwcbkzan\\nmieraklxftswzjbuocndvpqghy\\n\\nqlaxkbf\\nrfhyxtbkseaq\\nbxkqaf\\nfkxbaqn\\n\\nlpntzrufvskoqciaxhedw\\narsztnpofkxcqudilhewv\\nsrvlzcujywkenimafhtoqxp\\n\\nsnxwjqapfo\\nnwsfqxpajo\\nnpfqjowaxs\\nopjfxanwqs\\nsjaonwxqpf\\n\\ncswjquxv\\nuyecrkg\\nufjcl\\n\\nqjvzl\\njvqzl\\nlzjqv\\nqlvjz\\n\\nh\\nh\\n\\nmprvotcsgadybjfkqehz\\nbjsordtucqlgkhfzvepy\\nfsoqijpvhgkczybrted\\nyzsgkfhvcbjpeqtrdo\\ncjzdvkprbheysmofgqt\\n\\njzontimefb\\nldorvefxuatpj\\n\\ni\\nxi\\n\\nzhtkdvl\\npchznv\\njmryxuwgazvfh\\nlkdevczh\\n\\nsubt\\nutsb\\nfsuobt\\njutsb\\nutbjs\\n\\nn\\nn\\nn\\ndnk\\n\\nqkrfv\\nfqgvkseut\\nqvrfk\\n\\nw\\nx\\nn\\nn\\n\\nmkpoyfrngtwdcjlv\\nyprcuimjsz\\nrcyjzxphm\\npjecrmyx\\nipyramcqj\\n\\npuwnzsohkv\\nnsohwkuzvp\\nupnhokswvzx\\n\\nrmvjwzhx\\nkpxhqevglom\\nmzxfhbv\\nmhwjitfrvnx\\nmcusxhvwj\\n\\nvipkgth\\noskhetgp\\nzlqhnbdjwgurxapc\\n\\nvn\\nvna\\ngwvdn\\n\\nrugcbipvzow\\nuogrzcvpbwi\\n\\njwxuc\\nkrngvmypl\\njwxzi\\nqashtbedfco\\n\\nbzfyl\\nyzflb\\nfylbz\\nlyfzb\\nylfbz\\n\\nuhkvb\\nkjhulb\\nvbkhu\\n\\nandlzobvguqsk\\nnkgvqlzbu\\nklbiezughvmxnrt\\nbunkzgljvf\\nyvkgjpwzubln\\n\\nt\\nt\\n\\nbdrjpavtiqlhxuw\\npjmzbxidrtulcfw\\n\\nwqylp\\nmrhgfxsjcaltonedv\\nywbkul\\nikl\\n\\nhxpivszmbaodecnlurq\\ncedlpnibqmwxaghrszou\\nhunbrdzpsxleaitmqyco\\n\\npymewobv\\nveazgoy\\nyvoxle\\nyoufveix\\nsyegdvo\\n\\nogceirlsaqjtmvzdx\\nrtsaijxocelmzgdvq\\ndvrqjxizmgscteoal\\n\\njeupkmhcydwaz\\ndaykzechjpwmu\\numkaejhwydpzc\\naywkjphdzeucm\\nypdchmujekazw\\n\\nsuzacvgjnoi\\nevgsufjaitn\\nrqeanjskxbvfgiwu\\ndknubsaxgvji\\n\\nojxfyetcpdbglmwqunrsi\\nfjletcbrdsnviogpxwuq\\njcgprswxiaefdqnotlub\\nzfgjewrpldsioxcqntub\\nnxcgewpqolibrktujsfd\\n\\nvwh\\nhjvw\\nhvjw\\nhvwr\\nvhw\\n\\nmd\\nm\\nm\\nm\\n\\nxkpu\\nizfmrosjbd\\neywqt\\nxgak\\nhgn\\n\\nlayhskgxrpfnwqmdj\\nmlsxywoakrectnzgqdjf\\nfbsxnmuikqwrljgv\\n\\nrhcn\\nlon\\ndln\\npban\\nnhd\\n\\nuxwhl\\nhx\\n\\naesduycrgfmhjblnkzt\\njktlhwqioepzgcbnmda\\n\\ntbhfongxiudcrv\\nrqoyfnuxabjekl\\n\\najd\\nwjdmak\\njda\\njad\\n\\nghimtjly\\nhjtgilm\\nghixmjtpal\\njtmhilg\\nimhgtjluo\\n\\newpfam\\nepmwa\\nepwma\\newamp\\n\\ncslywuzkdg\\njfluyxgbsma\\nugysbl\\nytlqgaus\\nhsufgloxyr\\n\\neigjpobrlxnasvhquwy\\nnirbjslgwyxuoaqevhp\\nfpnsuxbleoajwyhgirvq\\nayinxhubgvweprqljso\\n\\nandu\\nsguand\\n\\nembqxktgpduyjia\\nqtjagiydempukxb\\naxswpjdgqbumyteik\\nkgaexydbupqtjmi\\nuqjbixkdptgmeya\\n\\nuxzwnlgyareost\\nnesygtowzuralx\\nlnguxsaoyzwtre\\n\\nthfobmluspeiwxygv\\nibtfgsyouvxdpelh\\ntxqerhuolbpsgfyvi\\noehxfsmbiuvpyltg\\npfoiuhlebvyxwdgst\\n\\ne\\nke\\ne\\ne\\n\\nzhxyc\\nhczxy\\nohzycx\\n\\nsylzvbx\\nsxzvlyb\\nvltysxbz\\nylbxzsvf\\n\\nzxkt\\nxztk\\n\\nmnctogxvwkseh\\nowrsadeqmhtykcg\\nmatkscwo\\nmcwpzbofs\\n\\nwvpybgulfrhnixjka\\nrgawyujfcsveki\\n\\nhbmljqxrtza\\nxmutqzahl\\nzaqlmhxtu\\nhziqlatxumc\\n\\nsjwq\\nqjws\\nwqjs\\njqsw\\n\\nithgcoaed\\nqtgsdohec\\n\\npuidogmhysnk\\npgszdunhyiomk\\ngmyivhnksqodpt\\n\\nionrt\\nyhvsiud\\n\\nxtzrljypsknh\\njkhztpylxnrs\\nyxlkrshtpnjz\\n\\nveyflgkws\\njwukvfeshmr\\nevfwksdz\\nfekvsw\\nvkfsew\\n\\nqbercltdyiwzpfghujxa\\nbvzlratfchxyijqewpdgu\\nhfrtqbiayzdxpwujlcge\\nejhbpuwytgixrdzaflqc\\nphrjagczeiyxwdufltbq\\n\\nchxzbkemyjgqvltsardoi\\nosykewcidjtuvzpbqhg\\nibqozcsvygmkedfjhtn\\n\\nczgih\\nzcg\\n\\ndpulzxtweoafsvnrykqg\\nzoasklutxwnqevyfgrd\\nvnrequfolxgtzsdawyk\\nynurtkjfogvdqzlewsax\\nkuydfznpatgvrelxoqws\\n\\nfmpeunzs\\nsumpfzn\\nfzpmnus\\n\\nsadewmz\\nsldnwe\\nwjduetyxsh\\n\\nno\\nou\\noua\\nybwdoe\\n\\netjdmfhkvupsgob\\nzjvatuxrhomingds\\n\\nwcrpzale\\nctyzwdsulbvmexo\\nikecwnzlg\\nngjwczlae\\nzlqhwgecj\\n\\np\\np\\np\\nv\\n\\nx\\ni\\np\\nx\\nbgckq\\n\\nhuty\\nyatu\\ncytrqju\\nwtyu\\n\\nk\\nk\\ns\\n\\nti\\nut\\nut\\n\\nltyxj\\nvaicrwnzb\\nyegjqp\\nmjogk\\n\\nifyupadt\\nidutaypf\\n\\ncivyufabow\\noafw\\neawtof\\n\\ntdxrcuvqmaoblhsjfynpwigkze\\nhqfymskzljrtexwugbnacpiov\\nnymlpweztcgrhjqfuiasbkxvo\\nqxcponmlbwtvazuykfsegjrih\\nvuaoelhfcyztjpxingmbkqsrw\\n\\nzqtkcomfdyrs\\nqokdtmzyawfrlc\\nqdmzejfctykor\\n\\nqgkmhvx\\nvnqmkxlh\\nkqvhxmre\\n\\naklnbydq\\ndqynjokaebzlu\\nkblqrdany\\n\\nznaepc\\nuthvilcm\\ncpbda\\n\\ncep\\nwgecdbpz\\npce\\npce\\n\\nqgtaelxzvnfr\\nvwlquxfbmhgdjzir\\nfqvryplogztx\\nkrfvglqszx\\n\\nxebsp\\nvohgfurnmsa\\ndqws\\nysl\\neqyps\\n\\nfxnlgkjizbsupyt\\naixlkfuwezbgcpsnh\\n\\nfliogmexzuqc\\nygxqvoeklitmfu\\niofxzueqmgl\\nqouifehxalmg\\noefiuqjgdmplx\\n\\ncjqnrvu\\ncquvrn\\nvqnur\\nqvrnu\\nqwsvruxnmf\\n\\nesxbjiwnya\\nibwnjsxyae\\nabienjwys\\nijwaybnsep\\nybeiasjnw\\n\\nf\\nf\\nf\\nf\\nj\\n\\ndwfgkqohamebnzly\\nvhyokaeqpufjdlb\\nayhlqfbnoedkg\\n\\ng\\nijur\\nad\\n\\noxpwmzunkjved\\ndgwxejtpzn\\nexnrwizdpljhfy\\nekzxwdjnpt\\n\\njghbztdkypsovc\\narefyzdnlhwpoivbsqj\\n\\ncwvpyqnhjmsblikorx\\nywjmvfxnbqoitdls\\ngyuloqbznavmijsxw\\n\\ntv\\nvt\\nvt\\n\\ncxvwzdbpsqnhoa\\nthoqpsvmaxcbkzlin\\nanecpvqohsxzb\\nxscpvobnaqhz\\n\\naxnrzgyvepoif\\nzovgfipynhr\\ngrodvzhinfpy\\nrnipgfojyhvz\\n\\npbmhlxwqfezrscdtykn\\ncfmbkwtnlryzqehxpsd\\nqrbylwtdnsckzefxhmp\\n\\nzkqw\\nwzkq\\njqwxzk\\n\\nvrdnmyfspbzlxw\\nizepalkytdnfcxjwhg\\nnxuwdfqzlyp\\n\\nbc\\ncb\\n\\nbf\\nfb\\nbfh\\nefbq\\n\\namw\\nmpa\\nmaw\\n\\nbqwtvl\\nvlzwtq\\nytlqv\\nzvlqtb\\ntlqxvc\\n\\nlbhxpnkiurmwates\\nfuwrqbeztjmlpsnxaik\\n\\njpwm\\nzwljp\\njwmp\\n\\nzep\\ncep\\npe\\n\\nmzx\\nzmx\\nxzbck\\n\\ndlmvbnupathgjsf\\nblknfsvtjpgmhdu\\npnufdgmhsqtbljv\\nijeoufmnchvysrlwzpgtdb\\nxvpudhgsjmlnbtkf\\n\\ncnyuhkmbswzilxovjp\\nybjtdewvsrfcznalqhgiku\\n\\nbi\\nrzla\\nj\\n\\ngraezckvnqx\\nagwzkcqnxre\\ngrzxeckaqn\\nghercxazknq\\nrzqakdgexcns\\n\\nsfe\\nb\\nf\\nxpjtuand\\nboies\\n\\nkgjfzqlwic\\nrkcdstgp\\n\\nfgsndtox\\nzodnyxlgts\\notxdsgn\\nnxtfgodis\\n\\nzwrtohqdey\\nteqwry\\npvytwegf\\nltioweyrc\\nmyeaxntuw\\n\\nbw\\nbw\\nbw\\nbw\\nfbw\\n\\no\\ngh\\n\\nowadmhy\\nadmhoyw\\nwmohyda\\n\\nnywib\\nceulqpzh\\n\\nzs\\nsz\\nzs\\nzsko\\nszr\\n\\nizaqf\\nuijrf\\ninfgq\\n\\nw\\nqw\\nm\\nbzr\\no\\n\\nemavls\\nhbxwektuqjo\\n\\nqrhspwbulzkaxdm\\nauwbhyxlkdvq\\n\\nturdsw\\nutxrwsd\\nrtundsw\\nusdtrjwo\\nutdowrs\\n\\ngjro\\ngojm\\n\\nxhnilqdp\\nienxaovqldkhg\\n\\nrgjonh\\nnvokcjqrt\\nargnjo\\n\\njmgchqb\\njivdabluqf\\n\\nylmicxtahwqfvukneopgzsbrdj\\nhbzpeaqvlxgotsjkwmfndyiruc\\n\\np\\nrop\\n\\ndelgcpurwxniqohkvyas\\ngurxclnvdwbikoqezs\\nrnxewiqvgktmosfjd\\n\\ntigwskmhvupobfnydxcre\\nqwmdoycrhvsjptzxngbikue\\nyvmetfcbahuklxpdgowrisn\\n\\nwsy\\nwys\\nsyjw\\nwys\\nyws\\n\\nsrwpt\\nwtsrp\\n\\nlhafkqwscv\\naklhcvrsqfw\\nvfsqckalwh\\nhlnqskcfvwa\\nklfwvzsdpacmhq\\n\\nehbzglfvtdxpkicy\\ndl\\njnmdl\\nwdsl\\n\\nrew\\nrek\\nehi\\nilehwkm\\naxe\\n\\nbl\\nhzlgey\\n\\niboqgtdxprunz\\nuonzipxrgqbtd\\n\\no\\no\\n\\nbldk\\nbkpl\\nfklbc\\n\\nynmuedqwhoktxprcavz\\nfshlwuznoymekqtprdv\\n\\nhjtwrzo\\nrowhztj\\nwuxrojhzt\\nozjhrtw\\nhotzwjr\\n\\nsenxaq\\nbaen\\najmne\\ngaielnd\\nhtfnpkuvwoae\\n\\njoklzmcuyg\\nuyzrifcmlkgsj\\nkyoumjcagblz\\nuytcgqklzjm\\n\\nujvi\\nijuv\\nepmijuv\\nviju\\n\\ntahxdeq\\ndazexot\\nbaelxdq\\npwexdgvyiukjcaf\\nedrnamzx\\n\\nzxqslwyh\\nshgyqlwxaz\\n\\nxbs\\nxbs\\nbsx\\n\\nkwlhvxy\\nkqwvlyxh\\nklvxwyqh\\nhxlkwvyq\\nkylwpvhxd\\n\\nkoznivas\\nbasiozvkn\\novzkluniash\\nksnxcavioz\\n\\ng\\ng\\ng\\ng\\nshin\\n\\ne\\nqtvo\\nac\\nksw\\nae\\n\\npay\\nnau\\na\\n\\nczkmwrvefultigxjhdqaopsnby\\nflqrbdxungowzkmjsyepvhitca\\n\\nymw\\nvurft\\n\\nwqpgys\\nywsq\\nqswy\\nqsyew\\nywsq\\n\\nndmo\\nfdoznkmw\\nhmuzndo\\nmtqdrnyo\\nuwfomnd\\n\\npktnzsqhyvmaejclwuor\\njwznystlkmqcraeovhup\\nvuwmteknjqohylazsrcp\\n\\nk\\nk\\nk\\nokxe\\n\\nfjilbxs\\nib\\nbi\\niqb\\nibeq\\n\\ngjlyop\\nopglehyztj\\njpclgymno\\ndopglymwj\\ngojplrbcy\\n\\nnuygowpxetsahrv\\njgtpyhruwonexq\\nrlepnuikhgybxwot\\nsvnygeuroxhzptqw\\n\\nwkies\\neisqwk\\nkisew\\neiwks\\ngxbkwsiep\\n\\noj\\njoe\\noj\\njo\\noj\\n\\ngtzunomec\\ncezutnko\\ntunzeco\\ncuoftneazk\\n\\nvpifjqnbcuaelxzgdwos\\ngfsyuwzclexopjvimqabd\\n\\nnpaxeizolfrygctvw\\nrgtpxwicvafozenl\\n\\ne\\ne\\np\\nt\\ne\\n\\nohiaqmdktxnbpwlc\\niqcopmavhwxbgnl\\nbhqaoiwxlpmcnzy\\noxhwifeapuncblrmq\\n\\nwghbsijofevcu\\nqtlmkday\\nxlrznmp\\n\\nzbrjh\\nrzbjh\\nvebhzr\\nklrzhb\\nrjbhznl\\n\\nkcgzmvfrxebiautyohdwq\\nthdkgwzymrafbxecqiovus\\nrgtwzvocydiafmkqubehx\\n\\ni\\nry\\nn\\nxgscp\\n\\nkzjngd\\nrdmwgnujzok\\n\\ndjpivm\\nmdipjv\\nmlvdjip\\n\\nilbdjmvfhyzxcqwuspn\\nlichmuxnzpqsyvwbfj\\numnvlbiwqsfchxpzyj\\nuylzhpvfqbscijxmwn\\nclwjnihuyzpmqbxsfv\\n\\no\\no\\nfo\\npon\\n\\naowpk\\nzg\\ndt\\nuc\\nu\\n\\nymhiouqp\\nlkyoqi\\nywtsvqio\\nlnmyoiq\\n\\nydbhigntrexvkua\\nurlaigkqnydwxhb\\n\\nnfro\\nz\\njz\\n\\nojsag\\ngajso\\ngjsao\\njhsog\\n\\nt\\nt\\ny\\nh\\n\\njieqmryxv\\nxqvimey\\numyqveix\\nvtedmnxliqyf\\n\\ntmd\\ntdm\\ndtm\\nmkdt\\nhmdt\\n\\npx\\ngwruq\\npz\\n\\ntejofhqklimp\\nthojpkfgelwmrq\\n\\ntseirdkyqvcghwju\\ntjhycvgilezdws\\n\\nroqbndl\\nrdql\\nqlrd\\nlqremd\\n\\nqvgunystzpckrwifmxdolajehb\\nbgtixcwloydzqjskvnfmpeurah\\n\\nsoviern\\nrlakxngecptvsz\\nnvdsre\\n\\ngzkoiysxl\\nvjrlmtpbsceozhauwx\\nkfnqdzolsx\\n\\nkwzaqnipgxfhoy\\nhanwlofgqxpzk\\nxqngazkwphof\\npqwkfghaoxzn\\nqwnfgpakxhzo\\n\\nzhurktfoqmlbnx\\nmhlxorzbntufqk\\nqbzklhnurmotfx\\n\\ngezmci\\noecmg\\n\\npcyteovnsz\\ndptlfuzh\\n\\nroxjhkng\\nxonksrad\\nrxnikos\\n\\nvbgmsrecxpj\\nsrcjxmbgep\\nrbgsxcepjkmq\\npjgcmzbsrxe\\n\\ngkvwndflryjshmbqxtpizuocea\\nfwndvekqtzployghijsmruabx\\n\\ndcxtogbifek\\nifkdgoxbc\\n\\nsrmqlnhbwv\\nliwsqzvtn\\nwgeoqvpfs\\nwkyqvsacd\\n\\nyswarofhdmqclxkgut\\ndaxhzkgumjysrlwq\\nqfamswzyiglxdruhk\\nvsnwxadlhrbgqmuyk\\n\\nrxwzkmd\\nkwzx\\nqawokzlxe\\nxmdnfkwz\\n\\nexo\\nxvqod\\ncv\\npnrkmywh\\nuztea\\n\\nma\\nma\\nqamfr\\nam\\n\\nnksp\\nkvpn\\npkn\\nnkvp\\nnkp\\n\\npwlvdsagy\\nislyawu\\n\\nsgbnwulekhpmy\\nmjgqeyshpbwuln\\nyubghpanecmszwlv\\neuwohbysqngptlmx\\n\\ngs\\ne\\nkas\\na\\nmd\\n\\ni\\nx\\nbl\\n\\nvishqyrzgmpbeuldj\\ngwcpvnskbftudyorj\\n\\nueswlatkopc\\nwbeosclpktau\\nlcpvaswokuet\\nltkupsmeawoc\\n\\niwtvopbgyc\\nwidjykopv\\nivowyp\\niwyvhop\\n\\nbfnwdumyozhpxre\\nzhweumdnpbofy\\ndcsobyuhfntpmzwe\\n\\nzrlaspbhty\\noyhrftzbslap\\nysztbhlapr\\ntszhpbayrl\\n\\nwbgxh\\ngnhwxcb\\nwxbhg\\ngxhwb\\ngxbwh\\n\\nngribvdawujskcmfx\\nrvskbgiwjxuca\\nwiyvgcsbjxkrua\\n\\nifstrq\\nfk\\n\\nb\\nb\\nb\\nu\\n\\nhpqy\\nwjplyq\\n\\nzwkfgbsmedluyot\\nfdtrhsgeumk\\nvexgtudkshfim\\neutigskmdrf\\n\\nimljkdnzpx\\njqwknpxlhmzd\\npmdyxgnjklz\\nrxbjmlnkzdpg\\nulxbmpdnzykj\\n\\nvetubnwdy\\nbnwatdvyou\\nzfwgvtdbnki\\ndlvewatnb\\n\\nuj\\notuj\\nuj\\n\\nifstpgrbcnywaxmkdzoqvh\\nqkbfhovrginxapzywdct\\nvyofbwcdginrkqtazhxp\\n\\nmvnaokugdshybwtr\\nntvsywuadrkmohgb\\n\\nfauo\\npnofxadk\\nsfoa\\nsofa\\n\\nakecpnjdwrztvlfbuhsiq\\njehrndzisqcauwlftkbpv\\nuawiskrjentfbcqlpdvhz\\ncrtpjbdalsviwfnhqezuk\\nncawkfdsqtrhpjzielvub\\n\\notazsfhc\\nltkacysow\\npvtomna\\ntacok\\n\\nmx\\nx\\nx\\nx\\nx\\n\\nhmoy\\nzmyhjuo\\nypmxohn\\nhoxym\\n\\ndm\\nmd\\ndm\\nmd\\n\\nuqvbhfdomlwtkxez\\nszaqwmlhytgvxkr\\nwmpzhxqktlv\\n\\nbtkpdjinsrmogfywzhlvecau\\nidylbvnopjsgrkfheuczawtm\\ntygvsizrwjneplkohcmafudb\\nwtvprskenjchmiyfuzglodba\\njwdafzcemrbsunotyglpihkv\\n\\ne\\nouxg\\nei\\nshp\\n\\nul\\nul\\nulrspe\\nlouy\\nuynlvo\\n\\nyibgqkf\\nuvcwx\\nmvxdohjlw\\n\\nq\\nz\\nz\\n\\norxgfiqznujyplsbadv\\ngtzieoxspqrvndjbylfu\\n\\nhmlqcujrysbgoentdp\\ndyjmrbtpuhgslncw\\nrmyfuhdgclnpsktjb\\nptucnyhsmlwrbgjd\\nwrhnldscjeyupmtgb\\n\\nsowieczubgx\\nfirsgewzpbo\\n\\ntxeo\\nexot\\noext\\noxte\\notxe\\n\\nontlbzyekruhpscwqvaxmdj\\nahrtijxdepnokymcsgwuf\\n\\nftsraxmwogvnkdbzqiyhju\\nylsdhonjzrfwmqukc\\n\\nleiupzardbfsv\\ndzuwlesifrbp\\nldiupzersfb\\nfupwslrzbedi\\n\\njtdp\\ndajg\\n\\njpglzoriafexks\\ngpaozketlcixs\\n\\nbutisvecnfplqmygworax\\njrhpbwztcveifamlyqxdung\\n\\nr\\nr\\nr\\nzr\\n\\neyniaztvgdrl\\ndalgonxbiecywthzvr\\ndtzrgenvliya\\n\\nakzferolcmstgby\\nkmcagsbteyrlfzo\\naoktgslmcrzbfye\\n\\njqigpeydwl\\nmkeaxqcudzgvfhb\\n\\nayhgbfzerjxd\\nrnzfaxy\\nwyzaxnrf\\nycazxfrw\\nayzxrf\\n\\njgmkwtnizxrcbvfqhyeal\\nmwatrngvlezckqfiybhjx\\nvmrwyqnigzhtjfckxaeb\\nwkehnqrtcjigzxavbfym\\nvrczmohgtfbnaejxqiwyk\\n\\nc\\nc\\nc\\nc\\n\\nidx\\nid\\nid\\n\\nzaipnjbsxkg\\nxevnfipkjgb\\nujxldqcnbhi\\n\\nhco\\nco\\n\\nztlrica\\nktneixcrs\\n\\nhlutcdsgoj\\nmwlypnzbqafvxkire\\n\\nlznhjwgsiv\\nwricunaxj\\n\\nfdqgyzopwlen\\nrkvt\\n\\nvy\\ngy\\n\\nihbpfsx\\npshixfb\\nsifxhpb\\n\\nbegmqirvflkxuyanp\\ndmpvhfbnaxsuloqitjy\\n\\nuwamykhsnbfzxielpdo\\ncxzswhvtabupmqjlekond\\n\\ngisqpjrubx\\nrjbiuqxspg\\ngqpirxbsju\\n\\nu\\nu\\nv\\nu\\n\\ngnjqsoha\\nqgandhlyrs\\nsnhqvlrabg\\n\\nvo\\nvo\\nov\\nvo\\n\\niudvwxpmtac\\nowlyxsangim\\nhbdrxmwaei\\nwjimax\\n\\nxmubte\\nyuogxa\\n\\nnwkurtxjcpqozmhgsvbe\\nchrmvakuyxtowqpgzbej\\n\\nmanbesvzpyt\\ndgtwazpqjmbnr\\nitfkoupbhlcnax\\n\\nomhinsxf\\nlnmdoix\\neimgrno\\nhyomidn\\nnmjodi\\n\\nqmpn\\nripmn\\n\\nwfm\\nwmf\\nmwf\\nmfw\\nfwm\\n\\nuaoxphg\\nphoxb\\n\\nbtfprm\\nztmrf\\nmrft\\nramft\\ntmrezfa\\n\\nuaznory\\nzyaiourn\\nnouryaz\\ncoszugmanyr\\nlqazryonu\\n\\nvqlswifmcg\\nwzuclnxsvt\\n\\neh\\neh\\nhe\\n\\nsiuhfpb\\niuhfs\\n\\nyfhciqlnwpgemoxktas\\nticjauwfsygepqnhx\\n\\nndmhwtub\\nzbagktxiulnwh\\n\\ntxdikm\\nboldxtiqmf\\ndxtimj\\n\\nwvr\\nvwrb\\nwrv\\n\\nutyjachpfordvw\\nbenvkudcfta\\nvduqiftcgsa\\nfcuatdxv\\n\\ndoivj\\njiv\\nvjkpyi\\njvi\\ndijv\\n\\nmhyn\\nmxngywh\\nyjhmn\\ndmynhulkacb\\n\\nhpidlbezkwqtr\\ndgtaflrnyscm\\n\\nosqeajcvduwhzrtkl\\nzcaevujrqsdolgwkyt\\nuokqnrdjaecvwtlzs\\n\\novsbxzgaju\\nvliydjht\\ndvjt\\n\\nstlxuabmcwqkodevrhf\\najskvtpmlicqewbhuzfd\\n\\ng\\ncg\\nezfo\\n\\nzqfmuxlnhkgdpvwrtjio\\nrkjqvomtguhpiwfzxnld\\nzfgxrclnimokhvpjdutwq\\ntgkxfqrnhdzowpvijlmu\\n\\nni\\nqn\\nnq\\n\\nsn\\nqn\\nfdn\\nqn\\nhson\\n\\ntplicyhxqfujbkzv\\nqfbzvwkuycsa\\nvzqnbfcokyuda\\n\\napoy\\nplfxotkv\\niphsqjorged\\n\\nravyhbsfelgcmzponqwikj\\nbitfjzwakhmvxngsoepcyrlq\\ncevpwyrnlobjsfziagkhmq\\nmswnezcpklfrjqgiyovabdh\\ncijelkwpbnhrsmzofygavq\\n\\nsqvnuedcytaxohplzf\\ncekhbgwadpmyofslxq\\n\\ngclfnxakjzsw\\nwzjcnsgka\\nciwzsganjk\\naspicokjgnwz\\n\\nqrabg\\najbgmw\\nyabg\\nvgsrba\\nhcgtbya\\n\\nxarbuvi\\nivaku\\nkiuav\\nvzgxiah\\nflsivaj\\n\\nckodrthljgyfwm\\nmgytohfxnrdkjbvlwc\\ncfdwmjoltkshrgy\\nyhwmrldfucogkjt\\nfmctpgwydhkajlro\\n\\nqvibocelnsdyzfkjhpuxmtrg\\nzgdksnoypqebifltcrjvuxmh\\ngiocmuefxsprhdjkzntvqlyb\\n\\nxkcrlwomygs\\ngrluckhsanomxwf\\nsriokwlmcyxg\\nkxgirswtcvlom\\n\\nbudr\\nbrdu\\ndibur\\nurbd\\n\\no\\no\\n\\np\\np\\np\\np\\n\\nwnydf\\nwrptghizjqk\\n\\nwnbdmltxcq\\ndfcwl\\n\\nksaveflzdxqocbgyjp\\nbcxavldgysqozpkjfe\\nozpvselaqgbdycjxfk\\nclpzdoebvqjgaskxfy\\nqykodlgvzjaxspfceb\\n\\nnrmdjstqozklxvcyag\\nejzwbu\\n\\nkfgijmd\\nzmgjdikf\\njgimfdk\\nijfgkmdz\\nsmbrfkxdwgeij\\n\\nyhtuxnfcq\\ntcyufhnxq\\nhfuxytcqn\\nnqtufyxch\\n\\nrlhzknoiuycefpmvxqbg\\nnbvgfexmqikpyhruo\\nhqkgnvyieomubfxpr\\n\\nbjyadnftcsxqk\\nlpfbvzcsumerho\\nwctsbf\\n\\niyamec\\nmyeibctka\\negyicam\\n\\nac\\npvaqdb\\na\\nau\\n\\ngiltsum\\nixyhncbjqped\\n\\ncinzuvkystgfodr\\nrksphwcfxdgey\\nxrdjkygcsfq\\nbfmdecpysrkg\\ngcrdyslfk\\n\\nayqpgucwedftoxjk\\neoagwdtkfqlypjuc\\n\\nktysxp\\nsptx\\nqpxst\\nptsqx\\n\\nuvclismeajkpbzgqwn\\naicbqfzvlnuegpm\\nglecvmpzrnioudaq\\nkanmveflzpcgyuqi\\n\\nvklag\\nglv\\nlvg\\nlgv\\nvgl\\n\\ntyuh\\nhut\\nthu\\nhtu\\nthu\\n\\neyipwtfuhxzalmdgrs\\nwhfcvbquxgepn\\n\\ntg\\nge\\ng\\n\\nvk\\nuatvn\\nmzv\\n\\njhfmpux\\nmhjquxkp\\n\\ngzyxjwfb\\ngrzfxmwybj\\ncywfjpxztgb\\n\\nudrye\\neqdyr\\nyerd\\neryd\\n\\nkwdoynribhpsqmlgvuje\\ngunbjywvmheirdqpok\\ndnqeivoptrkwuyjhmg\\n\\nczvmpr\\nsxpum\\n\\nqlktsn\\ntkclq\\nsbqlkwt\\nluetjiqpk\\nlcvtqsk\\n\\nrotvsfwelbnj\\nfwbqmaolesn\\nqbfwegzislpnoc\\nnzoelswfpab\\n\\nwsecbml\\nsclabmwe\\nezpsidclwtmbgvr\\nmcelawsb\\n\\nngz\\nzg\\ngz\\nzg\\ngz\\n\\nxqjwnaiyb\\njayxibqngw\\nqinjwxbay\\nnbaiwyxqj\\njniaxqwyb\\n\\nhktywl\\nhtwlyk\\nkytwlh\\n\\nymbeahldgz\\npjaoszx\\n\\nb\\nb\\nbz\\nkb\\n\\ngvdcqp\\nqpvyrcdlk\\n\\nnij\\njfiub\\njtieyxl\\nmnij\\nimvju\\n\\nqh\\nhq\\nhq\\nhq\\n\\ntez\\nzet\\netz\\netz\\n\\nwz\\nwz\\n\\nxc\\njvxc\\nxpzc\\nrgumxc\\nxc\\n\\nnizsgkvylw\\nngylivwzks\\nylgsiznvkw\\nilgyvsankzw\\nilzywsnkgv\\n\\nemhpiwfyung\\nqlzkob\\nldjx\\nxvat\\n\\nluzfaswdyj\\njsdyuzlafw\\nljdsafzuwy\\nyusdjwzfal\\ndsyjwuzafl\\n\\nuioafnlegsvjdxphr\\nlnfrjdpehvsxguoa\\nnajruefdlxogvhsp\\n\\ngumjphl\\nmplchdjuw\\nhmjrlup\\njmpgulh\\n\\nq\\nq\\nq\\nq\\nq\\n\\nfeyimktsugrq\\nqygsrtlpmfkeui\\nsfkmrgqyitue\\n\\nxpklzsyodcnhrjq\\nxcznojsdpqhrlky\\n\\nbtmsc\\nmtscbv\\ncsmtb\\ntmbcsx\\nmbxtsc\\n\\ndvrfumay\\nymafr\\nmrifya\\nykrmaf\\n\\ndo\\nd\\nandk\\ndcp\\nd\\n\\nglhmjykfaznvrd\\nbvmijshzga\\nvmjuqazhgpx\\nvoczhgamj\\nwjhizgqavms\\n\\nvoilgtup\\n\\nvrphtmc\\nbgfkjvad\\n\\nbxkfi\\nkixbf\\nxfkbi\\nxfikb\\nxfkbi\\n\\nlfixvpozghcauk\\nplgixmzukcovh\\nhyruilocxgkztqv\\nuglxkaihcozv\\n\\navgptdmi\\ngydpvt\\ndptawvu\\nrvtdopxlqs\\n\\nrsmglpt\\ngpmnlthr\\n\\ntqmeukoia\\nkamiout\\nmqwauekov\\nmacoryuk\\nnujbskgapmlo\\n\\nndjrglykwoi\\njrwkdnolygi\\nownkidlryjg\\n\\nkwheact\\ntxukwjcgbhar\\nwhgotjk\\nkzhtw\\nlmvynhptdqkifw\\n\\nodkzwylprhvn\\npwozvnydrh\\nzdhnpryowv\\n\\ncrni\\nqdnkiou\\ngbwhyasjx\\n\\nbxitsamogcq\\nerbxklyhvtczu\\n\\nswrfxdpjhly\\npwdjkvfyxrshl\\nsxehqrtwpdamnyjzolbui\\ngpdryslhwxcj\\n\\nfhldcksrpyi\\nqfejshrcat\\nwsmrvcnogxh\\n\\nvwacyofjtilrxngp\\notylvxpfwgcnjria\\nxojfignyrtlpwvca\\n\\nqvz\\nozm\\n\\nmsrdwqahutefvxy\\nrjmyotiefuh\\nltyrmenbzjuhf\\nfelbyputmhr\\n\\nriyzo\\nkzroyuwi\\nyirozp\\nyoirz\\nroiyz\\n\\nrqjz\\nvjrq\\nqrj\\nprqj\\nzqjr\\n\\nvdx\\nxvd\\nxdvu\\nvdx\\n\\nxeauhryviqg\\nwpxkufzsjmctlnybd\\n\\nhbzwdlno\\ntmrj\\nnp\\nlqfx\\nkuygescvia\\n\\niqph\\nihpq\\npqhi\\nihqp\\nqpih\\n\\nlsfwxmpkgqzvhecoay\\ngqfszwakhvymptcexol\\ncpaxwlzkfqvhsgemyo\\nlghfwvcmzxpokeysaq\\n\\ntgmpafqbuds\\nhspdfabuqgctm\\ntpcubdaqsvgm\\nmxqbktspoaujd\\n\\nxktgfvyprhndme\\nvntmyskfegprid\\ndsvpfmnkygtre\\nydmvpkfretng\\n\\nnpvgjzuo\\nmwlackhs\\n\\ngyj\\nmyk\\n\\nw\\nw\\nw\\nk\\nw\\n\\nsgrhv\\nrixdgjluf\\nrgs\\nrsbg\\n\\nkmiqobutwplfryxgeajhnz\\nylrtmpauodjnfvwgeixqz\\nextlfwjsirnmgyuqaopz\\n\\nvdngfjbwypio\\nsukyvfzpeqwthdxg\\nfyvrndgbwp\\nydwfvglp\\n\\nfhsi\\nhsbif\\n\\nfihzecojaqm\\njzchuomvwsqfr\\njzchoqtfm\\n\\nkqafdzcgphvbos\\nqbspzodfavhck\\nadfozhquktlcibspv\\nszhpfboagdcqkv\\n\\ntmeb\\ntakbe\\n\\nymrhgdo\\nypgzhmltd\\nfdbymgshcx\\nnghyzldm\\n\\nbxgm\\ngmxb\\nmxgb\\ngxbm\\nxbmvg\\n\\nfep\\nlnp\\ntrjim\\ndauy\\nfplk\\n\\nudhzexv\\ndhmezvx\\nqdxylbhvzw\\nzveduxcht\\n\\nwgvhaokesjirly\\nosrewigqfdyvzk\\nkupsxrimowgbe\\n\\nskzvhanpljbogdyxtiquw\\nxzgdwyjluhnbstopikaqv\\npasixghzovnjylbwudqkt\\n\\nwj\\nwj\\nwkj\\njw\\nwj\\n\\nnsmyxfhc\\nxcfymhsn\\nhxscmnyf\\ncfxsmnlyh\\n\\njpblgmiyunazcfd\\ntabnyfmupclzgd\\nesyvuphfgwbknodzcxlqa\\n\\nxkyqozefvgutmrw\\nrmhzwgeutoypx\\n\\nrzaxcemljnvo\\nkdwyqvohesitfb\\n\\nkfqrcezwn\\nqrnwkzcf\\nfrcnqwzk\\nfrnckvhzwq\\nkqzrcnfw\\n\\nfqux\\nqxuyfod\\nufxq\\nqxfu\\nqxuf\\n\\nztopdir\\nritpozd\\notrpizd\\nidpotzr\\n\\njzhngmufw\\nzguwhfj\\n\\nndxhmysbgcriqkewoztujva\\ncmtwbudvysekqaxizrojng\\nitncgkdyoaxswrqvmejzpbu\\nqyvcdusgwbomejtxznkira\\n\\nnik\\nyfi\\ni\\ni\\n\\nhpsdjo\\nhobps\\nohsp\\nshpo\\nkypshio\\n\\njbiyatwz\\nzbtagnrc\\nztnagb\\nbatz\\n\\nfvkurj\\nkfgjvru\\njukfrv\\nkvfujr\";","var global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar isCallable = require('../internals/is-callable');\nvar classof = require('../internals/classof-raw');\nvar regexpExec = require('../internals/regexp-exec');\n\nvar TypeError = global.TypeError;\n\n// `RegExpExec` abstract operation\n// https://tc39.es/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (isCallable(exec)) {\n    var result = call(exec, R, S);\n    if (result !== null) anObject(result);\n    return result;\n  }\n  if (classof(R) === 'RegExp') return call(regexpExec, R, S);\n  throw TypeError('RegExp#exec called on incompatible receiver');\n};\n","export default \"You come upon a very unusual sight; a group of programs here appear to be [dancing](https://www.youtube.com/watch?v=lyZQPjUT5B4&t=53).\\n\\nThere are sixteen programs in total, named `a` through `p`. They start by standing in a line: `a` stands in position `0`, `b` stands in position `1`, and so on until `p`, which stands in position `15`.\\n\\nThe programs' **dance** consists of a sequence of **dance moves**:\\n\\n- **Spin**, written `sX`, makes `X` programs move from the end to the front, but maintain their order otherwise. (For example, `s3` on `abcde` produces `cdeab`).\\n- **Exchange**, written `xA/B`, makes the programs at positions `A` and `B` swap places.\\n- **Partner**, written `pA/B`, makes the programs named `A` and `B` swap places.\\n\\nFor example, with only five programs standing in a line (`abcde`), they could do the following dance:\\n\\n- `s1`, a spin of size `1`: `eabcd`.\\n- `x3/4`, swapping the last two programs: `eabdc`.\\n- `pe/b`, swapping programs `e` and `b`: `baedc`.\\n\\nAfter finishing their dance, the programs end up in order `baedc`.\\n\\nYou watch the dance for a while and record their dance moves (your puzzle input). **In what order are the programs standing** after their dance?\\n\\n[comment]: <> (PART 2)\\n\\n\\nNow that you're starting to get a feel for the dance moves, you turn your attention to **the dance as a whole**.\\n\\nKeeping the positions they ended up in from their previous dance, the programs perform it again and again: including the first dance, a total of **one billion** (`1000000000`) times.\\n\\nIn the example above, their second dance would **begin** with the order `baedc`, and use the same dance moves:\\n\\n- `s1`, a spin of size `1`: `cbaed`.\\n- `x3/4`, swapping the last two programs: `cbade`.\\n- `pe/b`, swapping programs `e` and `b`: `ceadb`.\\n\\n**In what order are the programs standing** after their billion dances?\";","export default \"../.. => ..#/#.#/###\\n#./.. => .#./#../###\\n##/.. => #.#/#.#/..#\\n.#/#. => .##/..#/#..\\n##/#. => #../#.#/#..\\n##/## => #.#/.#./#..\\n.../.../... => ####/##../#.../#...\\n#../.../... => ##.#/####/.#../....\\n.#./.../... => ...#/...#/#.../.##.\\n##./.../... => ###./#.##/#..#/...#\\n#.#/.../... => ##.#/###./.#.#/##..\\n###/.../... => .###/#..#/..##/.##.\\n.#./#../... => ####/#..#/#..#/#..#\\n##./#../... => #.##/###./##../#...\\n..#/#../... => ..##/.#.#/..#./.###\\n#.#/#../... => .##./.#../..#./###.\\n.##/#../... => ####/..../###./###.\\n###/#../... => .#.#/.###/##.#/#..#\\n.../.#./... => ..../.#../.##./..#.\\n#../.#./... => #.##/..#./####/#.##\\n.#./.#./... => .#.#/.###/#.#./.#.#\\n##./.#./... => #..#/#.#./...#/.###\\n#.#/.#./... => .##./#..#/####/.###\\n###/.#./... => #.../..../.#.#/##..\\n.#./##./... => #..#/..##/.##./.#.#\\n##./##./... => ..##/#..#/####/###.\\n..#/##./... => ####/.#.#/#.##/#.##\\n#.#/##./... => .###/...#/#.../...#\\n.##/##./... => ..##/.#.#/#.../##.#\\n###/##./... => ##../..#./..#./#...\\n.../#.#/... => .#.#/##../#..#/.#.#\\n#../#.#/... => #.##/...#/##../...#\\n.#./#.#/... => #.../..##/#..#/.##.\\n##./#.#/... => .##./..##/.#../..#.\\n#.#/#.#/... => .#../#..#/#.#./....\\n###/#.#/... => ##.#/..##/##../#...\\n.../###/... => #.../..#./##../#.##\\n#../###/... => ..#./#.../##../.##.\\n.#./###/... => ###./.#.#/..##/##.#\\n##./###/... => ##.#/#.../##.#/#.#.\\n#.#/###/... => ..##/...#/##../#..#\\n###/###/... => ##.#/.###/...#/#..#\\n..#/.../#.. => .##./#.##/..#./####\\n#.#/.../#.. => ..#./###./#.../##.#\\n.##/.../#.. => ...#/...#/.#../.###\\n###/.../#.. => .##./.#../##../#.#.\\n.##/#../#.. => ####/..##/#.../##..\\n###/#../#.. => #.../#..#/####/##..\\n..#/.#./#.. => .##./##.#/.#../###.\\n#.#/.#./#.. => ..../.###/###./.#.#\\n.##/.#./#.. => #.##/#..#/###./..#.\\n###/.#./#.. => #.../..#./##../.#.#\\n.##/##./#.. => .##./.#.#/#..#/#..#\\n###/##./#.. => .#../.#.#/#..#/....\\n#../..#/#.. => ####/..##/..##/.###\\n.#./..#/#.. => ###./.###/..#./##.#\\n##./..#/#.. => .###/####/#.../#.##\\n#.#/..#/#.. => #.##/#..#/.#.#/...#\\n.##/..#/#.. => #.../##../..##/##.#\\n###/..#/#.. => ###./##.#/#.../.#..\\n#../#.#/#.. => #.#./#.../##../..#.\\n.#./#.#/#.. => .###/#.#./...#/##.#\\n##./#.#/#.. => .#../#.##/##.#/#.#.\\n..#/#.#/#.. => .#../#..#/.#../.#.#\\n#.#/#.#/#.. => .#../.##./..../..#.\\n.##/#.#/#.. => .##./.#../####/#.##\\n###/#.#/#.. => ..#./##../##../#.#.\\n#../.##/#.. => #.##/.##./..#./..##\\n.#./.##/#.. => ###./#.#./#.../###.\\n##./.##/#.. => ####/#.../#.../#.#.\\n#.#/.##/#.. => .###/#..#/###./#..#\\n.##/.##/#.. => #.../####/###./###.\\n###/.##/#.. => .#../.#.#/##../.#..\\n#../###/#.. => ..#./.##./.###/##..\\n.#./###/#.. => ####/.##./####/....\\n##./###/#.. => #.../#.../#.##/.##.\\n..#/###/#.. => .#.#/.###/...#/....\\n#.#/###/#.. => ###./..##/.#../#.##\\n.##/###/#.. => ...#/.#../##../.#..\\n###/###/#.. => ...#/#.##/.#.#/..##\\n.#./#.#/.#. => .###/#.../..#./.##.\\n##./#.#/.#. => ###./##.#/..#./##.#\\n#.#/#.#/.#. => #.../##.#/..#./#...\\n###/#.#/.#. => ...#/...#/#..#/...#\\n.#./###/.#. => #.#./.##./#.#./.###\\n##./###/.#. => #.../####/..##/#...\\n#.#/###/.#. => ##../.##./.###/###.\\n###/###/.#. => ..#./.##./.#../#.#.\\n#.#/..#/##. => ...#/#.##/##../...#\\n###/..#/##. => ...#/#.../###./###.\\n.##/#.#/##. => ##.#/.#.#/.#../....\\n###/#.#/##. => .##./..../##.#/..#.\\n#.#/.##/##. => .#../###./#.#./##..\\n###/.##/##. => #.##/#..#/#.#./###.\\n.##/###/##. => #.##/###./..../##..\\n###/###/##. => .#../####/.###/##..\\n#.#/.../#.# => #.../#..#/..##/##.#\\n###/.../#.# => #..#/.#.#/####/#.##\\n###/#../#.# => ###./##../##.#/...#\\n#.#/.#./#.# => .##./.#.#/#.../...#\\n###/.#./#.# => .#../.#../..../#.#.\\n###/##./#.# => #.#./#.#./#.../.#..\\n#.#/#.#/#.# => ..../####/####/..#.\\n###/#.#/#.# => #..#/.##./#.../##..\\n#.#/###/#.# => ###./...#/#.##/##..\\n###/###/#.# => #.##/#.../#..#/###.\\n###/#.#/### => ..../...#/###./..#.\\n###/###/### => #..#/..../#.../#.##\";","export default \"You arrive at **Easter Bunny Headquarters** under cover of darkness. However, you left in such a rush that you forgot to use the bathroom! Fancy office buildings like this one usually have keypad locks on their bathrooms, so you search the front desk for the code.\\n\\n\\\"In order to improve security,\\\" the document you find says, \\\"bathroom codes will no longer be written down. Instead, please memorize and follow the procedure below to access the bathrooms.\\\"\\n\\nThe document goes on to explain that each button to be pressed can be found by starting on the previous button and moving to adjacent buttons on the keypad: `U` moves up, `D` moves down, `L` moves left, and `R` moves right. Each line of instructions corresponds to one button, starting at the previous button (or, for the first line, **the \\\"5\\\" button**); press whatever button you're on at the end of each line. If a move doesn't lead to a button, ignore it.\\n\\nYou can't hold it much longer, so you decide to figure out the code as you walk to the bathroom. You picture a keypad like this:\\n\\n```\\n1 2 3\\n4 5 6\\n7 8 9\\n```\\n\\nSuppose your instructions are:\\n\\n```\\nULL\\nRRDDD\\nLURDL\\nUUUUD\\n```\\n\\n- You start at \\\"5\\\" and move up (to \\\"2\\\"), left (to \\\"1\\\"), and left (you can't, and stay on \\\"1\\\"), so the first button is `1`.\\n- Starting from the previous button (\\\"1\\\"), you move right twice (to \\\"3\\\") and then down three times (stopping at \\\"9\\\" after two moves and ignoring the third), ending up with `9`.\\n- Continuing from \\\"9\\\", you move left, up, right, down, and left, ending with `8`.\\n- Finally, you move up four times (stopping at \\\"2\\\"), then down once, ending with `5`.\\n\\nSo, in this example, the bathroom code is `1985`.\\n\\nYour puzzle input is the instructions from the document you found at the front desk. What is the **bathroom code**?\\n\\n[comment]: <> (PART 2)\\n\\nYou finally arrive at the bathroom (it's a several minute walk from the lobby so visitors can behold the many fancy conference rooms and water coolers on this floor) and go to punch in the code. Much to your bladder's dismay, the keypad is not at all like you imagined it. Instead, you are confronted with the result of hundreds of man-hours of bathroom-keypad-design meetings:\\n\\n```\\n    1\\n  2 3 4\\n5 6 7 8 9\\n  A B C\\n    D\\n```\\n\\nYou still start at \\\"5\\\" and stop when you're at an edge, but given the same instructions as above, the outcome is very different:\\n\\n- You start at \\\"5\\\" and don't move at all (up and left are both edges), ending at `5`.\\n- Continuing from \\\"5\\\", you move right twice and down three times (through \\\"6\\\", \\\"7\\\", \\\"B\\\", \\\"D\\\", \\\"D\\\"), ending at `D`.\\n- Then, from \\\"D\\\", you move five more times (through \\\"D\\\", \\\"B\\\", \\\"C\\\", \\\"C\\\", \\\"B\\\"), ending at `B`.\\n- Finally, after five more moves, you end at `3`.\\n\\nSo, given the actual keypad layout, the code would be `5DB3`.\\n\\nUsing the same instructions in your puzzle input, what is the correct **bathroom code**?\";","export default \"As your flight slowly drifts through the sky, the Elves at the Mythical Information Bureau at the North Pole contact you. They'd like some help debugging a malfunctioning experimental energy source aboard one of their super-secret imaging satellites.\\n\\nThe experimental energy source is based on cutting-edge technology: a set of Conway Cubes contained in a pocket dimension! When you hear it's having problems, you can't help but agree to take a look.\\n\\nThe pocket dimension contains an infinite 3-dimensional grid. At every integer 3-dimensional coordinate (`x,y,z`), there exists a single cube which is either **active** or **inactive**.\\n\\nIn the initial state of the pocket dimension, almost all cubes start **inactive**. The only exception to this is a small flat region of cubes (your puzzle input); the cubes in this region start in the specified **active** (`#`) or **inactive** (`.`) state.\\n\\nThe energy source then proceeds to boot up by executing six **cycles**.\\n\\nEach cube only ever considers its **neighbors**: any of the 26 other cubes where any of their coordinates differ by at most `1`. For example, given the cube at `x=1,y=2,z=3`, its neighbors include the cube at `x=2,y=2,z=2`, the cube at `x=0,y=2,z=3`, and so on.\\n\\nDuring a cycle, **all** cubes **simultaneously** change their state according to the following rules:\\n\\n- If a cube is **active** and **exactly** `2` or `3` of its neighbors are also active, the cube remains **active**. Otherwise, the cube becomes **inactive**.\\n- If a cube is **inactive** but **exactly** `3` of its neighbors are active, the cube becomes **active**. Otherwise, the cube remains **inactive**.\\n\\nThe engineers responsible for this experimental energy source would like you to simulate the pocket dimension and determine what the configuration of cubes should be at the end of the six-cycle boot process.\\n\\nFor example, consider the following initial state:\\n```\\n.#.\\n..#\\n###\\n```\\n\\nEven though the pocket dimension is 3-dimensional, this initial state represents a small 2-dimensional slice of it. (In particular, this initial state defines a 3x3x1 region of the 3-dimensional space.)\\n\\nSimulating a few cycles from this initial state produces the following configurations, where the result of each cycle is shown layer-by-layer at each given `z` coordinate (and the frame of view follows the active cells in each cycle):\\n\\n```\\nBefore any cycles:\\n\\nz=0\\n.#.\\n..#\\n###\\n\\n\\nAfter 1 cycle:\\n\\nz=-1\\n#..\\n..#\\n.#.\\n\\nz=0\\n#.#\\n.##\\n.#.\\n\\nz=1\\n#..\\n..#\\n.#.\\n\\n\\nAfter 2 cycles:\\n\\nz=-2\\n.....\\n.....\\n..#..\\n.....\\n.....\\n\\nz=-1\\n..#..\\n.#..#\\n....#\\n.#...\\n.....\\n\\nz=0\\n##...\\n##...\\n#....\\n....#\\n.###.\\n\\nz=1\\n..#..\\n.#..#\\n....#\\n.#...\\n.....\\n\\nz=2\\n.....\\n.....\\n..#..\\n.....\\n.....\\n\\n\\nAfter 3 cycles:\\n\\nz=-2\\n.......\\n.......\\n..##...\\n..###..\\n.......\\n.......\\n.......\\n\\nz=-1\\n..#....\\n...#...\\n#......\\n.....##\\n.#...#.\\n..#.#..\\n...#...\\n\\nz=0\\n...#...\\n.......\\n#......\\n.......\\n.....##\\n.##.#..\\n...#...\\n\\nz=1\\n..#....\\n...#...\\n#......\\n.....##\\n.#...#.\\n..#.#..\\n...#...\\n\\nz=2\\n.......\\n.......\\n..##...\\n..###..\\n.......\\n.......\\n.......\\n```\\n\\nAfter the full six-cycle boot process completes, **`112`** cubes are left in the **active** state.\\n\\nStarting with your given initial configuration, simulate six cycles. **How many cubes are left in the active state after the sixth cycle?**\\n\\n[comment]: <> (PART 2)\\n\\nFor some reason, your simulated results don't match what the experimental energy source engineers expected. Apparently, the pocket dimension actually has **four spatial dimensions**, not three.\\n\\nThe pocket dimension contains an infinite 4-dimensional grid. At every integer 4-dimensional coordinate (`x,y,z,w`), there exists a single cube (really, a **hypercube**) which is still either **active** or **inactive**.\\n\\nEach cube only ever considers its **neighbors**: any of the 80 other cubes where any of their coordinates differ by at most `1`. For example, given the cube at `x=1,y=2,z=3,w=4`, its neighbors include the cube at `x=2,y=2,z=3,w=3`, the cube at `x=0,y=2,z=3,w=4`, and so on.\\n\\nThe initial state of the pocket dimension still consists of a small flat region of cubes. Furthermore, the same rules for cycle updating still apply: during each cycle, consider the **number of active neighbors** of each cube.\\n\\nFor example, consider the same initial state as in the example above. Even though the pocket dimension is 4-dimensional, this initial state represents a small 2-dimensional slice of it. (In particular, this initial state defines a 3x3x1x1 region of the 4-dimensional space.)\\n\\nSimulating a few cycles from this initial state produces the following configurations, where the result of each cycle is shown layer-by-layer at each given `z` and `w` coordinate:\\n\\n```\\nBefore any cycles:\\n\\nz=0, w=0\\n.#.\\n..#\\n###\\n\\n\\nAfter 1 cycle:\\n\\nz=-1, w=-1\\n#..\\n..#\\n.#.\\n\\nz=0, w=-1\\n#..\\n..#\\n.#.\\n\\nz=1, w=-1\\n#..\\n..#\\n.#.\\n\\nz=-1, w=0\\n#..\\n..#\\n.#.\\n\\nz=0, w=0\\n#.#\\n.##\\n.#.\\n\\nz=1, w=0\\n#..\\n..#\\n.#.\\n\\nz=-1, w=1\\n#..\\n..#\\n.#.\\n\\nz=0, w=1\\n#..\\n..#\\n.#.\\n\\nz=1, w=1\\n#..\\n..#\\n.#.\\n\\n\\nAfter 2 cycles:\\n\\nz=-2, w=-2\\n.....\\n.....\\n..#..\\n.....\\n.....\\n\\nz=-1, w=-2\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=0, w=-2\\n###..\\n##.##\\n#...#\\n.#..#\\n.###.\\n\\nz=1, w=-2\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=2, w=-2\\n.....\\n.....\\n..#..\\n.....\\n.....\\n\\nz=-2, w=-1\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=-1, w=-1\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=0, w=-1\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=1, w=-1\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=2, w=-1\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=-2, w=0\\n###..\\n##.##\\n#...#\\n.#..#\\n.###.\\n\\nz=-1, w=0\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=0, w=0\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=1, w=0\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=2, w=0\\n###..\\n##.##\\n#...#\\n.#..#\\n.###.\\n\\nz=-2, w=1\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=-1, w=1\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=0, w=1\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=1, w=1\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=2, w=1\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=-2, w=2\\n.....\\n.....\\n..#..\\n.....\\n.....\\n\\nz=-1, w=2\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=0, w=2\\n###..\\n##.##\\n#...#\\n.#..#\\n.###.\\n\\nz=1, w=2\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\nz=2, w=2\\n.....\\n.....\\n..#..\\n.....\\n.....\\n```\\n\\nAfter the full six-cycle boot process completes, **`848`** cubes are left in the **active** state.\\n\\nStarting with your given initial configuration, simulate six cycles in a 4-dimensional space. **How many cubes are left in the active state after the sixth cycle?**\";","export default \"                                                           /------------\\\\                                    /---------------------------------------\\\\\\n                                              /------------+-----------\\\\|                                    |                                       |\\n                                     /--------+------------+-----------++------------------\\\\              /--+----------------------\\\\                |\\n                       /-------------+----\\\\   |            |           ||  /--------\\\\      |             /+--+-------\\\\              |                |\\n             /---------+-------------+----+---+----------\\\\ |           ||/-+--------+--\\\\   |             ||  |       |        /-----+--------\\\\       |\\n           /-+---------+-------------+----+---+----------+-+-----------+++-+------\\\\ |  |   |        /----++--+-------+--------+---\\\\ |        |       |\\n           | |         |             |    |   |          | |     /-----+++-+------+-+--+---+-------\\\\|    ||  |       |        |   | |        |       |\\n      /----+-+---------+-------------+----+---+----------+-+-----+---\\\\ ||| |      | |  |   |       ||    ||  |       |        |   | |        |       |\\n      |    | |         |     /-------+----+---+-----\\\\    | |     |   | ||| |      | |/-+---+-------++----++--+-------+--------+---+-+--------+--\\\\    |\\n      |    | |         |     |       |    |   |     |    | |     |   | ||| |      | || |   |       ||    ||  |       |        |   | |        |  |    |\\n      |   /+-+---------+-----+-------+----+---+-----+----+-+-----+---+-+++-+-\\\\    | || |   |       ||    ||  |       |        |   | |        |  |    |\\n      |   || |         |    /+-------+----+---+-----+----+-+-----+---+-+++-+-+----+\\\\|| |   |  /----++----++--+-\\\\     |        |   | |        |  |    |\\n      |   || |         |    ||       |    |   |     |    | |     |   | ||| | |    ||||/+---+--+----++----++--+-+-----+--------+---+-+--------+--+---\\\\|\\n      |   || |         |    ||       |    |   |     |    | |     |   | ||| | |    ||||||   |  |    ||    ||  | |     |        |   | |        |  |   ||\\n      |   || |   /-----+----++-------+----+---+----\\\\|    |/+-----+---+-+++-+-+----++++++---+--+----++----++--+-+-----+--------+---+-+--------+\\\\ |   ||\\n      |   || |/--+-----+----++-------+----+---+----++----+++-----+---+-+++-+-+----++++++---+--+----++----++--+-+---\\\\ |        |   | |        || |   ||\\n      |   || ||  |     |    ||       |    |   |    ||    |||     |   | ||| | |/---++++++---+--+----++-\\\\  ||  | |   | |        |   | |        || |   ||\\n      |   |\\\\-++--+-----+----++-------+----+---+----++----+++-----+---+-+++-+-++---/|||||   |  |    || |  \\\\+--+-+---+-/        |   | |        || |   ||\\n   /--+---+--++--+----\\\\|    ||       |   /+---+----++----+++-----+---+-+++-+-++----+++++\\\\  |  |    || |   |  | |   |          |   | |        || |   ||\\n   |  |   |  ||  |    ||    ||       |   ||   |    ||    |||     |   | ||| | ||    ||||||  |  |    || |   |  | | /-+----------+---+-+--------++-+--\\\\||\\n   |  |   |  ||  |    ||    ||       |   ||   |    ||    |||     |   | ||| | ||   /++++++--+--+----++-+---+--+-+-+-+--------\\\\ |   | |        || |  |||\\n   |  |   |  ||  |    ||    ||/------+---++---+----++----+++-----+---+-+++-+-++---+++++++--+--+----++-+---+--+-+-+-+--------+-+-\\\\ | |        || |  |||\\n   |  |   |  ||  |    ||    |||      |   ||   |    ||    |||     |   | ||\\\\-+-++---+++++/|  |  |    || |   |  | | | |        | | | | |        || |  |||\\n   |  |   |  ||  |    ||    |||      |   ||   |    ||    |||     |   | ||  | ||   ||||| |  |  |    |\\\\-+---+--+-+-+-+--------+-+-+-/ |        || |  v||\\n   |  |   |  ||  \\\\----++----+++------+---++---+----/|    |||     |   | ||  | ||   ||||| |  |  |    |  |   |  | |/+-+--------+-+-+---+-----\\\\  || |  |||\\n   |  |   |  ||       ||    |||      |   ||   |     |    |||     |   | ||  | |\\\\---+++++-+--+--+----+--/   \\\\--+-+++-+--------+-+-+---/     |  || |  |||\\n   |  |   |  ||       ||    |||      |   ||   |     |    |||     |   | ||  | |    ||||| |  |  |    |         \\\\-+++-+--------+-+-+---------+--++-+--++/\\n   |  |   |  ||       ||    |||      |   ||   |     |    ||\\\\-----+---+-+/  | |    ||||| |  |  |    |           ||| |        | | |         |  || |  || \\n   |  |   |  ||       ||    |||      |   ||   |     |    ||      |   | |   | |    ||||| |  |  |    |           ||| |        | | |         |  || |  || \\n   |  |   |  ||       ||    |||      |   ||   |     |    ||      |   | |   | |    ||||| |  |  \\\\----+-----------/|| |        | | |         |  || |  || \\n   |  |   |  ||       ||    |\\\\+------+---++---+-----/    ||      |   | |   | |   /+++++-+--+-------+------------++-+--------+-+\\\\|         |  || |  || \\n   |  |   |  ||      /++----+-+------+---++---+--\\\\       ||      |   | |   | |  /++++++-+--+-------+------------++\\\\|        | |||         |  || |  || \\n   |  |/--+--++------+++----+-+------+---++---+--+-------++------+---+-+---+-+--+++++++-+--+-------+\\\\           ||||        | |||         |  || |  || \\n   |  ||  |  ||      |||    | |      |   ||   |  | /-----++-----\\\\|   | |   | |  ||||||| |  |       ||           ||||        | \\\\++---------+--/| |  || \\n   |  ||  |  ||      |||    | |    /-+---++---+--+-+-----++-\\\\   ||   | |   | |  ||||||| |  |       ||           ||||        |  ||         |   | |  || \\n   |  ||  |  ||      |||    | |    | |   ||   |  | |     || | /-++---+-+---+-+--+++++++-+--+-------++-----------++++--------+--++---------+\\\\  | |  || \\n   |  ||  |  ||      |||    \\\\-+----+-+---++---+--+-+-----++-+-+-++---+-+---+-+--+++/||| |  |       ||           ||||        |  ||         ||  | |  || \\n   |  ||  | /++------+++------+----+-+---++---+--+-+-----++-+-+-++---+-+---+-+--+++-+++-+--+-------++-----------++++----\\\\   |  ||         ||  | |  || \\n   |  ||  | |||      |||      |    | |   ||   |  | |     || | | ||   | |   \\\\-+--+++-/|| |  |       ||           ||||    |   |  ||         ||  | |  || \\n   |  || /+-+++------+++----\\\\ | /--+-+---++---+\\\\/+-+-----++-+-+-++---+-+-----+--+++--++-+--+-------++-----------++++----+---+--++---------++--+\\\\|  || \\n   |  || || |||      |||    | | |  | |  /++---++++-+-----++-+-+-++---+-+-----+--+++--++-+--+-------++---------\\\\ ||||    |   |  ||         ||  |||  || \\n   |  || || |||      |||    | | |  | |  |||   |||v |     || | | ||   | |     |  |||  || |  |       ||         | ||||    |   |  ||         ||  |||  || \\n   |  || || |||      |||   /+-+-+--+-+--+++---++++-+-----++-+-+-++---+-+-----+--+++--++-+--+-------++-----\\\\   | |\\\\++----+---+--++---------++--+++--/| \\n   |  || || |||      |||   || | |  | | /+++---++++-+-----++-+-+-++---+-+-\\\\   |  |||  || |  |       ||     |   | | ||    |   |  || /-------++--+++-\\\\ | \\n   |  || || |||      ||\\\\---++-+-+--+-+-+++/   |||| |     || | |/++---+-+-+---+--+++--++-+--+\\\\      ||     |   | | ||    |   |  || |       ||  ||| | | \\n   |  || || |||      || /--++-+-+--+-+-+++-\\\\  |||| |     || | ||||   | | |   |  |||  || | /++------++-----+\\\\  | |/++----+---+--++-+-------++\\\\ ||| | | \\n   |  || || |||/-----++-+\\\\ || | |  | | ||| |  |||| |     || | ||||   |/+-+---+--+++--++-+-+++------++-----++--+-++++----+---+--++-+----\\\\  ||| ||| | | \\n   |  || || ||||     || || || | |  | | ||| |  |||| |     || | ||||   ||| |   |  ||\\\\--++-+-+++------++-----++--+-++++----+---/  || |    |  ||| ||| | | \\n   |  || || |||| /---++-++-++-+-+--+-+-+++-+--++++-+-----++-+-++++-\\\\ ||| |   |  ||   |\\\\-+-+++------++-----++--+-++++----+------++-+----+--+++-+++-+-/ \\n   |  || || |||| |   || || || | |  | | ||| |  |||| |     || | |||| | ||| |   |  || /-+--+-+++------++-----++-\\\\| ||||    |      || |    |  ||| ||| |   \\n   |  || || ||||/+---++-++-++-+-+-\\\\| | |||/+--++++-+-----++-+-++++-+-+++-+---+--++-+-+\\\\ | |||      ||     || || ||||    |      || |    |  ||| ||| |   \\n   |  || || ||||||   || || || | | || | |||||  |||| |    /++-+-++++-+-+++-+---+--++-+-++-+-+++------++-----++-++-++++-\\\\  |      || |    |  ||| ||| |   \\n   |  || || ||||||   || || || | | || | ||||| /++++-+----+++-+-++++-+-+++-+---+--++-+-++-+-+++------++-----++-++-++++-+--+-----\\\\|| |    |  ||| ||| |   \\n   |  || || ||||||   || || || | | || | ||||| ||||| |    ||| | |||\\\\-+-+++-+---+--++-+-++-+-+++------/|     || || |||| |  |     ||| |    |  ||| ||| |   \\n   |  || || ||||||   || || || | | || | |||||/+++++-+--\\\\ ||| | |||  | ||| |   |  || | || | |||    /--+-----++-++-++++-+--+-----+++-+--\\\\ |  ||| ||| |   \\n   |  || || ||||||   || || || \\\\-+-++-+-+++++++++++-+--+-+++-+-+++--+-+++-+---+--++-+-++-+-+++----+--+-----++-++-++++-+--+-----++/ |  | |  ||| ||| |   \\n   |  || || ||||||   || || ||   | || | ||||||||||| |  | ||| | |||/-+-+++-+---+--++-+-++-+-+++----+--+-----++-++-++++-+--+-----++--+\\\\ | |  ||| ||| |   \\n   |  || || ||||||   || ||/++---+-++-+-+++++++++++-+--+-+++-+-++++-+-+++-+---+--++-+-++\\\\| |||    |  |     || || \\\\+++-+--+-----++--++-+-+--/|| ||| |   \\n   |  || || ||||||   \\\\+-+++++---+-++-+-++++++++++/ |  | ||| | |||| | ||| |   |  || | ||||/+++----+--+-----++-++--+++-+--+-----++\\\\ || | | /-++-+++-+-\\\\ \\n   |  || || ||||||    | |||||/--+-++-+-++++++++++--+--+-+++-+-++++-+-+++-+--\\\\|  || | |||||||| /--+--+-----++-++--+++-+\\\\ |/----+++-++\\\\| | | || ||| | | \\n   |  || || |||\\\\++----+-+/||||  | || | ||||||||||  |/-+-+++-+-++++-+-+++-+--++--++-+-++++++++-+--+--+-----++-++--+++-++-++----+++-++++-+-+\\\\|| ||| | | \\n /-+--++-++-+++-++----+-+-++++--+-++-+-++++++++++--++-+-+++-+-++++-+-+++-+--++--++-+-++++++++-+--+\\\\ |     || ||  ||| || ||    ||| |||| | |||| ||| | | \\n | |  || || ||| ||    | | ||||  | || | |||||||||\\\\--++-+-+++-+-++++-+-+++-+--++--++-+-++++++++-+--++-+-----++-++--+++-++-++----+++-++++-+-++++-+/| | | \\n | |  || || ||| ||  /-+-+-++++--+-++-+-+++++++++---++-+-+++-+-++++-+-+++-+--++--++-+-++++++++-+--++-+-----++-++--+++-++-++\\\\   ||| |||| | |||| | | | | \\n | |  || || ||| ||  | |/+-++++--+-++-+-+++++++++---++-+-+++-+-++++-+-+++-+--++--++-+-++++++++-+--++-+-\\\\   || ||  ||| || |||   ||| |||| | |||| | | | | \\n | |  || || ||| ||  | ||| ||||  | || | |||||||||   || | ||| | |||| | |\\\\+-+--++--++-+-++++++++-+--++-+-+---++-++--+++-++-+++---+++-++++-/ |||| | | | | \\n/+-+--++-++-+++-++\\\\ | ||| ||||  | || | |||||||||   || | ||| | |||| | | | |  ||  \\\\+-+-++++++++-+--++-+-+---++-++--+/| || |||   ||| ||||   |||| | | | | \\n|| |  || || ||| ||| | ||| ||||  | || | |||||||||   || | ||| | |||| | | | |  ||   | | |||||||| |  || | |   ||/++--+-+-++-+++---+++-++++---++++\\\\| | | | \\n|| |  || || ||| ||| | ||| ||||  | || | |||||||||   || | ||| | |||| | | | |  ||   | | |||||||| |  || |/+---+++++--+-+\\\\|| |||   ||| ||||   |||||| | | | \\n|| |  \\\\+-++-+++-+++-+-+++-++++--+-++-+-+++++++++---++-+-+++-+-++++-+-/ | |  ||   | | |||||||| |  || |||   ||||v  | |||| |||   ||| ||||   |||||| | | | \\n|| |   | || ||| ||| | ||| ||||  | || | ||\\\\++++++---++-+-+++-+-++++-+---+-+--++---+-+-+++/|||| |  || |||   |||||  | |||| |||   ||| ||||   |||||| | | | \\n|| |   | || ||| ||| | ||| ||||  | ||/+-++-++++++---++-+-+++-+-++++-+---+-+--++--\\\\| | ||| |||| |  || |||   |||||  | |||| |||   ||| ||||   |||||| | | | \\n|| |   | ||/+++-+++-+-+++-++++--+-++++-++-++++++---++-+-+++-+-++++-+---+\\\\|  ||  || | ||| |||| |  || |||   |||||  | |||| |||   ||| ||||   |||||| | | | \\n|| |   | |||||| ||| | ||| |\\\\++--+-++++-++-++++++---++-+-+++-+-++++-+---+++--++--++-+-+++-++++<+--++-+++---/||||  | |||| |||   ||| ||||   |||||| | | | \\n|| |   | |||||| ||| | ||| | ||  | |||| || ||||||/--++-+-+++-+-++++-+---+++--++--++-+-+++-++++-+--++-+++----++++--+-++++-+++\\\\  ||| ||||   |||||| | | | \\n|| |   | |\\\\++++-+++-+-+++-+-++--+-++++-++-+++++++--++-+-+++-+-++++-+---+++--+/  || | ||| |||| |  || |||    ||||  | |||| ||||  |||/++++---++++++-+-+-+\\\\\\n|| |   | | ||\\\\+-+++-+-+++-+-++--+-++++-++-+++++++--++-+-+/| | |||| |   |||  |   || | ||| |||| |  || |||    ||||  | ||^| ||||  ||||||||   |||||| | | ||\\n|| |   | | || | ||| | ||| \\\\-++--+-++++-++-+++++++--++-+-+-+-+-++++-+---+++--+---++-+-++/ |||| |  || |||    ||||  | |||| ||||  ||||||||   |||||| | | ||\\n|| |   | | || | ||| | |||   ||  | |||| || ||||\\\\++--++-+-+-+-+-++++-+---/||  |   || | ||  |||| |  || |||    ||||  | |||| ||||  ||||||||   |||||| | | ||\\n|| |   | | || | ||| | |||   ||  | |||| || |||| ||  || | | | | |||| |    ||  |   || | ||  |||| \\\\--++-+++----++++--+-+++/ ||||  ||||||||   |||||| | | ||\\n|| |   | | || | ||| | |||   ||  | |||| ||/++++-++--++-+-+-+>+-++++-+----++--+---++-+-++\\\\ ||||    || |||    ||||  | |||  ||||  ||||||||   |||||| | | ||\\n|| |   | | || | ||| | |||   ||  | |||| ||||||| ||  || | | \\\\-+-++++-+----++--+---++-+-+++-++++----++-+++----++++--+-+++--++++--++++++++---+++++/ | | ||\\n|| |   | | || \\\\-+++-+-+++---++--+>++++-+++++++-++--++-+-+---+-++++-+----++--+---++-+-+++-++++----++-+++----++++--+-/||  ||||  ||||||||   |||||  | | ||\\n|| |   | | ||  /+++-+-+++---++--+-++++-+++++++-++--++-+-+---+\\\\\\\\+++-+----++--+---++-+-+++-++++----++-+++----++++--+<-++--++++--++++++++---++/||  | | ||\\n|| |   | | ||  |||| | |||   ||  | |||| ||||||| ||  || | |   || ||| |    ||  |   || | ||| ||||    || |||    ||||  |  ||  ||||  ||||||||   || ||  | | ||\\n|| |   | | ||  |||| | |||   ||  | |||| ||||||| ||  \\\\+-+-+---++-+/| |    ||  |   || | ||| ||||    || |||    |\\\\++--+--++--++++--++++++++---++-+/  | | ||\\n|| |   | | ||  |||| | |||   ||  | |||| ||||||| ||   | | |   || | | |   /++--+---++-+-+++-++++----++-+++----+-++--+\\\\ ||  ||||  ||||||||   || |   | | ||\\n|| |   | | ||  |||| | |||   ||  | |||| ||||||| ||   | | |   || | | |   |||  |   || \\\\-+++-++++----++-+++----+-/|  || ||  ||||  ||||||||   || |   | | ||\\n|| |   | | ||  |||| | |||   ||  | |||| ||||||| ||   | | |   || \\\\-+-+---+++--+---++---+++-+++/    || |||    |  |  || ||  ||||  ||||||||   || |   | | ||\\n|| |/--+-+-++--++++-+-+++---++-\\\\| |||| ||||||| ||   | | |   ||   | |   |||  |   ||   ||| |||     || |||    |  |  || ||  ||||  ||||||||   || |   | | ||\\n|| \\\\+--+-+-++--++++-+-/||   || || ||\\\\+-+++++++-++---+-+-+---++---+-+---+++--+---/|   ||| |||     || |||    |  |  || ||  ||||  ||||||||   || |   | | ||\\n||  |  | | ||  |||| |  ||   |\\\\-++-++-+-+++++++-++---+-+-+---++---+-+---+++--/    |   ||| |||     || |||    |  |  || ||  ||||  ||||||||   || |   | | ||\\n||  |  | | ||  |||| |  ||   |  || || | ||||||\\\\-++---+-+-+---++---+-+---+++-------+---+++-+++-----++-+++----+--+--++-++--++++--/|||||||   || |   | | ||\\n||  |  | | ||  |||| |  ||   |  || || | ||||||  |\\\\---+-+-+---++---+-+---+++-------+---+++-+++-----++-+++----+--+--++-++--+++/   |||||||   || |   | | ||\\n||  |  | | ||  |||| |  \\\\+---+--++-++-+-++++++--+----+-+-+---++---+-+---+++--->---+---+++-+++-----++-++/    |  |  || ||  |||    |||||||   || |   | | ||\\n||/-+--+-+-++--++++-+---+---+--++-++-+-++++++--+----+-+-+---++---+-+---+++-------+---+++-+++-----++-++-----+-\\\\|  || ||  |||    |||||||   || |   | | ||\\n||| |  | | ||  |||| |   |   |  || || |/++++++--+----+-+-+---++---+-+---+++-------+---+++-+++-----++-++-----+-++--++-++--+++-\\\\  |||||||   || |   | | ||\\n||| |  \\\\-+-++--++++-+---+---+--++-++-++++++++--+----+-+-+---++---+-+---+++-------+---+++-+++-----++-/|     | ||  || ||  ||| |  |||||||   || |   | | ||\\n||| |    | ||  |||| |   |   |  || || \\\\+++++++--+----+-+-+---++---+-+---+++-------+---+++-++/     ||  |     | ||  || ||  |\\\\+-+--+++++/|   || |   | | ||\\n||| |    | |v  ||\\\\+-+---+---+--++-++--+++++++--+----+-+-+---++---+-/   |||       |   \\\\++-++------++--+-----+-++--++-++--+-+-+--+++++-+---++-+---/ | ||\\n||| |    | ||  || | |   |   |  || ||  |||||||  |    | | |   ||   |  /--+++-------+----++-++------++--+----\\\\| ||  || ||  | | |  ||||| |   || |     | ||\\n||| \\\\----+-++--++-+-+---+---+--/| ||  |||||||  |    | | |   ||   |  |  |||       \\\\----++-++------++--+----++-++--++-++--+-+-+--/|||| |   || |     | ||\\n|||      | ||  || | |   \\\\---+---+-++--+++++/|  |    \\\\-+-+---++---+--+--+++------------++-++------++--+----++-++--++-++--+-+-+---++++-+---+/ |     | ||\\n|||      | ||  || | \\\\-------+---+-++--+++++-+--+------+-+---++---+--+--+++------------++-++------++--+----++-++--++-++--+-/ |   |||| |   |  |     | ||\\n|||      | ||  || |         |   | ||  |||||/+--+----\\\\ | |   ||   |  |  \\\\++------------++-++------++--+----++-++--+/ ||  |   |   |||| |   |  |     | ||\\n|||    /-+-++--++-+---------+---+-++--+++++++--+----+-+-+---++---+--+---++------------++\\\\||      ||  |    || ||  |  ||  |   |   |||| |   |  |     | ||\\n|||    | | ||  ||/+---------+---+-++--+++++++--+----+-+-+---++---+--+---++------------+++++------++--+----++-++--+--++--+---+\\\\  |||| |   \\\\--+-----+-/|\\n|||    | | ||  |||| /-------+---+-++--+++++++--+---<+-+-+---++---+--+---++------------+++++------++--+---\\\\|| ||  |  ||  |   ||  |||| |      |     |  |\\n|||    | | ||  \\\\+++-+-------+---+-++--+++++++--+----+-+-+---+/   |  |   ||     /------+++++-----\\\\||  |   ||| ||  |  ||  |   ||  |||| |      |     |  |\\n|\\\\+----+-+-++---+++-+-------+---+-++--+++++++--+----+-+-+---+----+--+---++-----+------+++++-----++/  |   ||| ||  |  ||  |   ||  |||| |      |     |  |\\n| |    | | ||   ||| |       |   | ||  ||\\\\++++--+----+-+-+---+----+--+---++-----+------+++++-----++---+---+++-+/  |  ||  |   ||  |||| |      |     |  |\\n| |    | | ||   ||| |    /--+---+-++--++-++++--+----+-+-+---+----+--+---++-----+------+++++--\\\\  ||   |   ||| |   \\\\--++--+---++--++++-+------/     |  |\\n| |    | | ||   ||| |    |  |   | ||  \\\\+-++++--+----+-+-+---+----+--+---++-----+------+++++--+--++---+---+++-+------++--+---/|  |||| |            |  |\\n| |    | | ||   ||| |    |  |   \\\\-++---+-++++--/    | | |   |    |  |   ||     |      |||||  |/-++---+---+++-+---->-++--+----+--++++-+-\\\\          |  |\\n| |    | | ||   ||| |    |  |     ||   | \\\\+++-------+-+-+---+----+--+---++-----+------+/|||  || ||   |   ||| |      ||  |    |  |\\\\++-+-+----------+--/\\n| |    | | |^   ||| |    |  |     ||   |  |||       | | |   |    |  |   ||     |      | |||  || ||   \\\\---+++-+------/|  |    |  | || | |          |   \\n| |    | | ||   ||| |    |/-+-----++---+--+++-------+-+-+---+----+--+---++\\\\    |      | |||  || ||       ||| |       |  |    |  | || | |          |   \\n| |    | | ||   ||| |    || |     ||   v  ||\\\\-------+-/ |   |    |  |/--+++----+------+-+++--++-++-------+++-+-------+--+----+-\\\\| || | |          |   \\n| |    | | ||   \\\\++-+----++-+-----/|   |  ||        |   |   |    |  \\\\+--+++----+------+-+++--++-++-------+/| |       |  |    | || || | |          |   \\n| |    | | ||    || |    || |      |   |  ||        |   |   |    |   |  |||    |      | |||  || ||       | | |       |  |    | || || | |          |   \\n| |    | | ||    || |    || |      |   |  ||        |   |   |    \\\\---+--+++----+------+-+++--++-++-----<-+-+-+-------+--+----+-++-+/ | |          |   \\n| |    | |/++----++-+----++-+------+---+--++--------+\\\\  | /-+--------+--+++----+------+-+++--++-++-------+-+-+-------+--+----+-++\\\\|  | |          |   \\n| |    | ||||    || |    || |      |   |  ||        ||  | | |        |  |||    \\\\------+-+++--++-/|       | | |       |  |    | ||||  | |          |   \\n| |    | ||||  /-++-+----++-+------+---+--++--------++--+-+-+---\\\\    |  |||         /-+-+++--++--+--\\\\    | | |       |  |    | ||||  | |          |   \\n| |    | ||||  | || |    || |      |   |/-++--------++--+-+-+---+----+--+++---------+-+-+++--++--+--+----+-+-+-------+--+----+-++++--+-+----------+-\\\\ \\n| |    | ||||  | || |    || |      |   || ||        ||  | | |   |    |  |||         | | |||  ||  |  |    | | |       |  |    | ||||  | |          | | \\n| |    | ||||  | || |    || |/-----+---++-++--------++--+-+-+---+----+--+++---------+-+\\\\|||  ||  \\\\--+----+-+-+---->--+--+----+-++++--/ |          | | \\n| |    | ||||  | || \\\\----++-++-----+---++-++--------++--+-+-+---+----+--+++---------+-+++++--++-----+----/ | |       |  |    | ||||    |          | | \\n| |    | ||||  | ||      \\\\+-++-----+---++-++--------++--+-+-+---+----+--+++---------+-+++++--/|     |   /--+-+-------+--+----+-++++---\\\\|          | | \\n| |    | ||||  | ||       | ||     |   \\\\+-++--------++--+-+-+---+----+--+/|         | |||||   |     |   |  | |       |  |    | ||||   ||          | | \\n| |    | ||||  | ||       | ||     |    | ||        ||  | | |   |    |  | |         | |||||   |     |   |  | |       |  |    | ||||   ||          | | \\n\\\\-+----+-++++--+-+/       | ||     |    | ||        ||  | \\\\-+---+----+--+-+---------+-+++++---+-----+---+--+-+-------+--+----+-++/|   ||          | | \\n  |    | ||||  \\\\-+--------+-++-----+----+-++--------++--+---+---/    |  | |         | |||||   |     |   |  | |       |  |    | || |   ||          | | \\n  |    | \\\\+++----+--------+-/|     |    | ||        ||  \\\\---+--------+--+-+---------+-+++++---+-----+---+--+-+-------/  |    | || |   ||          | | \\n  |    |  |||    |        |  |     |    | ||        ||      |        |  | |         | |||||   |     |   |  | |          |    | || |   ||          | | \\n  |    |  |||    |        |  |     |    | ||        ||      |        \\\\--+-+---------+-+++++---+-----+---+--+-+----------+----+-/| |   ||          | | \\n  |    \\\\--+++----+--------+--+-----+----+-++--------++------+-----------+-+---------+-++/\\\\+---+-----+---+--+-+----------+----+--/ |   ||          | | \\n  |       |||    \\\\--------+--+-----+----+-++--------++------+-----------+-+---------+-++--+---+-----+---+--+-+----------+----/    |   ||          | | \\n  |       ||\\\\-------------+--+-----+----+-++--------++------+-----------+-+---------+-++--+---+-----+---+--+-+----------/         |   ||          | | \\n  |       ||              \\\\--+-----+----+-++--------++------+-----------+-/         | ||  |   |     |   |  | |                    |   ||          | | \\n  |       ||                 |     \\\\----+-++--------++------/           |           \\\\-++--+---+-----/   |  | |                    |   ||          | | \\n  |       ||                 |          | ||        ||                  |             ||  |   |         |  | |                    |   ||          | | \\n  |       ||                 \\\\----------+-++--------++------------------+-------------+/  |   \\\\---------+--+-+--------------------+---+/          | | \\n  |       ||                            \\\\-++--------++------------------+-------------+---+-------------+--+-+--------------------+---+-----------+-/ \\n  \\\\-------++------------------------------++--------++------------------+-------------+---+-------------+--+-/                    |   |           |   \\n          ||                              |\\\\--------/|                  |             |   |             |  |                      |   |           |   \\n          \\\\+---------------------<--------+----------/                  |             |   |             |  |                      \\\\---+-----------/   \\n           |                              |                             |             |   |             |  |                          |               \\n           \\\\------------------------------+-----------------------------/             |   |             \\\\--+--------------------------/               \\n                                          \\\\-------------------------------------------/   \\\\----------------/                                          \";","export default \"On the outskirts of the North Pole base construction project, many Elves are collecting lumber.\\n\\nThe lumber collection area is 50 acres by 50 acres; each acre can be either **open ground** (`.`), **trees** (`|`), or a **lumberyard** (`#`). You take a scan of the area (your puzzle input).\\n\\nStrange magic is at work here: each minute, the landscape looks entirely different. In exactly **one minute**, an open acre can fill with trees, a wooded acre can be converted to a lumberyard, or a lumberyard can be cleared to open ground (the lumber having been sent to other projects).\\n\\nThe change to each acre is based entirely on **the contents of that acre** as well as **the number of open, wooded, or lumberyard acres adjacent to it** at the start of each minute. Here, \\\"adjacent\\\" means any of the eight acres surrounding that acre. (Acres on the edges of the lumber collection area might have fewer than eight adjacent acres; the missing acres aren't counted.)\\n\\nIn particular:\\n\\n- An **open** acre will become filled with **trees** if **three or more** adjacent acres contained trees. Otherwise, nothing happens.\\n- An acre filled with **trees** will become a **lumberyard** if **three or more** adjacent acres were lumberyards. Otherwise, nothing happens.\\n- An acre containing a **lumberyard** will remain a **lumberyard** if it was adjacent to **at least one other lumberyard and at least one acre containing trees**. Otherwise, it becomes **open**.\\n\\nThese changes happen across all acres **simultaneously**, each of them using the state of all acres at the beginning of the minute and changing to their new form by the end of that same minute. Changes that happen during the minute don't affect each other.\\n\\nFor example, suppose the lumber collection area is instead only 10 by 10 acres with this initial configuration:\\n\\n```\\nInitial state:\\n.#.#...|#.\\n.....#|##|\\n.|..|...#.\\n..|#.....#\\n#.#|||#|#|\\n...#.||...\\n.|....|...\\n||...#|.#|\\n|.||||..|.\\n...#.|..|.\\n\\nAfter 1 minute:\\n.......##.\\n......|###\\n.|..|...#.\\n..|#||...#\\n..##||.|#|\\n...#||||..\\n||...|||..\\n|||||.||.|\\n||||||||||\\n....||..|.\\n\\nAfter 2 minutes:\\n.......#..\\n......|#..\\n.|.|||....\\n..##|||..#\\n..###|||#|\\n...#|||||.\\n|||||||||.\\n||||||||||\\n||||||||||\\n.|||||||||\\n\\nAfter 3 minutes:\\n.......#..\\n....|||#..\\n.|.||||...\\n..###|||.#\\n...##|||#|\\n.||##|||||\\n||||||||||\\n||||||||||\\n||||||||||\\n||||||||||\\n\\nAfter 4 minutes:\\n.....|.#..\\n...||||#..\\n.|.#||||..\\n..###||||#\\n...###||#|\\n|||##|||||\\n||||||||||\\n||||||||||\\n||||||||||\\n||||||||||\\n\\nAfter 5 minutes:\\n....|||#..\\n...||||#..\\n.|.##||||.\\n..####|||#\\n.|.###||#|\\n|||###||||\\n||||||||||\\n||||||||||\\n||||||||||\\n||||||||||\\n\\nAfter 6 minutes:\\n...||||#..\\n...||||#..\\n.|.###|||.\\n..#.##|||#\\n|||#.##|#|\\n|||###||||\\n||||#|||||\\n||||||||||\\n||||||||||\\n||||||||||\\n\\nAfter 7 minutes:\\n...||||#..\\n..||#|##..\\n.|.####||.\\n||#..##||#\\n||##.##|#|\\n|||####|||\\n|||###||||\\n||||||||||\\n||||||||||\\n||||||||||\\n\\nAfter 8 minutes:\\n..||||##..\\n..|#####..\\n|||#####|.\\n||#...##|#\\n||##..###|\\n||##.###||\\n|||####|||\\n||||#|||||\\n||||||||||\\n||||||||||\\n\\nAfter 9 minutes:\\n..||###...\\n.||#####..\\n||##...##.\\n||#....###\\n|##....##|\\n||##..###|\\n||######||\\n|||###||||\\n||||||||||\\n||||||||||\\n\\nAfter 10 minutes:\\n.||##.....\\n||###.....\\n||##......\\n|##.....##\\n|##.....##\\n|##....##|\\n||##.####|\\n||#####|||\\n||||#|||||\\n||||||||||\\n```\\n\\nAfter 10 minutes, there are `37` wooded acres and `31` lumberyards. Multiplying the number of wooded acres by the number of lumberyards gives the total **resource value** after ten minutes: `37 * 31 = ` **`1147`**.\\n\\n**What will the total resource value of the lumber collection area be after 10 minutes?**\\n\\n[comment]: <> (PART 2)\\n\\nThis important natural resource will need to last for at least thousands of years. Are the Elves collecting this lumber sustainably?\\n\\n**What will the total resource value of the lumber collection area be after 1000000000 minutes?**\";","export default \"p=<2366,784,-597>, v=<-12,-41,50>, a=<-5,1,-2>\\np=<-2926,-3402,-2809>, v=<-55,65,-16>, a=<11,4,8>\\np=<2290,257,-3040>, v=<41,119,57>, a=<-10,-10,5>\\np=<3090,-493,-1340>, v=<-134,19,-37>, a=<1,0,7>\\np=<-1338,2295,4101>, v=<-158,34,-48>, a=<19,-12,-12>\\np=<-1140,1657,-981>, v=<17,-75,45>, a=<3,0,0>\\np=<1544,40,141>, v=<-59,33,-75>, a=<-1,-3,6>\\np=<3711,-950,-574>, v=<-8,55,61>, a=<-14,-1,-3>\\np=<1643,-235,-1267>, v=<-52,11,35>, a=<-2,0,2>\\np=<2501,-4492,4189>, v=<-68,124,-75>, a=<-4,7,-10>\\np=<-2141,-48,2297>, v=<51,-101,-104>, a=<4,9,0>\\np=<4,-2226,-1432>, v=<80,-2,8>, a=<-7,9,5>\\np=<-1106,542,1857>, v=<102,-88,-64>, a=<-3,7,-11>\\np=<-1405,-706,1623>, v=<13,78,-74>, a=<13,-3,-7>\\np=<-664,-1226,-743>, v=<19,13,-11>, a=<4,12,10>\\np=<-612,217,-1523>, v=<-34,7,105>, a=<11,-3,2>\\np=<-248,1374,-639>, v=<-13,-47,58>, a=<4,-8,-1>\\np=<2326,-1122,-314>, v=<-106,12,-30>, a=<-11,11,8>\\np=<-14,1556,-678>, v=<-17,-131,-2>, a=<2,2,8>\\np=<796,1891,-5519>, v=<-82,-9,191>, a=<4,-6,4>\\np=<1854,856,-3288>, v=<-20,-24,94>, a=<-5,-1,4>\\np=<-1021,2443,-9360>, v=<9,-69,178>, a=<3,-3,19>\\np=<1187,2972,-2851>, v=<-63,-92,-81>, a=<1,-3,17>\\np=<-2148,1753,4877>, v=<34,-27,27>, a=<5,-4,-20>\\np=<957,-524,185>, v=<-41,-36,-9>, a=<0,5,0>\\np=<-2723,3961,-2322>, v=<71,-87,-56>, a=<4,-7,13>\\np=<-697,-666,-285>, v=<-21,22,126>, a=<7,2,-12>\\np=<1700,1187,2775>, v=<-99,-69,-45>, a=<0,0,-13>\\np=<2261,-2128,-2002>, v=<-105,63,110>, a=<-3,7,1>\\np=<-3179,2156,2724>, v=<107,-81,-6>, a=<9,-5,-17>\\np=<-2261,1442,1602>, v=<44,-3,-111>, a=<10,-9,2>\\np=<7832,-6160,6204>, v=<-60,53,-17>, a=<-8,6,-8>\\np=<506,10083,-1973>, v=<-71,13,52>, a=<3,-15,0>\\np=<-1344,2868,-16292>, v=<-59,-58,78>, a=<5,-1,19>\\np=<5316,1647,-6598>, v=<103,-120,139>, a=<-13,4,2>\\np=<-863,796,-10039>, v=<-53,17,80>, a=<4,-2,10>\\np=<-2047,2498,1098>, v=<17,9,-31>, a=<2,-4,0>\\np=<-3246,-1044,-8976>, v=<104,-62,1>, a=<0,6,18>\\np=<1869,3544,2215>, v=<35,62,-72>, a=<-6,-11,0>\\np=<1714,6241,3734>, v=<8,-9,-169>, a=<-4,-12,3>\\np=<-625,-2093,2556>, v=<-21,133,-91>, a=<3,-4,0>\\np=<2021,-819,1800>, v=<-101,73,-64>, a=<2,-3,0>\\np=<6263,-4795,-3044>, v=<-35,99,51>, a=<-13,5,4>\\np=<2567,-273,-5382>, v=<-19,10,62>, a=<-5,0,9>\\np=<-4125,-133,-2428>, v=<46,5,0>, a=<7,0,6>\\np=<-6043,707,-8742>, v=<-16,4,153>, a=<16,-2,11>\\np=<-1241,1617,-5620>, v=<117,73,-31>, a=<-5,-9,16>\\np=<4042,-89,-2931>, v=<19,-60,50>, a=<-10,4,3>\\np=<5422,3571,-1506>, v=<-89,-120,49>, a=<-6,0,0>\\np=<-4748,1951,3579>, v=<33,89,-12>, a=<8,-10,-7>\\np=<2107,-2309,474>, v=<-25,14,-17>, a=<-3,4,0>\\np=<3877,2596,-3261>, v=<-84,114,-1>, a=<-3,-13,7>\\np=<-4343,5221,4524>, v=<97,-20,-28>, a=<3,-10,-8>\\np=<3482,2207,105>, v=<-30,-20,-52>, a=<-11,-7,4>\\np=<1524,-1126,2668>, v=<-79,51,50>, a=<1,0,-15>\\np=<-2084,986,688>, v=<108,-91,-44>, a=<-1,4,1>\\np=<2954,-1544,3537>, v=<-75,-45,-70>, a=<-5,10,-8>\\np=<3284,2515,534>, v=<-44,-149,-14>, a=<-9,3,-1>\\np=<-1006,18,2250>, v=<13,-70,0>, a=<3,6,-9>\\np=<-467,4121,1645>, v=<-115,-130,-53>, a=<12,-5,-2>\\np=<-6800,1215,-1164>, v=<113,-70,140>, a=<5,2,-6>\\np=<4114,4224,-59>, v=<37,-36,-15>, a=<-9,-5,1>\\np=<3723,-3715,-9358>, v=<31,110,101>, a=<-8,0,10>\\np=<-1653,897,2988>, v=<8,-51,-98>, a=<5,1,-2>\\np=<-4281,1905,-1488>, v=<55,-43,-74>, a=<10,-3,11>\\np=<-981,1293,1980>, v=<80,20,-81>, a=<-3,-6,0>\\np=<843,321,168>, v=<-46,48,-68>, a=<1,-5,5>\\np=<4791,2909,-5915>, v=<-130,-6,93>, a=<-4,-8,10>\\np=<6949,-4137,1066>, v=<-24,130,0>, a=<-18,2,-3>\\np=<-617,-3227,-8190>, v=<-57,122,140>, a=<6,0,13>\\np=<-6,-5580,104>, v=<95,37,-17>, a=<-7,13,1>\\np=<2906,5106,1326>, v=<-44,-104,-10>, a=<-5,-7,-3>\\np=<387,522,-444>, v=<-61,38,-6>, a=<5,-12,6>\\np=<-1845,-324,708>, v=<190,37,-102>, a=<-5,-1,6>\\np=<-147,204,846>, v=<29,-85,-3>, a=<-2,11,-11>\\np=<-1119,-612,1284>, v=<71,139,-111>, a=<4,-13,0>\\np=<-237,-12,-1074>, v=<-22,11,-12>, a=<7,-1,15>\\np=<-771,96,-696>, v=<16,28,-11>, a=<8,-5,10>\\np=<2187,-396,1056>, v=<-68,4,-92>, a=<-17,5,0>\\np=<-4115,4114,7904>, v=<-27,29,-166>, a=<12,-12,-8>\\np=<-5305,1034,-608>, v=<30,-93,-7>, a=<11,4,2>\\np=<3978,-4037,1771>, v=<25,71,84>, a=<-7,2,-7>\\np=<2054,-1484,-1448>, v=<1,-17,38>, a=<-3,3,0>\\np=<8677,-9069,7321>, v=<-83,-40,-142>, a=<-8,15,-3>\\np=<-3903,-4925,1068>, v=<10,171,46>, a=<5,-2,-4>\\np=<-1054,-7737,-3150>, v=<-10,-95,-125>, a=<2,16,11>\\np=<-259,1092,-1848>, v=<61,-51,79>, a=<-5,-2,4>\\np=<613,788,2888>, v=<-36,-66,-98>, a=<0,2,-10>\\np=<-1963,-2212,280>, v=<23,96,-37>, a=<12,5,2>\\np=<2348,-322,604>, v=<-86,-16,-51>, a=<0,2,2>\\np=<3860,-970,-3743>, v=<-100,64,110>, a=<-3,-2,2>\\np=<1295,-1969,-800>, v=<-33,59,15>, a=<-1,1,1>\\np=<974,-1657,369>, v=<-40,134,-98>, a=<-6,0,10>\\np=<-70,1361,825>, v=<-5,-124,-58>, a=<2,1,-2>\\np=<-634,1445,-411>, v=<55,-66,136>, a=<0,-9,-16>\\np=<290,485,-1707>, v=<-48,-25,101>, a=<4,-3,6>\\np=<-256,833,-1017>, v=<-22,-28,102>, a=<7,-7,-3>\\np=<-34,857,-693>, v=<-34,-17,49>, a=<6,-9,1>\\np=<469,6266,5306>, v=<-92,10,57>, a=<5,-15,-16>\\np=<-10174,495,2493>, v=<170,-61,109>, a=<12,3,-13>\\np=<-865,2670,-523>, v=<-91,-46,18>, a=<8,-3,0>\\np=<-923,-1187,-3162>, v=<31,57,139>, a=<0,-1,-2>\\np=<-2344,350,637>, v=<-100,-146,38>, a=<12,9,-4>\\np=<1281,-3014,-929>, v=<45,-75,32>, a=<-6,12,0>\\np=<1368,1249,-5482>, v=<27,63,114>, a=<-5,-7,5>\\np=<7371,-3043,5422>, v=<-120,16,-7>, a=<-9,6,-12>\\np=<-633,-2898,1623>, v=<-9,-49,109>, a=<2,10,-11>\\np=<2644,3105,2783>, v=<-47,-61,24>, a=<-3,-3,-8>\\np=<-1139,788,2402>, v=<91,-53,-158>, a=<2,-3,-10>\\np=<1017,1646,499>, v=<-93,-47,-45>, a=<0,-17,0>\\np=<-2800,-158,-370>, v=<206,27,70>, a=<8,-2,-6>\\np=<808,-598,763>, v=<-74,49,-45>, a=<0,1,-4>\\np=<-270,854,-480>, v=<12,-173,128>, a=<2,16,-14>\\np=<-1040,139,-733>, v=<94,-12,19>, a=<0,0,8>\\np=<6803,-9003,-1545>, v=<-25,195,10>, a=<-10,4,2>\\np=<1295,-860,-406>, v=<-3,-27,99>, a=<-2,3,-5>\\np=<-1782,2353,6360>, v=<-105,-69,-135>, a=<9,0,-3>\\np=<1006,2863,4133>, v=<-82,21,18>, a=<3,-6,-8>\\np=<1431,-4617,-8770>, v=<28,66,135>, a=<-4,4,7>\\np=<-3329,585,1447>, v=<98,-17,-8>, a=<0,0,-2>\\np=<-1935,-3308,-746>, v=<22,80,4>, a=<2,1,1>\\np=<2845,-2530,-3705>, v=<-53,42,75>, a=<-4,4,5>\\np=<-1978,6856,3406>, v=<-70,-103,-158>, a=<11,-12,2>\\np=<6069,993,-3705>, v=<-123,55,129>, a=<-8,-7,1>\\np=<-1809,564,780>, v=<18,4,51>, a=<4,-2,-6>\\np=<-262,1968,-1612>, v=<26,58,8>, a=<-1,-10,4>\\np=<219,1630,-3523>, v=<75,-64,95>, a=<-6,0,3>\\np=<2140,-366,-1287>, v=<-97,-28,24>, a=<0,4,3>\\np=<963,195,3586>, v=<175,-111,-140>, a=<-19,9,-2>\\np=<-1875,877,-363>, v=<74,-27,74>, a=<1,-1,-5>\\np=<-1818,2412,-2470>, v=<-116,-31,-41>, a=<9,-2,6>\\np=<-4716,-612,-4144>, v=<57,16,24>, a=<4,0,5>\\np=<108,2106,-3082>, v=<71,-78,87>, a=<-4,1,0>\\np=<-1386,-3258,2048>, v=<57,-3,0>, a=<-1,5,-3>\\np=<1728,-5310,-7780>, v=<-11,128,-23>, a=<-2,1,13>\\np=<-8658,-10674,1670>, v=<37,129,-45>, a=<11,9,0>\\np=<-6606,-7668,-2578>, v=<54,101,-1>, a=<7,6,4>\\np=<3206,-711,8158>, v=<-23,-49,-101>, a=<-4,4,-8>\\np=<-7827,-3975,6543>, v=<39,-128,-106>, a=<11,14,-5>\\np=<-160,-2904,-4167>, v=<6,-2,-1>, a=<0,5,7>\\np=<265,1431,6696>, v=<-24,28,-58>, a=<1,-4,-8>\\np=<-1673,377,4333>, v=<-72,-11,-6>, a=<7,0,-7>\\np=<-3411,-85,-3544>, v=<80,-79,55>, a=<4,6,6>\\np=<3570,-5220,-2049>, v=<-67,24,-43>, a=<-5,13,9>\\np=<3960,1592,57>, v=<53,5,-16>, a=<-15,-5,1>\\np=<-135,-72,-3466>, v=<62,96,79>, a=<-4,-7,4>\\np=<-2735,2151,1578>, v=<54,-3,-115>, a=<4,-6,4>\\np=<-3593,-2282,135>, v=<6,73,62>, a=<10,1,-5>\\np=<-577,-2425,-515>, v=<-29,65,-21>, a=<4,2,3>\\np=<-4308,1696,2254>, v=<20,-53,-60>, a=<11,-1,-2>\\np=<-938,798,-2662>, v=<71,26,155>, a=<-1,-10,3>\\np=<-128,2538,893>, v=<25,-138,-18>, a=<-2,-4,-5>\\np=<-1714,-2056,-2548>, v=<82,40,104>, a=<1,7,3>\\np=<1953,-2721,948>, v=<-131,55,-50>, a=<3,9,0>\\np=<-1695,-650,-4144>, v=<-19,-64,188>, a=<11,10,3>\\np=<-859,129,340>, v=<47,25,-18>, a=<0,-3,0>\\np=<-3557,-61,5451>, v=<129,-5,-127>, a=<6,1,-16>\\np=<-1220,-1277,1005>, v=<86,49,-103>, a=<-2,2,5>\\np=<-459,-973,-680>, v=<52,77,45>, a=<-2,0,1>\\np=<2115,1406,1166>, v=<-132,-64,-41>, a=<-4,-6,-7>\\np=<-69,847,-1772>, v=<-13,-63,101>, a=<3,0,5>\\np=<542,-1532,542>, v=<-39,78,-21>, a=<0,6,-3>\\np=<1712,158,-1291>, v=<-122,-52,36>, a=<-1,6,9>\\np=<6007,-3696,1991>, v=<-64,95,40>, a=<-7,1,-6>\\np=<3202,2409,1760>, v=<-64,29,81>, a=<-2,-6,-8>\\np=<-5642,-2310,-1837>, v=<0,-49,-14>, a=<10,7,4>\\np=<9703,3861,6512>, v=<-91,-83,-12>, a=<-12,-2,-11>\\np=<-131,2343,-5995>, v=<71,-71,129>, a=<-4,0,3>\\np=<-2804,693,-7282>, v=<16,30,-2>, a=<4,-3,13>\\np=<-3728,6435,-748>, v=<10,60,72>, a=<6,-15,-3>\\np=<430,891,209>, v=<3,-10,-8>, a=<-1,-1,0>\\np=<-3827,-3465,671>, v=<-21,-82,-39>, a=<8,11,1>\\np=<1234,-468,427>, v=<-59,-9,-51>, a=<-4,6,3>\\np=<-600,575,371>, v=<72,-76,28>, a=<-4,5,-7>\\np=<-1790,1492,1211>, v=<82,61,13>, a=<6,-22,-13>\\np=<597,1548,343>, v=<-21,-78,-120>, a=<-3,-4,13>\\np=<-1048,-2351,2569>, v=<74,178,-99>, a=<0,-1,-11>\\np=<345,1135,812>, v=<-18,-26,-71>, a=<-1,-7,2>\\np=<1640,372,-903>, v=<32,-24,74>, a=<-20,0,-1>\\np=<429,-1462,910>, v=<-99,77,12>, a=<9,4,-10>\\np=<4879,988,-2595>, v=<-46,-43,93>, a=<-15,0,2>\\np=<336,955,4236>, v=<34,-30,-114>, a=<-4,-1,-7>\\np=<4109,-1608,5193>, v=<-11,-63,-169>, a=<-15,12,-6>\\np=<1634,-321,-714>, v=<21,-18,19>, a=<-8,3,1>\\np=<2283,152,210>, v=<-89,64,69>, a=<-1,-6,-7>\\np=<1667,-3907,1585>, v=<-107,7,-28>, a=<3,15,-4>\\np=<-16,141,3642>, v=<-19,30,-18>, a=<2,-3,-13>\\np=<1623,-201,4473>, v=<35,9,-148>, a=<-8,0,-3>\\np=<4911,-3189,1101>, v=<-27,21,-145>, a=<-14,9,8>\\np=<-2397,2871,129>, v=<40,-119,108>, a=<5,0,-9>\\np=<-3345,-369,3057>, v=<-33,-59,-14>, a=<14,6,-9>\\np=<-3670,-2084,-4116>, v=<-72,45,60>, a=<14,2,6>\\np=<3428,-4044,5054>, v=<-108,28,-21>, a=<-1,8,-11>\\np=<4086,-236,2296>, v=<-146,-79,5>, a=<0,6,-6>\\np=<2420,-4114,6888>, v=<-72,74,-72>, a=<-1,5,-12>\\np=<374,473,215>, v=<12,-101,-65>, a=<-9,9,9>\\np=<1134,773,425>, v=<-130,12,-42>, a=<3,-17,1>\\np=<1059,-292,760>, v=<-73,47,-48>, a=<-6,-4,-4>\\np=<224,-282,-2905>, v=<-50,2,192>, a=<5,4,19>\\np=<-371,-87,-1345>, v=<114,32,146>, a=<-14,-5,-1>\\np=<834,403,1200>, v=<-56,-72,-92>, a=<-5,5,-4>\\np=<-841,113,-245>, v=<-4,23,36>, a=<16,-7,-1>\\np=<4653,2787,-3179>, v=<-90,21,-6>, a=<-12,-14,14>\\np=<-1143,-3114,-1310>, v=<32,93,-51>, a=<2,5,10>\\np=<2301,2010,-1037>, v=<0,-19,68>, a=<-10,-7,-2>\\np=<411,-2337,-617>, v=<-64,111,70>, a=<4,0,-4>\\np=<-1752,3375,1168>, v=<72,-7,-4>, a=<1,-14,-5>\\np=<-1395,1002,-2528>, v=<44,-37,216>, a=<2,-1,-9>\\np=<2838,3573,263>, v=<-9,-30,-7>, a=<-4,-4,0>\\np=<-277,8788,963>, v=<-100,-17,-45>, a=<6,-13,1>\\np=<3328,5428,1593>, v=<103,-155,81>, a=<-11,0,-7>\\np=<6338,-3532,12863>, v=<17,47,-25>, a=<-11,3,-19>\\np=<-347,948,-2677>, v=<100,45,-31>, a=<-5,-4,6>\\np=<-6122,6758,-3587>, v=<67,-85,103>, a=<6,-6,0>\\np=<3297,6583,3637>, v=<-90,-148,-6>, a=<-1,-4,-7>\\np=<4165,8908,3482>, v=<-6,-63,-17>, a=<-8,-14,-6>\\np=<-640,8288,-4020>, v=<85,-75,65>, a=<-4,-12,4>\\np=<2770,-3461,8318>, v=<-73,0,-125>, a=<-1,7,-9>\\np=<1158,5436,3885>, v=<-101,65,-14>, a=<4,-15,-7>\\np=<-5414,5963,4009>, v=<-1,-96,-98>, a=<11,-6,-2>\\np=<-6065,-2159,3048>, v=<52,-42,-83>, a=<9,7,-1>\\np=<-1527,-712,781>, v=<1,29,-68>, a=<5,0,3>\\np=<-39,-3280,-1847>, v=<64,61,104>, a=<-5,6,-2>\\np=<3633,788,-1379>, v=<-164,54,47>, a=<1,-7,1>\\np=<1629,116,4321>, v=<-118,32,-128>, a=<4,-3,-4>\\np=<3549,4220,1633>, v=<27,-114,-41>, a=<-14,-5,-2>\\np=<1941,2540,2953>, v=<-56,-19,-121>, a=<-2,-7,0>\\np=<1565,-279,-7907>, v=<88,102,0>, a=<-9,-6,17>\\np=<-1090,-1404,-4232>, v=<99,31,-45>, a=<-4,1,12>\\np=<635,4566,-452>, v=<-5,-13,-16>, a=<-1,-9,2>\\np=<-2860,-6564,-4667>, v=<-28,17,-15>, a=<8,13,11>\\np=<-490,-84,163>, v=<-76,80,41>, a=<6,-5,-3>\\np=<-4540,906,-617>, v=<28,140,67>, a=<8,-11,-3>\\np=<635,-6954,-5357>, v=<-129,92,132>, a=<7,9,3>\\np=<-1510,3576,5248>, v=<-11,51,-113>, a=<4,-11,-4>\\np=<-850,2586,2608>, v=<-188,-9,-25>, a=<14,-5,-4>\\np=<2354,-627,2732>, v=<-72,171,-83>, a=<-5,-14,-6>\\np=<1005,513,148>, v=<-61,-29,23>, a=<1,0,-3>\\np=<-249,-1140,-859>, v=<-15,-2,66>, a=<3,6,-2>\\np=<1936,2166,3245>, v=<40,14,-80>, a=<-14,-13,-9>\\np=<-1256,2223,1193>, v=<38,-49,-22>, a=<3,-7,-4>\\np=<-78,-3382,-1619>, v=<-24,66,-24>, a=<3,11,11>\\np=<-136,-1372,1436>, v=<63,-18,-88>, a=<-5,7,2>\\np=<-1423,6933,4318>, v=<41,-85,-196>, a=<2,-20,0>\\np=<920,-2241,655>, v=<-77,102,97>, a=<3,0,-11>\\np=<1668,707,633>, v=<50,-32,-17>, a=<-11,0,-1>\\np=<1360,-239,941>, v=<-51,-35,-31>, a=<-1,4,-1>\\np=<-4382,113,-3866>, v=<72,-5,107>, a=<11,0,6>\\np=<-4470,-470,1744>, v=<76,10,-125>, a=<11,1,4>\\np=<172,-3308,-929>, v=<49,93,31>, a=<-5,5,1>\\np=<-3876,47,622>, v=<-20,44,41>, a=<17,-4,-6>\\np=<2910,-3933,1100>, v=<-36,34,18>, a=<-3,5,-3>\\np=<-1710,2799,-1078>, v=<104,68,-35>, a=<-3,-9,4>\\np=<534,-13569,8459>, v=<-49,105,-137>, a=<2,18,-7>\\np=<-1116,11577,-121>, v=<120,-45,4>, a=<-5,-18,0>\\np=<-390,-9840,-1045>, v=<-55,77,-53>, a=<4,13,5>\\np=<-5208,1941,-3652>, v=<142,-93,26>, a=<1,2,5>\\np=<-7188,-567,1760>, v=<117,-68,-53>, a=<6,5,0>\\np=<11292,-1887,-1276>, v=<-86,57,5>, a=<-15,0,2>\\np=<1212,-6101,-497>, v=<1,93,96>, a=<-4,13,-6>\\np=<-2124,-3077,1855>, v=<65,-33,23>, a=<2,13,-8>\\np=<-1284,1567,883>, v=<-20,-14,26>, a=<6,-4,-5>\\np=<1668,5371,-2033>, v=<57,-35,-40>, a=<-10,-15,10>\\np=<-180,-161,-1697>, v=<34,-42,-79>, a=<-2,4,12>\\np=<-2939,-929,-114>, v=<7,89,-9>, a=<10,-4,1>\\np=<-1237,106,1082>, v=<65,-28,-37>, a=<-1,2,-1>\\np=<-1306,-2470,2669>, v=<8,84,-58>, a=<4,2,-5>\\np=<1109,474,1473>, v=<-85,40,-126>, a=<3,-5,5>\\np=<2604,-3919,2140>, v=<-6,87,-47>, a=<-9,7,-4>\\np=<2512,-2884,-5749>, v=<-86,102,116>, a=<-2,2,11>\\np=<-6205,4614,2186>, v=<65,-44,-37>, a=<17,-13,-5>\\np=<1891,1647,3911>, v=<-35,73,-136>, a=<-4,-12,-3>\\np=<-12265,-6083,-1408>, v=<108,36,30>, a=<18,10,1>\\np=<-237,1326,-1191>, v=<-24,117,39>, a=<2,-10,0>\\np=<-3965,437,1378>, v=<112,-159,0>, a=<0,8,-2>\\np=<8797,-2713,1756>, v=<-113,95,-103>, a=<-7,-1,3>\\np=<-1103,1211,4366>, v=<-97,-162,-120>, a=<7,7,0>\\np=<2749,-4405,2512>, v=<-19,68,-198>, a=<-3,3,7>\\np=<3757,2399,-6812>, v=<-47,-84,-50>, a=<-3,1,13>\\np=<-5711,-2821,8290>, v=<-80,98,-7>, a=<13,-1,-12>\\np=<11263,2849,-4130>, v=<-15,-78,153>, a=<-16,0,-2>\\np=<-2417,-8149,-872>, v=<69,61,-67>, a=<0,9,5>\\np=<1566,465,-1809>, v=<-7,1,92>, a=<-12,-4,4>\\np=<-1539,-690,2256>, v=<72,30,-147>, a=<4,2,0>\\np=<6918,1222,10204>, v=<-81,-52,-142>, a=<-7,1,-9>\\np=<-579,848,-10672>, v=<17,-6,52>, a=<0,-1,15>\\np=<1784,-937,3438>, v=<105,-76,-48>, a=<-9,6,-3>\\np=<1495,-36,-5113>, v=<-9,20,46>, a=<-2,-1,6>\\np=<-233,-329,-6590>, v=<34,-16,62>, a=<-2,2,13>\\np=<1279,5071,1294>, v=<76,-62,-34>, a=<-9,-9,-1>\\np=<5572,-3650,5182>, v=<43,-33,-80>, a=<-18,12,-8>\\np=<-314,-3758,1402>, v=<65,-29,-80>, a=<-4,12,2>\\np=<2305,5071,-3134>, v=<-130,-104,144>, a=<3,-6,-2>\\np=<1225,2803,1699>, v=<-62,36,-35>, a=<1,-10,-2>\\np=<-1826,2803,4183>, v=<79,92,27>, a=<-1,-14,-13>\\np=<3277,535,3778>, v=<-110,-20,-28>, a=<-1,0,-8>\\np=<-5957,49,8773>, v=<-6,12,-101>, a=<16,-1,-16>\\np=<-2852,1507,-3674>, v=<89,-56,94>, a=<1,0,3>\\np=<130,-2221,-667>, v=<-27,122,42>, a=<2,-2,-1>\\np=<-1674,-263,-777>, v=<9,10,116>, a=<6,0,-7>\\np=<-1256,-1341,-2713>, v=<36,105,43>, a=<2,-4,7>\\np=<1890,3444,235>, v=<54,-124,-22>, a=<-12,-3,1>\\np=<-618,320,5680>, v=<30,18,-74>, a=<0,-3,-16>\\np=<2759,-21,-810>, v=<-89,45,37>, a=<-3,-4,0>\\np=<31,-142,-1723>, v=<-11,-30,90>, a=<1,3,-1>\\np=<3067,-1781,510>, v=<-57,79,0>, a=<-7,0,-2>\\np=<2922,-2005,-1552>, v=<-39,15,9>, a=<-6,5,4>\\np=<4022,645,748>, v=<-18,-52,-96>, a=<-11,2,5>\\np=<1672,3945,2748>, v=<-106,-54,19>, a=<3,-8,-10>\\np=<-7378,-1180,2598>, v=<113,-135,-27>, a=<14,14,-6>\\np=<3946,2459,2750>, v=<-154,-40,-118>, a=<-3,-7,-1>\\np=<2245,-502,-358>, v=<-95,-20,19>, a=<-1,4,0>\\np=<-4753,4381,-9193>, v=<63,2,48>, a=<4,-7,12>\\np=<5782,6411,12>, v=<86,52,1>, a=<-14,-13,0>\\np=<847,2281,-2088>, v=<29,-100,7>, a=<-3,2,3>\\np=<-343,5956,-233>, v=<-135,11,-64>, a=<8,-10,4>\\np=<-1743,-7974,-2753>, v=<13,-23,62>, a=<2,14,1>\\np=<-5393,-1767,1927>, v=<-79,34,-92>, a=<13,1,2>\\np=<627,-11952,1997>, v=<37,127,-76>, a=<-3,12,1>\\np=<-878,-997,3047>, v=<62,66,-88>, a=<-2,-2,0>\\np=<-1578,-6282,-7768>, v=<28,1,131>, a=<1,10,5>\\np=<4092,-2327,2>, v=<-152,-22,17>, a=<2,5,-1>\\np=<4477,-1767,-278>, v=<-19,106,-11>, a=<-6,-3,1>\\np=<-1873,4441,1975>, v=<74,-172,-109>, a=<3,-8,0>\\np=<-1396,2506,274>, v=<76,-131,-81>, a=<0,-1,7>\\np=<539,2443,-1670>, v=<-3,-42,122>, a=<-3,-10,-3>\\np=<-874,2074,373>, v=<-10,-31,-20>, a=<6,-9,0>\\np=<-2224,1840,-1850>, v=<65,-75,-39>, a=<6,-3,15>\\np=<-3673,-644,-1841>, v=<117,44,46>, a=<9,-1,6>\\np=<745,2476,575>, v=<-54,-81,-69>, a=<1,-7,4>\\np=<3941,1065,3363>, v=<-80,74,-80>, a=<-17,-15,-13>\\np=<14,640,1969>, v=<88,36,-79>, a=<-10,-8,-4>\\np=<2761,2482,47>, v=<-95,-69,1>, a=<-5,-6,0>\\np=<1431,1760,1719>, v=<75,-91,-67>, a=<-15,0,-2>\\np=<1260,-2781,693>, v=<44,118,67>, a=<-11,3,-10>\\np=<-3490,2748,-523>, v=<54,77,21>, a=<13,-22,1>\\np=<3559,1722,-447>, v=<-67,-59,-3>, a=<-12,-3,3>\\np=<1317,4648,218>, v=<-39,-123,2>, a=<-3,-12,-1>\\np=<3939,-653,-1131>, v=<-147,26,83>, a=<-6,1,-2>\\np=<-393,924,-86>, v=<-79,-67,-2>, a=<10,2,1>\\np=<-1647,-653,-295>, v=<27,136,-31>, a=<6,-10,5>\\np=<2609,3641,-1682>, v=<-67,-100,92>, a=<-7,-9,0>\\np=<4458,-44,3498>, v=<0,0,-33>, a=<-6,0,-3>\\np=<1380,-804,857>, v=<42,20,-22>, a=<-4,0,0>\\np=<-1961,69,-4356>, v=<-4,31,-13>, a=<4,-2,9>\\np=<-201,1205,4652>, v=<7,-120,19>, a=<0,5,-10>\\np=<-4681,-3211,4092>, v=<147,-48,-112>, a=<0,9,-1>\\np=<5063,-1371,2140>, v=<-9,10,-18>, a=<-9,2,-3>\\np=<-4713,5365,-4484>, v=<148,-118,90>, a=<0,-3,3>\\np=<3042,-4034,2292>, v=<-174,-15,-140>, a=<3,17,3>\\np=<1403,-173,1918>, v=<-65,51,-8>, a=<0,-4,-7>\\np=<1491,1202,-579>, v=<69,0,48>, a=<-12,-5,-2>\\np=<94,465,-337>, v=<6,-1,-9>, a=<-1,-2,2>\\np=<-940,-866,-1833>, v=<-16,48,59>, a=<5,-1,2>\\np=<-6227,-3076,-5246>, v=<-41,-61,-66>, a=<10,7,10>\\np=<-7982,-970,3997>, v=<4,-95,-143>, a=<10,6,2>\\np=<-4082,122,-371>, v=<-36,-83,9>, a=<7,4,0>\\np=<-2834,-6391,5635>, v=<52,144,-85>, a=<1,1,-3>\\np=<-728,1136,-11915>, v=<18,-49,105>, a=<0,1,10>\\np=<7813,3164,-4739>, v=<-41,-1,-39>, a=<-8,-4,8>\\np=<-798,-223,-1670>, v=<1,-18,142>, a=<14,7,4>\\np=<-73,597,-545>, v=<-22,-12,24>, a=<5,-9,5>\\np=<207,327,95>, v=<49,-51,4>, a=<-13,3,-3>\\np=<-593,-1238,-210>, v=<-14,111,-26>, a=<13,2,8>\\np=<517,1042,-885>, v=<-37,-29,80>, a=<-3,-14,1>\\np=<-258,-808,755>, v=<24,35,-29>, a=<0,8,-9>\\np=<112,-598,-750>, v=<-46,36,39>, a=<6,4,6>\\np=<867,202,-620>, v=<-50,-44,37>, a=<-7,4,4>\\np=<-1008,752,-745>, v=<99,-44,66>, a=<0,-6,1>\\np=<-2313,-4479,2367>, v=<23,57,107>, a=<3,5,-11>\\np=<-1801,-1871,-225>, v=<73,58,-76>, a=<-1,0,5>\\np=<-745,5089,-689>, v=<106,-77,-45>, a=<-5,-5,4>\\np=<-281,7201,-9361>, v=<75,-110,-38>, a=<-4,-7,20>\\np=<-2313,-2959,1103>, v=<23,59,97>, a=<3,2,-8>\\np=<-7161,-4735,-2993>, v=<125,-1,27>, a=<6,9,4>\\np=<-4937,193,3567>, v=<105,10,-46>, a=<3,-1,-4>\\np=<657,2664,-4372>, v=<-3,44,147>, a=<-1,-7,-1>\\np=<-6432,-2164,4672>, v=<48,46,-119>, a=<8,1,-1>\\np=<11452,-2929,1153>, v=<-93,-19,2>, a=<-14,6,-2>\\np=<470,376,-3300>, v=<54,-40,68>, a=<-7,2,8>\\np=<533,817,858>, v=<-81,-39,13>, a=<5,0,-5>\\np=<-181,3085,-171>, v=<19,-15,106>, a=<-1,-12,-9>\\np=<-2512,1825,585>, v=<97,-120,59>, a=<2,3,-8>\\np=<-1777,208,4596>, v=<18,-10,-44>, a=<6,0,-16>\\np=<2108,-3446,3819>, v=<-90,164,-62>, a=<-1,0,-11>\\np=<1289,1405,2727>, v=<-73,-78,-54>, a=<1,1,-7>\\np=<-1042,-3572,5919>, v=<38,60,-129>, a=<1,10,-14>\\np=<-1738,-1725,-2107>, v=<-8,1,43>, a=<9,8,6>\\np=<-4318,-2115,1143>, v=<79,31,38>, a=<13,7,-9>\\np=<-2828,-1195,-847>, v=<36,48,64>, a=<10,1,-2>\\np=<-308,1075,-1087>, v=<15,-34,-8>, a=<0,-2,6>\\np=<-1938,-585,-1917>, v=<44,28,107>, a=<5,0,-1>\\np=<-168,3025,1303>, v=<50,-79,-12>, a=<-4,-7,-5>\\np=<3682,-2605,-727>, v=<-111,3,100>, a=<-7,12,-6>\\np=<-768,-403,-567>, v=<-18,77,50>, a=<7,-6,-2>\\np=<813,-386,-805>, v=<33,40,19>, a=<-9,-2,3>\\np=<-3522,1773,-448>, v=<144,-69,16>, a=<7,-4,1>\\np=<-1737,600,1167>, v=<102,0,29>, a=<0,-4,-11>\\np=<1102,-2902,487>, v=<-65,143,-66>, a=<0,3,4>\\np=<-326,-471,623>, v=<-44,27,-56>, a=<7,0,2>\\np=<4553,3065,3972>, v=<-142,-109,-100>, a=<-14,-8,-15>\\np=<405,-709,1966>, v=<-69,23,-90>, a=<5,2,-3>\\np=<3469,-4,1122>, v=<-54,-22,-41>, a=<-9,2,-1>\\np=<2732,-1907,-2464>, v=<14,76,-16>, a=<-12,1,11>\\np=<664,216,-1089>, v=<-53,60,2>, a=<2,-6,4>\\np=<4965,-1907,-4609>, v=<-145,53,116>, a=<-7,3,8>\\np=<-4781,3747,-2882>, v=<137,-89,49>, a=<7,-7,7>\\np=<588,2176,1304>, v=<-63,-114,-62>, a=<3,-4,-3>\\np=<-162,226,-1591>, v=<-45,16,51>, a=<7,-4,7>\\np=<-666,-2672,-1816>, v=<-25,82,-20>, a=<8,10,16>\\np=<-1458,-400,-784>, v=<101,76,94>, a=<-1,-6,-5>\\np=<-2514,-1256,400>, v=<99,2,-82>, a=<7,9,7>\\np=<-1258,2040,-1168>, v=<12,-34,67>, a=<8,-11,1>\\np=<-1170,-200,-2080>, v=<66,55,107>, a=<1,-5,3>\\np=<-2114,880,-640>, v=<57,30,34>, a=<9,-10,1>\\np=<1678,-1056,1640>, v=<-180,49,-49>, a=<9,2,-6>\\np=<750,1592,-352>, v=<-54,-74,16>, a=<1,-3,1>\\np=<-1442,1968,-520>, v=<-19,-55,52>, a=<13,-8,-2>\\np=<7148,4362,-302>, v=<-171,-92,56>, a=<-5,-4,-3>\\np=<-1262,2013,-2738>, v=<29,19,-10>, a=<1,-6,7>\\np=<-2153,-669,-1959>, v=<111,46,153>, a=<4,0,-3>\\np=<892,1266,-69>, v=<52,-35,-5>, a=<-14,-6,1>\\np=<-1493,-1524,-174>, v=<27,15,-46>, a=<9,11,7>\\np=<-2033,-1899,-1359>, v=<39,16,57>, a=<12,14,4>\\np=<37,-954,-174>, v=<53,57,66>, a=<-7,1,-7>\\np=<3562,-189,681>, v=<-118,-74,-119>, a=<-15,11,9>\\np=<4502,5500,3471>, v=<-134,-88,-133>, a=<-3,-9,0>\\np=<-61,-1663,3250>, v=<82,39,-3>, a=<-6,2,-9>\\np=<-61,-3275,1651>, v=<-26,47,-9>, a=<2,6,-4>\\np=<2745,-1628,703>, v=<393,-235,102>, a=<-28,14,-6>\\np=<-2193,1468,1686>, v=<-313,207,240>, a=<17,-16,-16>\\np=<-2432,2061,173>, v=<-347,291,21>, a=<25,-20,-3>\\np=<2109,104,-1194>, v=<297,14,-170>, a=<-17,-1,6>\\np=<1189,-1470,-2850>, v=<163,-212,-409>, a=<-11,14,30>\\np=<1481,324,2466>, v=<213,41,356>, a=<-11,0,-27>\\np=<2220,610,-2496>, v=<318,90,-356>, a=<-23,-7,24>\\np=<-2481,1240,111>, v=<-355,179,15>, a=<21,-7,-1>\\np=<2234,230,-2139>, v=<322,36,-305>, a=<-21,4,21>\\np=<-1349,2138,1465>, v=<-192,303,205>, a=<15,-21,-12>\\np=<-1348,768,2878>, v=<-192,106,416>, a=<8,-6,-33>\\np=<3288,-44,539>, v=<470,-11,73>, a=<-32,0,-7>\\np=<-2759,-41,-809>, v=<-392,-5,-111>, a=<28,0,7>\\np=<-2900,-230,-1061>, v=<-415,-39,-152>, a=<30,1,9>\\np=<-14,2975,219>, v=<-2,423,31>, a=<0,-32,-1>\\np=<1783,-2670,260>, v=<255,-381,37>, a=<-24,27,-4>\\np=<932,778,-2980>, v=<134,110,-424>, a=<-10,-8,32>\\np=<1755,-2644,1480>, v=<245,-377,211>, a=<-17,22,-15>\\np=<-621,705,3540>, v=<-84,98,498>, a=<11,-7,-36>\\np=<2133,1423,1847>, v=<305,200,264>, a=<-20,-12,-16>\\np=<2791,-220,-1644>, v=<393,-29,-232>, a=<-27,-2,15>\\np=<2139,-1302,-1533>, v=<309,-185,-218>, a=<-21,13,17>\\np=<1109,1580,1674>, v=<156,226,237>, a=<-3,-14,-16>\\np=<-2535,97,-1203>, v=<-360,13,-169>, a=<23,-1,12>\\np=<1737,-659,-2322>, v=<242,-94,-330>, a=<-14,6,18>\\np=<3013,795,-30>, v=<430,112,-8>, a=<-30,-11,1>\\np=<888,-411,2377>, v=<127,-61,342>, a=<-7,6,-23>\\np=<2580,-340,-1825>, v=<364,-44,-264>, a=<-27,0,20>\\np=<2324,1533,-830>, v=<332,222,-115>, a=<-23,-16,14>\\np=<-1191,-1908,1349>, v=<-170,-275,190>, a=<12,21,-13>\\np=<-176,2656,1556>, v=<-24,379,225>, a=<3,-25,-11>\\np=<-2946,259,-954>, v=<-415,37,-137>, a=<25,-3,15>\\np=<-378,3118,25>, v=<-56,445,-1>, a=<3,-28,5>\\np=<2,2477,-264>, v=<0,354,-35>, a=<-2,-24,3>\\np=<2264,634,1871>, v=<321,93,263>, a=<-27,-10,-19>\\np=<1507,-2302,-972>, v=<220,-334,-137>, a=<-17,20,5>\\np=<-2759,-1106,370>, v=<-392,-153,52>, a=<27,9,-2>\\np=<1080,-1607,1647>, v=<152,-232,235>, a=<-10,20,-13>\\np=<-1193,-1711,-2860>, v=<-170,-246,-412>, a=<10,18,30>\\np=<1311,819,2101>, v=<184,113,303>, a=<-14,-4,-21>\\np=<-2981,-1139,346>, v=<-428,-158,50>, a=<27,11,-4>\\np=<378,176,-3454>, v=<54,25,-492>, a=<-5,-1,33>\\np=<-3192,-143,841>, v=<-456,-18,117>, a=<32,3,-10>\\np=<2198,1336,-1875>, v=<310,190,-267>, a=<-21,-13,19>\\np=<203,2865,-1437>, v=<32,406,-204>, a=<-2,-28,19>\\np=<2702,-868,-1243>, v=<386,-120,-176>, a=<-27,6,9>\\np=<-1373,1484,-2247>, v=<-198,212,-321>, a=<13,-17,24>\\np=<-515,-2806,-868>, v=<-76,-405,-119>, a=<5,27,2>\\np=<2064,668,1417>, v=<294,96,201>, a=<-18,1,-16>\\np=<-1342,-977,2545>, v=<-191,-139,365>, a=<13,9,-22>\\np=<-139,2682,-2073>, v=<-19,385,-292>, a=<8,-21,15>\\np=<-2525,917,959>, v=<-359,129,136>, a=<26,-8,-9>\\np=<-1767,-914,2290>, v=<-260,-130,325>, a=<19,5,-22>\\np=<979,1838,-2045>, v=<140,260,-290>, a=<-9,-18,25>\\np=<1259,2250,-1270>, v=<178,319,-180>, a=<-11,-24,12>\\np=<-744,1978,-1905>, v=<-107,279,-273>, a=<7,-21,23>\\np=<352,2140,2324>, v=<50,301,332>, a=<-4,-17,-29>\\np=<556,2800,-677>, v=<79,403,-94>, a=<-8,-25,5>\\np=<1000,-2365,1843>, v=<137,-343,260>, a=<-9,23,-18>\\np=<3198,-403,-105>, v=<455,-57,-8>, a=<-33,5,9>\\np=<-1297,-1294,1901>, v=<-185,-187,273>, a=<13,15,-20>\\np=<1364,-2583,802>, v=<199,-364,114>, a=<-14,24,-8>\\np=<-815,741,2679>, v=<-116,105,386>, a=<5,-9,-28>\\np=<-2492,-2369,847>, v=<-358,-335,120>, a=<24,15,-8>\\np=<513,-208,2733>, v=<73,-24,389>, a=<-7,6,-27>\\np=<-2471,-1800,384>, v=<-354,-260,55>, a=<21,19,-6>\\np=<65,-2499,2144>, v=<8,-357,308>, a=<-2,25,-21>\\np=<-194,-2962,1330>, v=<-30,-428,190>, a=<2,31,-17>\\np=<3025,-962,561>, v=<425,-139,83>, a=<-29,11,-7>\\np=<-728,-3063,731>, v=<-105,-437,103>, a=<4,25,-6>\\np=<930,-2786,1428>, v=<129,-398,209>, a=<-5,24,-18>\\np=<-3455,312,-397>, v=<-493,47,-56>, a=<39,2,2>\\np=<302,-2001,1325>, v=<43,-285,194>, a=<-2,25,-19>\\np=<2298,-1360,-1280>, v=<328,-192,-183>, a=<-21,13,12>\\np=<-794,1408,-2426>, v=<-114,201,-345>, a=<7,-11,25>\\np=<2040,455,2002>, v=<291,67,289>, a=<-20,-6,-22>\\np=<2040,1572,1423>, v=<285,221,202>, a=<-21,-19,-14>\\np=<-3011,1114,-637>, v=<-430,160,-94>, a=<31,-9,11>\\np=<782,-1341,-2262>, v=<107,-195,-320>, a=<-9,15,18>\\np=<3019,-888,-101>, v=<431,-124,-17>, a=<-26,6,1>\\np=<-1414,1805,1648>, v=<-202,264,236>, a=<14,-19,-15>\\np=<-1143,964,2590>, v=<-161,133,368>, a=<12,-8,-29>\\np=<-3127,-826,1008>, v=<-450,-118,142>, a=<34,8,-14>\\np=<-2417,-2045,1291>, v=<-348,-297,186>, a=<18,23,-12>\\np=<-2275,-792,2149>, v=<-325,-112,303>, a=<26,7,-15>\\np=<2219,1393,1517>, v=<320,200,219>, a=<-21,-12,-16>\\np=<-1610,1306,2537>, v=<-227,186,357>, a=<14,-13,-25>\\np=<975,-1518,2508>, v=<140,-213,358>, a=<-10,18,-26>\\np=<-897,-2180,-1>, v=<-128,-309,1>, a=<7,21,4>\\np=<-1564,-2273,1796>, v=<-226,-324,264>, a=<15,25,-15>\\np=<77,2231,1405>, v=<13,313,197>, a=<-3,-22,-14>\\np=<649,1887,1404>, v=<95,268,200>, a=<-6,-22,-17>\\np=<333,3043,-875>, v=<47,434,-124>, a=<-3,-26,5>\\np=<-925,-1572,2168>, v=<-133,-220,307>, a=<8,15,-22>\\np=<571,2386,1925>, v=<83,336,277>, a=<-6,-24,-18>\\np=<616,3182,603>, v=<85,452,90>, a=<-6,-28,-6>\\np=<251,-2200,2170>, v=<33,-315,314>, a=<-6,26,-21>\\np=<-1997,-1181,-1510>, v=<-285,-167,-216>, a=<22,10,18>\\np=<847,2152,-1616>, v=<118,307,-230>, a=<-6,-24,15>\\np=<223,424,-2903>, v=<34,54,-416>, a=<1,-8,27>\\np=<2514,2109,67>, v=<360,300,3>, a=<-26,-22,0>\\np=<-679,2750,1365>, v=<-96,389,197>, a=<6,-26,-13>\\np=<-2486,-1751,20>, v=<-354,-247,2>, a=<23,20,1>\\np=<371,-2855,1294>, v=<54,-408,183>, a=<-5,27,-12>\\np=<1625,190,-2759>, v=<231,27,-394>, a=<-16,-6,24>\\np=<-1821,-433,2182>, v=<-260,-65,308>, a=<20,-1,-21>\\np=<1310,129,2956>, v=<184,14,422>, a=<-13,-3,-29>\\np=<-2025,2177,988>, v=<-289,308,146>, a=<26,-25,-6>\\np=<-2782,1356,-383>, v=<-400,196,-55>, a=<29,-10,3>\\np=<2409,848,797>, v=<349,121,113>, a=<-22,-6,-7>\\np=<245,-2709,406>, v=<35,-386,57>, a=<-5,29,-5>\\np=<2683,1619,723>, v=<383,234,106>, a=<-25,-17,-7>\\np=<-786,2197,-822>, v=<-110,312,-121>, a=<7,-18,8>\\np=<926,2250,-1822>, v=<132,319,-256>, a=<-14,-23,18>\\np=<-2062,-994,-2342>, v=<-289,-139,-334>, a=<13,9,21>\\np=<189,1430,-2492>, v=<29,204,-358>, a=<-1,-19,24>\\np=<-2385,-18,363>, v=<-340,-4,52>, a=<23,5,-6>\\np=<2970,-1118,234>, v=<424,-159,34>, a=<-30,9,-1>\\np=<-625,2414,-2608>, v=<-90,341,-374>, a=<6,-24,28>\\np=<-1041,2464,617>, v=<-146,345,97>, a=<8,-29,-2>\\np=<-2162,-1047,-998>, v=<-311,-149,-143>, a=<21,8,4>\\np=<-2256,1575,-1461>, v=<-323,225,-210>, a=<25,-11,20>\\np=<1109,1777,1006>, v=<158,253,148>, a=<-11,-21,-11>\\np=<1426,-2508,865>, v=<206,-362,121>, a=<-13,26,-8>\\np=<-240,3005,-117>, v=<-33,433,-16>, a=<3,-26,-3>\\np=<-910,1926,1437>, v=<-127,275,205>, a=<9,-20,-12>\\np=<-1480,1847,2940>, v=<-211,270,418>, a=<15,-18,-30>\\np=<6,-2358,-2058>, v=<-6,-336,-294>, a=<-3,23,21>\\np=<-2058,2013,2178>, v=<-296,287,313>, a=<23,-17,-24>\\np=<404,-902,3143>, v=<58,-126,449>, a=<-7,9,-28>\\np=<-2322,-476,-1672>, v=<-330,-65,-237>, a=<23,4,23>\\np=<-2745,-589,1792>, v=<-393,-80,259>, a=<28,5,-17>\\np=<1941,-1109,-2190>, v=<276,-163,-308>, a=<-23,14,21>\\np=<1406,-2513,721>, v=<202,-361,104>, a=<-18,29,-6>\\np=<188,-2221,1756>, v=<26,-314,249>, a=<1,18,-13>\\np=<-331,2557,616>, v=<-46,368,86>, a=<0,-22,-3>\\np=<85,-133,-3419>, v=<13,-24,-491>, a=<-3,8,34>\\np=<3151,1215,316>, v=<449,173,45>, a=<-28,-9,-3>\\np=<-844,-3341,-2>, v=<-117,-477,1>, a=<8,35,-1>\\np=<502,1686,-2468>, v=<71,238,-348>, a=<-8,-18,19>\\np=<-1517,1356,2155>, v=<-216,188,305>, a=<15,-13,-21>\\np=<15,-1497,-2545>, v=<5,-211,-368>, a=<0,9,27>\\np=<931,-559,2872>, v=<131,-80,410>, a=<-14,6,-26>\\np=<-900,-2508,-83>, v=<-124,-365,-15>, a=<7,28,-1>\\np=<255,-760,-2936>, v=<33,-110,-418>, a=<-4,13,29>\\np=<882,-2392,-1417>, v=<127,-336,-202>, a=<-7,26,13>\\np=<2538,286,236>, v=<361,37,33>, a=<-26,-3,-2>\\np=<-657,1296,-3087>, v=<-94,184,-440>, a=<2,-8,29>\\np=<-1129,654,2225>, v=<-162,93,312>, a=<12,-9,-22>\\np=<1135,898,-2700>, v=<164,131,-386>, a=<-10,-8,28>\\np=<-101,1379,-2551>, v=<-15,196,-368>, a=<0,-12,30>\\np=<-875,88,2620>, v=<-124,12,368>, a=<11,3,-28>\\np=<1020,2762,1602>, v=<142,391,226>, a=<-7,-34,-9>\\np=<1901,1517,1468>, v=<269,215,211>, a=<-21,-15,-14>\\np=<1994,-2383,-204>, v=<284,-335,-31>, a=<-17,24,5>\\np=<-2662,1237,1016>, v=<-380,176,146>, a=<31,-14,-9>\\np=<-1299,-518,2783>, v=<-183,-75,395>, a=<11,10,-25>\\np=<2154,1800,1755>, v=<307,258,252>, a=<-16,-14,-19>\\np=<2580,-1697,740>, v=<363,-242,106>, a=<-26,14,-11>\\np=<-1554,1745,-1718>, v=<-217,247,-253>, a=<17,-21,18>\\np=<2121,-997,-1810>, v=<305,-142,-263>, a=<-23,9,20>\\np=<-1836,-2297,-503>, v=<-262,-332,-73>, a=<18,18,7>\\np=<1616,1801,-364>, v=<235,257,-51>, a=<-13,-19,4>\\np=<-293,-389,-3095>, v=<-42,-57,-446>, a=<4,7,32>\\np=<-1720,2558,-643>, v=<-244,369,-89>, a=<15,-25,6>\\np=<-115,-2484,-2147>, v=<-15,-354,-308>, a=<1,24,21>\\np=<-470,926,-2673>, v=<-64,133,-382>, a=<5,-10,26>\\np=<484,-2506,-1709>, v=<76,-353,-247>, a=<-5,25,18>\\np=<618,-1377,2736>, v=<85,-196,392>, a=<-3,13,-27>\\np=<2049,-2070,-199>, v=<292,-298,-26>, a=<-23,19,1>\\np=<-1025,2128,-2160>, v=<-149,303,-307>, a=<16,-15,18>\\np=<-981,2213,1897>, v=<-134,315,270>, a=<9,-19,-19>\\np=<-1626,1942,1425>, v=<-228,277,197>, a=<14,-16,-18>\\np=<-2430,-124,-914>, v=<-346,-10,-130>, a=<22,3,11>\\np=<-2010,963,2401>, v=<-287,136,343>, a=<24,-10,-27>\\np=<-18,1069,2874>, v=<-1,152,412>, a=<0,-15,-23>\\np=<-410,2304,-2158>, v=<-58,325,-306>, a=<6,-19,18>\\np=<-5,247,2825>, v=<2,37,406>, a=<4,-5,-30>\\np=<-1441,-1918,-1739>, v=<-205,-274,-248>, a=<10,20,13>\\np=<1718,-421,-1985>, v=<244,-62,-278>, a=<-14,4,14>\\np=<1815,2181,-1091>, v=<262,308,-155>, a=<-18,-22,10>\\np=<-645,-2243,2268>, v=<-90,-316,326>, a=<8,21,-23>\\np=<-901,306,-2703>, v=<-126,46,-380>, a=<10,-1,29>\\np=<2442,1155,799>, v=<349,165,114>, a=<-26,-17,-4>\\np=<2537,-1585,170>, v=<368,-222,24>, a=<-25,15,1>\\np=<784,-366,-3120>, v=<110,-55,-448>, a=<-10,5,30>\\np=<831,-1139,-2824>, v=<117,-159,-398>, a=<-8,15,27>\\np=<1244,726,-2075>, v=<174,105,-299>, a=<-12,-6,20>\\np=<2987,-752,982>, v=<427,-107,134>, a=<-33,7,-9>\\np=<-64,-2938,1182>, v=<-9,-419,172>, a=<-3,34,-12>\\np=<-1002,2238,2211>, v=<-143,316,316>, a=<13,-18,-22>\\np=<1608,-1418,-1969>, v=<226,-197,-278>, a=<-18,17,20>\\np=<605,986,2623>, v=<88,140,374>, a=<-6,-7,-24>\\np=<-1347,-1657,-2682>, v=<-194,-242,-388>, a=<12,11,30>\\np=<-1952,849,2157>, v=<-276,122,309>, a=<19,-7,-20>\\np=<-1433,-337,-2598>, v=<-204,-44,-372>, a=<18,7,28>\\np=<1436,161,-2403>, v=<199,29,-340>, a=<-14,0,23>\\np=<-1329,1914,-2561>, v=<-189,273,-365>, a=<16,-19,28>\\np=<-1494,-565,-3490>, v=<-213,-82,-496>, a=<13,5,35>\\np=<1996,1649,1039>, v=<277,234,147>, a=<-19,-12,-10>\\np=<-1414,-1687,1919>, v=<-202,-243,276>, a=<11,14,-18>\\np=<-722,-3069,-330>, v=<-103,-435,-47>, a=<9,33,3>\\np=<-3507,397,-497>, v=<-501,56,-73>, a=<38,-2,2>\\np=<-2284,359,1985>, v=<-326,51,284>, a=<19,-3,-19>\\np=<-2088,-1086,1090>, v=<-298,-157,157>, a=<20,15,-10>\\np=<-2059,-2438,453>, v=<-297,-343,63>, a=<23,20,-6>\\np=<1792,-2292,-1052>, v=<260,-327,-144>, a=<-20,18,9>\\np=<311,3065,-789>, v=<44,436,-116>, a=<-3,-25,2>\\np=<1741,-2758,-994>, v=<248,-390,-146>, a=<-9,28,6>\\np=<-1555,1747,-1795>, v=<-223,249,-256>, a=<13,-17,16>\\np=<-2042,2344,620>, v=<-297,336,90>, a=<21,-26,-3>\\np=<2090,2154,155>, v=<303,308,18>, a=<-21,-18,-3>\\np=<2346,498,-1495>, v=<335,69,-218>, a=<-21,-7,13>\\np=<-2803,-353,516>, v=<-400,-54,80>, a=<28,-5,-4>\\np=<761,-2062,1872>, v=<113,-296,269>, a=<-3,24,-21>\\np=<-2026,1077,2346>, v=<-293,154,337>, a=<20,-14,-19>\\np=<-814,1445,-2431>, v=<-114,209,-346>, a=<6,-15,23>\\np=<-82,-2733,75>, v=<-10,-390,10>, a=<0,26,-3>\\np=<1841,-641,-1620>, v=<268,-94,-231>, a=<-15,10,13>\\np=<2462,-2255,501>, v=<352,-324,71>, a=<-25,22,0>\\np=<1272,243,2345>, v=<180,31,338>, a=<-13,0,-23>\\np=<724,-2434,-1202>, v=<99,-344,-170>, a=<-4,24,11>\\np=<-2839,-688,1217>, v=<-406,-97,169>, a=<31,7,-21>\\np=<1526,265,-2309>, v=<218,35,-329>, a=<-18,-2,21>\\np=<-1693,-2321,2132>, v=<-241,-334,300>, a=<19,21,-23>\\np=<-1692,1711,1227>, v=<-245,242,176>, a=<13,-14,-12>\\np=<1849,1849,-2232>, v=<269,258,-318>, a=<-18,-14,20>\\np=<-2054,838,1098>, v=<-296,118,153>, a=<16,-7,-10>\\np=<785,99,-2675>, v=<112,12,-382>, a=<-3,-1,26>\\np=<1016,-561,2794>, v=<145,-80,399>, a=<-13,3,-22>\\np=<915,1974,2332>, v=<132,279,331>, a=<-9,-19,-23>\\np=<2292,-2185,299>, v=<327,-311,47>, a=<-22,22,0>\\np=<-2128,763,-1650>, v=<-306,107,-235>, a=<13,-7,21>\\np=<3013,-969,-715>, v=<432,-134,-102>, a=<-33,12,13>\\np=<316,-1640,2411>, v=<44,-238,342>, a=<-6,17,-23>\\np=<1383,145,2575>, v=<196,20,369>, a=<-13,1,-21>\\np=<2200,-820,-1757>, v=<316,-117,-250>, a=<-20,8,18>\\np=<-2184,1716,390>, v=<-306,245,57>, a=<23,-20,-1>\\np=<-2723,2073,-886>, v=<-392,297,-125>, a=<25,-20,8>\\np=<-1049,173,-3401>, v=<-147,26,-482>, a=<7,-3,34>\\np=<-1557,-2558,-1440>, v=<-218,-368,-205>, a=<17,20,19>\\np=<-1066,-2225,-1298>, v=<-149,-314,-184>, a=<10,20,13>\\np=<-2245,49,-1494>, v=<-324,6,-210>, a=<21,-1,15>\\np=<1131,-1165,2377>, v=<162,-166,337>, a=<-15,11,-23>\\np=<735,-455,2431>, v=<104,-62,349>, a=<-1,3,-24>\\np=<1994,2482,311>, v=<284,356,43>, a=<-19,-29,-2>\\np=<-1472,701,3119>, v=<-207,99,449>, a=<8,-6,-30>\\np=<-2821,1091,-1093>, v=<-405,155,-155>, a=<28,-11,8>\\np=<309,-2174,-2358>, v=<38,-313,-333>, a=<-5,23,20>\\np=<-2940,-1360,-18>, v=<-420,-190,0>, a=<29,8,-2>\\np=<-936,-968,2621>, v=<-125,-135,376>, a=<5,6,-22>\\np=<-2018,-1763,-1814>, v=<-286,-250,-260>, a=<18,11,14>\\np=<1989,749,-2228>, v=<287,108,-319>, a=<-21,-7,25>\\np=<-1194,815,2585>, v=<-166,117,370>, a=<12,-8,-22>\\np=<-2193,1590,1652>, v=<-310,223,233>, a=<19,-8,-17>\\np=<1861,-1415,1504>, v=<264,-198,215>, a=<-19,16,-14>\\np=<-1328,2363,849>, v=<-189,333,117>, a=<13,-24,-11>\\np=<-2238,2021,-362>, v=<-325,294,-50>, a=<25,-16,7>\\np=<-2228,-832,-1337>, v=<-318,-118,-191>, a=<20,4,14>\\np=<2461,1069,153>, v=<350,150,18>, a=<-20,-7,-1>\\np=<2496,-958,-105>, v=<357,-137,-15>, a=<-20,4,1>\\np=<2119,-394,2826>, v=<298,-54,405>, a=<-22,6,-25>\\np=<1055,-3092,686>, v=<152,-442,103>, a=<-15,27,-6>\\np=<-2173,-909,-1613>, v=<-310,-127,-227>, a=<23,13,16>\\np=<-2484,1605,-319>, v=<-353,229,-48>, a=<23,-16,2>\\np=<357,631,2589>, v=<47,91,373>, a=<-1,-3,-25>\\np=<272,2775,1048>, v=<39,395,152>, a=<5,-26,-8>\\np=<-1504,-2830,-801>, v=<-207,-404,-117>, a=<17,29,6>\\np=<1351,3181,1010>, v=<195,455,142>, a=<-13,-31,-9>\\np=<530,-1446,-3084>, v=<77,-206,-439>, a=<-3,9,33>\\np=<-1952,1119,1099>, v=<-279,164,156>, a=<22,-16,-5>\\np=<232,-1333,-2866>, v=<28,-187,-408>, a=<-3,13,31>\\np=<-1627,-2063,2010>, v=<-234,-294,291>, a=<22,22,-22>\\np=<-2775,-964,-1321>, v=<-394,-137,-188>, a=<27,9,12>\\np=<-1603,2665,1942>, v=<-231,381,277>, a=<16,-29,-18>\\np=<-872,-2797,-770>, v=<-128,-399,-111>, a=<9,27,12>\\np=<563,2846,618>, v=<80,402,86>, a=<-4,-27,-2>\\np=<-1784,1654,-1446>, v=<-258,236,-203>, a=<20,-24,18>\\np=<1893,1629,-2424>, v=<270,228,-343>, a=<-18,-16,22>\\np=<29,-2731,-765>, v=<4,-394,-109>, a=<4,26,8>\\np=<2971,-552,520>, v=<429,-78,76>, a=<-31,5,-6>\\np=<-20,2794,-979>, v=<7,399,-142>, a=<0,-28,12>\\np=<-1580,-1745,1680>, v=<-224,-248,234>, a=<11,14,-11>\\np=<-328,-1946,2017>, v=<-46,-279,290>, a=<4,21,-27>\\np=<-845,2947,-811>, v=<-120,423,-112>, a=<6,-28,8>\\np=<-216,2818,754>, v=<-31,400,100>, a=<2,-27,-7>\\np=<106,2953,-578>, v=<17,421,-85>, a=<0,-25,4>\\np=<-608,-2556,-1827>, v=<-86,-367,-262>, a=<4,23,20>\\np=<-581,2701,-743>, v=<-84,386,-103>, a=<4,-28,11>\\np=<-2807,1109,363>, v=<-404,160,49>, a=<28,-8,-3>\\np=<-1309,851,2893>, v=<-187,121,413>, a=<13,-7,-30>\\np=<1933,1884,-496>, v=<276,269,-66>, a=<-17,-19,4>\\np=<1113,2644,1081>, v=<164,376,154>, a=<-11,-22,-12>\\np=<351,-2543,-1660>, v=<46,-363,-237>, a=<-9,29,16>\\np=<-2152,-1819,784>, v=<-305,-261,115>, a=<20,18,-3>\\np=<639,-2441,1378>, v=<91,-348,194>, a=<-3,26,-15>\\np=<-2222,-1057,-1157>, v=<-320,-152,-163>, a=<22,10,7>\\np=<3311,-711,1150>, v=<470,-101,166>, a=<-34,3,-9>\\np=<2195,245,2137>, v=<313,34,306>, a=<-28,1,-20>\\np=<-1274,-1659,978>, v=<-176,-239,133>, a=<13,13,-12>\\np=<480,1761,1821>, v=<71,253,261>, a=<-1,-18,-17>\\np=<505,-2920,-1064>, v=<74,-418,-148>, a=<-2,26,12>\\np=<580,1922,1361>, v=<80,276,190>, a=<-8,-22,-13>\\np=<412,-2422,-113>, v=<54,-340,-18>, a=<-4,21,4>\\np=<-780,2764,-1540>, v=<-108,399,-221>, a=<8,-24,15>\\np=<-2953,-900,-1397>, v=<-424,-126,-200>, a=<31,9,10>\\np=<2784,-1400,-75>, v=<395,-196,-10>, a=<-30,19,-4>\\np=<524,2195,613>, v=<71,309,88>, a=<-10,-20,-6>\\np=<-2858,795,-1974>, v=<-410,111,-282>, a=<28,-9,21>\\np=<2343,-1353,-691>, v=<335,-191,-103>, a=<-23,14,2>\\np=<1266,2574,-1283>, v=<180,374,-179>, a=<-7,-21,10>\\np=<1847,1777,-1545>, v=<261,260,-223>, a=<-20,-17,18>\\np=<2685,745,1112>, v=<385,106,161>, a=<-29,-8,-13>\\np=<-1298,832,-2251>, v=<-189,117,-321>, a=<18,-10,22>\\np=<990,-2338,1295>, v=<139,-334,176>, a=<-10,22,-13>\\np=<-3102,-122,533>, v=<-439,-17,76>, a=<32,2,3>\\np=<-2399,802,434>, v=<-342,110,62>, a=<26,-11,-3>\\np=<1256,-2642,-2070>, v=<177,-377,-296>, a=<-12,22,17>\\np=<960,-2780,-588>, v=<137,-395,-88>, a=<-9,27,6>\\np=<993,-3243,-1465>, v=<140,-468,-213>, a=<-12,34,17>\\np=<-142,-2559,1059>, v=<-27,-361,153>, a=<-3,25,-5>\\np=<3210,955,-451>, v=<455,136,-70>, a=<-27,-9,6>\\np=<-1267,-871,-2445>, v=<-181,-127,-349>, a=<14,15,26>\\np=<2551,1269,48>, v=<364,181,6>, a=<-30,-15,0>\\np=<-2991,-480,1163>, v=<-426,-68,171>, a=<36,6,-13>\\np=<1302,1541,2038>, v=<181,223,293>, a=<-13,-15,-21>\\np=<-532,1036,-2819>, v=<-70,150,-406>, a=<5,-7,33>\\np=<1875,-1593,1724>, v=<266,-228,240>, a=<-24,11,-19>\\np=<2828,-1420,520>, v=<402,-200,74>, a=<-28,9,-3>\\np=<1951,329,1653>, v=<275,49,238>, a=<-16,2,-16>\\np=<-2936,1272,-395>, v=<-419,181,-57>, a=<30,-14,2>\\np=<557,-218,-2958>, v=<81,-28,-422>, a=<-3,4,27>\\np=<-918,-3137,1683>, v=<-133,-450,236>, a=<10,34,-23>\\np=<-1998,1004,-2080>, v=<-285,147,-293>, a=<16,-9,18>\\np=<1551,-320,2384>, v=<223,-46,344>, a=<-14,2,-29>\\np=<2892,746,228>, v=<411,106,35>, a=<-32,-11,0>\\np=<1335,-1122,-2785>, v=<190,-163,-397>, a=<-15,11,26>\\np=<2710,715,1453>, v=<387,105,201>, a=<-29,-7,-13>\\np=<1450,1012,2195>, v=<207,147,316>, a=<-17,-8,-24>\\np=<3075,-284,146>, v=<433,-41,20>, a=<-31,3,2>\\np=<1804,-2040,-520>, v=<259,-290,-71>, a=<-25,22,8>\\np=<107,387,3666>, v=<15,55,525>, a=<-2,-3,-39>\\np=<-2838,-613,-864>, v=<-399,-89,-124>, a=<29,9,5>\\np=<1287,1454,1815>, v=<180,210,259>, a=<-14,-17,-14>\\np=<-1119,-3166,-696>, v=<-154,-455,-99>, a=<16,30,6>\\np=<-2005,-1780,-881>, v=<-289,-252,-125>, a=<21,17,8>\\np=<232,2388,1738>, v=<34,347,247>, a=<0,-23,-19>\\np=<-2465,-1095,260>, v=<-352,-155,39>, a=<31,10,-2>\\np=<-2291,1207,2392>, v=<-329,175,342>, a=<22,-12,-28>\\np=<146,-1931,2174>, v=<26,-278,311>, a=<-1,14,-21>\\np=<-1336,2330,2194>, v=<-190,333,313>, a=<16,-27,-15>\\np=<1073,-2979,1785>, v=<153,-422,254>, a=<-11,28,-17>\\np=<-2081,2226,-534>, v=<-299,318,-78>, a=<17,-18,5>\\np=<1254,2653,523>, v=<182,379,70>, a=<-11,-32,-5>\\np=<-2073,848,1586>, v=<-301,122,227>, a=<25,-7,-14>\\np=<1493,2064,-1217>, v=<209,294,-174>, a=<-10,-20,14>\\np=<2275,-1677,49>, v=<325,-239,5>, a=<-16,22,1>\\np=<-1664,439,-2478>, v=<-236,63,-357>, a=<15,-3,28>\\np=<-1998,1841,-1355>, v=<-285,262,-191>, a=<19,-22,16>\\np=<-734,-1428,2437>, v=<-104,-198,344>, a=<11,15,-26>\\np=<122,-2631,-1084>, v=<17,-379,-156>, a=<-1,21,10>\\np=<-2357,1267,-1432>, v=<-337,186,-199>, a=<23,-6,10>\\np=<1792,2381,-353>, v=<251,343,-47>, a=<-19,-29,1>\\np=<2300,-981,-1410>, v=<324,-135,-205>, a=<-27,10,22>\\np=<2076,453,-2196>, v=<298,63,-313>, a=<-22,-3,20>\\np=<-1018,-2075,2241>, v=<-145,-296,320>, a=<8,20,-19>\\np=<1098,867,2225>, v=<156,122,316>, a=<-16,-9,-25>\\np=<-2699,1266,-1929>, v=<-386,177,-277>, a=<26,-9,21>\\np=<2266,-2555,301>, v=<323,-364,45>, a=<-22,25,-3>\\np=<1776,1506,-1079>, v=<254,215,-154>, a=<-21,-15,12>\\np=<134,-2512,517>, v=<19,-357,72>, a=<-4,25,-2>\\np=<-505,-2904,1442>, v=<-70,-414,202>, a=<3,30,-19>\\np=<-793,1096,2909>, v=<-113,156,415>, a=<10,-11,-26>\\np=<-1006,-1239,2919>, v=<-141,-178,417>, a=<12,15,-25>\\np=<2390,108,1476>, v=<341,14,210>, a=<-18,-2,-17>\\np=<2248,1821,141>, v=<317,257,16>, a=<-18,-15,-9>\\np=<-419,-973,-2511>, v=<-59,-139,-359>, a=<3,9,29>\\np=<1279,-2209,-1121>, v=<188,-315,-159>, a=<-12,21,10>\\np=<-2678,-381,1727>, v=<-383,-59,245>, a=<27,-2,-21>\\np=<-1050,-111,3464>, v=<-153,-15,493>, a=<8,3,-35>\\np=<-668,1778,1977>, v=<-92,254,282>, a=<6,-19,-17>\\np=<-333,-1542,1916>, v=<-43,-214,273>, a=<1,18,-17>\\np=<1981,-41,-2417>, v=<284,-8,-346>, a=<-20,-3,21>\\np=<690,2578,-1314>, v=<98,368,-189>, a=<-2,-25,13>\\np=<534,-2151,2291>, v=<76,-311,327>, a=<-2,21,-19>\\np=<-519,1718,-2056>, v=<-77,239,-288>, a=<4,-18,16>\\np=<344,158,-3042>, v=<47,22,-435>, a=<-4,-4,25>\\np=<-1568,-1527,2263>, v=<-224,-220,326>, a=<15,15,-29>\\np=<-2860,507,-67>, v=<-411,71,-6>, a=<27,-4,0>\\np=<2379,-357,1061>, v=<342,-50,152>, a=<-21,6,-12>\\np=<-1321,1199,-1961>, v=<-185,171,-280>, a=<11,-11,22>\\np=<-1827,-114,-2909>, v=<-255,-21,-411>, a=<15,-5,34>\\np=<468,2593,2487>, v=<70,367,359>, a=<-2,-17,-20>\\np=<637,1292,2082>, v=<90,187,295>, a=<-5,-13,-16>\\np=<-1312,-1771,-1992>, v=<-182,-255,-283>, a=<9,16,14>\\np=<86,392,3060>, v=<10,59,441>, a=<0,1,-28>\\np=<-987,1799,-2530>, v=<-146,260,-361>, a=<4,-21,24>\\np=<2165,1739,717>, v=<306,248,103>, a=<-21,-17,-10>\\np=<-652,-2330,1633>, v=<-93,-332,233>, a=<4,26,-14>\\np=<-502,-2082,-2395>, v=<-71,-299,-344>, a=<5,23,22>\\np=<-1424,277,2478>, v=<-203,38,357>, a=<12,-1,-24>\\np=<-932,-1401,2206>, v=<-131,-198,317>, a=<13,18,-19>\\np=<-2744,1200,234>, v=<-390,171,33>, a=<30,-16,-2>\\np=<-1711,-2047,1117>, v=<-240,-291,156>, a=<12,24,-11>\\np=<-955,-1516,1897>, v=<-135,-214,271>, a=<9,19,-14>\\np=<3188,-1071,-88>, v=<455,-150,-12>, a=<-32,10,4>\\np=<1092,-764,2456>, v=<156,-110,349>, a=<-11,7,-24>\\np=<-279,2480,-1367>, v=<-39,355,-196>, a=<2,-32,16>\\np=<-2046,-345,-1904>, v=<-289,-49,-267>, a=<17,1,18>\\np=<1227,947,-2286>, v=<177,138,-319>, a=<-8,-10,23>\\np=<-2122,420,-2228>, v=<-304,65,-320>, a=<24,-8,22>\\np=<2545,-1184,-150>, v=<366,-174,-19>, a=<-19,16,0>\\np=<-1717,-1624,2020>, v=<-243,-235,288>, a=<17,17,-19>\\np=<398,2910,523>, v=<57,415,74>, a=<-4,-26,-9>\\np=<-3419,113,229>, v=<-489,13,34>, a=<37,-1,-4>\\np=<1781,345,-2493>, v=<254,53,-359>, a=<-19,-4,24>\\np=<-1513,2248,366>, v=<-219,321,52>, a=<10,-23,-2>\\np=<-2669,-1445,-911>, v=<-379,-207,-128>, a=<25,18,12>\\np=<1786,1285,-1423>, v=<256,183,-201>, a=<-22,-17,8>\\np=<-1100,2717,688>, v=<-149,386,97>, a=<6,-29,-6>\\np=<2116,-874,2249>, v=<303,-124,319>, a=<-23,4,-22>\\np=<-1122,2510,-1821>, v=<-158,353,-258>, a=<12,-27,15>\\np=<489,-1820,2157>, v=<73,-256,308>, a=<-5,20,-17>\\np=<-2631,-1665,-971>, v=<-378,-237,-133>, a=<30,17,10>\\np=<1390,3117,-326>, v=<205,443,-45>, a=<-13,-26,3>\\np=<2202,1284,1507>, v=<311,186,218>, a=<-28,-12,-17>\\np=<1988,-125,1719>, v=<282,-20,245>, a=<-15,-5,-10>\\np=<-1409,-1789,-1224>, v=<-202,-260,-173>, a=<11,17,11>\\np=<1556,-1697,-1457>, v=<223,-233,-210>, a=<-14,19,14>\\np=<2654,611,-1584>, v=<380,89,-224>, a=<-22,-12,15>\\np=<-1057,3100,974>, v=<-151,444,139>, a=<14,-35,-13>\\np=<-2545,1545,-214>, v=<-363,222,-24>, a=<21,-11,5>\\np=<-1014,-1434,1241>, v=<-144,-203,180>, a=<14,19,-11>\\np=<74,-724,2914>, v=<10,-95,418>, a=<3,7,-29>\\np=<2548,862,-1116>, v=<364,129,-159>, a=<-25,-8,11>\\np=<998,740,2388>, v=<141,107,345>, a=<-9,-8,-23>\\np=<1171,-2442,354>, v=<167,-348,47>, a=<-10,27,-1>\\np=<1564,-2205,-1141>, v=<224,-316,-162>, a=<-13,22,8>\\np=<897,-1715,-2190>, v=<126,-248,-311>, a=<-9,20,22>\\np=<113,194,-3187>, v=<21,28,-458>, a=<3,0,34>\\np=<-2901,837,1268>, v=<-414,125,181>, a=<29,-8,-11>\\np=<-2669,263,-789>, v=<-377,37,-113>, a=<26,0,6>\\np=<2271,-2151,-1233>, v=<323,-309,-175>, a=<-18,21,12>\\np=<-3035,-879,208>, v=<-436,-127,33>, a=<33,7,-3>\\np=<927,-2798,-579>, v=<137,-399,-79>, a=<-13,28,1>\\np=<2615,-373,664>, v=<377,-50,90>, a=<-25,0,-7>\\np=<2526,-875,1241>, v=<360,-120,175>, a=<-27,7,-9>\\np=<1475,-2741,243>, v=<210,-391,35>, a=<-16,32,4>\\np=<1568,1680,-1392>, v=<216,234,-198>, a=<-14,-16,12>\\np=<-2639,1179,1362>, v=<-379,168,194>, a=<26,-13,-11>\\np=<-2697,-554,426>, v=<-386,-76,58>, a=<23,2,-4>\\np=<-625,852,-2636>, v=<-88,119,-374>, a=<5,-8,27>\\np=<2894,1356,579>, v=<413,191,80>, a=<-22,-9,-6>\\np=<-477,3442,-25>, v=<-70,497,-1>, a=<0,-30,-3>\\np=<1957,-1935,1398>, v=<275,-275,202>, a=<-19,23,-11>\\np=<-1098,62,2996>, v=<-155,8,428>, a=<10,-1,-27>\\np=<-457,1398,-2512>, v=<-64,197,-361>, a=<3,-13,27>\\np=<106,-1781,-3135>, v=<15,-252,-450>, a=<1,14,31>\\np=<113,-2766,-627>, v=<16,-392,-89>, a=<-1,23,6>\\np=<-1065,-2843,1520>, v=<-155,-407,215>, a=<9,31,-11>\\np=<-1255,-2866,-1144>, v=<-181,-409,-163>, a=<14,30,14>\\np=<1550,-1700,2519>, v=<219,-239,357>, a=<-16,18,-26>\\np=<1244,-1136,-2392>, v=<177,-159,-341>, a=<-7,11,23>\\np=<3029,-1447,-462>, v=<432,-209,-69>, a=<-36,14,2>\\np=<563,2823,137>, v=<80,408,17>, a=<-6,-28,1>\\np=<-404,552,-3428>, v=<-56,80,-484>, a=<9,-8,36>\\np=<2138,-270,2124>, v=<301,-35,304>, a=<-21,1,-24>\\np=<-3501,-392,-218>, v=<-499,-54,-30>, a=<34,4,-4>\\np=<1122,-2971,-683>, v=<162,-422,-97>, a=<-13,29,7>\\np=<3094,-797,736>, v=<442,-113,99>, a=<-28,5,-7>\\np=<89,-2730,-416>, v=<6,-390,-59>, a=<-4,24,4>\\np=<-1756,2362,-1159>, v=<-254,337,-164>, a=<21,-23,14>\\np=<-2090,-2397,-1211>, v=<-293,-342,-171>, a=<20,20,13>\\np=<267,2047,-2406>, v=<45,296,-343>, a=<-3,-19,23>\\np=<-791,-1538,-2557>, v=<-118,-224,-360>, a=<6,17,24>\\np=<-729,-2964,-1002>, v=<-104,-422,-146>, a=<7,31,11>\\np=<1095,-375,-2275>, v=<154,-60,-326>, a=<-11,6,21>\\np=<134,3102,-474>, v=<21,449,-67>, a=<-2,-34,2>\\np=<2696,419,237>, v=<388,63,33>, a=<-31,-10,4>\\np=<1051,-514,-2632>, v=<150,-76,-374>, a=<-8,7,28>\\np=<-95,1194,2464>, v=<-10,169,352>, a=<2,-8,-24>\\np=<116,1820,2060>, v=<21,265,298>, a=<-1,-18,-27>\\np=<1137,-583,-2833>, v=<162,-80,-405>, a=<-8,10,25>\\np=<597,2132,1785>, v=<83,308,255>, a=<-5,-24,-17>\\np=<-2893,-510,397>, v=<-413,-69,60>, a=<28,12,-6>\\np=<1326,-2526,-174>, v=<188,-355,-26>, a=<-16,21,-5>\\np=<2363,-1715,29>, v=<338,-244,5>, a=<-25,18,3>\\np=<3268,-674,385>, v=<468,-98,55>, a=<-32,5,0>\\np=<-1907,2327,-1359>, v=<-276,327,-194>, a=<15,-22,13>\\np=<1871,-498,1901>, v=<269,-73,271>, a=<-14,5,-19>\\np=<-685,2520,824>, v=<-94,360,120>, a=<11,-29,-8>\\np=<1477,190,-2102>, v=<213,26,-300>, a=<-17,-3,22>\\np=<-2607,1051,-728>, v=<-372,153,-103>, a=<24,-11,11>\\np=<-798,-1889,-2102>, v=<-117,-269,-294>, a=<6,18,18>\\np=<1459,1900,608>, v=<206,273,91>, a=<-12,-20,-7>\\np=<1976,-1760,1559>, v=<282,-248,224>, a=<-22,18,-15>\\np=<379,2443,-1604>, v=<57,351,-229>, a=<-1,-26,15>\\np=<2448,174,-1634>, v=<348,24,-236>, a=<-24,3,10>\\np=<-1102,2476,-860>, v=<-154,348,-122>, a=<11,-22,8>\\np=<-2586,385,-67>, v=<-370,57,-11>, a=<27,-2,0>\\np=<-2933,447,-1080>, v=<-421,63,-149>, a=<30,-4,7>\\np=<2722,-778,592>, v=<385,-114,77>, a=<-29,8,-7>\\np=<-1364,1786,-2688>, v=<-196,252,-385>, a=<12,-17,26>\\np=<-881,2946,-1634>, v=<-124,420,-236>, a=<9,-29,19>\\np=<-1606,-1555,-2462>, v=<-226,-226,-348>, a=<18,15,24>\\np=<225,2145,1674>, v=<33,302,239>, a=<6,-19,-17>\\np=<169,2788,-958>, v=<27,403,-136>, a=<-6,-27,8>\\np=<2060,1504,2049>, v=<298,214,297>, a=<-20,-16,-18>\\np=<899,-2216,305>, v=<125,-320,44>, a=<-4,16,-5>\\np=<-777,-768,2593>, v=<-106,-109,373>, a=<7,7,-24>\\np=<-1703,2998,-1377>, v=<-239,429,-198>, a=<19,-29,15>\\np=<2407,-1677,-1103>, v=<342,-235,-156>, a=<-21,17,6>\\np=<-2225,1617,411>, v=<-311,228,64>, a=<25,-20,-5>\\np=<-1362,1799,-2016>, v=<-194,257,-287>, a=<10,-21,15>\\np=<278,-848,-2184>, v=<40,-116,-311>, a=<-2,11,20>\\np=<1849,-751,-1606>, v=<268,-104,-226>, a=<-16,7,24>\\np=<1935,-1226,2484>, v=<271,-175,350>, a=<-19,11,-24>\\np=<-2656,1005,-1618>, v=<-379,142,-233>, a=<29,-12,16>\\np=<-2561,-1255,488>, v=<-368,-179,69>, a=<26,6,-7>\\np=<2844,-41,828>, v=<407,-5,112>, a=<-27,-5,-8>\\np=<1955,-2382,1068>, v=<279,-340,153>, a=<-19,18,-9>\\np=<1998,2280,342>, v=<282,322,49>, a=<-22,-21,-2>\\np=<1423,2824,516>, v=<207,401,73>, a=<-16,-25,-2>\\np=<-611,2063,1513>, v=<-85,295,212>, a=<5,-25,-14>\\np=<-2533,-552,912>, v=<-356,-81,127>, a=<31,5,-8>\\np=<2190,1542,488>, v=<309,221,66>, a=<-22,-14,-8>\\np=<3364,222,-696>, v=<489,29,-99>, a=<-37,-3,9>\\np=<-195,-2901,-9>, v=<-25,-413,-2>, a=<1,30,0>\\np=<-1965,-2019,1592>, v=<-281,-287,228>, a=<22,18,-15>\\np=<1379,2381,1120>, v=<199,340,166>, a=<-10,-20,-12>\\np=<-2981,1450,-856>, v=<-422,211,-120>, a=<26,-18,5>\\np=<1804,2104,-526>, v=<256,305,-79>, a=<-20,-23,7>\\np=<-49,-1044,2462>, v=<-7,-149,352>, a=<-6,7,-24>\\np=<2033,-429,-2363>, v=<293,-60,-341>, a=<-19,8,18>\\np=<-1922,-579,-1416>, v=<-276,-78,-207>, a=<17,0,13>\\np=<-3136,-1214,173>, v=<-450,-177,19>, a=<34,11,4>\\np=<2336,1073,-95>, v=<333,155,-10>, a=<-22,-10,0>\\np=<-586,-2557,619>, v=<-84,-365,86>, a=<3,28,-3>\\np=<840,157,-2757>, v=<122,25,-395>, a=<-8,4,27>\\np=<-1097,-1519,1850>, v=<-156,-217,265>, a=<10,20,-22>\\np=<2188,516,2054>, v=<309,72,297>, a=<-22,-4,-22>\\np=<3141,115,1479>, v=<444,11,212>, a=<-26,-8,-9>\\np=<1399,354,-2638>, v=<197,48,-375>, a=<-11,0,28>\\np=<-926,2122,1918>, v=<-132,303,276>, a=<9,-23,-19>\\np=<-2852,-308,28>, v=<-407,-43,6>, a=<33,3,-1>\\np=<-1258,1760,-1548>, v=<-182,248,-219>, a=<12,-19,13>\\np=<-860,2008,-2187>, v=<-122,285,-315>, a=<10,-16,22>\\np=<-612,-2820,223>, v=<-89,-404,37>, a=<6,29,-2>\\np=<2983,1129,-643>, v=<426,162,-94>, a=<-32,-12,5>\\np=<-2164,-1260,-436>, v=<-308,-178,-62>, a=<22,16,1>\\np=<-117,-1598,-2780>, v=<-19,-228,-396>, a=<1,19,33>\\np=<2568,1371,-634>, v=<365,191,-83>, a=<-25,-13,7>\\np=<1348,-1896,-2216>, v=<195,-265,-316>, a=<-13,17,23>\\np=<-33,969,-2834>, v=<-4,139,-403>, a=<-2,-12,23>\\np=<1468,-522,2281>, v=<209,-71,324>, a=<-17,8,-19>\\np=<-377,2072,2027>, v=<-53,297,288>, a=<6,-20,-18>\\np=<-2661,346,-1704>, v=<-376,44,-240>, a=<28,0,16>\\np=<-970,2021,-1566>, v=<-139,292,-223>, a=<8,-23,18>\\np=<-1839,1994,-1675>, v=<-262,286,-239>, a=<26,-15,17>\\np=<-1077,-1477,-1848>, v=<-148,-214,-264>, a=<10,11,12>\\np=<124,243,-2828>, v=<14,38,-407>, a=<5,0,28>\\np=<-2674,1373,316>, v=<-378,196,50>, a=<17,-10,-4>\\np=<-227,-2451,-1109>, v=<-32,-351,-157>, a=<2,26,5>\\np=<880,-940,-2673>, v=<124,-133,-378>, a=<-4,8,26>\\np=<2778,198,1439>, v=<398,29,205>, a=<-28,-1,-18>\\np=<206,2864,614>, v=<32,410,88>, a=<-3,-29,-9>\\np=<-1369,2288,-1446>, v=<-190,326,-209>, a=<11,-13,13>\\np=<518,2025,1367>, v=<70,289,197>, a=<1,-16,-11>\\np=<-887,-2131,-2169>, v=<-123,-304,-305>, a=<10,20,26>\\np=<992,1365,-2469>, v=<150,192,-352>, a=<-12,-12,30>\\np=<-2241,1405,-737>, v=<-318,200,-100>, a=<23,-14,7>\";","export default \"A large stream blocks your path. According to the locals, it's not safe to cross the stream at the moment because it's full of **garbage**. You look down at the stream; rather than water, you discover that it's a **stream of characters**.\\n\\nYou sit for a while and record part of the stream (your puzzle input). The characters represent **groups** - sequences that begin with `{` and end with `}`. Within a group, there are zero or more other things, separated by commas: either another **group** or **garbage**. Since groups can contain other groups, a `}` only closes the **most-recently-opened unclosed group** - that is, they are nestable. Your puzzle input represents a single, large group which itself contains many smaller ones.\\n\\nSometimes, instead of a group, you will find **garbage**. Garbage begins with `<` and ends with `>`. Between those angle brackets, almost any character can appear, including `{` and `}`. **Within** garbage, `<` has no special meaning.\\n\\nIn a futile attempt to clean up the garbage, some program has **canceled** some of the characters within it using `!`: inside garbage, **any** character that comes after `!` should be **ignored**, including `<`, `>`, and even another `!`.\\n\\nYou don't see any characters that deviate from these rules. Outside garbage, you only find well-formed groups, and garbage always terminates according to the rules above.\\n\\nHere are some self-contained pieces of garbage:\\n\\n- `<>`, empty garbage.\\n- `<random characters>`, garbage containing random characters.\\n- `<<<<>`, because the extra `<` are ignored.\\n- `<{!>}>`, because the first `>` is canceled.\\n- `<!!>`, because the second `!` is canceled, allowing the `>` to terminate the garbage.\\n- `<!!!>>`, because the second `!` and the first `>` are canceled.\\n- `<{o\\\"i!a,<{i<a>`, which ends at the first `>`.\\n\\nHere are some examples of whole streams and the number of groups they contain:\\n\\n- `{}`, 1 group.\\n- `{{{}}}`, 3 groups.\\n- `{{},{}}`, also 3 groups.\\n- `{{{},{},{{}}}}`, 6 groups.\\n- `{<{},{},{{}}>}`, 1 group (which itself contains garbage).\\n- `{<a>,<a>,<a>,<a>}`, 1 group.\\n- `{{<a>},{<a>},{<a>},{<a>}}`, 5 groups.\\n- `{{<!>},{<!>},{<!>},{<a>}}`, 2 groups (since all but the last > are canceled).\\n\\nYour goal is to find the total score for all groups in your input. Each group is assigned a **score** which is one more than the score of the group that immediately contains it. (The outermost group gets a score of `1`.)\\n\\n- `{}`, score of `1`.\\n- `{{{}}}`, score of `1 + 2 + 3 = 6`.\\n- `{{},{}}`, score of `1 + 2 + 2 = 5`.\\n- `{{{},{},{{}}}}`, score of `1 + 2 + 3 + 3 + 3 + 4 = 16`.\\n- `{<a>,<a>,<a>,<a>}`, score of `1`.\\n- `{{<ab>},{<ab>},{<ab>},{<ab>}}`, score of `1 + 2 + 2 + 2 + 2 = 9`.\\n- `{{<!!>},{<!!>},{<!!>},{<!!>}}`, score of `1 + 2 + 2 + 2 + 2 = 9`.\\n- `{{<a!>},{<a!>},{<a!>},{<ab>}}`, score of `1 + 2 = 3`.\\n\\n**What is the total score** for all groups in your input?\\n\\n[comment]: <> (PART 2)\\n\\nNow, you're ready to remove the garbage.\\n\\nTo prove you've removed it, you need to count all of the characters within the garbage. The leading and trailing `<` and `>` don't count, nor do any canceled characters or the `!` doing the canceling.\\n\\n- `<>`, `0` characters.\\n- `<random characters>`, `17` characters.\\n- `<<<<>`, `3` characters.\\n- `<{!>}>`, `2` characters.\\n- `<!!>`, `0` characters.\\n- `<!!!>>`, `0` characters.\\n- `<{o\\\"i!a,<{i<a>`, `10` characters.\\n\\n**How many non-canceled characters are within the garbage** in your puzzle input?\";","export default \"-6\\n-1\\n-18\\n-10\\n+5\\n+18\\n+19\\n+11\\n-6\\n+13\\n+16\\n-15\\n+8\\n-10\\n+9\\n+12\\n+1\\n-9\\n-6\\n+16\\n+6\\n+13\\n+5\\n+18\\n-15\\n-1\\n+14\\n-2\\n+6\\n+12\\n-7\\n+5\\n-19\\n+2\\n+16\\n-5\\n-3\\n+6\\n+8\\n+18\\n-3\\n+9\\n+14\\n-10\\n+9\\n-5\\n+4\\n-1\\n+11\\n+10\\n+15\\n+12\\n-16\\n-12\\n+17\\n-2\\n-16\\n-11\\n+15\\n-11\\n+12\\n+14\\n-5\\n+10\\n-12\\n-6\\n+21\\n+19\\n-12\\n-6\\n+9\\n-4\\n-18\\n+15\\n+10\\n+3\\n+12\\n-17\\n-6\\n-11\\n+5\\n+10\\n+15\\n+9\\n-19\\n+3\\n+15\\n+2\\n+13\\n+15\\n-13\\n+7\\n+5\\n+19\\n+10\\n+14\\n+10\\n+9\\n+1\\n+13\\n+4\\n-5\\n+17\\n-14\\n+3\\n-8\\n-3\\n-3\\n-13\\n+6\\n-3\\n-11\\n-7\\n+17\\n+9\\n+4\\n-14\\n-19\\n-15\\n+7\\n-14\\n+19\\n-3\\n+11\\n+9\\n+16\\n+17\\n-6\\n+12\\n+12\\n+14\\n-7\\n+18\\n+8\\n+7\\n+7\\n-10\\n+5\\n+11\\n+15\\n+10\\n-2\\n-2\\n-5\\n-12\\n-7\\n+4\\n+10\\n+19\\n+11\\n-19\\n-10\\n-16\\n+11\\n-19\\n-2\\n-20\\n-10\\n+15\\n+8\\n-2\\n-12\\n+17\\n-14\\n-17\\n-18\\n-2\\n+1\\n+16\\n-12\\n-19\\n-13\\n-18\\n-3\\n+15\\n+9\\n+18\\n+16\\n+8\\n-9\\n-22\\n-4\\n+20\\n-6\\n+14\\n+1\\n+7\\n+10\\n+7\\n-4\\n+11\\n+11\\n-16\\n-5\\n+9\\n+22\\n+10\\n+12\\n-9\\n-17\\n+15\\n-8\\n+4\\n-3\\n-6\\n-3\\n+2\\n+11\\n+7\\n+9\\n+13\\n+11\\n-14\\n+11\\n-2\\n-2\\n-9\\n-1\\n-17\\n+15\\n+4\\n-14\\n+4\\n+16\\n+20\\n-4\\n+18\\n+8\\n-11\\n-18\\n+4\\n+19\\n-18\\n-15\\n-4\\n+9\\n+21\\n-8\\n+5\\n+6\\n+3\\n+6\\n-11\\n+14\\n+11\\n+4\\n-7\\n+18\\n+3\\n-2\\n-6\\n+9\\n-16\\n+3\\n+2\\n-9\\n+2\\n+6\\n-12\\n-11\\n-6\\n-9\\n+19\\n-18\\n+3\\n-9\\n-18\\n+10\\n+11\\n-7\\n-1\\n-9\\n-19\\n+26\\n+26\\n+10\\n+21\\n+18\\n+2\\n-6\\n+9\\n+8\\n-3\\n-12\\n+6\\n+10\\n-17\\n-5\\n-15\\n-7\\n-6\\n-14\\n+9\\n+7\\n+13\\n+10\\n+6\\n+17\\n+13\\n+1\\n+17\\n+10\\n+2\\n+2\\n+20\\n-5\\n+2\\n+11\\n-18\\n+9\\n-18\\n-13\\n+14\\n-5\\n+17\\n-6\\n-15\\n+20\\n+5\\n+3\\n-12\\n+16\\n-13\\n+11\\n+15\\n+8\\n-12\\n+14\\n+7\\n-19\\n-9\\n+3\\n+5\\n+4\\n+21\\n-3\\n+6\\n+11\\n-8\\n-14\\n+15\\n-5\\n+15\\n-6\\n+19\\n+4\\n-16\\n+3\\n+23\\n-9\\n-9\\n-18\\n+8\\n+7\\n-8\\n+12\\n-18\\n-4\\n+19\\n+9\\n+5\\n+8\\n+19\\n+13\\n+22\\n+14\\n-9\\n+18\\n+6\\n-8\\n-1\\n+16\\n-9\\n+13\\n+17\\n+9\\n-13\\n+10\\n-19\\n-9\\n-10\\n+20\\n+13\\n+6\\n+4\\n-14\\n+2\\n-19\\n-13\\n+18\\n+6\\n-18\\n-19\\n-1\\n-7\\n+12\\n+11\\n-14\\n-19\\n+4\\n-8\\n+19\\n-1\\n-27\\n+3\\n-14\\n-2\\n-10\\n-14\\n+2\\n+16\\n-7\\n+14\\n-15\\n-4\\n-1\\n-11\\n-12\\n+6\\n-2\\n-17\\n-2\\n+42\\n+4\\n-1\\n+51\\n+22\\n+11\\n+4\\n+12\\n-3\\n+10\\n+7\\n+19\\n-16\\n+23\\n+15\\n-16\\n-3\\n-20\\n-10\\n+19\\n+4\\n-35\\n+2\\n-18\\n-2\\n-9\\n-6\\n+34\\n-12\\n+43\\n-8\\n+5\\n-19\\n+18\\n+16\\n+4\\n+23\\n+10\\n+14\\n+14\\n-13\\n+25\\n-11\\n-4\\n-2\\n-1\\n-6\\n+29\\n-36\\n+23\\n+14\\n-19\\n-20\\n-32\\n-35\\n-89\\n-97\\n-22\\n-16\\n+10\\n-26\\n-9\\n-14\\n-18\\n+11\\n+17\\n-2\\n-11\\n+14\\n+16\\n-22\\n+7\\n-8\\n-10\\n+2\\n-1\\n+25\\n-21\\n+8\\n+11\\n-5\\n-43\\n-13\\n+10\\n-18\\n+15\\n+11\\n+17\\n-15\\n+6\\n+4\\n+19\\n+34\\n-106\\n+2\\n-20\\n+22\\n-9\\n-30\\n+13\\n-26\\n-53\\n+5\\n-2\\n+32\\n+206\\n-15\\n+7\\n+18\\n+22\\n-36\\n+43\\n+46\\n-190\\n+314\\n+76479\\n+13\\n-19\\n-3\\n+13\\n+4\\n+16\\n+9\\n+7\\n+10\\n-13\\n+6\\n-15\\n-17\\n+10\\n+17\\n-7\\n-11\\n-11\\n+7\\n+16\\n-18\\n-18\\n-20\\n-14\\n+12\\n+18\\n+20\\n+15\\n-17\\n-4\\n-1\\n+20\\n+17\\n-19\\n-8\\n-14\\n-14\\n+1\\n-7\\n+18\\n+23\\n-4\\n-1\\n+31\\n+18\\n-11\\n-2\\n-4\\n+15\\n-12\\n+10\\n+14\\n-2\\n+13\\n+6\\n+5\\n+8\\n+16\\n+18\\n+19\\n-18\\n-2\\n+16\\n+16\\n+8\\n+10\\n-6\\n-13\\n+10\\n+8\\n-14\\n-17\\n-13\\n-8\\n+7\\n-16\\n+4\\n+18\\n+1\\n-13\\n+15\\n-1\\n-5\\n-4\\n-16\\n-17\\n+7\\n-9\\n+18\\n-15\\n-19\\n+6\\n-11\\n-9\\n+18\\n+8\\n-19\\n-6\\n+4\\n-15\\n-9\\n-11\\n-3\\n-8\\n-6\\n+5\\n+10\\n+18\\n+17\\n-15\\n+8\\n-5\\n+4\\n+7\\n+11\\n-20\\n-1\\n+2\\n-12\\n+1\\n-3\\n-6\\n+10\\n+27\\n+4\\n+19\\n+7\\n+6\\n-3\\n+2\\n+10\\n+2\\n-3\\n-20\\n-16\\n+19\\n+14\\n+18\\n+15\\n+4\\n+6\\n-16\\n-11\\n-7\\n-18\\n-7\\n+4\\n-17\\n+2\\n+3\\n-16\\n+10\\n-16\\n-2\\n-6\\n+29\\n+15\\n-25\\n+7\\n+13\\n+16\\n-2\\n+25\\n+7\\n+4\\n+17\\n-20\\n+17\\n+6\\n-7\\n-4\\n+9\\n+14\\n-6\\n+11\\n-8\\n+11\\n-5\\n+6\\n+2\\n+3\\n+8\\n-12\\n+15\\n-9\\n-3\\n+6\\n+11\\n-6\\n+10\\n+10\\n-13\\n+7\\n+11\\n+2\\n-15\\n+14\\n+11\\n+3\\n+10\\n-18\\n-17\\n+15\\n+14\\n-13\\n+10\\n+1\\n+7\\n-15\\n-10\\n-13\\n-9\\n+7\\n-15\\n-1\\n+6\\n-21\\n+19\\n+16\\n+10\\n+13\\n+15\\n-3\\n-13\\n+8\\n+19\\n+1\\n+19\\n-7\\n+4\\n-1\\n+3\\n-1\\n-14\\n+7\\n-1\\n+12\\n+3\\n-1\\n+12\\n+17\\n+8\\n-11\\n-16\\n+17\\n+11\\n-14\\n-19\\n+15\\n+20\\n+2\\n-17\\n-7\\n-11\\n+12\\n-8\\n+3\\n+18\\n-9\\n-1\\n+11\\n+15\\n+6\\n+8\\n+4\\n-10\\n+8\\n-19\\n+7\\n-11\\n-10\\n-18\\n+2\\n+13\\n+16\\n-5\\n-4\\n+8\\n+7\\n+7\\n-11\\n+5\\n+19\\n+19\\n+19\\n-8\\n+14\\n-11\\n-9\\n-12\\n+11\\n+12\\n+18\\n+1\\n+3\\n+18\\n+17\\n-16\\n+8\\n+7\\n-10\\n+1\\n+11\\n+1\\n+5\\n+7\\n+4\\n+3\\n-13\\n+14\\n-16\\n+17\\n+7\\n+9\\n+1\\n-7\\n-13\\n+17\\n+11\\n-19\\n+7\\n-19\\n-13\\n-6\\n-16\\n-13\\n+1\\n+5\\n+18\\n-17\\n-12\\n-10\\n+2\\n+15\\n-4\\n-12\\n-13\\n+5\\n+10\\n+15\\n+14\\n+9\\n-10\\n-8\\n+2\\n+15\\n+9\\n+2\\n+4\\n-13\\n-16\\n+1\\n+6\\n+4\\n-17\\n-21\\n-20\\n+4\\n+8\\n-11\\n+17\\n-3\\n+12\\n-10\\n+13\\n-14\\n-19\\n+10\\n-19\\n+4\\n-1\\n+11\\n+4\\n+20\\n-1\\n+8\\n+22\\n+9\\n-19\\n-5\\n-5\\n+42\\n+15\\n+16\\n-7\\n-15\\n+9\\n+10\\n+4\\n+14\\n+9\\n-16\\n-14\\n+8\\n+7\\n+9\\n+4\\n+5\\n-15\\n-1\\n+2\\n+1\\n-8\\n-20\\n-12\\n+1\\n-4\\n+1\\n+13\\n+5\\n+14\\n-21\\n+36\\n+12\\n+1\\n+26\\n+12\\n+5\\n+10\\n-2\\n-20\\n-8\\n-19\\n-10\\n+42\\n-20\\n+150\\n+6\\n+11\\n+9\\n+2\\n+5\\n-11\\n+20\\n-8\\n-27\\n-11\\n-17\\n+6\\n+31\\n+2\\n+7\\n+22\\n+12\\n+13\\n+25\\n-7\\n-11\\n+19\\n-9\\n+18\\n+1\\n+7\\n+6\\n+15\\n+7\\n+11\\n-9\\n-17\\n-10\\n-6\\n+10\\n+3\\n-19\\n+14\\n+19\\n-12\\n-18\\n+2\\n+5\\n-13\\n-19\\n-11\\n-19\\n+1\\n+12\\n-11\\n-77534\";","export default \"As you see the Elves defend their hot chocolate successfully, you go back to falling through time. This is going to become a problem.\\n\\nIf you're ever going to return to your own time, you need to understand how this device on your wrist works. You have a little while before you reach your next destination, and with a bit of trial and error, you manage to pull up a programming manual on the device's tiny screen.\\n\\nAccording to the manual, the device has four [registers](https://en.wikipedia.org/wiki/Hardware_register) (numbered `0` through `3`) that can be manipulated by [instructions](https://en.wikipedia.org/wiki/Instruction_set_architecture#Instructions) containing one of 16 opcodes. The registers start with the value `0`.\\n\\nEvery instruction consists of four values: an **opcode**, two **inputs** (named `A` and `B`), and an **output** (named `C`), in that order. The opcode specifies the behavior of the instruction and how the inputs are interpreted. The output, C, is always treated as a register.\\n\\nIn the opcode descriptions below, if something says **\\\"value `A`\\\"**, it means to take the number given as `A` **literally**. (This is also called an \\\"immediate\\\" value.) If something says **\\\"register `A`\\\"**, it means to use the number given as `A` to read from (or write to) **the register with that number**. So, if the opcode `addi` adds register `A` and value `B`, storing the result in register `C`, and the instruction `addi 0 7 3` is encountered, it would add `7` to the value contained by register `0` and store the sum in register `3`, never modifying registers `0`, `1`, or `2` in the process.\\n\\nMany opcodes are similar except for how they interpret their arguments. The opcodes fall into seven general categories:\\n\\nAddition:\\n\\n- `addr` (add register) stores into register `C` the result of adding register `A` and register `B`.\\n- `addi` (add immediate) stores into register `C` the result of adding register `A` and value `B`.\\n\\nMultiplication:\\n\\n- `mulr` (multiply register) stores into register `C` the result of multiplying register `A` and register `B`.\\n- `muli` (multiply immediate) stores into register `C` the result of multiplying register `A` and value `B`.\\n\\nBitwise AND:\\n\\n- `banr` (bitwise AND register) stores into register `C` the result of the bitwise AND of register `A` and register `B`.\\n- `bani` (bitwise AND immediate) stores into register `C` the result of the bitwise AND of register `A` and value `B`.\\n\\nBitwise OR:\\n\\n- `borr` (bitwise OR register) stores into register `C` the result of the bitwise OR of register `A` and register `B`.\\n- `bori` (bitwise OR immediate) stores into register `C` the result of the bitwise OR of register `A` and value `B`.\\n\\nAssignment:\\n\\n- `setr` (set register) copies the contents of register `A` into register `C`. (Input `B` is ignored.)\\n- `seti` (set immediate) stores value `A` into register `C`. (Input `B` is ignored.)\\n\\nGreater-than testing:\\n\\n- `gtir` (greater-than immediate/register) sets register `C` to `1` if value `A` is greater than register `B`. Otherwise, register `C` is set to `0`.\\n- `gtri` (greater-than register/immediate) sets register `C` to `1` if register `A` is greater than value `B`. Otherwise, register `C` is set to `0`.\\n- `gtrr` (greater-than register/register) sets register `C` to `1` if register `A` is greater than register `B`. Otherwise, register `C` is set to `0`.\\n\\nEquality testing:\\n\\n- `eqir` (equal immediate/register) sets register `C` to `1` if value `A` is equal to register `B`. Otherwise, register `C` is set to `0`.\\n- `eqri` (equal register/immediate) sets register `C` to `1` if register `A` is equal to value `B`. Otherwise, register `C` is set to `0`.\\n- `eqrr` (equal register/register) sets register `C` to `1` if register `A` is equal to register `B`. Otherwise, register `C` is set to `0`.\\n\\nUnfortunately, while the manual gives the **name** of each opcode, it doesn't seem to indicate the **number**. However, you can monitor the CPU to see the contents of the registers before and after instructions are executed to try to work them out. Each opcode has a number from `0` through `15`, but the manual doesn't say which is which. For example, suppose you capture the following sample:\\n\\n```\\nBefore: [3, 2, 1, 1]\\n9 2 1 2\\nAfter:  [3, 2, 2, 1]\\n```\\n\\nThis sample shows the effect of the instruction `9 2 1 2` on the registers. Before the instruction is executed, register `0` has value `3`, register `1` has value `2`, and registers `2` and `3` have value `1`. After the instruction is executed, register `2`'s value becomes `2`.\\n\\nThe instruction itself, `9 2 1 2`, means that opcode `9` was executed with `A=2`, `B=1`, and `C=2`. Opcode `9` could be any of the 16 opcodes listed above, but only three of them behave in a way that would cause the result shown in the sample:\\n\\n- Opcode `9` could be `mulr`: register `2` (which has a value of `1`) times register `1` (which has a value of `2`) produces `2`, which matches the value stored in the output register, register 2.\\n- Opcode `9` could be `addi`: register `2` (which has a value of `1`) plus value `1` produces `2`, which matches the value stored in the output register, register `2`.\\n- Opcode `9` could be `seti`: value `2` matches the value stored in the output register, register `2`; the number given for `B` is irrelevant.\\n\\nNone of the other opcodes produce the result captured in the sample. Because of this, the sample above **behaves like three opcodes**.\\n\\nYou collect many of these samples (the first section of your puzzle input). The manual also includes a small test program (the second section of your puzzle input) - you can **ignore it for now**.\\n\\nIgnoring the opcode numbers, **how many samples in your puzzle input behave like three or more opcodes?**\\n\\n[comment]: <> (PART 2)\\n\\nUsing the samples you collected, work out the number of each opcode and execute the test program (the second section of your puzzle input).\\n\\n**What value is contained in register `0` after executing the test program?**\";","export default \"The night before Christmas, one of Santa's Elves calls you in a panic. \\\"The printer's broken! We can't print the **Naughty or Nice List**!\\\" By the time you make it to sub-basement 17, there are only a few minutes until midnight. \\\"We have a big problem,\\\" she says; \\\"there must be almost **fifty** bugs in this system, but nothing else can print The List. Stand in this square, quick! There's no time to explain; if you can convince them to pay you in *stars*, you'll be able to--\\\" She pulls a lever and the world goes blurry.\\n\\nWhen your eyes can focus again, everything seems a lot more pixelated than before. She must have sent you inside the computer! You check the system clock: **25 milliseconds** until midnight. With that much time, you should be able to collect all *fifty stars* by December 25th.\\n\\nCollect stars by solving puzzles. Two puzzles will be made available on each day millisecond in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants *one star*. Good luck!\\n\\nYou're standing in a room with \\\"digitization quarantine\\\" written in LEDs along one wall. The only door is locked, but it includes a small interface. \\\"Restricted Area - Strictly No Digitized Users Allowed.\\\"\\n\\nIt goes on to explain that you may only leave by solving a [captcha](https://en.wikipedia.org/wiki/CAPTCHA) to prove you're **not** a human. Apparently, you only get one millisecond to solve the captcha: too fast for a normal human, but it feels like hours to you.\\n\\nThe captcha requires you to review a sequence of digits (your puzzle input) and find the **sum** of all digits that match the **next** digit in the list. The list is circular, so the digit after the last digit is the **first** digit in the list.\\n\\nFor example:\\n\\n- `1122` produces a sum of `3` (`1` + `2`) because the first digit (`1`) matches the second digit and the third digit (`2`) matches the fourth digit.\\n- `1111` produces `4` because each digit (all `1`) matches the next.\\n- `1234` produces `0` because no digit matches the next.\\n- `91212129` produces `9` because the only digit that matches the next one is the last digit, `9`.\\n\\n**What is the solution to your captcha?**\\n\\n[comment]: <> (PART 2)\\n\\nYou notice a progress bar that jumps to 50% completion. Apparently, the door isn't yet satisfied, but it did emit a *star* as encouragement. The instructions change:\\n\\nNow, instead of considering the **next** digit, it wants you to consider the digit **halfway around** the circular list. That is, if your list contains 10 items, only include a digit in your sum if the digit `10/2 = 5` steps forward matches it. Fortunately, your list has an even number of elements.\\n\\nFor example:\\n\\n- `1212` produces `6`: the list contains `4` items, and all four digits match the digit `2` items ahead.\\n- `1221` produces `0`, because every comparison is between a `1` and a `2`.\\n- `123425` produces `4`, because both `2`s match each other, but no other digit has a match.\\n- `123123` produces `12`.\\n- `12131415` produces `4`.\\n\\n**What is the solution to your new captcha?**\";","export default \"LLLL.LLLLL.LLLLLLLLLLLLLLLL.L.LLLLLL.LLLL..L.LLLLLLLL.LLLLLL.LLLL..LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\\nLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLL.LLLLLLLLL.L..LLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLL.LLLLLLLLLLL.LLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LL.LLLL.LL.LLLLLLLLLLLLLLLLLLLL\\nLLL.LLLLLLLLLLL.LLLL.LLLLLLLLLL.LL.L.LLLLLLL.LLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL\\nLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLL.LLL.LLLL.LLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLL\\n...L..LL.LL.LLL....L......L..L.....L.....L....L.LL.....LL..L.L...LL.L...LL..L.L...L.LL...L..LL..L.\\nLLLLLLLLLLLLLLLLLL.L.LLLLLL.LLLLLLLL.LLLLL.L.LLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLL.LLLLL.LLLLLLLL.LLLLL\\nLLLLLLLLL.LLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLL.\\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLLLLLLLLLLLLLLLLLLL.L.LLLL.L.LLLLL.L.LLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL\\nLLLLLLL..L.LLLLLLLL..LLL.LL.LLLLLL.L.LLLLLLL.LLLLLLLL.LLLLLL.LLLLL.LL.LLLL.LLLLLLLL.LLLL.LLLLLLLLL\\n...L..L.L.L......L....L.L..L...L.L..L.L...LL.LL....L...L........L.L.LLL....L..L..L...L.L..L..LL...\\nLLLLLLLLLL.LLLLLLLLLLLLLLLL.L.LLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLL.L.LLLLLLLLLLLLLLLL\\nLLLLLLLLLLLLLLLLLLLL.LLLL.L.LLLLLLLLLLLLLLL..LLLLLLLL.LLLLLL.LLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL\\nLLL.LLL.LL.LLLLLLLLL.LLLLL..LLLLLLLL.LLLLLLLLLLLLLLL..LLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLL.LLLLLLLLLL\\n.LLLLLLLLL.LL.LLLLLL.LLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LL.LLLLLLLLLLL\\nLLLLL.LLLLLLLLLLLLLL.LLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL\\n.LLLLLLLLLLLLLLLLLLL.L.LLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLL..LL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL\\nL....LL.....L......LLL......L.LLL..L....L.L....L....LL.L.LL.LL........LL....L.L.L..LLLL.......L...\\nLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLL.LLL.LLLLLLLL.LLLLLLLLLLLLLL\\n.LL..LL.LL.LLLLLLLLL.LL.LLLLLLLLLLLL.LLLLLLL.LLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLL\\nLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LL.LLLLLL.LLLLL.LLLLLLL.L.LL.LLLLLLLLLLLLLLLLLL\\nLLLLLLLLLL..LLLLLLLL.LLLL.L.LLL.LLLLLLLLLLLL.LLLLLLLL.LLLLLL.LLLL..LLLLLLLLLL..LLLL.LLLLLLLLLLLLLL\\nLLL.LLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL..LLLLLLL..LLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL\\n.LLLLLLLLLLLLLLLLLLL.LLLLLL.LL.LLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\\nLLLLLLLLLLLLLLLLLLLL.LL.LLL.LLLLLLLL.LLLLLLL.LLLLLLLL..LLL.L.LLLLL.LLLLLLL.LLLLLL...LLLLLLLLLLLLLL\\nLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLL.LLLL\\nLLLL.LLLLL...LLLLLLLLLLL.LL.LLLLLLLL.LLLLLLL.LLLLLLLLLLLLLL..LLLLL.LLLLLLL..LLLLLLL.LLLLLLLLLLLLLL\\n..L...LLL........LL....L.....L.....L..L..L.....L.L.LL...L......LLLLL.L.L...........L.LL.....LL...L\\nLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLL.L.LLL.LLL.LLLLLL.LLLLLLLL.LLLLL.LLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLL\\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLL.LLL\\nLLLLLLLLLLLLLLLL.LLLLLLLLLL.LLLLLLLLLLLLL.LL.LL.LLLLLLLLLLLL.LLLLL.LLLLLLLLLLLL.LL.LLL.LLLLLLLLLLL\\nLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLL...LLLLLLLLLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLL.LL\\nLLLLLLL.LL.LLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLL..LLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL\\n....L..L.L.LL..LLL..L....LL...L.L..LL.L......L...LLL.L.L.L.....L.......L......LL.....L..L.L..LL...\\nLLLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLL.L\\nLLLLLLLLLL.LLLLLLLLL.LLLL.L.LLL.LLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLL...LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLL..LLLLLLLLLLLLLLLLLL.LLLLLLL.LLLL.LLLLLLL.LLLLLLLL.LLL.LLLLLLLLLL\\nLLLLLLLLLL.L.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLL.LLLLLLLLLL\\nLL.LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLL.LLL.LL.LLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL\\n..LL.LLL...LLL.....L.L.L......L......L........L.LL......LLL..LL..L..L.LLL..LL..LL.L.....L.LL....L.\\nLLLLLLLLLL.LL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLL..LLLL.LLLLLLLL\\nLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLL.LL.LLLLLL.L.LLLLLLLLL.L.LLLLL.LL.L.LLLLLLLLLLLL\\nLLLLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLLLL.LLLLLLL.LL.LLLLL.LLLLLLLLLLL.LL\\nLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLLLL.LLLLL.LLL.LLL.LLLLL.LL.LLLLLLLLLLLLLL\\nL..L..LL..LLL...L......L.....L...LL..L..L.....L.L...LL......L.L.LLL.L..L....L....L...L.L........LL\\nLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLL..LLLLLLLLLLLLLL\\nLLLLLL.LLL.LLLLLLLLL.LLLLLLLLLLLLLLL.L.LL.LLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL\\nL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLL.L.LLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLL.LLL.LL.LL.LLLLLLLLL.LL.LL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLL.LL.LLLLLLLLLLLLLL\\nLL.LLLLLLLLLLLLLL.LL.LLLLLLLLLLLLLL..LLLLLLLLLL.LLL.L..LLLLL.LLLLL..LLLLLL.LLLLLLLLLLLLLLLLLLLLLLL\\nLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLL.LLL.LLLLLLLLLLLL.LLLLLL.LLLLL.LLLLLLL..LLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLL.LLL.LLLLL.LL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLL.LL.L.LLLLLLL.LLL.L.\\nLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLL.LLL.LLL.LLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLL.L.LL.LLLLLLLLLL.LLL\\n..L....L....L....L........L...L....L..LL.L.L..L.LLLL.L.LLL...L...L..LL..L...L....L....L.......L.L.\\nLLLLLLLLLL..LLL.LLLLLLLLLLL.LLLLLLLL.LLL.LLL..LLLLLLL.LLLLLL.LLLLL.LLLLLLLLLLLLLLL..LL..LLLLLLLLLL\\nLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLL.LL.LLLLL.LLLLLL.LLLLLLLLLLLL..LLLLLLLLLLLLLLLLLLLLLLL\\nLLLLLLLLL.LLLLLLLLLLLLLLLLL..LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLL.LLLLLLLLLLLLLLLL.LLLL.LLLLLLLLL\\nLLLLLLLLLL.LLLLLLLLL.LLLLLL..LLLLLLL..LLLLLL.LL.LLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLL.L\\nL.LLLLLLLL.LLLLLLLLL.LL.LLL.LLLLLLLLLLLLLLL..LLLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLL..LLL.LLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLL..LLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL\\nL.....L..LLL.....LL.L..L..LL....LLLLL.LL..L.......L...LL.....LL...L...........L.....L.L..L.....L.L\\nLLLLLLLLLL.LLL.LLLLL.LLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLLL.LLLL..LLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLLL\\nLLLLLLLLLL..LLLLL.LL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLL.LLLL.L.LLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLL.LL.LLLLLLLLLLLLLLL\\nLLLLL.LLLL.LLLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLL..LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLLLLLLLLLLLL..LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLL.LLLLLL..LLLLLLLL.LLLLLLLLLLLLLL\\n........LLLLLL.LL.L..L...L...LLL....L.......LLLL..L.LL.L..L.L.LLL...L...L.......L..L.....L.L.L..LL\\nLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLL.LL.LLL..LLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL\\nLLLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL..LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLL.LLLLLLLLLL\\nL.LLLLL.LLLLLLLLLLLL.LLLLLL.LLLLLLLLLLL.LLLL.LLL.LLLLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL\\nLLLLLL.LLL.LLLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLL.LLL.L.L.LLLLLLLL.LLLLLLLLLLLLLL\\nLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\\nLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLL.LL.LLLLLLLLLLLLLLLLLLLLL.LLLLLLL..LLLLLLL.LLLLLLLLLLLLLL\\n..LL..L....L.......L....L....LL...L.L..L.........LL..L..LL.L....LLL.L.LLL...L.....LL.....LL.LL....\\nLLLLLLLLLL.LLLLLL.LL.LLLLLLLL..LLLLL.LLLLLLLLLLLLLLLL.LLLLLL.L.LLLLLLLLLLL.LLLLLLLL.LLLLLLLLLL.LLL\\nL.LLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLL.LL.LLLLLL.LLLLL.LLLLLLL.LLLLL.LLLLLLLLLL.LLLLLL\\nLLLLLLLLLL.LLLLLLLLL.LLL.LL.LLLLLLLL.L.LLLLLLLLLLLLLLLLLLLLL.L.LLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLL.\\nLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL\\nLLLLL.LLLL.LLLLLLLLL.LLLLLL.LLLL.LLL..LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL\\nLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLL.LLLL\\nLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLL.L.LLLLLLLLLLLLLL.LLLLLL.LLLLL.LLLLLLLLLLLLLLLL.LL.LLLLLLLLLLL\\n.L.L....L........L....LL...L...L...L..L.............LL.LL..L.L.L...LL.......LLL.......LLL.L.L.L..L\\nLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLL.LL.LLLLLLLLLLLLLL.L.LLLLL..LLLLL.LLLLLLL.LLLLLLLL.LLLL.LLLLLLLLL\\nLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL.LLLLLLL\\nLLLLLLLLLL..LLLLLLLL.LLLLLL..LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLL\\nLLLLLLLLLL.L.LLLLLLL.LLLLLLLLLLLLLL.LLLLLLLL.LLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL\\nLLLLL.LLLLLLLLLLLLLL.LLLLLL.LLLLLLLL.LLLLLLLLLLLLLL.L.LLLLLL.LLLLL.LLLLLLL.LLLLLLLL.L.LLLLLLLLLLLL\";","export default \"70,66,255,2,48,0,54,48,80,141,244,254,160,108,1,41\";","export default \"The year 518 is significantly more underground than your history books implied. Either that, or you've arrived in a vast cavern network under the North Pole.\\n\\nAfter exploring a little, you discover a long tunnel that contains a row of small pots as far as you can see to your left and right. A few of them contain plants - someone is trying to grow things in these geothermally-heated caves.\\n\\nThe pots are numbered, with `0` in front of you. To the left, the pots are numbered `-1`, `-2`, `-3`, and so on; to the right, `1`, `2`, `3`.... Your puzzle input contains a list of pots from `0` to the right and whether they do (`#`) or do not (`.`) currently contain a plant, the **initial state**. (No other pots currently contain plants.) For example, an initial state of `#..##....` indicates that pots `0`, `3`, and `4` currently contain plants.\\n\\nYour puzzle input also contains some notes you find on a nearby table: someone has been trying to figure out how these plants **spread** to nearby pots. Based on the notes, for each generation of plants, a given pot has or does not have a plant based on whether that pot (and the two pots on either side of it) had a plant in the last generation. These are written as `LLCRR => N`, where `L` are pots to the left, `C` is the current pot being considered, `R` are the pots to the right, and `N` is whether the current pot will have a plant in the next generation. For example:\\n\\n- A note like `..#.. => .` means that a pot that contains a plant but with no plants within two pots of it will not have a plant in it during the next generation.\\n- A note like `##.## => .` means that an empty pot with two plants on each side of it will remain empty in the next generation.\\n- A note like `.##.# => #` means that a pot has a plant in a given generation if, in the previous generation, there were plants in that pot, the one immediately to the left, and the one two pots to the right, but not in the ones immediately to the right and two to the left.\\n\\nIt's not clear what these plants are for, but you're sure it's important, so you'd like to make sure the current configuration of plants is sustainable by determining what will happen after **`20` generations**.\\n\\nFor example, given the following input:\\n\\n```\\ninitial state: #..#.#..##......###...###\\n\\n...## => #\\n..#.. => #\\n.#... => #\\n.#.#. => #\\n.#.## => #\\n.##.. => #\\n.#### => #\\n#.#.# => #\\n#.### => #\\n##.#. => #\\n##.## => #\\n###.. => #\\n###.# => #\\n####. => #\\n```\\n\\nFor brevity, in this example, only the combinations which do produce a plant are listed. (Your input includes all possible combinations.) Then, the next 20 generations will look like this:\\n\\n```\\n                 1         2         3     \\n       0         0         0         0     \\n 0: ...#..#.#..##......###...###...........\\n 1: ...#...#....#.....#..#..#..#...........\\n 2: ...##..##...##....#..#..#..##..........\\n 3: ..#.#...#..#.#....#..#..#...#..........\\n 4: ...#.#..#...#.#...#..#..##..##.........\\n 5: ....#...##...#.#..#..#...#...#.........\\n 6: ....##.#.#....#...#..##..##..##........\\n 7: ...#..###.#...##..#...#...#...#........\\n 8: ...#....##.#.#.#..##..##..##..##.......\\n 9: ...##..#..#####....#...#...#...#.......\\n10: ..#.#..#...#.##....##..##..##..##......\\n11: ...#...##...#.#...#.#...#...#...#......\\n12: ...##.#.#....#.#...#.#..##..##..##.....\\n13: ..#..###.#....#.#...#....#...#...#.....\\n14: ..#....##.#....#.#..##...##..##..##....\\n15: ..##..#..#.#....#....#..#.#...#...#....\\n16: .#.#..#...#.#...##...#...#.#..##..##...\\n17: ..#...##...#.#.#.#...##...#....#...#...\\n18: ..##.#.#....#####.#.#.#...##...##..##..\\n19: .#..###.#..#.#.#######.#.#.#..#.#...#..\\n20: .#....##....#####...#######....#.#..##.\\n```\\n\\nThe generation is shown along the left, where `0` is the initial state. The pot numbers are shown along the top, where `0` labels the center pot, negative-numbered pots extend to the left, and positive pots extend toward the right. Remember, the initial state begins at pot `0`, which is not the leftmost pot used in this example.\\n\\nAfter one generation, only seven plants remain. The one in pot `0` matched the rule looking for `..#..`, the one in pot `4` matched the rule looking for `.#.#.`, pot `9` matched `.##..`, and so on.\\n\\nIn this example, after 20 generations, the pots shown as `#` contain plants, the furthest left of which is pot `-2`, and the furthest right of which is pot `34`. Adding up all the numbers of plant-containing pots after the 20th generation produces **`325`**.\\n\\n**After `20` generations, what is the sum of the numbers of all pots which contain a plant?**\\n\\n[comment]: <> (PART 2)\\n\\nYou realize that 20 generations aren't enough. After all, these plants will need to last another 1500 years to even reach your timeline, not to mention your future.\\n\\n**After fifty billion (`50000000000`) generations, what is the sum of the numbers of all pots which contain a plant?**\";","export default \"0: 5\\n1: 2\\n2: 3\\n4: 4\\n6: 6\\n8: 4\\n10: 8\\n12: 6\\n14: 6\\n16: 8\\n18: 6\\n20: 9\\n22: 8\\n24: 10\\n26: 8\\n28: 8\\n30: 12\\n32: 8\\n34: 12\\n36: 10\\n38: 12\\n40: 12\\n42: 12\\n44: 12\\n46: 12\\n48: 14\\n50: 12\\n52: 14\\n54: 12\\n56: 14\\n58: 12\\n60: 14\\n62: 14\\n64: 14\\n66: 14\\n68: 14\\n70: 14\\n72: 14\\n76: 14\\n80: 18\\n84: 14\\n90: 18\\n92: 17\";","export default \"Here, you encounter a pair of dueling generators. The generators, called **generator A** and **generator B**, are trying to agree on a sequence of numbers. However, one of them is malfunctioning, and so the sequences don't always match.\\n\\nAs they do this, a **judge** waits for each of them to generate its next value, compares the lowest 16 bits of both values, and keeps track of the number of times those parts of the values match.\\n\\nThe generators both work on the same principle. To create its next value, a generator will take the previous value it produced, multiply it by a **factor** (generator A uses `16807`; generator B uses `48271`), and then keep the remainder of dividing that resulting product by `2147483647`. That final remainder is the value it produces next.\\n\\nTo calculate each generator's first value, it instead uses a specific starting value as its \\\"previous value\\\" (as listed in your puzzle input).\\n\\nFor example, suppose that for starting values, generator A uses `65`, while generator B uses `8921`. Then, the first five pairs of generated values are:\\n\\n```\\n--Gen. A--  --Gen. B--\\n   1092455   430625591\\n1181022009  1233683848\\n 245556042  1431495498\\n1744312007   137874439\\n1352636452   285222916\\n```\\n\\nIn binary, these pairs are (with generator A's value first in each pair):\\n\\n```\\n00000000000100001010101101100111\\n00011001101010101101001100110111\\n\\n01000110011001001111011100111001\\n01001001100010001000010110001000\\n\\n00001110101000101110001101001010\\n01010101010100101110001101001010\\n\\n01100111111110000001011011000111\\n00001000001101111100110000000111\\n\\n01010000100111111001100000100100\\n00010001000000000010100000000100\\n```\\n\\nHere, you can see that the lowest (here, rightmost) 16 bits of the third value match: `1110001101001010`. Because of this one match, after processing these five pairs, the judge would have added only 1 to its total.\\n\\nTo get a significant sample, the judge would like to consider **40 million** pairs. (In the example above, the judge would eventually find a total of `588` pairs that match in their lowest 16 bits.)\\n\\nAfter 40 million pairs, **what is the judge's final count**?\\n\\n[comment]: <> (PART 2)\\n\\n\\nIn the interest of trying to align a little better, the generators get more picky about the numbers they actually give to the judge.\\n\\nThey still generate values in the same way, but now they only hand a value to the judge when it meets their **criteria**:\\n\\n- Generator A looks for values that are multiples of **`4`**.\\n- Generator B looks for values that are multiples of **`8`**.\\n\\nEach generator functions completely **independently**: they both go through values entirely on their own, only occasionally handing an acceptable value to the judge, and otherwise working through the same sequence of values as before until they find one.\\n\\nThe judge still waits for each generator to provide it with a value before comparing them (using the same comparison method as before). It keeps track of the order it receives values; the first values from each generator are compared, then the second values from each generator, then the third values, and so on.\\n\\nUsing the example starting values given above, the generators now produce the following first five values each:\\n\\n```\\n--Gen. A--  --Gen. B--\\n1352636452  1233683848\\n1992081072   862516352\\n 530830436  1159784568\\n1980017072  1616057672\\n 740335192   412269392\\n```\\n\\nThese values have the following corresponding binary values:\\n\\n```\\n01010000100111111001100000100100\\n01001001100010001000010110001000\\n\\n01110110101111001011111010110000\\n00110011011010001111010010000000\\n\\n00011111101000111101010001100100\\n01000101001000001110100001111000\\n\\n01110110000001001010100110110000\\n01100000010100110001010101001000\\n\\n00101100001000001001111001011000\\n00011000100100101011101101010000\\n```\\n\\nUnfortunately, even though this change makes more bits similar on average, none of these values' lowest 16 bits match. Now, it's not until the 1056th pair that the judge finds the first match:\\n\\n--Gen. A--  --Gen. B--\\n1023762912   896885216\\n\\n00111101000001010110000111100000\\n00110101011101010110000111100000\\nThis change makes the generators much slower, and the judge is getting impatient; it is now only willing to consider **5 million** pairs. (Using the values from the example above, after five million pairs, the judge would eventually find a total of 309 pairs that match in their lowest 16 bits.)\\n\\nAfter 5 million pairs, but using this new generator logic, **what is the judge's final count**?\";","export default \"F70\\nS4\\nE3\\nS4\\nL90\\nN4\\nR90\\nW3\\nF75\\nS5\\nL90\\nE1\\nS4\\nF98\\nN4\\nR90\\nS3\\nL90\\nW1\\nF39\\nW2\\nL90\\nE1\\nF99\\nS3\\nE5\\nF63\\nN4\\nF26\\nE1\\nR180\\nF58\\nN3\\nF4\\nE1\\nF45\\nE4\\nR90\\nE3\\nF76\\nS1\\nF22\\nR90\\nN1\\nW1\\nF76\\nW1\\nN5\\nE3\\nL180\\nS5\\nF87\\nW4\\nL90\\nF9\\nS2\\nF11\\nN4\\nL180\\nS3\\nR90\\nF92\\nL90\\nS1\\nE4\\nR90\\nW1\\nF1\\nS2\\nL90\\nF27\\nN3\\nE1\\nN1\\nE3\\nL180\\nS1\\nS5\\nR180\\nW5\\nW5\\nF60\\nS5\\nW5\\nL270\\nN3\\nR90\\nF65\\nS5\\nF53\\nW5\\nL90\\nN1\\nW5\\nL180\\nF87\\nW2\\nR180\\nS2\\nF77\\nN1\\nF81\\nL180\\nE5\\nN5\\nW4\\nL90\\nW4\\nL90\\nE3\\nN2\\nL90\\nW2\\nS1\\nF19\\nW1\\nF82\\nN4\\nR270\\nE5\\nL90\\nN3\\nR90\\nF81\\nL270\\nW3\\nR90\\nL270\\nN3\\nF53\\nE2\\nF84\\nR90\\nS2\\nF39\\nR180\\nN1\\nL90\\nF11\\nS2\\nW5\\nF20\\nW1\\nN4\\nR90\\nF76\\nE3\\nS5\\nE3\\nS5\\nW5\\nS2\\nL90\\nN3\\nE3\\nS5\\nF27\\nW1\\nL90\\nF65\\nW3\\nR180\\nF84\\nW2\\nN5\\nF43\\nL180\\nW3\\nF11\\nW2\\nR90\\nN1\\nR90\\nN5\\nW1\\nS4\\nN4\\nF88\\nN3\\nF87\\nW3\\nL90\\nF77\\nS5\\nF18\\nN4\\nF97\\nE5\\nS5\\nR90\\nF94\\nN5\\nL180\\nF8\\nN4\\nR90\\nW2\\nN2\\nL180\\nF4\\nR90\\nW4\\nS3\\nR90\\nF38\\nS3\\nE1\\nN5\\nF4\\nE3\\nR90\\nS4\\nF95\\nE5\\nF77\\nF32\\nW5\\nF3\\nR90\\nN1\\nW3\\nF96\\nL270\\nN2\\nE2\\nF30\\nS3\\nW2\\nR90\\nF57\\nR90\\nE1\\nR90\\nN5\\nE1\\nN4\\nW4\\nN1\\nW2\\nF47\\nN5\\nW3\\nL90\\nN4\\nF50\\nE3\\nR90\\nF27\\nN3\\nF78\\nN2\\nR90\\nF100\\nS3\\nF67\\nR90\\nN4\\nR90\\nN4\\nF88\\nS4\\nE2\\nS2\\nF31\\nS5\\nR90\\nW3\\nR180\\nW2\\nF97\\nF31\\nN1\\nL90\\nS4\\nF50\\nN3\\nW2\\nL180\\nF85\\nL180\\nE3\\nL90\\nF95\\nN4\\nL90\\nE1\\nS2\\nR180\\nN2\\nF19\\nN5\\nE5\\nS1\\nW5\\nR90\\nN1\\nL180\\nF76\\nS4\\nE5\\nS2\\nS5\\nE3\\nF53\\nL90\\nS3\\nE4\\nS1\\nE1\\nL90\\nF54\\nW1\\nS1\\nE2\\nN1\\nR90\\nS3\\nR90\\nF63\\nL90\\nW4\\nL90\\nF47\\nL90\\nE5\\nF23\\nW2\\nF97\\nE3\\nL90\\nN4\\nF54\\nW3\\nS4\\nW3\\nS2\\nF67\\nW1\\nS4\\nR90\\nS5\\nR90\\nW4\\nL180\\nL90\\nS4\\nF19\\nF42\\nS4\\nF91\\nR90\\nL180\\nF64\\nL180\\nW4\\nR90\\nF32\\nN3\\nF18\\nE2\\nL180\\nN4\\nE2\\nN1\\nE4\\nN4\\nF54\\nW5\\nF50\\nN3\\nL90\\nN5\\nR90\\nF100\\nE4\\nN1\\nE3\\nL90\\nF8\\nL90\\nE4\\nL270\\nF95\\nL90\\nF44\\nE5\\nR90\\nF79\\nN5\\nF61\\nS2\\nF71\\nL90\\nF4\\nN3\\nF25\\nL180\\nF7\\nW4\\nF96\\nR90\\nS1\\nR90\\nW1\\nF9\\nN2\\nW5\\nF1\\nR90\\nN2\\nF36\\nW4\\nR90\\nF96\\nW2\\nF26\\nS2\\nF28\\nE4\\nN1\\nF33\\nN5\\nF51\\nW2\\nS1\\nF40\\nN3\\nF67\\nE3\\nS2\\nR90\\nW1\\nS3\\nE3\\nL90\\nF75\\nE3\\nN5\\nE2\\nF52\\nE3\\nF7\\nN4\\nF4\\nS4\\nL90\\nS2\\nW5\\nF85\\nF7\\nL180\\nE1\\nL90\\nE2\\nS3\\nR180\\nN3\\nE2\\nR90\\nN5\\nF6\\nN2\\nL90\\nW1\\nR90\\nR90\\nF91\\nE2\\nN4\\nR90\\nS2\\nE3\\nS3\\nL90\\nW3\\nF61\\nS1\\nL90\\nW3\\nN2\\nE1\\nR180\\nE2\\nW5\\nR90\\nF65\\nN4\\nW3\\nF54\\nE1\\nN3\\nE5\\nL180\\nS4\\nN3\\nE5\\nR90\\nS3\\nR90\\nS4\\nW4\\nF31\\nS5\\nR90\\nN2\\nE3\\nF49\\nF47\\nW3\\nF79\\nR270\\nW2\\nF90\\nS3\\nF73\\nL180\\nF14\\nW4\\nF27\\nR90\\nF75\\nL90\\nN5\\nR90\\nN4\\nL90\\nN4\\nE2\\nS1\\nW1\\nS4\\nW5\\nW1\\nF7\\nW5\\nL180\\nE1\\nS1\\nF82\\nF36\\nN2\\nL90\\nE1\\nL90\\nS4\\nL180\\nN2\\nW3\\nF21\\nR270\\nF18\\nR180\\nF93\\nL90\\nW2\\nF4\\nE1\\nR90\\nE2\\nS3\\nW4\\nF30\\nE1\\nF69\\nW5\\nR90\\nE2\\nL180\\nS4\\nW1\\nN1\\nE3\\nL90\\nE3\\nR90\\nF69\\nR90\\nS2\\nL90\\nN4\\nF13\\nL90\\nE2\\nL90\\nN2\\nW2\\nN5\\nS4\\nF70\\nR90\\nF67\\nE4\\nF62\\nL270\\nF98\\nL90\\nE5\\nF15\\nE5\\nR90\\nW3\\nE2\\nF25\\nR180\\nF7\\nL180\\nW4\\nS3\\nF42\\nR180\\nR270\\nN1\\nR180\\nS2\\nF37\\nE2\\nF72\\nN5\\nW5\\nF61\\nF43\\nW3\\nR90\\nR270\\nN5\\nR270\\nE4\\nL90\\nW4\\nF31\\nF43\\nL180\\nS3\\nW4\\nR90\\nF20\\nE2\\nS5\\nL90\\nF75\\nR90\\nF52\\nW3\\nL90\\nN5\\nW5\\nN4\\nR90\\nF52\\nW3\\nF91\\nE1\\nN2\\nF81\\nR90\\nE2\\nL90\\nF24\\nE2\\nL180\\nE1\\nF55\\nE1\\nL90\\nE5\\nR90\\nF23\\nS3\\nR180\\nS3\\nF8\\nL180\\nS1\\nN3\\nF90\\nN5\\nW3\\nN4\\nL90\\nN3\\nW5\\nR90\\nE4\\nS4\\nF89\\nW3\\nN2\\nR90\\nF18\\nR180\\nW5\\nE4\\nF100\\nN4\\nF40\\nE3\\nS2\\nE2\\nF16\\nR90\\nS2\\nL180\\nF58\\nW1\\nF70\\nS1\\nR90\\nW3\\nL90\\nS4\\nF48\\nR90\\nW1\\nN5\\nE3\\nR90\\nE1\\nL90\\nF1\\nR90\\nN1\\nE3\\nF39\\nW3\\nR90\\nE3\\nL90\\nN5\\nR90\\nS3\\nW4\\nR180\\nE1\\nS3\\nF56\\nL90\\nF98\\nN2\\nW4\\nF67\\nR90\\nW3\\nS1\\nF33\\nR90\\nF42\\nL90\\nR90\\nE4\\nR90\\nE3\\nF74\\nE4\\nR270\\nF62\\nS5\\nL90\\nE4\\nF21\";","export default \"You reach the train's last stop and the closest you can get to your vacation island without getting wet. There aren't even any boats here, but nothing can stop you now: you build a raft. You just need a few days' worth of food for your journey.\\n\\nYou don't speak the local language, so you can't read any ingredients lists. However, sometimes, allergens are listed in a language you **do** understand. You should be able to use this information to determine which ingredient contains which allergen and work out which foods are safe to take with you on your trip.\\n\\nYou start by compiling a list of foods (your puzzle input), one food per line. Each line includes that food's **ingredients list** followed by some or all of the allergens the food contains.\\n\\nEach allergen is found in exactly one ingredient. Each ingredient contains zero or one allergen. **Allergens aren't always marked**; when they're listed (as in `(contains nuts, shellfish)` after an ingredients list), the ingredient that contains each listed allergen will be **somewhere in the corresponding ingredients list**. However, even if an allergen isn't listed, the ingredient that contains that allergen could still be present: maybe they forgot to label it, or maybe it was labeled in a language you don't know.\\n\\nFor example, consider the following list of foods:\\n\\n```\\nmxmxvkd kfcds sqjhc nhms (contains dairy, fish)\\ntrh fvjkl sbzzf mxmxvkd (contains dairy)\\nsqjhc fvjkl (contains soy)\\nsqjhc mxmxvkd sbzzf (contains fish)\\n```\\n\\nThe first food in the list has four ingredients (written in a language you don't understand): `mxmxvkd`, `kfcds`, `sqjhc`, and `nhms`. While the food might contain other allergens, a few allergens the food definitely contains are listed afterward: `dairy` and `fish`.\\n\\nThe first step is to determine which ingredients **can't possibly** contain any of the allergens in any food in your list. In the above example, none of the ingredients `kfcds`, `nhms`, `sbzzf`, or `trh` can contain an allergen. Counting the number of times any of these ingredients appear in any ingredients list produces **`5`**: they all appear once each except sbzzf, which appears twice.\\n\\nDetermine which ingredients cannot possibly contain any of the allergens in your list. **How many times do any of those ingredients appear?**\\n\\n[comment]: <> (PART 2)\\n\\nNow that you've isolated the inert ingredients, you should have enough information to figure out which ingredient contains which allergen.\\n\\nIn the above example:\\n\\n- `mxmxvkd` contains `dairy`.\\n- `sqjhc` contains `fish`.\\n- `fvjkl` contains `soy`.\\n\\nArrange the ingredients **alphabetically by their allergen** and separate them by commas to produce your **canonical dangerous ingredient list**. (There should **not be any spaces** in your canonical dangerous ingredient list.) In the above example, this would be **`mxmxvkd,sqjhc,fvjkl`**.\\n\\nTime to stock your raft with supplies. **What is your canonical dangerous ingredient list?**\";","export default \"You finally reach the check-in desk. Unfortunately, their registration systems are currently offline, and they cannot check you in. Noticing the look on your face, they quickly add that tech support is already on the way! They even created all the room keys this morning; you can take yours now and give them your room deposit once the registration system comes back online.\\n\\nThe room key is a small [RFID](https://en.wikipedia.org/wiki/Radio-frequency_identification) card. Your room is on the 25th floor and the elevators are also temporarily out of service, so it takes what little energy you have left to even climb the stairs and navigate the halls. You finally reach the door to your room, swipe your card, and - **beep** - the light turns red.\\n\\nExamining the card more closely, you discover a phone number for tech support.\\n\\n\\\"Hello! How can we help you today?\\\" You explain the situation.\\n\\n\\\"Well, it sounds like the card isn't sending the right command to unlock the door. If you go back to the check-in desk, surely someone there can reset it for you.\\\" Still catching your breath, you describe the status of the elevator and the exact number of stairs you just had to climb.\\n\\n\\\"I see! Well, your only other option would be to reverse-engineer the cryptographic handshake the card does with the door and then inject your own commands into the data stream, but that's definitely impossible.\\\" You thank them for their time.\\n\\nUnfortunately for the door, you know a thing or two about cryptographic handshakes.\\n\\nThe handshake used by the card and the door involves an operation that **transforms** a **subject number**. To transform a subject number, start with the value 1. Then, a number of times called the **loop size**, perform the following steps:\\n\\n- Set the value to itself multiplied by the **subject number**.\\n- Set the value to the remainder after dividing the value by `20201227`.\\n\\nThe card always uses a specific, secret **loop size** when it transforms a subject number. The door always uses a different, secret loop size.\\n\\nThe cryptographic handshake works like this:\\n\\n- The **card** transforms the subject number of **`7`** according to the **card's** secret loop size. The result is called the **card's public key**.\\n- The **door** transforms the subject number of **`7`** according to the **door's** secret loop size. The result is called the **door's public key**.\\n- The card and door use the wireless RFID signal to transmit the two public keys (your puzzle input) to the other device. Now, the **card** has the **door's** public key, and the **door** has the **card's** public key. Because you can eavesdrop on the signal, you have both public keys, but neither device's loop size.\\n- The **card** transforms the subject number of the **door's public key** according to the **card's** loop size. The result is the **encryption key**.\\n- The **door** transforms the subject number of the **card's public key** according to the **door's** loop size. The result is the same **encryption key** as the **card** calculated.\\n\\nIf you can use the two public keys to determine each device's loop size, you will have enough information to calculate the secret **encryption key** that the card and door use to communicate; this would let you send the `unlock` command directly to the door!\\n\\nFor example, suppose you know that the card's public key is `5764801`. With a little trial and error, you can work out that the card's loop size must be **`8`**, because transforming the initial subject number of `7` with a loop size of `8` produces `5764801`.\\n\\nThen, suppose you know that the door's public key is `17807724`. By the same process, you can determine that the door's loop size is **`11`**, because transforming the initial subject number of `7` with a loop size of `11` produces `17807724`.\\n\\nAt this point, you can use either device's loop size with the other device's public key to calculate the **encryption key**. Transforming the subject number of `17807724` (the door's public key) with a loop size of `8` (the card's loop size) produces the encryption key, **`14897079`**. (Transforming the subject number of `5764801` (the card's public key) with a loop size of `11` (the door's loop size) produces the same encryption key: **`14897079`**.)\\n\\n**What encryption key is the handshake trying to establish?**\\n\\n[comment]: <> (PART 2)\\n\\nThe light turns green and the door unlocks. As you collapse onto the bed in your room, your pager goes off!\\n\\n\\\"It's an emergency!\\\" the Elf calling you explains. \\\"The [soft serve](https://en.wikipedia.org/wiki/Soft_serve) machine in the cafeteria on sub-basement 7 just failed and you're the only one that knows how to fix it! We've already dispatched a reindeer to your location to pick you up.\\\"\\n\\nYou hear the sound of hooves landing on your balcony.\\n\\nThe reindeer carefully explores the contents of your room while you figure out how you're going to pay the *50 stars* you owe the resort before you leave. Noticing that you look concerned, the reindeer wanders over to you; you see that it's carrying a small pouch.\\n\\n\\\"Sorry for the trouble,\\\" a note in the pouch reads. Sitting at the bottom of the pouch is a gold coin with a little picture of a starfish on it.\\n\\nLooks like you only needed *49 stars* after all.\";","export default \"You're already almost 1.5km (almost a mile) below the surface of the ocean, already so deep that you can't see any sunlight. What you **can** see, however, is a giant squid that has attached itself to the outside of your submarine.\\n\\nMaybe it wants to play [bingo](https://en.wikipedia.org/wiki/Bingo_(American_version))?\\n\\nBingo is played on a set of boards each consisting of a 5x5 grid of numbers. Numbers are chosen at random, and the chosen number is **marked** on all boards on which it appears. (Numbers may not appear on all boards.) If all numbers in any row or any column of a board are marked, that board **wins**. (Diagonals don't count.)\\n\\nThe submarine has a **bingo subsystem** to help passengers (currently, you and the giant squid) pass the time. It automatically generates a random order in which to draw numbers and a random set of boards (your puzzle input). For example:\\n\\n```\\n7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1\\n\\n22 13 17 11  0\\n 8  2 23  4 24\\n21  9 14 16  7\\n 6 10  3 18  5\\n 1 12 20 15 19\\n\\n 3 15  0  2 22\\n 9 18 13 17  5\\n19  8  7 25 23\\n20 11 10 24  4\\n14 21 16 12  6\\n\\n14 21 17 24  4\\n10 16 15  9 19\\n18  8 23 26 20\\n22 11 13  6  5\\n 2  0 12  3  7\\n```\\n\\nAfter the first five numbers are drawn (`7`, `4`, `9`, `5`, and `11`), there are no winners, but the boards are marked as follows (shown here adjacent to each other to save space):\\n\\n<pre>\\n22 13 17 <b>11</b>  0         3 15  0  2 22        14 21 17 24  <b>4</b>\\n 8  2 23  <b>4</b> 24         <b>9</b> 18 13 17  <b>5</b>        10 16 15  <b>9</b> 19\\n21  <b>9</b> 14 16  <b>7</b>        19  8  <b>7</b> 25 23        18  8 23 26 20\\n 6 10  3 18  <b>5</b>        20 <b>11</b> 10 24  <b>4</b>        22 <b>11</b> 13  6  <b>5</b>\\n 1 12 20 15 19        14 21 16 12  6         2  0 12  3  <b>7</b>\\n</pre>\\n\\nAfter the next six numbers are drawn (`17`, `23`, `2`, `0`, `14`, and `21`), there are still no winners:\\n\\n<pre>\\n22 13 <b>17</b> <b>11</b>  0         3 15  <b>0</b>  <b>2</b> 22        <b>14</b> <b>21</b> <b>17</b> 24  <b>4</b>\\n 8  <b>2</b> <b>23</b>  <b>4</b> 24         <b>9</b> 18 13 <b>17</b>  <b>5</b>        10 16 15  <b>9</b> 19\\n<b>21</b>  <b>9</b> <b>14</b> 16  <b>7</b>        19  8  <b>7</b> 25 <b>23</b>        18  8 <b>23</b> 26 20\\n 6 10  3 18  <b>5</b>        20 <b>11</b> 10 24  <b>4</b>        22 <b>11</b> 13  6  <b>5</b>\\n 1 12 20 15 19        <b>14</b> <b>21</b> 16 12  6         <b>2</b>  <b>0</b> 12  3  <b>7</b>\\n</pre>\\n\\nFinally, 24 is drawn:\\n\\n<pre>\\n22 13 <b>17</b> <b>11</b>  <b>0</b>         3 15  <b>0</b>  <b>2</b> 22        <b>14</b> <b>21</b> <b>17</b> <b>24</b>  <b>4</b>\\n 8  <b>2</b> <b>23</b>  <b>4</b> <b>24</b>         <b>9</b> 18 13 <b>17</b>  <b>5</b>        10 16 15  <b>9</b> 19\\n<b>21</b>  <b>9</b> <b>14</b> 16  <b>7</b>        19  8  <b>7</b> 25 <b>23</b>        18  8 <b>23</b> 26 20\\n 6 10  3 18  <b>5</b>        20 <b>11</b> 10 <b>24</b>  <b>4</b>        22 <b>11</b> 13  6  <b>5</b>\\n 1 12 20 15 19        <b>14</b> <b>21</b> 16 12  6         <b>2</b>  <b>0</b> 12  3  <b>7</b>\\n</pre>\\n\\nAt this point, the third board **wins** because it has at least one complete row or column of marked numbers (in this case, the entire top row is marked: **`14 21 17 24 4`**).\\n\\nThe **score** of the winning board can now be calculated. Start by finding the **sum of all unmarked numbers** on that board; in this case, the sum is `188`. Then, multiply that sum by **the number that was just called** when the board won, `24`, to get the final score, `188 * 24 =` **`4512`**.\\n\\nTo guarantee victory against the giant squid, figure out which board will win first. **What will your final score be if you choose that board?**\\n\\n[comment]: <> (PART 2)\\n\\nOn the other hand, it might be wise to try a different strategy: let the giant squid win.\\n\\nYou aren't sure how many bingo boards a giant squid could play at once, so rather than waste time counting its arms, the safe thing to do is to **figure out which board will win last** and choose that one. That way, no matter which boards it picks, it will win for sure.\\n\\nIn the above example, the second board is the last to win, which happens after `13` is eventually called and its middle column is completely marked. If you were to keep playing until this point, the second board would have a sum of unmarked numbers equal to `148` for a final score of `148 * 13 =` **`1924`**.\\n\\nFigure out which board will win last. **Once it wins, what would its final score be?**\";","var uncurryThis = require('../internals/function-uncurry-this');\n\n// `thisNumberValue` abstract operation\n// https://tc39.es/ecma262/#sec-thisnumbervalue\nmodule.exports = uncurryThis(1.0.valueOf);\n","export default \"light salmon bags contain 5 dotted olive bags, 4 wavy lavender bags.\\ndark purple bags contain 5 striped maroon bags, 1 wavy maroon bag.\\nmuted lime bags contain 4 drab lavender bags, 1 clear orange bag, 2 striped black bags.\\nlight green bags contain 5 dull gray bags, 3 dark crimson bags.\\nbright violet bags contain 1 bright purple bag.\\ndotted magenta bags contain 2 wavy beige bags, 1 dotted bronze bag.\\nwavy bronze bags contain 4 clear fuchsia bags.\\nbright plum bags contain 2 dim violet bags.\\nshiny yellow bags contain 5 clear violet bags, 3 drab maroon bags.\\npale tomato bags contain 3 bright aqua bags.\\nlight chartreuse bags contain 3 vibrant fuchsia bags.\\nmirrored blue bags contain 2 pale aqua bags.\\nmuted maroon bags contain 3 muted indigo bags, 1 vibrant gold bag.\\nclear green bags contain 4 dotted beige bags.\\nmuted indigo bags contain 1 dull green bag.\\nfaded orange bags contain 1 shiny gold bag, 4 dim tomato bags.\\nposh purple bags contain 3 posh turquoise bags, 4 dull lime bags, 3 vibrant fuchsia bags, 2 dull green bags.\\ndim beige bags contain 4 dull fuchsia bags, 5 pale silver bags, 3 shiny silver bags.\\ndark tomato bags contain 5 dotted magenta bags.\\nmuted chartreuse bags contain 2 plaid chartreuse bags, 3 faded orange bags.\\ndrab teal bags contain 2 dotted blue bags, 2 striped maroon bags, 5 dotted tomato bags, 5 striped gold bags.\\nshiny olive bags contain 5 dim blue bags, 3 dotted violet bags.\\nbright magenta bags contain 2 dotted silver bags, 4 plaid black bags, 4 posh tomato bags, 4 dark salmon bags.\\nstriped crimson bags contain 3 muted tomato bags, 2 mirrored black bags, 2 wavy yellow bags, 2 faded green bags.\\nshiny bronze bags contain 5 striped turquoise bags, 5 light coral bags, 4 striped aqua bags, 5 dim bronze bags.\\nstriped gray bags contain 2 faded coral bags.\\nstriped yellow bags contain 4 clear chartreuse bags, 2 shiny violet bags, 2 faded gold bags.\\nclear tan bags contain 4 dim green bags, 3 dull white bags, 2 posh turquoise bags.\\ndark bronze bags contain 1 shiny purple bag, 2 dark coral bags, 5 plaid gold bags.\\nlight orange bags contain 3 clear green bags, 2 muted blue bags, 3 drab gray bags.\\nwavy turquoise bags contain 3 clear gold bags, 5 wavy tomato bags, 5 dotted coral bags.\\ndrab tan bags contain 1 striped lime bag, 1 clear orange bag, 3 pale white bags, 3 bright yellow bags.\\ndark plum bags contain 2 striped blue bags, 4 bright fuchsia bags.\\ndotted blue bags contain 2 pale aqua bags, 1 dotted orange bag, 4 dotted indigo bags, 1 plaid blue bag.\\nlight white bags contain 5 dull red bags, 4 faded salmon bags.\\nposh olive bags contain 4 shiny silver bags, 5 dark bronze bags.\\ndull olive bags contain 4 dark plum bags, 2 dotted coral bags, 4 clear blue bags, 2 dull maroon bags.\\ndim tomato bags contain 2 dim chartreuse bags, 3 shiny gold bags.\\nclear lavender bags contain 5 light aqua bags, 5 dull tan bags.\\nwavy teal bags contain 4 dotted beige bags.\\nmirrored orange bags contain 2 pale beige bags.\\ndim purple bags contain 2 striped gold bags.\\ndark chartreuse bags contain 2 wavy tomato bags.\\nbright coral bags contain 4 muted violet bags.\\ndrab yellow bags contain 1 dark gold bag, 5 dotted gold bags, 3 mirrored chartreuse bags.\\nclear orange bags contain 3 bright cyan bags, 1 dull lavender bag.\\nbright brown bags contain 1 light teal bag, 4 dotted salmon bags.\\ndrab violet bags contain 5 bright crimson bags, 2 wavy bronze bags, 1 wavy lavender bag.\\ndull turquoise bags contain 3 vibrant tomato bags, 4 light indigo bags, 4 shiny green bags.\\nmuted cyan bags contain 5 muted plum bags, 3 drab red bags, 5 mirrored plum bags.\\npale indigo bags contain 4 dim yellow bags, 1 bright red bag.\\nvibrant green bags contain 3 shiny white bags, 3 faded fuchsia bags, 4 clear orange bags.\\ndotted crimson bags contain 5 clear fuchsia bags, 1 clear tan bag.\\ndrab maroon bags contain 4 muted olive bags.\\ndull bronze bags contain 5 shiny indigo bags, 2 dim chartreuse bags.\\nwavy brown bags contain 1 bright teal bag.\\nposh blue bags contain 3 striped blue bags, 3 drab teal bags, 5 shiny black bags.\\nclear chartreuse bags contain 1 clear tan bag, 2 dim cyan bags, 1 drab lime bag.\\nfaded coral bags contain 4 dotted green bags, 3 plaid cyan bags, 2 bright cyan bags.\\ndotted green bags contain 4 drab gray bags.\\nwavy orange bags contain 5 striped coral bags, 5 striped blue bags, 5 wavy green bags.\\ndotted tomato bags contain 1 light crimson bag, 5 light lime bags, 3 vibrant purple bags, 5 clear plum bags.\\npale fuchsia bags contain 2 muted orange bags, 3 dull orange bags, 4 posh bronze bags, 2 faded purple bags.\\nwavy lavender bags contain 1 dull lime bag.\\ndull blue bags contain 5 striped silver bags, 5 bright brown bags, 5 dotted green bags, 3 dark brown bags.\\nmuted beige bags contain 5 dim tomato bags, 2 shiny purple bags.\\npale lime bags contain 1 vibrant crimson bag, 1 pale plum bag, 4 mirrored gold bags, 3 bright chartreuse bags.\\nmirrored plum bags contain 2 dim white bags, 3 posh cyan bags, 3 dark lime bags.\\nlight coral bags contain 4 clear silver bags, 5 dim green bags, 1 striped tomato bag.\\nfaded lavender bags contain 2 dark tan bags, 2 wavy tomato bags, 2 light coral bags, 5 dotted silver bags.\\nplaid lime bags contain 3 light orange bags, 5 drab black bags, 2 drab lime bags.\\nvibrant cyan bags contain 1 vibrant gray bag, 5 wavy teal bags.\\ndark blue bags contain 5 clear tan bags, 5 clear silver bags, 3 drab black bags.\\nplaid coral bags contain 2 plaid aqua bags, 3 drab gold bags, 5 mirrored plum bags, 2 dim bronze bags.\\nlight maroon bags contain 3 dim yellow bags, 1 light red bag.\\nplaid silver bags contain 1 pale maroon bag, 5 shiny black bags, 2 dark coral bags, 3 posh violet bags.\\nclear violet bags contain 2 vibrant fuchsia bags.\\nclear cyan bags contain 2 plaid yellow bags, 4 plaid olive bags, 5 dull green bags.\\ndim magenta bags contain 1 wavy plum bag.\\ndrab salmon bags contain 5 dull white bags, 4 dark brown bags.\\npale magenta bags contain 1 muted olive bag, 5 mirrored fuchsia bags, 3 shiny purple bags.\\ndrab coral bags contain 2 striped silver bags.\\nlight gold bags contain 4 shiny aqua bags, 5 dim violet bags, 2 dotted orange bags.\\nshiny cyan bags contain 4 muted aqua bags, 3 striped maroon bags, 5 light salmon bags.\\ndrab beige bags contain 4 light gold bags, 5 dull white bags.\\nplaid fuchsia bags contain no other bags.\\nvibrant teal bags contain 4 muted maroon bags, 5 posh violet bags, 2 clear tan bags, 1 dull orange bag.\\ndim cyan bags contain 1 dark turquoise bag.\\nmirrored chartreuse bags contain 1 dull lavender bag, 4 pale red bags, 4 plaid chartreuse bags.\\nplaid gold bags contain 5 dark turquoise bags, 4 dim turquoise bags, 4 plaid fuchsia bags.\\nwavy gold bags contain 2 light lime bags, 5 wavy tomato bags.\\nwavy red bags contain 4 dotted lavender bags, 3 dotted blue bags, 4 striped brown bags, 2 faded orange bags.\\ndull red bags contain 5 drab green bags.\\nlight red bags contain 2 dark coral bags.\\nwavy crimson bags contain 2 shiny gold bags, 1 drab white bag.\\ndrab turquoise bags contain 4 posh gold bags, 2 pale plum bags, 3 wavy beige bags, 2 drab beige bags.\\ndim lavender bags contain 4 dark olive bags.\\nshiny tan bags contain 1 shiny teal bag, 1 clear tan bag, 4 wavy beige bags, 5 posh coral bags.\\nmirrored fuchsia bags contain 3 bright brown bags.\\nclear white bags contain 2 bright cyan bags, 1 pale orange bag, 3 vibrant gold bags, 3 dim cyan bags.\\nclear magenta bags contain 3 dull violet bags, 2 dull coral bags, 1 dull olive bag, 1 pale cyan bag.\\nmirrored salmon bags contain 5 drab gray bags, 1 striped magenta bag.\\nvibrant crimson bags contain 4 shiny aqua bags, 5 faded bronze bags.\\nclear yellow bags contain 3 bright beige bags.\\nstriped olive bags contain 2 clear silver bags, 5 dim orange bags, 2 posh black bags, 2 striped lavender bags.\\npale olive bags contain 3 dotted blue bags, 2 faded indigo bags, 3 pale crimson bags, 4 clear tan bags.\\nstriped white bags contain 2 drab silver bags, 2 clear brown bags.\\ndotted chartreuse bags contain 4 dark brown bags, 4 dim maroon bags, 3 plaid chartreuse bags, 2 dark red bags.\\ndim fuchsia bags contain 3 posh indigo bags, 5 clear purple bags.\\nshiny lime bags contain 3 muted gold bags, 3 vibrant crimson bags, 3 mirrored green bags.\\nstriped blue bags contain 2 clear coral bags, 4 drab green bags, 2 dull green bags.\\nshiny beige bags contain 3 wavy lime bags.\\ndim tan bags contain 2 clear green bags, 2 dull green bags.\\nposh cyan bags contain 4 faded purple bags.\\nstriped violet bags contain 2 faded orange bags, 5 plaid crimson bags, 2 dull fuchsia bags, 2 bright black bags.\\nmirrored crimson bags contain 1 drab gray bag, 3 faded crimson bags, 2 dim white bags, 4 dull green bags.\\ndim orange bags contain 4 dim lime bags, 1 drab black bag.\\ndrab cyan bags contain 2 shiny salmon bags, 4 muted plum bags, 4 dotted lavender bags, 2 plaid gray bags.\\ndrab brown bags contain 2 muted purple bags.\\nmirrored white bags contain 4 mirrored crimson bags, 5 pale plum bags, 2 bright maroon bags.\\nvibrant silver bags contain 3 dark bronze bags, 2 light olive bags, 3 posh cyan bags.\\nwavy magenta bags contain 3 muted aqua bags, 3 clear beige bags, 5 drab beige bags, 1 faded teal bag.\\nstriped purple bags contain 3 pale crimson bags, 1 bright maroon bag, 2 striped bronze bags, 4 pale gold bags.\\ndark teal bags contain 4 shiny aqua bags, 1 dull white bag, 2 dotted orange bags, 2 dull green bags.\\ndotted coral bags contain 5 dark turquoise bags.\\nvibrant lime bags contain 3 dim purple bags, 5 shiny black bags, 3 dotted black bags, 1 mirrored coral bag.\\nbright gold bags contain 3 posh tan bags, 4 drab gray bags, 1 dotted maroon bag, 2 clear fuchsia bags.\\ndark fuchsia bags contain 2 dull yellow bags, 1 dim orange bag, 4 muted beige bags.\\nmuted tomato bags contain 1 posh teal bag, 5 shiny olive bags.\\ndull indigo bags contain 4 muted maroon bags.\\nbright purple bags contain 1 dotted olive bag, 1 wavy chartreuse bag, 1 clear tan bag, 2 dotted green bags.\\nwavy violet bags contain 3 striped silver bags, 1 pale plum bag.\\nshiny orange bags contain 2 drab black bags, 3 drab lime bags, 2 shiny black bags, 4 faded purple bags.\\nlight beige bags contain 5 dim coral bags, 1 dark white bag, 1 light crimson bag, 3 mirrored coral bags.\\ndrab tomato bags contain 5 shiny teal bags, 2 drab beige bags, 2 shiny purple bags.\\ndrab lavender bags contain 3 striped tomato bags, 1 bright brown bag.\\nshiny plum bags contain 4 plaid magenta bags, 5 posh indigo bags, 1 wavy violet bag, 5 clear white bags.\\ndotted brown bags contain 3 mirrored olive bags, 5 light yellow bags, 3 light tomato bags.\\nwavy coral bags contain 2 mirrored plum bags, 4 posh purple bags.\\nshiny maroon bags contain 4 muted cyan bags, 1 wavy blue bag, 2 clear lime bags, 3 plaid orange bags.\\nposh bronze bags contain 1 plaid gold bag, 1 posh yellow bag, 4 wavy lime bags, 2 dull white bags.\\nbright fuchsia bags contain 3 dull silver bags, 2 light lime bags.\\ndull plum bags contain 1 dotted salmon bag, 4 shiny lavender bags, 5 mirrored purple bags, 2 bright cyan bags.\\nbright aqua bags contain 5 dull salmon bags, 1 plaid crimson bag, 4 shiny tomato bags, 5 vibrant fuchsia bags.\\nshiny salmon bags contain 4 plaid orange bags, 5 drab green bags.\\nmuted coral bags contain 4 dull indigo bags, 4 pale plum bags, 5 dotted black bags.\\nvibrant salmon bags contain 5 dark turquoise bags, 1 drab red bag.\\ndull black bags contain 1 dull magenta bag.\\nplaid white bags contain 3 shiny purple bags.\\ndrab green bags contain 5 striped maroon bags, 4 dark crimson bags, 1 faded teal bag, 1 dull green bag.\\nfaded purple bags contain 4 shiny gold bags.\\nstriped lime bags contain 5 striped turquoise bags, 1 clear silver bag.\\nclear black bags contain 4 dark beige bags, 3 posh black bags.\\nvibrant purple bags contain 5 dark brown bags.\\nclear beige bags contain 1 light teal bag, 4 plaid fuchsia bags.\\nlight lime bags contain 4 drab gray bags, 1 dark white bag, 3 drab tomato bags, 2 plaid maroon bags.\\nmuted violet bags contain 1 posh turquoise bag, 4 mirrored white bags.\\nvibrant olive bags contain 3 clear beige bags.\\nbright salmon bags contain 1 plaid orange bag.\\ndrab bronze bags contain 4 shiny turquoise bags, 1 clear fuchsia bag.\\ndrab plum bags contain 2 muted gold bags, 5 mirrored turquoise bags, 5 faded orange bags, 5 bright magenta bags.\\ndotted turquoise bags contain 5 striped maroon bags, 3 mirrored violet bags, 1 dark fuchsia bag.\\nwavy olive bags contain 5 vibrant maroon bags, 3 shiny tan bags, 5 vibrant yellow bags, 5 dotted silver bags.\\nwavy tomato bags contain 1 pale white bag, 5 light yellow bags.\\nplaid chartreuse bags contain 3 drab black bags.\\npale chartreuse bags contain 3 muted purple bags, 1 dull green bag, 3 dark brown bags, 5 light teal bags.\\ndotted cyan bags contain 2 pale salmon bags.\\nmuted gold bags contain 5 plaid silver bags, 5 dotted orange bags.\\nposh orange bags contain 5 posh purple bags, 4 dark teal bags, 4 dotted silver bags.\\npale brown bags contain 2 faded teal bags.\\nwavy aqua bags contain 5 muted plum bags, 5 wavy tomato bags, 3 mirrored gold bags, 5 drab tan bags.\\nbright blue bags contain 2 clear green bags.\\ndotted red bags contain 4 wavy plum bags, 5 muted green bags.\\nclear tomato bags contain 3 bright cyan bags, 1 dull gray bag, 5 drab maroon bags, 4 muted indigo bags.\\nplaid orange bags contain 4 dotted coral bags, 5 pale gray bags, 5 shiny violet bags, 2 pale aqua bags.\\nmuted teal bags contain 2 muted maroon bags, 1 drab teal bag, 2 light teal bags.\\nwavy blue bags contain 5 pale chartreuse bags, 2 shiny white bags, 5 posh teal bags.\\nposh teal bags contain 3 pale chartreuse bags.\\nmirrored magenta bags contain 1 bright aqua bag.\\nvibrant orange bags contain 3 mirrored magenta bags, 1 mirrored violet bag, 3 posh indigo bags, 5 faded orange bags.\\nposh black bags contain 5 bright red bags.\\npale white bags contain 3 dark teal bags, 1 dotted silver bag, 2 clear green bags.\\nposh tomato bags contain 1 shiny yellow bag, 3 light black bags, 2 drab blue bags, 5 wavy crimson bags.\\nmirrored teal bags contain 1 drab gray bag, 4 light lime bags.\\nmuted green bags contain 5 striped brown bags.\\ndim gold bags contain 2 posh indigo bags, 5 clear indigo bags, 4 posh gray bags.\\ndull gray bags contain 4 posh orange bags, 3 shiny gold bags, 1 dim tomato bag, 3 bright crimson bags.\\nstriped green bags contain 4 dark tan bags, 2 drab gray bags, 1 mirrored brown bag.\\nclear coral bags contain 2 striped brown bags, 2 light lime bags.\\nposh brown bags contain 3 vibrant purple bags, 3 dark chartreuse bags, 5 shiny cyan bags.\\ndotted black bags contain 2 bright crimson bags, 3 posh orange bags, 4 light gold bags, 5 dark brown bags.\\nposh chartreuse bags contain 5 wavy salmon bags, 3 striped silver bags, 2 drab violet bags.\\nmirrored tomato bags contain 3 pale crimson bags.\\nbright yellow bags contain 1 shiny coral bag, 2 muted blue bags, 4 wavy beige bags.\\ndull salmon bags contain 3 bright blue bags, 4 dull green bags, 5 drab salmon bags.\\npale black bags contain 5 shiny salmon bags.\\ndrab aqua bags contain 5 striped fuchsia bags, 2 light lavender bags, 1 light magenta bag.\\nmuted yellow bags contain 4 striped plum bags, 2 faded beige bags, 1 dull salmon bag, 5 bright red bags.\\nstriped brown bags contain 3 bright red bags, 3 shiny violet bags.\\nposh white bags contain 2 mirrored violet bags, 4 muted silver bags.\\nposh lavender bags contain 5 light crimson bags, 5 pale silver bags, 2 shiny green bags, 4 mirrored silver bags.\\nplaid beige bags contain 3 mirrored silver bags.\\ndull silver bags contain 1 dotted silver bag, 1 drab salmon bag.\\ndark violet bags contain 3 dotted green bags, 1 muted aqua bag, 4 bright chartreuse bags.\\ndotted maroon bags contain 3 clear red bags, 4 drab blue bags, 4 vibrant gray bags.\\ndim green bags contain 4 dotted silver bags.\\nvibrant fuchsia bags contain 5 shiny violet bags, 1 dim violet bag, 5 dotted beige bags.\\nmuted salmon bags contain 5 dim white bags.\\ndrab orange bags contain 5 dark teal bags.\\nvibrant violet bags contain 4 posh cyan bags, 4 mirrored brown bags, 5 dark beige bags.\\nbright crimson bags contain 1 plaid fuchsia bag, 2 drab black bags.\\nmuted plum bags contain 4 striped brown bags, 4 dull green bags, 4 mirrored beige bags.\\nplaid violet bags contain 4 dotted indigo bags.\\nwavy yellow bags contain 3 plaid lime bags, 2 mirrored orange bags.\\nfaded teal bags contain 2 clear plum bags, 2 posh purple bags, 3 muted plum bags, 2 dim tomato bags.\\nvibrant brown bags contain 1 light tan bag, 1 light lime bag.\\nvibrant turquoise bags contain 2 clear bronze bags, 2 striped gray bags, 2 pale green bags, 5 vibrant indigo bags.\\ndark black bags contain 3 mirrored gray bags.\\nmuted orange bags contain 2 dull orange bags.\\nshiny aqua bags contain 1 posh turquoise bag.\\nposh fuchsia bags contain 2 shiny fuchsia bags, 5 light gold bags.\\nlight plum bags contain 1 pale teal bag, 4 plaid maroon bags, 3 drab maroon bags.\\nposh plum bags contain 4 muted magenta bags.\\nplaid teal bags contain 1 muted gray bag, 3 clear bronze bags, 5 pale tomato bags.\\npale aqua bags contain 4 posh turquoise bags, 5 light chartreuse bags, 1 pale white bag, 5 light gold bags.\\nbright tomato bags contain 4 bright yellow bags, 5 dark red bags, 1 shiny orange bag, 1 dim teal bag.\\nlight teal bags contain no other bags.\\ndark olive bags contain 1 drab gray bag, 2 striped teal bags.\\ndotted tan bags contain 4 shiny salmon bags, 2 light black bags, 5 bright red bags.\\nlight cyan bags contain 1 clear beige bag, 4 plaid orange bags, 5 wavy lavender bags.\\ndark indigo bags contain 5 mirrored orange bags, 3 posh brown bags.\\nclear fuchsia bags contain 1 dark red bag, 2 posh black bags.\\ndotted salmon bags contain 5 pale gray bags.\\nmirrored turquoise bags contain 1 light aqua bag.\\nplaid olive bags contain 2 dull silver bags, 2 light black bags.\\nposh crimson bags contain 4 drab black bags, 4 dim teal bags, 5 light cyan bags, 3 dark teal bags.\\ndull lime bags contain no other bags.\\ndrab chartreuse bags contain 1 faded tan bag.\\nfaded gray bags contain 5 dark crimson bags, 3 light lavender bags, 5 dim silver bags.\\nwavy indigo bags contain 3 muted chartreuse bags, 2 dim green bags, 3 light fuchsia bags, 3 shiny white bags.\\nlight tan bags contain 1 light olive bag, 1 dim cyan bag, 5 plaid orange bags.\\nlight fuchsia bags contain 2 shiny indigo bags, 5 wavy coral bags, 2 wavy tomato bags.\\ndull yellow bags contain 4 faded coral bags, 3 dim white bags, 5 dull white bags.\\ndrab magenta bags contain 4 muted violet bags, 5 light plum bags, 4 faded orange bags.\\nmirrored gray bags contain 2 wavy cyan bags, 1 drab teal bag, 1 clear red bag, 5 bright lavender bags.\\ndull coral bags contain 1 bright yellow bag, 5 dull violet bags, 5 dark orange bags, 2 bright green bags.\\nmirrored olive bags contain 1 drab plum bag, 3 plaid orange bags.\\nmuted olive bags contain 5 shiny gold bags, 2 shiny aqua bags, 5 wavy chartreuse bags, 4 wavy lavender bags.\\nclear gold bags contain 3 bright purple bags, 3 light cyan bags, 5 wavy tomato bags.\\nplaid green bags contain 4 shiny yellow bags, 2 light salmon bags, 2 light silver bags, 5 dim purple bags.\\nposh red bags contain 5 dark violet bags.\\nmuted purple bags contain 3 drab salmon bags.\\nvibrant aqua bags contain 5 clear beige bags, 3 vibrant silver bags, 1 faded olive bag.\\nstriped indigo bags contain 3 plaid brown bags, 4 light aqua bags, 3 pale tomato bags.\\nwavy tan bags contain 2 faded indigo bags, 1 vibrant chartreuse bag, 5 drab beige bags, 4 drab gold bags.\\nshiny gold bags contain 5 wavy chartreuse bags.\\nwavy purple bags contain 5 faded maroon bags, 4 pale magenta bags.\\nmirrored indigo bags contain 2 plaid black bags, 5 dark teal bags, 2 dull indigo bags.\\nplaid crimson bags contain 5 dotted green bags, 2 dull white bags.\\ndark aqua bags contain 1 wavy coral bag, 1 plaid crimson bag.\\nshiny fuchsia bags contain 1 dark olive bag, 4 wavy silver bags, 2 bright turquoise bags, 1 dull white bag.\\nstriped orange bags contain 4 dotted green bags, 1 mirrored coral bag, 5 dull indigo bags.\\ndrab purple bags contain 1 posh orange bag, 1 bright blue bag.\\ndull orange bags contain 3 dim indigo bags, 3 pale orange bags.\\npale plum bags contain 2 light yellow bags.\\npale cyan bags contain 4 drab salmon bags, 3 dull magenta bags, 1 clear plum bag, 1 faded tomato bag.\\ndotted indigo bags contain 1 mirrored beige bag, 1 drab black bag, 4 shiny aqua bags.\\nshiny lavender bags contain 1 muted beige bag, 5 bright cyan bags, 2 dull green bags.\\ndrab lime bags contain 5 drab black bags, 4 dotted salmon bags.\\nmirrored bronze bags contain 3 dim bronze bags, 3 striped tan bags, 4 clear maroon bags, 4 dotted coral bags.\\nshiny brown bags contain 4 striped gold bags, 1 vibrant silver bag, 3 shiny gold bags.\\nstriped chartreuse bags contain 5 vibrant gray bags, 1 dark cyan bag.\\nmuted black bags contain 4 plaid indigo bags.\\nmuted aqua bags contain 1 pale red bag, 5 pale aqua bags.\\nbright maroon bags contain 2 drab black bags, 1 clear violet bag, 1 dotted lavender bag, 1 mirrored turquoise bag.\\nvibrant chartreuse bags contain 5 pale silver bags.\\ndull purple bags contain 2 mirrored chartreuse bags.\\nclear brown bags contain 2 light coral bags, 4 plaid cyan bags, 3 dim brown bags.\\nshiny teal bags contain 5 drab black bags, 2 shiny silver bags, 3 muted purple bags.\\ndull aqua bags contain 5 dotted lime bags, 4 mirrored lime bags.\\nwavy green bags contain 1 striped brown bag, 2 striped turquoise bags, 4 dull silver bags, 3 drab white bags.\\nclear gray bags contain 5 pale tan bags, 4 posh tomato bags, 3 dark brown bags, 1 striped violet bag.\\nbright cyan bags contain 5 drab salmon bags, 5 light crimson bags.\\nclear silver bags contain 4 mirrored turquoise bags, 4 posh orange bags, 3 light gold bags, 4 clear green bags.\\npale purple bags contain 5 dotted beige bags, 5 posh orange bags.\\nstriped tomato bags contain 1 dotted green bag, 4 dark turquoise bags.\\nmuted tan bags contain 2 faded green bags, 3 dim cyan bags.\\ndark coral bags contain 2 dim chartreuse bags, 1 striped plum bag.\\nshiny white bags contain 2 posh orange bags.\\ndim olive bags contain 1 faded teal bag, 4 pale lime bags, 3 dim teal bags.\\nfaded black bags contain 4 pale cyan bags, 3 dull gray bags, 5 light teal bags, 4 shiny bronze bags.\\nlight indigo bags contain 3 dim cyan bags, 1 shiny silver bag, 5 dull lavender bags.\\ndim coral bags contain 2 striped silver bags, 4 dim tomato bags.\\nplaid tan bags contain 2 mirrored turquoise bags, 4 dim beige bags, 5 shiny lavender bags, 4 dim bronze bags.\\nstriped plum bags contain 2 wavy lavender bags, 1 drab white bag.\\nfaded white bags contain 1 dim coral bag.\\ndotted lime bags contain 2 muted gold bags, 5 shiny violet bags, 5 plaid violet bags, 1 wavy bronze bag.\\ndotted violet bags contain 1 posh orange bag, 2 plaid fuchsia bags.\\ndull gold bags contain 5 vibrant crimson bags, 1 drab bronze bag, 3 dotted tan bags.\\nbright red bags contain 4 pale white bags, 4 light chartreuse bags, 3 clear beige bags, 5 dotted green bags.\\nwavy cyan bags contain 5 dotted chartreuse bags, 1 wavy violet bag, 1 posh coral bag, 5 dotted bronze bags.\\nfaded fuchsia bags contain 3 posh maroon bags, 4 clear plum bags, 3 drab lime bags.\\ndim violet bags contain no other bags.\\nstriped bronze bags contain 2 dim orange bags, 1 dark orange bag, 1 dark salmon bag, 4 faded teal bags.\\ndrab olive bags contain 2 striped violet bags, 2 pale beige bags.\\nmuted red bags contain 5 pale aqua bags, 1 wavy cyan bag, 4 clear white bags, 1 drab red bag.\\nshiny blue bags contain 5 plaid aqua bags, 2 drab salmon bags, 5 pale tan bags, 4 vibrant cyan bags.\\ndotted olive bags contain 5 dark brown bags.\\nshiny silver bags contain 3 light gold bags, 5 bright crimson bags, 4 dark turquoise bags.\\ndark beige bags contain 1 mirrored red bag, 3 dark salmon bags, 5 striped silver bags, 3 plaid orange bags.\\nplaid red bags contain 2 wavy fuchsia bags, 2 shiny turquoise bags, 1 shiny coral bag.\\nmirrored beige bags contain 1 plaid crimson bag, 4 dotted beige bags, 2 clear beige bags, 2 muted blue bags.\\ndim plum bags contain 4 striped cyan bags, 5 shiny beige bags, 2 vibrant olive bags, 4 light maroon bags.\\ndotted beige bags contain 3 shiny violet bags, 5 dim violet bags, 5 dull white bags, 2 plaid fuchsia bags.\\npale beige bags contain 2 light aqua bags.\\ndim gray bags contain 4 dotted indigo bags, 4 dim coral bags.\\nlight purple bags contain 5 shiny brown bags, 2 drab violet bags, 1 striped tomato bag.\\ndark salmon bags contain 1 dim green bag, 5 dim tan bags.\\nmirrored lime bags contain 5 light gold bags, 5 drab tan bags.\\nclear blue bags contain 3 drab tomato bags, 3 pale olive bags.\\nplaid lavender bags contain 5 shiny indigo bags, 3 muted crimson bags, 5 mirrored lime bags.\\nvibrant tomato bags contain 3 drab salmon bags, 5 faded purple bags, 1 faded bronze bag, 4 bright fuchsia bags.\\nposh turquoise bags contain 1 dim chartreuse bag.\\nclear turquoise bags contain 4 muted indigo bags, 1 dark maroon bag, 4 dull coral bags.\\ndrab crimson bags contain 1 plaid turquoise bag, 2 faded salmon bags.\\ndark brown bags contain no other bags.\\nfaded tomato bags contain 2 light cyan bags, 1 light maroon bag.\\nclear plum bags contain 2 drab lavender bags.\\nbright white bags contain 2 dim tan bags, 1 faded orange bag, 1 dim aqua bag.\\nshiny green bags contain 3 dotted coral bags, 1 mirrored white bag, 3 shiny gray bags.\\nclear olive bags contain 3 mirrored teal bags.\\nstriped red bags contain 1 pale green bag, 4 light maroon bags.\\ndull tomato bags contain 3 mirrored white bags, 4 posh bronze bags.\\nlight silver bags contain 1 mirrored plum bag, 2 dim teal bags.\\nstriped teal bags contain 4 light bronze bags.\\nmirrored tan bags contain 5 light gold bags, 2 posh brown bags.\\nclear purple bags contain 5 clear magenta bags, 2 pale tomato bags, 2 light black bags.\\nfaded green bags contain 5 light green bags, 5 plaid bronze bags.\\nshiny red bags contain 3 dark white bags, 2 posh green bags, 2 shiny indigo bags.\\nmuted white bags contain 4 dotted coral bags, 5 wavy blue bags.\\ndim crimson bags contain 3 wavy blue bags, 2 pale gray bags.\\nstriped lavender bags contain 2 dark blue bags, 2 pale aqua bags, 5 striped turquoise bags, 3 dark coral bags.\\nwavy gray bags contain 2 muted gray bags, 1 pale silver bag, 5 muted blue bags, 5 pale tomato bags.\\nmirrored silver bags contain 2 mirrored black bags, 5 mirrored plum bags, 5 striped silver bags, 3 dotted green bags.\\nlight crimson bags contain 4 faded maroon bags, 4 dim chartreuse bags, 5 dotted violet bags.\\nshiny coral bags contain 4 shiny silver bags, 3 posh yellow bags, 5 plaid blue bags, 3 shiny aqua bags.\\npale red bags contain 4 drab white bags, 1 dotted silver bag, 4 drab salmon bags, 3 dull green bags.\\nposh maroon bags contain 1 dim green bag.\\nposh gold bags contain 1 pale green bag, 5 striped silver bags.\\nlight blue bags contain 2 dotted silver bags, 1 muted beige bag.\\npale lavender bags contain 5 vibrant orange bags, 2 dull chartreuse bags.\\nfaded gold bags contain 2 shiny gray bags.\\nbright orange bags contain 3 posh teal bags, 5 wavy green bags, 1 bright chartreuse bag, 5 dark white bags.\\nmirrored violet bags contain 2 pale white bags, 5 dark brown bags, 5 bright blue bags.\\ndim white bags contain 4 clear green bags.\\nlight aqua bags contain no other bags.\\ndull chartreuse bags contain 5 striped gold bags.\\nclear salmon bags contain 5 pale salmon bags.\\nbright olive bags contain 1 posh blue bag.\\nbright lavender bags contain 2 pale lime bags.\\npale turquoise bags contain 3 muted chartreuse bags.\\nvibrant white bags contain 5 light red bags.\\ndotted silver bags contain 1 dark brown bag, 5 dark turquoise bags, 4 dim violet bags.\\ndull green bags contain 2 light teal bags, 5 drab black bags.\\nwavy plum bags contain 4 pale indigo bags, 3 plaid yellow bags, 1 wavy green bag, 4 muted green bags.\\nvibrant yellow bags contain 2 bright beige bags, 2 dim brown bags, 3 dotted teal bags.\\nfaded beige bags contain 3 dim brown bags, 4 clear gold bags.\\ndotted purple bags contain 4 shiny white bags.\\nmirrored green bags contain 5 dark red bags, 4 drab violet bags, 3 bright lavender bags.\\nshiny tomato bags contain 3 striped lavender bags.\\nbright silver bags contain 1 dotted magenta bag, 3 dim green bags, 1 muted coral bag, 4 shiny teal bags.\\nplaid maroon bags contain 5 dim brown bags.\\ndim salmon bags contain 4 pale olive bags, 5 dark crimson bags.\\ndark gold bags contain 3 dark orange bags, 3 bright fuchsia bags, 1 dull salmon bag, 5 dark blue bags.\\nstriped cyan bags contain 3 plaid blue bags, 1 dark orange bag, 5 clear violet bags.\\ndark gray bags contain 5 light orange bags.\\nposh gray bags contain 1 plaid maroon bag, 4 drab gold bags, 1 muted gold bag, 4 light bronze bags.\\npale gold bags contain 4 clear orange bags, 5 dim orange bags.\\npale teal bags contain 1 posh teal bag, 5 pale red bags.\\nvibrant lavender bags contain 5 plaid silver bags, 3 clear orange bags, 2 posh silver bags, 1 wavy violet bag.\\ndim black bags contain 2 dark plum bags, 2 plaid turquoise bags, 3 dull salmon bags, 2 clear orange bags.\\ndark white bags contain 2 vibrant fuchsia bags.\\ndark red bags contain 3 shiny violet bags, 5 vibrant fuchsia bags, 1 pale crimson bag.\\nstriped silver bags contain 2 posh purple bags, 4 dark white bags.\\nstriped turquoise bags contain 1 bright brown bag, 2 dotted green bags.\\nwavy salmon bags contain 5 light teal bags.\\nmuted turquoise bags contain 1 bright gray bag, 2 plaid orange bags, 5 muted blue bags, 2 dotted olive bags.\\nwavy black bags contain 2 mirrored black bags, 2 striped plum bags, 1 dull lime bag, 4 posh teal bags.\\nstriped tan bags contain 5 pale green bags.\\ndark turquoise bags contain 5 shiny violet bags, 3 dark brown bags.\\nplaid black bags contain 5 plaid crimson bags, 2 dim turquoise bags, 4 dotted black bags.\\nlight turquoise bags contain 4 plaid chartreuse bags, 4 dull violet bags.\\nplaid gray bags contain 1 light yellow bag, 4 striped lavender bags, 4 wavy chartreuse bags, 3 dotted salmon bags.\\ndrab black bags contain no other bags.\\nplaid cyan bags contain 1 dim tan bag, 2 plaid gold bags, 1 drab gray bag.\\nbright tan bags contain 1 plaid olive bag, 3 mirrored black bags.\\nfaded brown bags contain 2 dotted tomato bags.\\ndotted fuchsia bags contain 5 drab silver bags.\\ndrab white bags contain 5 shiny violet bags.\\nposh salmon bags contain 3 striped turquoise bags.\\ndull maroon bags contain 2 faded indigo bags.\\nbright bronze bags contain 1 muted blue bag, 5 dark chartreuse bags, 2 wavy purple bags, 3 vibrant violet bags.\\nplaid bronze bags contain 1 dark brown bag.\\ndark lavender bags contain 3 dim yellow bags, 4 drab red bags, 2 bright turquoise bags, 4 shiny black bags.\\nwavy silver bags contain 1 light yellow bag, 2 pale red bags.\\npale tan bags contain 5 dull orange bags, 5 dotted olive bags, 2 vibrant purple bags, 4 dull tan bags.\\npale orange bags contain 3 light teal bags, 1 dim maroon bag.\\nshiny indigo bags contain 3 drab maroon bags, 2 dotted indigo bags, 1 bright purple bag, 2 striped brown bags.\\nmuted fuchsia bags contain 4 posh crimson bags, 3 clear beige bags.\\nplaid plum bags contain 1 clear silver bag, 4 light cyan bags, 1 vibrant gray bag, 5 drab purple bags.\\nfaded violet bags contain 3 dotted beige bags, 3 muted aqua bags.\\ndotted plum bags contain 4 plaid brown bags, 5 wavy green bags, 3 dark cyan bags, 2 pale red bags.\\nvibrant tan bags contain 4 clear gray bags.\\ndrab silver bags contain 3 dull chartreuse bags.\\nshiny turquoise bags contain 4 dark olive bags.\\ndark silver bags contain 2 dotted black bags.\\nstriped beige bags contain 5 striped magenta bags.\\ndotted orange bags contain 1 light aqua bag, 4 posh turquoise bags.\\nshiny magenta bags contain 3 drab salmon bags, 5 mirrored orange bags.\\nposh magenta bags contain 3 plaid fuchsia bags, 4 dim maroon bags.\\nclear bronze bags contain 1 wavy fuchsia bag, 2 vibrant black bags.\\ndull violet bags contain 1 muted indigo bag, 2 posh green bags, 4 striped white bags, 1 clear red bag.\\nposh lime bags contain 5 vibrant cyan bags.\\npale silver bags contain 2 dark crimson bags, 1 light salmon bag, 1 clear brown bag.\\nposh yellow bags contain 1 dim white bag, 2 pale crimson bags.\\nvibrant bronze bags contain 4 faded gray bags, 1 dim gray bag, 2 posh cyan bags, 4 plaid lavender bags.\\ndull beige bags contain 4 wavy fuchsia bags, 4 plaid crimson bags, 2 dark blue bags, 1 wavy silver bag.\\ndull brown bags contain 4 pale turquoise bags, 4 clear tan bags.\\nfaded turquoise bags contain 5 plaid gold bags, 4 wavy chartreuse bags.\\ndark yellow bags contain 1 wavy lavender bag, 5 dark coral bags.\\ndotted gray bags contain 4 posh purple bags, 5 wavy lavender bags, 5 shiny green bags, 5 plaid white bags.\\ndim aqua bags contain 1 dull lime bag.\\nposh violet bags contain 1 mirrored tomato bag, 3 posh cyan bags.\\nshiny gray bags contain 3 clear green bags, 1 wavy bronze bag, 4 dark turquoise bags, 3 pale white bags.\\ndrab red bags contain 2 mirrored violet bags, 3 dotted orange bags, 5 dark lime bags, 4 bright purple bags.\\nstriped magenta bags contain 3 striped brown bags.\\ndull magenta bags contain 4 dim tomato bags, 3 muted beige bags, 5 clear violet bags.\\nclear maroon bags contain 4 plaid lime bags.\\nposh silver bags contain 3 mirrored red bags.\\ndark crimson bags contain 2 mirrored violet bags.\\npale maroon bags contain 2 shiny black bags.\\ndark magenta bags contain 1 dark green bag, 4 light plum bags.\\nbright lime bags contain 1 pale indigo bag, 3 dim yellow bags, 2 drab maroon bags, 4 light plum bags.\\ndark orange bags contain 1 wavy lavender bag, 1 dotted orange bag, 2 light crimson bags, 3 light yellow bags.\\nwavy lime bags contain 4 clear blue bags, 2 muted brown bags, 2 mirrored violet bags, 2 dotted lavender bags.\\ndotted lavender bags contain 1 posh teal bag, 5 dark red bags, 1 pale gray bag.\\nmuted brown bags contain 1 dark white bag, 2 dull maroon bags, 1 faded maroon bag.\\ndim yellow bags contain 5 dark white bags.\\nfaded tan bags contain 4 light coral bags, 4 light yellow bags.\\nfaded crimson bags contain 3 plaid fuchsia bags, 5 plaid orange bags.\\npale salmon bags contain 5 pale red bags, 4 dotted olive bags, 3 plaid magenta bags.\\ndim bronze bags contain 4 muted plum bags, 3 light cyan bags, 3 dark coral bags.\\nbright teal bags contain 2 vibrant violet bags, 4 striped bronze bags, 1 striped violet bag, 2 dark gray bags.\\npale bronze bags contain 2 plaid brown bags, 1 plaid white bag.\\nvibrant plum bags contain 2 drab tan bags, 2 plaid yellow bags, 3 faded fuchsia bags.\\ndotted teal bags contain 5 faded coral bags, 5 faded indigo bags, 1 posh violet bag, 3 pale indigo bags.\\nplaid salmon bags contain 2 dark lavender bags, 3 posh bronze bags, 4 light coral bags, 1 posh orange bag.\\ndim red bags contain 3 light violet bags.\\ndrab gold bags contain 4 wavy silver bags, 5 light bronze bags.\\nshiny violet bags contain no other bags.\\nmirrored maroon bags contain 1 drab yellow bag, 5 wavy beige bags.\\ndotted aqua bags contain 4 muted plum bags.\\nfaded salmon bags contain 4 mirrored olive bags, 5 dim lavender bags.\\nlight violet bags contain 2 wavy salmon bags.\\nplaid brown bags contain 5 faded indigo bags.\\nmirrored coral bags contain 4 pale gray bags.\\nmuted lavender bags contain 1 posh beige bag, 2 clear silver bags, 1 dotted bronze bag.\\nbright turquoise bags contain 2 striped black bags, 3 dull maroon bags.\\nvibrant gold bags contain 5 bright purple bags, 1 bright red bag.\\nmuted magenta bags contain 1 clear violet bag, 5 muted lavender bags, 4 faded aqua bags.\\nfaded silver bags contain 4 posh brown bags, 2 mirrored silver bags.\\ndim teal bags contain 2 dim violet bags, 1 dark white bag, 2 dotted black bags.\\nstriped maroon bags contain 5 shiny white bags.\\ndark maroon bags contain 2 plaid silver bags, 1 dull red bag, 2 shiny coral bags, 5 bright white bags.\\nclear crimson bags contain 4 muted salmon bags, 5 clear green bags, 1 light blue bag, 5 posh magenta bags.\\ndotted yellow bags contain 3 vibrant coral bags.\\nlight tomato bags contain 4 dim chartreuse bags, 4 light gold bags, 5 dark white bags.\\nshiny purple bags contain 3 dark turquoise bags.\\nbright green bags contain 1 light chartreuse bag.\\nmirrored yellow bags contain 4 striped white bags.\\nlight lavender bags contain 1 wavy crimson bag, 3 dim yellow bags, 1 plaid olive bag, 5 wavy white bags.\\nmuted crimson bags contain 2 dark beige bags, 1 dull green bag.\\nmuted blue bags contain 3 shiny aqua bags, 5 dark turquoise bags, 1 dotted silver bag.\\nstriped coral bags contain 2 dark red bags, 1 drab blue bag, 2 light aqua bags, 1 striped lavender bag.\\nlight brown bags contain 4 plaid yellow bags.\\nclear aqua bags contain 1 plaid olive bag, 1 plaid gold bag, 1 muted tan bag.\\ndotted gold bags contain 2 dark white bags.\\nplaid blue bags contain 5 dotted coral bags, 3 muted blue bags.\\nmirrored cyan bags contain 3 dark white bags, 1 striped turquoise bag, 3 light coral bags.\\nfaded red bags contain 3 clear tan bags, 5 striped brown bags, 3 shiny cyan bags.\\nclear lime bags contain 4 clear silver bags.\\ndim lime bags contain 2 light teal bags, 1 posh turquoise bag, 3 dotted silver bags, 1 drab lavender bag.\\ndull teal bags contain 1 light maroon bag, 4 bright coral bags.\\nlight gray bags contain 5 mirrored lime bags, 3 light violet bags, 1 muted olive bag, 4 striped brown bags.\\ndotted white bags contain 3 wavy white bags, 1 dotted beige bag, 5 clear green bags.\\nshiny crimson bags contain 3 pale salmon bags, 3 dark lime bags, 4 dull blue bags, 1 vibrant chartreuse bag.\\ndim brown bags contain 5 mirrored beige bags, 5 light orange bags, 2 faded crimson bags.\\ndim blue bags contain 5 pale gray bags.\\nstriped black bags contain 2 vibrant purple bags, 4 vibrant salmon bags, 2 clear gold bags, 3 shiny yellow bags.\\nstriped fuchsia bags contain 3 plaid fuchsia bags, 4 posh teal bags, 5 drab tomato bags, 3 dim turquoise bags.\\nshiny black bags contain 2 striped tomato bags.\\nvibrant maroon bags contain 5 bright aqua bags, 1 posh white bag, 1 pale silver bag, 2 muted tan bags.\\nposh coral bags contain 2 mirrored violet bags, 2 mirrored beige bags, 4 striped tomato bags, 2 drab white bags.\\nwavy chartreuse bags contain 5 muted blue bags, 1 bright crimson bag, 1 pale gray bag, 1 shiny silver bag.\\nbright chartreuse bags contain 5 striped brown bags.\\nbright gray bags contain 3 drab gray bags, 4 plaid cyan bags, 1 drab maroon bag.\\ndark lime bags contain 4 clear green bags, 4 dotted white bags.\\nfaded maroon bags contain 5 shiny gold bags, 4 dotted green bags, 2 striped brown bags.\\ndim silver bags contain 5 muted tomato bags, 5 mirrored violet bags.\\nfaded chartreuse bags contain 2 pale gray bags, 3 striped cyan bags.\\nposh beige bags contain 3 faded blue bags.\\nstriped aqua bags contain 5 bright gray bags, 4 shiny aqua bags, 3 shiny gray bags.\\ndull tan bags contain 2 dotted green bags, 3 light crimson bags, 3 mirrored fuchsia bags, 5 shiny cyan bags.\\ndark green bags contain 2 drab yellow bags.\\nwavy fuchsia bags contain 2 wavy gray bags, 1 faded fuchsia bag, 5 bright maroon bags.\\nvibrant indigo bags contain 5 dotted tomato bags, 4 light coral bags, 1 dark silver bag.\\ndrab indigo bags contain 5 pale coral bags.\\nfaded indigo bags contain 5 vibrant fuchsia bags, 1 wavy coral bag, 3 striped teal bags.\\npale violet bags contain 3 pale lime bags, 2 posh indigo bags, 5 muted blue bags, 2 plaid cyan bags.\\ndrab blue bags contain 3 dull silver bags, 2 dotted beige bags, 1 muted aqua bag, 3 dotted orange bags.\\ndull crimson bags contain 2 dim brown bags, 1 mirrored black bag.\\nmirrored lavender bags contain 2 posh chartreuse bags, 1 vibrant blue bag, 5 dull magenta bags.\\nlight olive bags contain 5 dotted silver bags, 5 dim white bags, 5 pale teal bags.\\nvibrant blue bags contain 1 dark fuchsia bag, 5 dim teal bags.\\ndim chartreuse bags contain no other bags.\\nbright black bags contain 1 dull lavender bag, 3 dark teal bags, 2 plaid blue bags, 5 dark white bags.\\ndark cyan bags contain 5 light beige bags, 5 bright orange bags.\\nlight yellow bags contain 5 striped silver bags, 2 dark brown bags, 2 dotted salmon bags, 4 dim violet bags.\\ndotted bronze bags contain 5 dim blue bags, 2 dark chartreuse bags.\\nfaded yellow bags contain 1 faded fuchsia bag, 4 dark brown bags, 1 muted salmon bag.\\ndull fuchsia bags contain 1 bright turquoise bag, 1 drab green bag.\\nfaded blue bags contain 5 dull chartreuse bags, 1 shiny violet bag.\\nstriped gold bags contain 2 dull silver bags, 4 dotted black bags.\\nmirrored black bags contain 1 wavy tomato bag, 3 posh violet bags, 4 vibrant crimson bags, 1 dull lime bag.\\nposh tan bags contain 2 plaid olive bags, 5 dotted white bags.\\nvibrant black bags contain 1 light chartreuse bag, 2 dark orange bags.\\ndim indigo bags contain 1 plaid crimson bag.\\nmirrored red bags contain 4 faded maroon bags.\\nvibrant beige bags contain 5 faded teal bags, 5 shiny coral bags, 4 drab teal bags.\\ndrab gray bags contain 4 light teal bags, 1 dull white bag.\\npale blue bags contain 1 posh purple bag, 4 light cyan bags.\\nposh indigo bags contain 4 dim gray bags, 2 striped maroon bags, 4 drab white bags, 3 light tomato bags.\\ndim maroon bags contain 3 pale white bags.\\nfaded aqua bags contain 2 drab white bags, 3 faded purple bags, 4 striped maroon bags.\\nplaid aqua bags contain 1 striped turquoise bag, 4 light bronze bags, 3 pale chartreuse bags.\\ndull lavender bags contain 5 striped plum bags, 1 dotted white bag, 2 dotted salmon bags, 5 dull silver bags.\\nlight magenta bags contain 2 drab violet bags, 5 drab coral bags, 2 vibrant lavender bags, 3 dull olive bags.\\nfaded lime bags contain 3 mirrored coral bags, 2 wavy lavender bags, 3 light yellow bags, 1 shiny silver bag.\\nwavy white bags contain 4 drab white bags.\\nclear indigo bags contain 3 dim cyan bags.\\nplaid turquoise bags contain 4 drab white bags, 3 dark teal bags, 2 plaid fuchsia bags.\\nplaid tomato bags contain 3 drab violet bags, 5 striped salmon bags.\\nbright beige bags contain 5 shiny black bags, 5 posh salmon bags, 4 striped bronze bags, 3 pale plum bags.\\nvibrant red bags contain 4 pale fuchsia bags.\\nposh green bags contain 1 drab red bag.\\nfaded plum bags contain 5 plaid chartreuse bags, 5 bright bronze bags, 4 dark blue bags, 3 clear bronze bags.\\ndim turquoise bags contain 3 light chartreuse bags.\\nclear red bags contain 1 drab blue bag, 5 striped fuchsia bags, 5 striped brown bags, 3 clear silver bags.\\npale gray bags contain 1 dull green bag, 2 dotted orange bags, 2 dark turquoise bags.\\nplaid purple bags contain 1 dim cyan bag, 4 striped lime bags, 3 drab violet bags.\\nclear teal bags contain 2 dull cyan bags, 1 wavy cyan bag, 2 light blue bags.\\nmirrored brown bags contain 5 mirrored red bags.\\nlight bronze bags contain 1 wavy white bag.\\nmuted gray bags contain 5 faded lime bags, 1 pale beige bag, 1 shiny indigo bag, 1 faded tan bag.\\nstriped salmon bags contain 5 dim teal bags, 5 dotted silver bags, 5 dim gray bags.\\nbright indigo bags contain 3 drab beige bags, 1 shiny red bag, 4 vibrant silver bags, 4 clear plum bags.\\npale coral bags contain 5 wavy plum bags, 2 clear beige bags.\\nfaded olive bags contain 2 bright crimson bags, 5 dotted green bags, 5 dull bronze bags, 2 posh turquoise bags.\\nwavy maroon bags contain 5 mirrored fuchsia bags, 5 dim olive bags.\\nplaid indigo bags contain 5 posh magenta bags, 1 dim bronze bag, 1 light blue bag.\\nposh aqua bags contain 5 clear beige bags, 3 dark lime bags.\\nfaded cyan bags contain 1 drab tomato bag, 4 posh crimson bags, 5 pale chartreuse bags, 3 faded tan bags.\\nplaid yellow bags contain 3 wavy cyan bags, 3 striped black bags.\\nfaded magenta bags contain 4 bright coral bags.\\ndull cyan bags contain 4 mirrored magenta bags, 3 clear chartreuse bags.\\nvibrant coral bags contain 2 dotted aqua bags, 1 bright cyan bag.\\nmirrored gold bags contain 2 shiny purple bags.\\nmirrored purple bags contain 3 dark beige bags.\\npale yellow bags contain 5 plaid coral bags, 3 wavy silver bags, 1 mirrored salmon bag, 3 light lime bags.\\ndark tan bags contain 1 light yellow bag, 5 plaid turquoise bags, 4 shiny gold bags.\\nfaded bronze bags contain 5 striped gold bags, 1 posh teal bag.\\nlight black bags contain 2 shiny black bags, 2 mirrored coral bags.\\nvibrant gray bags contain 5 dark teal bags, 3 muted aqua bags, 4 shiny violet bags, 5 dark bronze bags.\\nwavy beige bags contain 2 pale maroon bags.\\nmuted silver bags contain 4 plaid orange bags, 1 shiny chartreuse bag.\\nplaid magenta bags contain 1 dotted tan bag, 3 striped fuchsia bags, 5 light olive bags.\\ndrab fuchsia bags contain 5 dark violet bags, 1 shiny gold bag, 3 pale cyan bags.\\nshiny chartreuse bags contain 5 dotted violet bags.\\npale crimson bags contain 3 pale aqua bags.\\ndull white bags contain no other bags.\\npale green bags contain 4 bright green bags, 2 dull lime bags, 1 striped lime bag.\\nmuted bronze bags contain 5 bright tomato bags, 5 light red bags, 2 shiny yellow bags, 2 dim teal bags.\\nmirrored aqua bags contain 3 dim tomato bags, 1 mirrored crimson bag, 1 wavy silver bag.\\nvibrant magenta bags contain 2 dark lime bags.\";","export default \"With the toboggan login problems resolved, you set off toward the airport. While travel by toboggan might be easy, it's certainly not safe: there's very minimal steering and the area is covered in trees. You'll need to see which angles will take you near the fewest trees.\\n\\nDue to the local geology, trees in this area only grow on exact integer coordinates in a grid. You make a map (your puzzle input) of the open squares (`.`) and trees (`#`) you can see. For example:\\n\\n```\\n..##.......\\n#...#...#..\\n.#....#..#.\\n..#.#...#.#\\n.#...##..#.\\n..#.##.....\\n.#.#.#....#\\n.#........#\\n#.##...#...\\n#...##....#\\n.#..#...#.#\\n```\\n\\nThese aren't the only trees, though; due to something you read about once involving arboreal genetics and biome stability, the same pattern repeats to the right many times:\\n\\n```\\n..##.........##.........##.........##.........##.........##.......  --->\\n#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..\\n.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.\\n..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#\\n.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.\\n..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....  --->\\n.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#\\n.#........#.#........#.#........#.#........#.#........#.#........#\\n#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...\\n#...##....##...##....##...##....##...##....##...##....##...##....#\\n.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#  --->\\n```\\n\\nYou start on the open square (`.`) in the top-left corner and need to reach the bottom (below the bottom-most row on your map).\\n\\nThe toboggan can only follow a few specific slopes (you opted for a cheaper model that prefers rational numbers); start by **counting all the trees** you would encounter for the slope **right `3`, down `1`**:\\n\\nFrom your starting position at the top-left, check the position that is right `3` and down `1`. Then, check the position that is right `3` and down `1` from there, and so on until you go past the bottom of the map.\\n\\nThe locations you'd check in the above example are marked here with `O` where there was an open square and `X` where there was a tree:\\n\\n```\\n..##.........##.........##.........##.........##.........##.......  --->\\n#..O#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..\\n.#....X..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.\\n..#.#...#O#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#\\n.#...##..#..X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.\\n..#.##.......#.X#.......#.##.......#.##.......#.##.......#.##.....  --->\\n.#.#.#....#.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#\\n.#........#.#........X.#........#.#........#.#........#.#........#\\n#.##...#...#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...\\n#...##....##...##....##...#X....##...##....##...##....##...##....#\\n.#..#...#.#.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#  --->\\n```\\n\\nIn this example, traversing the map using this slope would cause you to encounter `7` trees.\\n\\nStarting at the top-left corner of your map and following a slope of right `3` and down `1`, **how many trees would you encounter**?\\n\\n[comment]: <> (PART 2)\\n\\nTime to check the rest of the slopes - you need to minimize the probability of a sudden arboreal stop, after all.\\n\\nDetermine the number of trees you would encounter if, for each of the following slopes, you start at the top-left corner and traverse the map all the way to the bottom:\\n\\n- Right `1`, down `1`.\\n- Right `3`, down `1`. (This is the slope you already checked.)\\n- Right `5`, down `1`.\\n- Right `7`, down `1`.\\n- Right `1`, down `2`.\\n\\nIn the above example, these slopes would find `2`, `7`, `3`, `4`, and `2` tree(s) respectively; multiplied together, these produce the answer **`336`**.\\n\\n**What do you get if you multiply together the number of trees encountered on each of the listed slopes?**\";","export default \"With your neighbor happily enjoying their video game, you turn your attention to an open data port on the little screen in the seat in front of you.\\n\\nThough the port is non-standard, you manage to connect it to your computer through the clever use of several paperclips. Upon connection, the port outputs a series of numbers (your puzzle input).\\n\\nThe data appears to be encrypted with the eXchange-Masking Addition System (XMAS) which, conveniently for you, is an old cypher with an important weakness.\\n\\nXMAS starts by transmitting a **preamble** of 25 numbers. After that, each number you receive should be the sum of any two of the 25 immediately previous numbers. The two numbers will have different values, and there might be more than one such pair.\\n\\nFor example, suppose your preamble consists of the numbers `1` through `25` in a random order. To be valid, the next number must be the sum of two of those numbers:\\n\\n- `26` would be a **valid** next number, as it could be `1` plus `25` (or many other pairs, like `2` and `24`).\\n- `49` would be a **valid** next number, as it is the sum of `24` and `25`.\\n- `100` would **not** be valid; no two of the previous 25 numbers sum to `100`.\\n- `50` would also **not** be valid; although `25` appears in the previous 25 numbers, the two numbers in the pair must be different.\\n\\nSuppose the 26th number is `45`, and the first number (no longer an option, as it is more than 25 numbers ago) was `20`. Now, for the next number to be valid, there needs to be some pair of numbers among `1`-`19`, `21`-`25`, or `45` that add up to it:\\n\\n- `26` would still be a **valid** next number, as `1` and `25` are still within the previous 25 numbers.\\n- `65` would **not** be valid, as no two of the available numbers sum to it.\\n- `64` and `66` would both be **valid**, as they are the result of `19+45` and `21+45` respectively.\\n\\nHere is a larger example which only considers the previous **5** numbers (and has a preamble of length 5):\\n\\n```\\n35\\n20\\n15\\n25\\n47\\n40\\n62\\n55\\n65\\n95\\n102\\n117\\n150\\n182\\n127\\n219\\n299\\n277\\n309\\n576\\n```\\n\\nIn this example, after the 5-number preamble, almost every number is the sum of two of the previous 5 numbers; the only number that does not follow this rule is **`127`**.\\n\\nThe first step of attacking the weakness in the XMAS data is to find the first number in the list (after the preamble) which is not the sum of two of the 25 numbers before it. **What is the first number that does not have this property?**\\n\\n[comment]: <> (PART 2)\\n\\nThe final step in breaking the XMAS encryption relies on the invalid number you just found: you must **find a contiguous set of at least two numbers** in your list which sum to the invalid number from step 1.\\n\\nAgain consider the above example:\\n\\n```\\n35\\n20\\n15\\n25\\n47\\n40\\n62\\n55\\n65\\n95\\n102\\n117\\n150\\n182\\n127\\n219\\n299\\n277\\n309\\n576\\n```\\n\\nIn this list, adding up all of the numbers from `15` through `40` produces the invalid number from step 1, `127`. (Of course, the contiguous set of numbers in your actual list might be much longer.)\\n\\nTo find the **encryption weakness**, add together the **smallest** and **largest** number in this contiguous range; in this example, these are `15` and `47`, producing `62`.\\n\\n**What is the encryption weakness in your XMAS-encrypted list of numbers?**\";","export default \"You stop falling through time, catch your breath, and check the screen on the device. \\\"Destination reached. Current Year: 1518. Current Location: North Pole Utility Closet 83N10.\\\" You made it! Now, to find those anomalies.\\n\\nOutside the utility closet, you hear footsteps and a voice. \\\"...I'm not sure either. But now that so many people have chimneys, maybe he could sneak in that way?\\\" Another voice responds, \\\"Actually, we've been working on a new kind of **suit** that would let him fit through tight spaces like that. But, I heard that a few days ago, they lost the prototype fabric, the design plans, everything! Nobody on the team can even seem to remember important details of the project!\\\"\\n\\n\\\"Wouldn't they have had enough fabric to fill several boxes in the warehouse? They'd be stored together, so the box IDs should be similar. Too bad it would take forever to search the warehouse for **two similar box IDs**...\\\" They walk too far away to hear any more.\\n\\nLate at night, you sneak to the warehouse - who knows what kinds of paradoxes you could cause if you were discovered - and use your fancy wrist device to quickly scan every box and produce a list of the likely candidates (your puzzle input).\\n\\nTo make sure you didn't miss any, you scan the likely candidate boxes again, counting the number that have an ID containing **exactly two of any letter** and then separately counting those with **exactly three of any letter**. You can multiply those two counts together to get a rudimentary [checksum](https://en.wikipedia.org/wiki/Checksum) and compare it to what your device predicts.\\n\\nFor example, if you see the following box IDs:\\n\\n- `abcdef` contains no letters that appear exactly two or three times.\\n- `bababc` contains two `a` and three `b`, so it counts for both.\\n- `abbcde` contains two `b`, but no letter appears exactly three times.\\n- `abcccd` contains three `c`, but no letter appears exactly two times.\\n- `aabcdd` contains two `a` and two `d`, but it only counts once.\\n- `abcdee` contains two `e`.\\n- `ababab` contains three `a` and three `b`, but it only counts once.\\n\\nOf these box IDs, four of them contain a letter which appears exactly twice, and three of them contain a letter which appears exactly three times. Multiplying these together produces a checksum of `4 * 3 = 12`.\\n\\n**What is the checksum for your list of box IDs?**\\n\\n[comment]: <> (PART 2)\\n\\nConfident that your list of box IDs is complete, you're ready to find the boxes full of prototype fabric.\\n\\nThe boxes will have IDs which differ by exactly one character at the same position in both strings. For example, given the following box IDs:\\n\\n```\\nabcde\\nfghij\\nklmno\\npqrst\\nfguij\\naxcye\\nwvxyz\\n```\\n\\nThe IDs `abcde` and `axcye` are close, but they differ by two characters (the second and fourth). However, the IDs `fghij` and `fguij` differ by exactly one character, the third (`h` and `u`). Those must be the correct boxes.\\n\\n**What letters are common between the two correct box IDs?** (In the example above, this is found by removing the differing character from either ID, producing `fgij`.)\";","var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.es/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n","export default \"The Elves managed to locate the chimney-squeeze prototype fabric for Santa's suit (thanks to someone who helpfully wrote its box IDs on the wall of the warehouse in the middle of the night). Unfortunately, anomalies are still affecting them - nobody can even agree on how to cut the fabric.\\n\\nThe whole piece of fabric they're working on is a very large square - at least `1000` inches on each side.\\n\\nEach Elf has made a **claim** about which area of fabric would be ideal for Santa's suit. All claims have an ID and consist of a single rectangle with edges parallel to the edges of the fabric. Each claim's rectangle is defined as follows:\\n\\n- The number of inches between the left edge of the fabric and the left edge of the rectangle.\\n- The number of inches between the top edge of the fabric and the top edge of the rectangle.\\n- The width of the rectangle in inches.\\n- The height of the rectangle in inches.\\n\\nA claim like `#123 @ 3,2: 5x4` means that claim ID `123` specifies a rectangle `3` inches from the left edge, `2` inches from the top edge, `5` inches wide, and `4` inches tall. Visually, it claims the square inches of fabric represented by `#` (and ignores the square inches of fabric represented by `.`) in the diagram below:\\n\\n```\\n...........\\n...........\\n...#####...\\n...#####...\\n...#####...\\n...#####...\\n...........\\n...........\\n...........\\n```\\n\\nThe problem is that many of the claims **overlap**, causing two or more claims to cover part of the same areas. For example, consider the following claims:\\n\\n```\\n#1 @ 1,3: 4x4\\n#2 @ 3,1: 4x4\\n#3 @ 5,5: 2x2\\n```\\n\\nVisually, these claim the following areas:\\n\\n```\\n........\\n...2222.\\n...2222.\\n.11XX22.\\n.11XX22.\\n.111133.\\n.111133.\\n........\\n```\\n\\nThe four square inches marked with X are claimed by **both `1` and `2`**. (Claim `3`, while adjacent to the others, does not overlap either of them.)\\n\\nIf the Elves all proceed with their own plans, none of them will have enough fabric. **How many square inches of fabric are within two or more claims?**\\n\\n[comment]: <> (PART 2)\\n\\nAmidst the chaos, you notice that exactly one claim doesn't overlap by even a single square inch of fabric with any other claim. If you can somehow draw attention to it, maybe the Elves will be able to make Santa's suit after all!\\n\\nFor example, in the claims above, only claim `3` is intact after all claims are made.\\n\\n**What is the ID of the only claim that doesn't overlap?**\";","export default \"Crossing the bridge, you've barely reached the other side of the stream when a program comes up to you, clearly in distress. \\\"It's my child process,\\\" she says, \\\"he's gotten lost in an infinite grid!\\\"\\n\\nFortunately for her, you have plenty of experience with infinite grids.\\n\\nUnfortunately for you, it's a [hex grid](https://en.wikipedia.org/wiki/Hexagonal_tiling).\\n\\nThe hexagons (\\\"hexes\\\") in this grid are aligned such that adjacent hexes can be found to the north, northeast, southeast, south, southwest, and northwest:\\n\\n```\\n  \\\\ n  /\\nnw +--+ ne\\n  /    \\\\\\n-+      +-\\n  \\\\    /\\nsw +--+ se\\n  / s  \\\\\\n```\\n\\nYou have the path the child process took. Starting where he started, you need to determine the fewest number of steps required to reach him. (A \\\"step\\\" means to move from the hex you are in to any adjacent hex.)\\n\\nFor example:\\n\\n- `ne,ne,ne` is `3` steps away.\\n- `ne,ne,sw,sw` is `0` steps away (back where you started).\\n- `ne,ne,s,s` is `2` steps away (`se,se`).\\n- `se,sw,se,sw,sw` is `3` steps away (`s,s,sw`).\\n\\n[comment]: <> (PART 2)\\n\\n**How many steps away** is the **furthest** he ever got from his starting position?\";","export default \"set b 93\\nset c b\\njnz a 2\\njnz 1 5\\nmul b 100\\nsub b -100000\\nset c b\\nsub c -17000\\nset f 1\\nset d 2\\nset e 2\\nset g d\\nmul g e\\nsub g b\\njnz g 2\\nset f 0\\nsub e -1\\nset g e\\nsub g b\\njnz g -8\\nsub d -1\\nset g d\\nsub g b\\njnz g -13\\njnz f 2\\nsub h -1\\nset g b\\nsub g c\\njnz g 2\\njnz 1 3\\nsub b -17\\njnz 1 -23\";","export default \"0 <-> 889, 1229, 1736\\n1 <-> 1, 480, 793, 1361\\n2 <-> 607\\n3 <-> 273, 422\\n4 <-> 965, 1052, 1130, 1591\\n5 <-> 1998\\n6 <-> 483, 1628\\n7 <-> 1012, 1242, 1244, 1491\\n8 <-> 524\\n9 <-> 13, 281, 1498\\n10 <-> 10\\n11 <-> 1956\\n12 <-> 598, 621, 1210\\n13 <-> 9\\n14 <-> 1728\\n15 <-> 912, 1461\\n16 <-> 1489, 1680, 1994\\n17 <-> 854\\n18 <-> 1157, 1299\\n19 <-> 759\\n20 <-> 1352, 1831\\n21 <-> 1425\\n22 <-> 470, 685, 857, 1526\\n23 <-> 405\\n24 <-> 43, 536, 1849\\n25 <-> 1674\\n26 <-> 26, 1738\\n27 <-> 558\\n28 <-> 1863\\n29 <-> 154, 649, 1818\\n30 <-> 721, 1366\\n31 <-> 725\\n32 <-> 413, 880, 903\\n33 <-> 414, 442, 1403\\n34 <-> 489, 1308\\n35 <-> 385, 1254, 1464\\n36 <-> 167, 1013, 1860\\n37 <-> 535\\n38 <-> 605, 1297\\n39 <-> 680, 1408, 1982\\n40 <-> 169, 615, 952, 1547\\n41 <-> 644, 991, 1319, 1509\\n42 <-> 453, 1315\\n43 <-> 24, 200, 805\\n44 <-> 919, 1083\\n45 <-> 500\\n46 <-> 1532, 1550\\n47 <-> 910, 1837\\n48 <-> 1849\\n49 <-> 542, 1945\\n50 <-> 57, 660\\n51 <-> 354, 934\\n52 <-> 1212\\n53 <-> 569\\n54 <-> 706\\n55 <-> 55, 114, 1077\\n56 <-> 1453\\n57 <-> 50, 1438\\n58 <-> 616, 738\\n59 <-> 1242\\n60 <-> 312, 523, 648\\n61 <-> 748, 1780, 1965\\n62 <-> 1533, 1909\\n63 <-> 562, 661, 1016\\n64 <-> 280, 300, 677\\n65 <-> 661, 698, 1881\\n66 <-> 283, 440\\n67 <-> 382, 421\\n68 <-> 986, 1592, 1824\\n69 <-> 541, 1363\\n70 <-> 266, 1855\\n71 <-> 371, 433, 1055, 1682\\n72 <-> 793\\n73 <-> 73\\n74 <-> 1139\\n75 <-> 770, 1190, 1409, 1433, 1886\\n76 <-> 1135\\n77 <-> 492, 1771\\n78 <-> 575, 1107, 1596, 1670\\n79 <-> 1374\\n80 <-> 1168, 1519\\n81 <-> 1258\\n82 <-> 919, 1519, 1768\\n83 <-> 1463\\n84 <-> 684\\n85 <-> 517, 1655\\n86 <-> 1226\\n87 <-> 1700\\n88 <-> 523, 1292, 1939\\n89 <-> 177, 1695, 1706\\n90 <-> 400, 1683\\n91 <-> 194\\n92 <-> 106, 1546\\n93 <-> 104\\n94 <-> 501, 1686\\n95 <-> 285, 1985\\n96 <-> 402, 770\\n97 <-> 196\\n98 <-> 318, 1827\\n99 <-> 220, 1272, 1766, 1802\\n100 <-> 1105\\n101 <-> 380, 957\\n102 <-> 1305, 1483\\n103 <-> 262, 481, 621\\n104 <-> 93, 708, 1731\\n105 <-> 282\\n106 <-> 92, 901\\n107 <-> 553, 742, 1833\\n108 <-> 480, 1140\\n109 <-> 1247\\n110 <-> 1549\\n111 <-> 1283\\n112 <-> 1503, 1963\\n113 <-> 819, 1601\\n114 <-> 55, 593, 1020\\n115 <-> 324\\n116 <-> 378\\n117 <-> 1534\\n118 <-> 1740, 1836\\n119 <-> 1223, 1283\\n120 <-> 435, 1063\\n121 <-> 404, 939\\n122 <-> 294, 360, 1809\\n123 <-> 1166\\n124 <-> 1988\\n125 <-> 163\\n126 <-> 126\\n127 <-> 255, 754\\n128 <-> 634, 969\\n129 <-> 563, 1732, 1926\\n130 <-> 1196\\n131 <-> 1019, 1429\\n132 <-> 1287, 1417\\n133 <-> 1453\\n134 <-> 184, 786\\n135 <-> 647\\n136 <-> 260, 306\\n137 <-> 1342\\n138 <-> 292\\n139 <-> 1265\\n140 <-> 613\\n141 <-> 1001, 1217\\n142 <-> 142, 1901\\n143 <-> 758, 822, 1533\\n144 <-> 866, 930, 1197, 1443, 1665\\n145 <-> 1672\\n146 <-> 1937\\n147 <-> 1409, 1697\\n148 <-> 608, 954, 1624\\n149 <-> 527, 652, 1938\\n150 <-> 709\\n151 <-> 447, 1305, 1314\\n152 <-> 1741\\n153 <-> 901, 1997\\n154 <-> 29, 929\\n155 <-> 1178, 1976\\n156 <-> 560\\n157 <-> 522\\n158 <-> 541\\n159 <-> 1212, 1878\\n160 <-> 1078\\n161 <-> 1128, 1913\\n162 <-> 588, 734\\n163 <-> 125, 1073, 1952\\n164 <-> 1156\\n165 <-> 1781\\n166 <-> 1692\\n167 <-> 36, 1637\\n168 <-> 1043, 1085\\n169 <-> 40, 334, 1257, 1313\\n170 <-> 170\\n171 <-> 171\\n172 <-> 1391\\n173 <-> 925\\n174 <-> 1733\\n175 <-> 175, 1466\\n176 <-> 726, 1182\\n177 <-> 89, 1100\\n178 <-> 611, 1141\\n179 <-> 1036, 1307\\n180 <-> 1556\\n181 <-> 1930\\n182 <-> 775, 1284\\n183 <-> 1907\\n184 <-> 134, 1981\\n185 <-> 255, 1278\\n186 <-> 1891\\n187 <-> 531, 1318\\n188 <-> 790, 1623\\n189 <-> 379, 1749, 1865\\n190 <-> 1103, 1676\\n191 <-> 534\\n192 <-> 477\\n193 <-> 193, 860\\n194 <-> 91, 710, 1780\\n195 <-> 290, 1383, 1510\\n196 <-> 97, 1664\\n197 <-> 1416\\n198 <-> 287, 1760\\n199 <-> 366\\n200 <-> 43\\n201 <-> 813, 1882\\n202 <-> 246, 1175\\n203 <-> 203, 1007\\n204 <-> 204, 923\\n205 <-> 924\\n206 <-> 1162, 1818\\n207 <-> 365, 487, 923\\n208 <-> 1281, 1290\\n209 <-> 1280\\n210 <-> 210, 288, 1333\\n211 <-> 211, 417, 754\\n212 <-> 1698\\n213 <-> 1626\\n214 <-> 1256\\n215 <-> 215, 1385, 1671\\n216 <-> 811, 1025\\n217 <-> 554, 1715\\n218 <-> 1483\\n219 <-> 1741\\n220 <-> 99, 530, 1081, 1319, 1801\\n221 <-> 804, 1144\\n222 <-> 1288, 1702\\n223 <-> 223, 1231\\n224 <-> 649, 1179\\n225 <-> 1271, 1776\\n226 <-> 226, 1991\\n227 <-> 496, 857, 1004, 1821\\n228 <-> 371, 500\\n229 <-> 1162\\n230 <-> 693, 1081\\n231 <-> 506, 973\\n232 <-> 859, 969, 1922\\n233 <-> 233\\n234 <-> 875, 1006\\n235 <-> 1035, 1998\\n236 <-> 236\\n237 <-> 289, 569, 1440\\n238 <-> 1249, 1923\\n239 <-> 1564, 1775, 1944\\n240 <-> 1888\\n241 <-> 951, 1874\\n242 <-> 825\\n243 <-> 384, 983, 1838\\n244 <-> 715, 1501\\n245 <-> 592, 671\\n246 <-> 202, 391, 632, 656\\n247 <-> 663\\n248 <-> 253, 752\\n249 <-> 1073, 1558\\n250 <-> 290\\n251 <-> 792, 1389\\n252 <-> 797\\n253 <-> 248, 771\\n254 <-> 254, 1047\\n255 <-> 127, 185, 369\\n256 <-> 623\\n257 <-> 1636, 1740\\n258 <-> 317\\n259 <-> 1775\\n260 <-> 136, 561, 1290\\n261 <-> 359, 1657\\n262 <-> 103, 697, 1074\\n263 <-> 1205\\n264 <-> 1779, 1782\\n265 <-> 1407\\n266 <-> 70, 1215, 1306\\n267 <-> 333, 790\\n268 <-> 603\\n269 <-> 269, 1497\\n270 <-> 270, 1613\\n271 <-> 1416, 1562, 1923\\n272 <-> 579, 894\\n273 <-> 3, 993\\n274 <-> 333\\n275 <-> 1188\\n276 <-> 535, 645, 1166, 1269\\n277 <-> 1369\\n278 <-> 744, 1717\\n279 <-> 349, 695, 985, 1096\\n280 <-> 64, 1516\\n281 <-> 9, 427, 768, 1468\\n282 <-> 105, 867\\n283 <-> 66, 1235, 1525, 1748\\n284 <-> 530\\n285 <-> 95, 800, 1191\\n286 <-> 339, 611, 1581\\n287 <-> 198, 1285, 1501\\n288 <-> 210, 1059\\n289 <-> 237, 1928\\n290 <-> 195, 250, 1934\\n291 <-> 337, 1902\\n292 <-> 138, 1805, 1849\\n293 <-> 906\\n294 <-> 122, 1582\\n295 <-> 602\\n296 <-> 778\\n297 <-> 471, 483\\n298 <-> 298\\n299 <-> 402, 729\\n300 <-> 64, 1002\\n301 <-> 856\\n302 <-> 1084, 1538, 1739\\n303 <-> 892, 1774\\n304 <-> 1029, 1350\\n305 <-> 521, 1628, 1902\\n306 <-> 136, 469, 653, 835\\n307 <-> 981\\n308 <-> 1997\\n309 <-> 1612\\n310 <-> 1338, 1571\\n311 <-> 1388\\n312 <-> 60\\n313 <-> 1557\\n314 <-> 886, 1704\\n315 <-> 672, 779\\n316 <-> 1062, 1906\\n317 <-> 258, 1290\\n318 <-> 98, 318\\n319 <-> 1974\\n320 <-> 839\\n321 <-> 395, 615, 909, 1046\\n322 <-> 1077, 1390, 1989\\n323 <-> 323, 773, 1571\\n324 <-> 115, 493, 511, 650\\n325 <-> 325\\n326 <-> 1944, 1972\\n327 <-> 1489\\n328 <-> 412, 468\\n329 <-> 1637\\n330 <-> 556, 1176\\n331 <-> 656\\n332 <-> 564, 1688\\n333 <-> 267, 274, 421, 1205, 1743\\n334 <-> 169, 1896\\n335 <-> 1176\\n336 <-> 638, 1408, 1633\\n337 <-> 291, 844, 1549\\n338 <-> 515\\n339 <-> 286\\n340 <-> 340, 1959\\n341 <-> 943\\n342 <-> 417, 638, 1116, 1536\\n343 <-> 1030\\n344 <-> 584, 1751\\n345 <-> 345, 1810\\n346 <-> 346\\n347 <-> 587\\n348 <-> 515, 1187\\n349 <-> 279, 349\\n350 <-> 1749\\n351 <-> 1030, 1097\\n352 <-> 352\\n353 <-> 353, 683\\n354 <-> 51, 354, 735\\n355 <-> 1362\\n356 <-> 1593\\n357 <-> 357\\n358 <-> 441, 501, 899, 1672\\n359 <-> 261\\n360 <-> 122, 360, 1234, 1927\\n361 <-> 736\\n362 <-> 1169\\n363 <-> 780\\n364 <-> 444, 905, 1049, 1911\\n365 <-> 207\\n366 <-> 199, 1469\\n367 <-> 1612\\n368 <-> 675, 1800\\n369 <-> 255\\n370 <-> 370, 873, 962, 1238\\n371 <-> 71, 228, 456\\n372 <-> 1912\\n373 <-> 1318\\n374 <-> 1018, 1246\\n375 <-> 898, 1303\\n376 <-> 376, 573\\n377 <-> 1080\\n378 <-> 116, 1140\\n379 <-> 189, 1984\\n380 <-> 101\\n381 <-> 472, 827, 1097\\n382 <-> 67\\n383 <-> 383, 582\\n384 <-> 243, 432, 444, 569, 634\\n385 <-> 35\\n386 <-> 1496\\n387 <-> 637, 737, 756, 1293\\n388 <-> 1562\\n389 <-> 633\\n390 <-> 488\\n391 <-> 246, 853, 1422\\n392 <-> 1253, 1331\\n393 <-> 921, 1567, 1777, 1970\\n394 <-> 809\\n395 <-> 321, 798, 1040\\n396 <-> 746, 1332\\n397 <-> 400, 953\\n398 <-> 1958\\n399 <-> 399\\n400 <-> 90, 397, 808, 1485\\n401 <-> 1395\\n402 <-> 96, 299, 1388\\n403 <-> 716\\n404 <-> 121\\n405 <-> 23, 934, 1221\\n406 <-> 1007\\n407 <-> 1391\\n408 <-> 497, 1090, 1644\\n409 <-> 1479\\n410 <-> 793, 1977\\n411 <-> 1026\\n412 <-> 328, 581, 806\\n413 <-> 32, 1354\\n414 <-> 33, 1920\\n415 <-> 799, 1207, 1880\\n416 <-> 1862\\n417 <-> 211, 342, 589, 1858\\n418 <-> 556, 1437, 1490\\n419 <-> 1393\\n420 <-> 420\\n421 <-> 67, 333, 1813\\n422 <-> 3, 706, 1598, 1721\\n423 <-> 1834\\n424 <-> 854, 1442\\n425 <-> 855, 1080\\n426 <-> 1408, 1469\\n427 <-> 281\\n428 <-> 832, 1998\\n429 <-> 553, 657, 834\\n430 <-> 1466\\n431 <-> 1357\\n432 <-> 384\\n433 <-> 71\\n434 <-> 434, 489, 1137\\n435 <-> 120\\n436 <-> 972, 1461\\n437 <-> 550\\n438 <-> 486, 844\\n439 <-> 978\\n440 <-> 66, 705, 1850\\n441 <-> 358, 589, 783, 804, 1129\\n442 <-> 33, 497\\n443 <-> 1806\\n444 <-> 364, 384, 1698\\n445 <-> 1208, 1294, 1452\\n446 <-> 1143, 1452\\n447 <-> 151, 1072\\n448 <-> 448\\n449 <-> 997, 1829\\n450 <-> 1277\\n451 <-> 1531, 1866\\n452 <-> 1175, 1622, 1975\\n453 <-> 42, 1486\\n454 <-> 689\\n455 <-> 1497\\n456 <-> 371, 1577\\n457 <-> 702\\n458 <-> 461, 921, 1279\\n459 <-> 1004\\n460 <-> 485, 505, 1211, 1451\\n461 <-> 458, 541, 916, 1844\\n462 <-> 1281\\n463 <-> 856, 1481\\n464 <-> 602, 1476, 1553\\n465 <-> 543, 1566\\n466 <-> 847, 1593\\n467 <-> 1270\\n468 <-> 328, 829\\n469 <-> 306, 667, 720, 1931\\n470 <-> 22\\n471 <-> 297\\n472 <-> 381\\n473 <-> 473\\n474 <-> 599, 1146\\n475 <-> 1570, 1894\\n476 <-> 1145\\n477 <-> 192, 1193, 1690\\n478 <-> 1469, 1840\\n479 <-> 1684\\n480 <-> 1, 108\\n481 <-> 103, 963\\n482 <-> 1778\\n483 <-> 6, 297, 1662\\n484 <-> 1435\\n485 <-> 460\\n486 <-> 438\\n487 <-> 207, 998, 1185\\n488 <-> 390, 1231, 1668\\n489 <-> 34, 434, 1341\\n490 <-> 990, 1203\\n491 <-> 936\\n492 <-> 77\\n493 <-> 324\\n494 <-> 1984\\n495 <-> 495, 1954\\n496 <-> 227\\n497 <-> 408, 442, 1551\\n498 <-> 1704, 1788\\n499 <-> 836\\n500 <-> 45, 228, 1358, 1798\\n501 <-> 94, 358, 1559\\n502 <-> 951\\n503 <-> 1036\\n504 <-> 1303\\n505 <-> 460\\n506 <-> 231, 606, 1473\\n507 <-> 1109\\n508 <-> 1724\\n509 <-> 1644\\n510 <-> 848\\n511 <-> 324, 1036\\n512 <-> 523\\n513 <-> 809, 1294\\n514 <-> 785\\n515 <-> 338, 348, 1027, 1193, 1226\\n516 <-> 1988\\n517 <-> 85, 1482\\n518 <-> 518\\n519 <-> 1625\\n520 <-> 520\\n521 <-> 305, 1033\\n522 <-> 157, 1355, 1476, 1588\\n523 <-> 60, 88, 512\\n524 <-> 8, 1998\\n525 <-> 990, 1275\\n526 <-> 1310, 1552\\n527 <-> 149, 979, 1805\\n528 <-> 698\\n529 <-> 631, 970\\n530 <-> 220, 284, 1533, 1944\\n531 <-> 187, 551, 1168, 1574\\n532 <-> 1484\\n533 <-> 892\\n534 <-> 191, 879\\n535 <-> 37, 276, 1527\\n536 <-> 24, 1094\\n537 <-> 747, 952\\n538 <-> 1620, 1735\\n539 <-> 858, 1467\\n540 <-> 1263, 1572\\n541 <-> 69, 158, 461\\n542 <-> 49, 1384\\n543 <-> 465, 639, 873\\n544 <-> 1338\\n545 <-> 1967\\n546 <-> 806, 1239\\n547 <-> 792, 1039, 1078\\n548 <-> 548, 1891, 1941\\n549 <-> 861\\n550 <-> 437, 1209, 1967\\n551 <-> 531, 888, 896\\n552 <-> 798\\n553 <-> 107, 429, 1330, 1951\\n554 <-> 217\\n555 <-> 744, 947, 1246\\n556 <-> 330, 418, 1070, 1925\\n557 <-> 1826, 1854\\n558 <-> 27, 1629\\n559 <-> 1042, 1150\\n560 <-> 156, 1472, 1834\\n561 <-> 260\\n562 <-> 63\\n563 <-> 129, 1309\\n564 <-> 332\\n565 <-> 1770, 1842\\n566 <-> 621\\n567 <-> 1160, 1178, 1642\\n568 <-> 895\\n569 <-> 53, 237, 384\\n570 <-> 641\\n571 <-> 571, 1261, 1924\\n572 <-> 882\\n573 <-> 376\\n574 <-> 982\\n575 <-> 78, 1255\\n576 <-> 887, 1539\\n577 <-> 603, 1122, 1679\\n578 <-> 742\\n579 <-> 272, 1444, 1747\\n580 <-> 797, 1554, 1718\\n581 <-> 412, 1926\\n582 <-> 383\\n583 <-> 1611\\n584 <-> 344, 1620\\n585 <-> 1692\\n586 <-> 1383\\n587 <-> 347, 1351\\n588 <-> 162, 1220\\n589 <-> 417, 441\\n590 <-> 1919\\n591 <-> 884, 992\\n592 <-> 245, 814\\n593 <-> 114\\n594 <-> 1843\\n595 <-> 1809\\n596 <-> 837\\n597 <-> 1563, 1575\\n598 <-> 12, 605, 984\\n599 <-> 474, 1218\\n600 <-> 732, 1237, 1714\\n601 <-> 1913\\n602 <-> 295, 464, 1061\\n603 <-> 268, 577, 720\\n604 <-> 604\\n605 <-> 38, 598\\n606 <-> 506, 686, 1813\\n607 <-> 2, 1948\\n608 <-> 148\\n609 <-> 1571\\n610 <-> 772, 901\\n611 <-> 178, 286, 880\\n612 <-> 1814\\n613 <-> 140, 883, 1198, 1764, 1942\\n614 <-> 1352\\n615 <-> 40, 321\\n616 <-> 58, 1413\\n617 <-> 624, 1008, 1591, 1791\\n618 <-> 1625\\n619 <-> 871, 1567\\n620 <-> 1954\\n621 <-> 12, 103, 566\\n622 <-> 1895\\n623 <-> 256, 1767\\n624 <-> 617\\n625 <-> 663\\n626 <-> 626\\n627 <-> 1650\\n628 <-> 884\\n629 <-> 1104, 1421\\n630 <-> 630, 864\\n631 <-> 529, 646\\n632 <-> 246\\n633 <-> 389, 1847\\n634 <-> 128, 384\\n635 <-> 1553, 1817\\n636 <-> 636\\n637 <-> 387\\n638 <-> 336, 342, 646, 1453\\n639 <-> 543, 815, 1087\\n640 <-> 1422, 1597\\n641 <-> 570, 805, 993, 1961\\n642 <-> 1371\\n643 <-> 959, 1044, 1444\\n644 <-> 41\\n645 <-> 276, 1022, 1184\\n646 <-> 631, 638, 1790\\n647 <-> 135, 1286\\n648 <-> 60\\n649 <-> 29, 224, 1636\\n650 <-> 324\\n651 <-> 863, 1321\\n652 <-> 149, 687, 1128, 1346\\n653 <-> 306\\n654 <-> 1409\\n655 <-> 1142, 1733\\n656 <-> 246, 331, 768, 1815\\n657 <-> 429\\n658 <-> 1511, 1569\\n659 <-> 1744\\n660 <-> 50, 796, 1524\\n661 <-> 63, 65, 810\\n662 <-> 995, 1661\\n663 <-> 247, 625, 1001\\n664 <-> 664\\n665 <-> 1305\\n666 <-> 666, 1817\\n667 <-> 469, 1003, 1550\\n668 <-> 1540, 1958\\n669 <-> 831, 883, 1349, 1719\\n670 <-> 1531\\n671 <-> 245, 671, 1693\\n672 <-> 315, 1088\\n673 <-> 942, 1381, 1660\\n674 <-> 880\\n675 <-> 368\\n676 <-> 1269, 1699\\n677 <-> 64, 1654\\n678 <-> 784\\n679 <-> 1760\\n680 <-> 39\\n681 <-> 681\\n682 <-> 728, 749, 1995\\n683 <-> 353\\n684 <-> 84, 1150\\n685 <-> 22\\n686 <-> 606\\n687 <-> 652, 1687\\n688 <-> 1878\\n689 <-> 454, 689\\n690 <-> 924, 1183\\n691 <-> 1410, 1413\\n692 <-> 1702\\n693 <-> 230, 1658\\n694 <-> 820, 1282, 1873\\n695 <-> 279\\n696 <-> 1168\\n697 <-> 262, 766, 776\\n698 <-> 65, 528, 698, 940\\n699 <-> 1778\\n700 <-> 743, 1459, 1825\\n701 <-> 1475\\n702 <-> 457, 792, 861, 1467\\n703 <-> 1581\\n704 <-> 1969\\n705 <-> 440, 1145\\n706 <-> 54, 422\\n707 <-> 1015, 1780\\n708 <-> 104, 1266\\n709 <-> 150, 1778\\n710 <-> 194\\n711 <-> 751\\n712 <-> 963\\n713 <-> 1525, 1762\\n714 <-> 1713\\n715 <-> 244, 1293, 1421\\n716 <-> 403, 1572\\n717 <-> 1142\\n718 <-> 1204\\n719 <-> 1672\\n720 <-> 469, 603\\n721 <-> 30, 1268, 1400\\n722 <-> 1183\\n723 <-> 1012\\n724 <-> 1029, 1289, 1368\\n725 <-> 31, 1039\\n726 <-> 176, 726\\n727 <-> 856\\n728 <-> 682, 1000\\n729 <-> 299, 1216, 1967\\n730 <-> 850, 900\\n731 <-> 1540, 1884\\n732 <-> 600, 784\\n733 <-> 1655\\n734 <-> 162\\n735 <-> 354, 1955\\n736 <-> 361, 1084, 1822\\n737 <-> 387\\n738 <-> 58, 1573\\n739 <-> 1119, 1216, 1822\\n740 <-> 829, 1219\\n741 <-> 1164\\n742 <-> 107, 578\\n743 <-> 700, 1744\\n744 <-> 278, 555\\n745 <-> 835, 1903\\n746 <-> 396\\n747 <-> 537, 1843\\n748 <-> 61\\n749 <-> 682, 1217, 1731\\n750 <-> 874, 1110, 1724\\n751 <-> 711, 1767\\n752 <-> 248, 1011\\n753 <-> 1327, 1885\\n754 <-> 127, 211, 1117\\n755 <-> 755\\n756 <-> 387\\n757 <-> 1098, 1169\\n758 <-> 143, 1689\\n759 <-> 19, 1517\\n760 <-> 831, 1915\\n761 <-> 761, 1195\\n762 <-> 1634\\n763 <-> 763\\n764 <-> 848, 1375\\n765 <-> 765, 1136\\n766 <-> 697, 1295, 1887\\n767 <-> 1906\\n768 <-> 281, 656, 1031\\n769 <-> 1457, 1863\\n770 <-> 75, 96\\n771 <-> 253, 846, 1375\\n772 <-> 610\\n773 <-> 323\\n774 <-> 1067\\n775 <-> 182, 1494\\n776 <-> 697\\n777 <-> 1136\\n778 <-> 296, 1057\\n779 <-> 315, 1631, 1796\\n780 <-> 363, 780, 1814\\n781 <-> 928, 1423\\n782 <-> 1850\\n783 <-> 441\\n784 <-> 678, 732, 999, 1988\\n785 <-> 514, 1248\\n786 <-> 134, 786, 1009\\n787 <-> 1348, 1863\\n788 <-> 891, 1183, 1455\\n789 <-> 1310, 1420, 1510\\n790 <-> 188, 267\\n791 <-> 1276\\n792 <-> 251, 547, 702\\n793 <-> 1, 72, 410, 1092\\n794 <-> 880\\n795 <-> 1799, 1807\\n796 <-> 660, 1548\\n797 <-> 252, 580, 797\\n798 <-> 395, 552\\n799 <-> 415, 799\\n800 <-> 285, 1889\\n801 <-> 801\\n802 <-> 802\\n803 <-> 1188, 1326, 1935\\n804 <-> 221, 441\\n805 <-> 43, 641, 1772\\n806 <-> 412, 546, 918, 1617\\n807 <-> 876, 1887\\n808 <-> 400, 1435, 1716\\n809 <-> 394, 513\\n810 <-> 661\\n811 <-> 216, 1259\\n812 <-> 1883\\n813 <-> 201, 1692\\n814 <-> 592\\n815 <-> 639\\n816 <-> 1041, 1734\\n817 <-> 1134, 1432\\n818 <-> 1575\\n819 <-> 113, 1063\\n820 <-> 694\\n821 <-> 1242\\n822 <-> 143, 892\\n823 <-> 1393, 1492\\n824 <-> 946\\n825 <-> 242, 999\\n826 <-> 1594\\n827 <-> 381, 1079, 1580\\n828 <-> 1941\\n829 <-> 468, 740, 1905\\n830 <-> 977, 1260, 1861\\n831 <-> 669, 760, 946, 1332\\n832 <-> 428, 832, 944, 1172\\n833 <-> 837, 1008, 1470\\n834 <-> 429, 915\\n835 <-> 306, 745, 976\\n836 <-> 499, 967\\n837 <-> 596, 833, 974\\n838 <-> 1335\\n839 <-> 320, 839, 1703\\n840 <-> 1053, 1398, 1760\\n841 <-> 1193\\n842 <-> 842, 1066, 1108\\n843 <-> 1414, 1697, 1894\\n844 <-> 337, 438\\n845 <-> 1506\\n846 <-> 771\\n847 <-> 466, 907, 1432\\n848 <-> 510, 764\\n849 <-> 1063, 1195, 1701\\n850 <-> 730, 1551\\n851 <-> 1112, 1331, 1479\\n852 <-> 1652\\n853 <-> 391\\n854 <-> 17, 424, 906, 1665\\n855 <-> 425, 1082\\n856 <-> 301, 463, 727, 1744\\n857 <-> 22, 227\\n858 <-> 539, 1252, 1472\\n859 <-> 232, 1843\\n860 <-> 193\\n861 <-> 549, 702, 1709, 1884\\n862 <-> 1149\\n863 <-> 651, 955\\n864 <-> 630\\n865 <-> 1138\\n866 <-> 144, 1111, 1114\\n867 <-> 282, 1487, 1835\\n868 <-> 1699\\n869 <-> 869\\n870 <-> 1487\\n871 <-> 619\\n872 <-> 872\\n873 <-> 370, 543, 1968\\n874 <-> 750, 874\\n875 <-> 234, 1202, 1473\\n876 <-> 807, 933, 1741\\n877 <-> 1205, 1874\\n878 <-> 1831\\n879 <-> 534, 1860\\n880 <-> 32, 611, 674, 794\\n881 <-> 1361, 1750\\n882 <-> 572, 1495\\n883 <-> 613, 669\\n884 <-> 591, 628, 1815\\n885 <-> 996, 1237\\n886 <-> 314, 1709\\n887 <-> 576\\n888 <-> 551\\n889 <-> 0, 1494\\n890 <-> 1100, 1966\\n891 <-> 788, 1312\\n892 <-> 303, 533, 822, 1334, 1812, 1935\\n893 <-> 1723\\n894 <-> 272, 1992\\n895 <-> 568, 1038\\n896 <-> 551, 1425\\n897 <-> 1783\\n898 <-> 375\\n899 <-> 358\\n900 <-> 730\\n901 <-> 106, 153, 610\\n902 <-> 1203\\n903 <-> 32, 1935\\n904 <-> 1109\\n905 <-> 364\\n906 <-> 293, 854, 1565\\n907 <-> 847, 1139, 1180, 1431, 1563, 1878\\n908 <-> 1908\\n909 <-> 321, 943\\n910 <-> 47, 1067\\n911 <-> 1468, 1495\\n912 <-> 15\\n913 <-> 1692\\n914 <-> 922, 1445\\n915 <-> 834, 1002\\n916 <-> 461\\n917 <-> 1177, 1924\\n918 <-> 806, 962, 1058, 1419\\n919 <-> 44, 82, 1933\\n920 <-> 1147, 1539\\n921 <-> 393, 458, 1055, 1951\\n922 <-> 914, 1271\\n923 <-> 204, 207, 1201\\n924 <-> 205, 690\\n925 <-> 173, 1816\\n926 <-> 1279\\n927 <-> 927\\n928 <-> 781\\n929 <-> 154\\n930 <-> 144\\n931 <-> 972, 1237\\n932 <-> 1317\\n933 <-> 876, 1756\\n934 <-> 51, 405, 1105, 1960\\n935 <-> 935, 1674\\n936 <-> 491, 1201, 1247\\n937 <-> 956, 1576, 1788\\n938 <-> 1377, 1733\\n939 <-> 121, 1638\\n940 <-> 698, 1808\\n941 <-> 1665, 1957\\n942 <-> 673\\n943 <-> 341, 909\\n944 <-> 832\\n945 <-> 1087, 1340\\n946 <-> 824, 831\\n947 <-> 555\\n948 <-> 959\\n949 <-> 1068\\n950 <-> 1664\\n951 <-> 241, 502, 1151\\n952 <-> 40, 537, 1376\\n953 <-> 397\\n954 <-> 148, 1075, 1364\\n955 <-> 863, 1235, 1618, 1724\\n956 <-> 937\\n957 <-> 101, 1323\\n958 <-> 1794, 1972\\n959 <-> 643, 948, 1023\\n960 <-> 960, 1417\\n961 <-> 1278\\n962 <-> 370, 918\\n963 <-> 481, 712\\n964 <-> 1198\\n965 <-> 4\\n966 <-> 966\\n967 <-> 836, 967, 1821\\n968 <-> 1513\\n969 <-> 128, 232\\n970 <-> 529\\n971 <-> 1471\\n972 <-> 436, 931\\n973 <-> 231\\n974 <-> 837\\n975 <-> 1390\\n976 <-> 835\\n977 <-> 830\\n978 <-> 439, 1687\\n979 <-> 527\\n980 <-> 980, 1609, 1940\\n981 <-> 307, 1671\\n982 <-> 574, 1318, 1643\\n983 <-> 243\\n984 <-> 598\\n985 <-> 279\\n986 <-> 68\\n987 <-> 1060\\n988 <-> 1942\\n989 <-> 1478\\n990 <-> 490, 525, 1838\\n991 <-> 41, 1263, 1302\\n992 <-> 591\\n993 <-> 273, 641\\n994 <-> 1026, 1240, 1618\\n995 <-> 662, 1545\\n996 <-> 885, 1528\\n997 <-> 449, 1058\\n998 <-> 487\\n999 <-> 784, 825\\n1000 <-> 728\\n1001 <-> 141, 663, 1626, 1681\\n1002 <-> 300, 915\\n1003 <-> 667\\n1004 <-> 227, 459\\n1005 <-> 1780\\n1006 <-> 234, 1578\\n1007 <-> 203, 406\\n1008 <-> 617, 833\\n1009 <-> 786, 1064\\n1010 <-> 1010, 1031, 1919\\n1011 <-> 752, 1754\\n1012 <-> 7, 723, 1068, 1181\\n1013 <-> 36\\n1014 <-> 1594\\n1015 <-> 707\\n1016 <-> 63\\n1017 <-> 1511\\n1018 <-> 374, 1034\\n1019 <-> 131, 1155\\n1020 <-> 114\\n1021 <-> 1288\\n1022 <-> 645\\n1023 <-> 959, 1375\\n1024 <-> 1024\\n1025 <-> 216\\n1026 <-> 411, 994\\n1027 <-> 515\\n1028 <-> 1417\\n1029 <-> 304, 724\\n1030 <-> 343, 351\\n1031 <-> 768, 1010\\n1032 <-> 1032\\n1033 <-> 521\\n1034 <-> 1018\\n1035 <-> 235, 1578\\n1036 <-> 179, 503, 511, 1036\\n1037 <-> 1037, 1044\\n1038 <-> 895, 1125\\n1039 <-> 547, 725, 1599\\n1040 <-> 395\\n1041 <-> 816\\n1042 <-> 559, 1042\\n1043 <-> 168, 1873\\n1044 <-> 643, 1037, 1312\\n1045 <-> 1232\\n1046 <-> 321\\n1047 <-> 254\\n1048 <-> 1747\\n1049 <-> 364\\n1050 <-> 1050, 1947, 1963\\n1051 <-> 1156\\n1052 <-> 4, 1201\\n1053 <-> 840\\n1054 <-> 1133, 1342, 1537, 1708, 1778\\n1055 <-> 71, 921, 1786\\n1056 <-> 1672\\n1057 <-> 778, 1423, 1787\\n1058 <-> 918, 997\\n1059 <-> 288, 1337, 1401\\n1060 <-> 987, 1781\\n1061 <-> 602, 1660\\n1062 <-> 316, 1863\\n1063 <-> 120, 819, 849\\n1064 <-> 1009\\n1065 <-> 1065\\n1066 <-> 842\\n1067 <-> 774, 910, 1089\\n1068 <-> 949, 1012\\n1069 <-> 1900\\n1070 <-> 556\\n1071 <-> 1884\\n1072 <-> 447, 1122\\n1073 <-> 163, 249, 1073, 1237\\n1074 <-> 262\\n1075 <-> 954, 1075, 1789\\n1076 <-> 1076, 1680\\n1077 <-> 55, 322\\n1078 <-> 160, 547\\n1079 <-> 827, 1079\\n1080 <-> 377, 425, 1739\\n1081 <-> 220, 230\\n1082 <-> 855, 1638\\n1083 <-> 44\\n1084 <-> 302, 736\\n1085 <-> 168, 1431\\n1086 <-> 1973\\n1087 <-> 639, 945\\n1088 <-> 672\\n1089 <-> 1067, 1190\\n1090 <-> 408, 1492\\n1091 <-> 1674\\n1092 <-> 793\\n1093 <-> 1802\\n1094 <-> 536\\n1095 <-> 1095, 1204\\n1096 <-> 279\\n1097 <-> 351, 381\\n1098 <-> 757, 1519\\n1099 <-> 1099, 1752\\n1100 <-> 177, 890\\n1101 <-> 1145\\n1102 <-> 1280\\n1103 <-> 190, 1200\\n1104 <-> 629\\n1105 <-> 100, 934\\n1106 <-> 1426\\n1107 <-> 78, 1497\\n1108 <-> 842\\n1109 <-> 507, 904, 1109\\n1110 <-> 750\\n1111 <-> 866\\n1112 <-> 851\\n1113 <-> 1113\\n1114 <-> 866, 1131, 1861\\n1115 <-> 1187, 1629\\n1116 <-> 342\\n1117 <-> 754\\n1118 <-> 1637\\n1119 <-> 739\\n1120 <-> 1837\\n1121 <-> 1133, 1758\\n1122 <-> 577, 1072, 1349\\n1123 <-> 1359\\n1124 <-> 1174\\n1125 <-> 1038, 1789\\n1126 <-> 1260\\n1127 <-> 1213\\n1128 <-> 161, 652\\n1129 <-> 441\\n1130 <-> 4\\n1131 <-> 1114\\n1132 <-> 1132, 1979\\n1133 <-> 1054, 1121, 1253\\n1134 <-> 817\\n1135 <-> 76, 1606\\n1136 <-> 765, 777, 1860\\n1137 <-> 434\\n1138 <-> 865, 1280, 1471, 1736\\n1139 <-> 74, 907\\n1140 <-> 108, 378\\n1141 <-> 178\\n1142 <-> 655, 717\\n1143 <-> 446\\n1144 <-> 221\\n1145 <-> 476, 705, 1101, 1271, 1956\\n1146 <-> 474, 1179, 1936\\n1147 <-> 920, 1147\\n1148 <-> 1148, 1795\\n1149 <-> 862, 1799\\n1150 <-> 559, 684, 1797\\n1151 <-> 951\\n1152 <-> 1229\\n1153 <-> 1515, 1530\\n1154 <-> 1154\\n1155 <-> 1019, 1300\\n1156 <-> 164, 1051, 1156\\n1157 <-> 18, 1157\\n1158 <-> 1208\\n1159 <-> 1651\\n1160 <-> 567, 1510, 1710\\n1161 <-> 1161, 1427, 1590\\n1162 <-> 206, 229, 1561\\n1163 <-> 1388\\n1164 <-> 741, 1494\\n1165 <-> 1217\\n1166 <-> 123, 276\\n1167 <-> 1262, 1547\\n1168 <-> 80, 531, 696\\n1169 <-> 362, 757, 1504\\n1170 <-> 1854\\n1171 <-> 1171, 1898\\n1172 <-> 832\\n1173 <-> 1173, 1315\\n1174 <-> 1124, 1174, 1831\\n1175 <-> 202, 452\\n1176 <-> 330, 335, 1761\\n1177 <-> 917\\n1178 <-> 155, 567\\n1179 <-> 224, 1146\\n1180 <-> 907, 1661\\n1181 <-> 1012\\n1182 <-> 176\\n1183 <-> 690, 722, 788\\n1184 <-> 645\\n1185 <-> 487\\n1186 <-> 1659\\n1187 <-> 348, 1115, 1670\\n1188 <-> 275, 803\\n1189 <-> 1689\\n1190 <-> 75, 1089\\n1191 <-> 285\\n1192 <-> 1744\\n1193 <-> 477, 515, 841\\n1194 <-> 1308\\n1195 <-> 761, 849\\n1196 <-> 130, 1993\\n1197 <-> 144\\n1198 <-> 613, 964, 1329\\n1199 <-> 1389\\n1200 <-> 1103\\n1201 <-> 923, 936, 1052\\n1202 <-> 875\\n1203 <-> 490, 902, 1692\\n1204 <-> 718, 1095, 1245\\n1205 <-> 263, 333, 877\\n1206 <-> 1311\\n1207 <-> 415, 1883\\n1208 <-> 445, 1158\\n1209 <-> 550, 1640\\n1210 <-> 12, 1210, 1428\\n1211 <-> 460, 1529\\n1212 <-> 52, 159, 1493, 1819\\n1213 <-> 1127, 1213\\n1214 <-> 1214, 1436\\n1215 <-> 266, 1758\\n1216 <-> 729, 739\\n1217 <-> 141, 749, 1165, 1315\\n1218 <-> 599, 1595\\n1219 <-> 740, 1549\\n1220 <-> 588, 1374\\n1221 <-> 405\\n1222 <-> 1966\\n1223 <-> 119\\n1224 <-> 1528\\n1225 <-> 1314\\n1226 <-> 86, 515\\n1227 <-> 1681\\n1228 <-> 1228\\n1229 <-> 0, 1152, 1374\\n1230 <-> 1453\\n1231 <-> 223, 488\\n1232 <-> 1045, 1261\\n1233 <-> 1759\\n1234 <-> 360\\n1235 <-> 283, 955, 1241, 1783\\n1236 <-> 1356\\n1237 <-> 600, 885, 931, 1073\\n1238 <-> 370, 1602\\n1239 <-> 546, 1373\\n1240 <-> 994\\n1241 <-> 1235, 1392\\n1242 <-> 7, 59, 821, 1945\\n1243 <-> 1296\\n1244 <-> 7, 1300, 1434\\n1245 <-> 1204, 1347\\n1246 <-> 374, 555, 1508\\n1247 <-> 109, 936\\n1248 <-> 785, 1715\\n1249 <-> 238\\n1250 <-> 1600, 1623\\n1251 <-> 1251\\n1252 <-> 858\\n1253 <-> 392, 1133\\n1254 <-> 35, 1394\\n1255 <-> 575\\n1256 <-> 214, 1607, 1685\\n1257 <-> 169\\n1258 <-> 81, 1264, 1320\\n1259 <-> 811, 1425\\n1260 <-> 830, 1126\\n1261 <-> 571, 1232\\n1262 <-> 1167, 1862\\n1263 <-> 540, 991\\n1264 <-> 1258, 1651\\n1265 <-> 139, 1569\\n1266 <-> 708\\n1267 <-> 1267\\n1268 <-> 721\\n1269 <-> 276, 676, 1759\\n1270 <-> 467, 1270, 1916\\n1271 <-> 225, 922, 1145, 1700\\n1272 <-> 99\\n1273 <-> 1302\\n1274 <-> 1966\\n1275 <-> 525\\n1276 <-> 791, 1834\\n1277 <-> 450, 1474, 1645\\n1278 <-> 185, 961\\n1279 <-> 458, 926\\n1280 <-> 209, 1102, 1138\\n1281 <-> 208, 462, 1943\\n1282 <-> 694, 1522\\n1283 <-> 111, 119, 1407\\n1284 <-> 182, 1996\\n1285 <-> 287\\n1286 <-> 647, 1286, 1715\\n1287 <-> 132\\n1288 <-> 222, 1021, 1398\\n1289 <-> 724\\n1290 <-> 208, 260, 317\\n1291 <-> 1498\\n1292 <-> 88\\n1293 <-> 387, 715, 1322, 1519, 1645\\n1294 <-> 445, 513, 1504\\n1295 <-> 766\\n1296 <-> 1243, 1379, 1964\\n1297 <-> 38, 1669\\n1298 <-> 1906\\n1299 <-> 18, 1804\\n1300 <-> 1155, 1244\\n1301 <-> 1371, 1453\\n1302 <-> 991, 1273\\n1303 <-> 375, 504, 1948\\n1304 <-> 1667, 1933\\n1305 <-> 102, 151, 665\\n1306 <-> 266\\n1307 <-> 179\\n1308 <-> 34, 1194\\n1309 <-> 563\\n1310 <-> 526, 789\\n1311 <-> 1206, 1311, 1769\\n1312 <-> 891, 1044\\n1313 <-> 169\\n1314 <-> 151, 1225\\n1315 <-> 42, 1173, 1217\\n1316 <-> 1316\\n1317 <-> 932, 1805\\n1318 <-> 187, 373, 982\\n1319 <-> 41, 220, 1948\\n1320 <-> 1258, 1859\\n1321 <-> 651\\n1322 <-> 1293\\n1323 <-> 957, 1472\\n1324 <-> 1324\\n1325 <-> 1325\\n1326 <-> 803, 1846\\n1327 <-> 753\\n1328 <-> 1879\\n1329 <-> 1198\\n1330 <-> 553, 1330\\n1331 <-> 392, 851\\n1332 <-> 396, 831\\n1333 <-> 210\\n1334 <-> 892\\n1335 <-> 838, 1552, 1568\\n1336 <-> 1336\\n1337 <-> 1059\\n1338 <-> 310, 544\\n1339 <-> 1897\\n1340 <-> 945\\n1341 <-> 489\\n1342 <-> 137, 1054\\n1343 <-> 1343\\n1344 <-> 1946\\n1345 <-> 1345\\n1346 <-> 652\\n1347 <-> 1245, 1914, 1930\\n1348 <-> 787, 1591\\n1349 <-> 669, 1122\\n1350 <-> 304, 1790\\n1351 <-> 587, 1997\\n1352 <-> 20, 614\\n1353 <-> 1738\\n1354 <-> 413, 1608\\n1355 <-> 522, 1816, 1917\\n1356 <-> 1236, 1450\\n1357 <-> 431, 1575\\n1358 <-> 500\\n1359 <-> 1123, 1599\\n1360 <-> 1370, 1385\\n1361 <-> 1, 881\\n1362 <-> 355, 1611, 1952\\n1363 <-> 69\\n1364 <-> 954\\n1365 <-> 1948\\n1366 <-> 30, 1470\\n1367 <-> 1527\\n1368 <-> 724\\n1369 <-> 277, 1482\\n1370 <-> 1360\\n1371 <-> 642, 1301, 1478, 1485\\n1372 <-> 1372, 1594\\n1373 <-> 1239\\n1374 <-> 79, 1220, 1229\\n1375 <-> 764, 771, 1023\\n1376 <-> 952\\n1377 <-> 938, 1520, 1730\\n1378 <-> 1378, 1411, 1823\\n1379 <-> 1296, 1832\\n1380 <-> 1380\\n1381 <-> 673\\n1382 <-> 1382\\n1383 <-> 195, 586\\n1384 <-> 542\\n1385 <-> 215, 1360\\n1386 <-> 1386\\n1387 <-> 1536\\n1388 <-> 311, 402, 1163\\n1389 <-> 251, 1199\\n1390 <-> 322, 975\\n1391 <-> 172, 407, 1453\\n1392 <-> 1241, 1587\\n1393 <-> 419, 823, 1636\\n1394 <-> 1254, 1588, 1699\\n1395 <-> 401, 1621\\n1396 <-> 1396, 1870\\n1397 <-> 1629\\n1398 <-> 840, 1288\\n1399 <-> 1399, 1932\\n1400 <-> 721\\n1401 <-> 1059\\n1402 <-> 1402\\n1403 <-> 33\\n1404 <-> 1449, 1632, 1832\\n1405 <-> 1634\\n1406 <-> 1726\\n1407 <-> 265, 1283, 1999\\n1408 <-> 39, 336, 426\\n1409 <-> 75, 147, 654\\n1410 <-> 691, 1780\\n1411 <-> 1378\\n1412 <-> 1447, 1759\\n1413 <-> 616, 691\\n1414 <-> 843\\n1415 <-> 1415\\n1416 <-> 197, 271\\n1417 <-> 132, 960, 1028\\n1418 <-> 1418, 1426\\n1419 <-> 918, 1560\\n1420 <-> 789\\n1421 <-> 629, 715\\n1422 <-> 391, 640\\n1423 <-> 781, 1057\\n1424 <-> 1614\\n1425 <-> 21, 896, 1259\\n1426 <-> 1106, 1418\\n1427 <-> 1161\\n1428 <-> 1210, 1677\\n1429 <-> 131\\n1430 <-> 1822\\n1431 <-> 907, 1085, 1846\\n1432 <-> 817, 847\\n1433 <-> 75\\n1434 <-> 1244\\n1435 <-> 484, 808\\n1436 <-> 1214\\n1437 <-> 418\\n1438 <-> 57\\n1439 <-> 1469, 1824\\n1440 <-> 237\\n1441 <-> 1722\\n1442 <-> 424, 1678\\n1443 <-> 144\\n1444 <-> 579, 643, 1869\\n1445 <-> 914\\n1446 <-> 1524, 1728\\n1447 <-> 1412, 1962\\n1448 <-> 1485\\n1449 <-> 1404\\n1450 <-> 1356, 1647\\n1451 <-> 460, 1907, 1967\\n1452 <-> 445, 446\\n1453 <-> 56, 133, 638, 1230, 1301, 1391\\n1454 <-> 1994\\n1455 <-> 788\\n1456 <-> 1914\\n1457 <-> 769\\n1458 <-> 1458\\n1459 <-> 700, 1796\\n1460 <-> 1799\\n1461 <-> 15, 436\\n1462 <-> 1678\\n1463 <-> 83, 1553, 1684\\n1464 <-> 35\\n1465 <-> 1471\\n1466 <-> 175, 430\\n1467 <-> 539, 702\\n1468 <-> 281, 911, 1475\\n1469 <-> 366, 426, 478, 1439, 1524\\n1470 <-> 833, 1366\\n1471 <-> 971, 1138, 1465\\n1472 <-> 560, 858, 1323, 1937\\n1473 <-> 506, 875\\n1474 <-> 1277, 1937\\n1475 <-> 701, 1468\\n1476 <-> 464, 522\\n1477 <-> 1785\\n1478 <-> 989, 1371\\n1479 <-> 409, 851\\n1480 <-> 1677\\n1481 <-> 463\\n1482 <-> 517, 1369, 1482\\n1483 <-> 102, 218\\n1484 <-> 532, 1531, 1735\\n1485 <-> 400, 1371, 1448\\n1486 <-> 453\\n1487 <-> 867, 870, 1577, 1584\\n1488 <-> 1488\\n1489 <-> 16, 327\\n1490 <-> 418\\n1491 <-> 7, 1589\\n1492 <-> 823, 1090\\n1493 <-> 1212, 1519, 1675\\n1494 <-> 775, 889, 1164\\n1495 <-> 882, 911\\n1496 <-> 386, 1496\\n1497 <-> 269, 455, 1107\\n1498 <-> 9, 1291, 1758\\n1499 <-> 1685, 1893\\n1500 <-> 1657\\n1501 <-> 244, 287\\n1502 <-> 1951\\n1503 <-> 112\\n1504 <-> 1169, 1294\\n1505 <-> 1987\\n1506 <-> 845, 1905\\n1507 <-> 1507\\n1508 <-> 1246\\n1509 <-> 41\\n1510 <-> 195, 789, 1160, 1980\\n1511 <-> 658, 1017\\n1512 <-> 1990\\n1513 <-> 968, 1513, 1612\\n1514 <-> 1514\\n1515 <-> 1153, 1632\\n1516 <-> 280\\n1517 <-> 759\\n1518 <-> 1837\\n1519 <-> 80, 82, 1098, 1293, 1493\\n1520 <-> 1377, 1978\\n1521 <-> 1521\\n1522 <-> 1282\\n1523 <-> 1749, 1876\\n1524 <-> 660, 1446, 1469, 1535, 1729\\n1525 <-> 283, 713\\n1526 <-> 22, 1767\\n1527 <-> 535, 1367, 1889\\n1528 <-> 996, 1224\\n1529 <-> 1211, 1736\\n1530 <-> 1153\\n1531 <-> 451, 670, 1484\\n1532 <-> 46\\n1533 <-> 62, 143, 530\\n1534 <-> 117, 1992\\n1535 <-> 1524\\n1536 <-> 342, 1387\\n1537 <-> 1054\\n1538 <-> 302, 1589\\n1539 <-> 576, 920\\n1540 <-> 668, 731\\n1541 <-> 1639\\n1542 <-> 1542\\n1543 <-> 1702\\n1544 <-> 1927\\n1545 <-> 995\\n1546 <-> 92, 1890\\n1547 <-> 40, 1167\\n1548 <-> 796\\n1549 <-> 110, 337, 1219\\n1550 <-> 46, 667\\n1551 <-> 497, 850\\n1552 <-> 526, 1335\\n1553 <-> 464, 635, 1463\\n1554 <-> 580, 1696\\n1555 <-> 1556, 1648, 1867\\n1556 <-> 180, 1555, 1676\\n1557 <-> 313, 1831\\n1558 <-> 249\\n1559 <-> 501\\n1560 <-> 1419\\n1561 <-> 1162\\n1562 <-> 271, 388\\n1563 <-> 597, 907\\n1564 <-> 239\\n1565 <-> 906, 1854\\n1566 <-> 465\\n1567 <-> 393, 619\\n1568 <-> 1335, 1745\\n1569 <-> 658, 1265, 1651\\n1570 <-> 475\\n1571 <-> 310, 323, 609\\n1572 <-> 540, 716\\n1573 <-> 738\\n1574 <-> 531\\n1575 <-> 597, 818, 1357\\n1576 <-> 937\\n1577 <-> 456, 1487, 1630\\n1578 <-> 1006, 1035\\n1579 <-> 1704\\n1580 <-> 827\\n1581 <-> 286, 703, 1888\\n1582 <-> 294\\n1583 <-> 1907\\n1584 <-> 1487\\n1585 <-> 1955\\n1586 <-> 1586, 1641\\n1587 <-> 1392\\n1588 <-> 522, 1394\\n1589 <-> 1491, 1538, 1589\\n1590 <-> 1161, 1642, 1946\\n1591 <-> 4, 617, 1348\\n1592 <-> 68\\n1593 <-> 356, 466\\n1594 <-> 826, 1014, 1372\\n1595 <-> 1218\\n1596 <-> 78\\n1597 <-> 640\\n1598 <-> 422\\n1599 <-> 1039, 1359\\n1600 <-> 1250\\n1601 <-> 113, 1631\\n1602 <-> 1238\\n1603 <-> 1603\\n1604 <-> 1604\\n1605 <-> 1980\\n1606 <-> 1135, 1828\\n1607 <-> 1256, 1607\\n1608 <-> 1354\\n1609 <-> 980, 1864\\n1610 <-> 1610\\n1611 <-> 583, 1362\\n1612 <-> 309, 367, 1513\\n1613 <-> 270, 1620\\n1614 <-> 1424, 1688\\n1615 <-> 1615\\n1616 <-> 1884\\n1617 <-> 806, 1763\\n1618 <-> 955, 994, 1897\\n1619 <-> 1622\\n1620 <-> 538, 584, 1613\\n1621 <-> 1395, 1621\\n1622 <-> 452, 1619\\n1623 <-> 188, 1250\\n1624 <-> 148\\n1625 <-> 519, 618, 1625, 1765\\n1626 <-> 213, 1001\\n1627 <-> 1929\\n1628 <-> 6, 305\\n1629 <-> 558, 1115, 1397\\n1630 <-> 1577\\n1631 <-> 779, 1601\\n1632 <-> 1404, 1515\\n1633 <-> 336\\n1634 <-> 762, 1405, 1734\\n1635 <-> 1635\\n1636 <-> 257, 649, 1393\\n1637 <-> 167, 329, 1118\\n1638 <-> 939, 1082\\n1639 <-> 1541, 1639\\n1640 <-> 1209\\n1641 <-> 1586\\n1642 <-> 567, 1590\\n1643 <-> 982\\n1644 <-> 408, 509\\n1645 <-> 1277, 1293\\n1646 <-> 1836, 1875\\n1647 <-> 1450, 1772\\n1648 <-> 1555, 1946\\n1649 <-> 1743\\n1650 <-> 627, 1720\\n1651 <-> 1159, 1264, 1569\\n1652 <-> 852, 1930\\n1653 <-> 1653\\n1654 <-> 677\\n1655 <-> 85, 733\\n1656 <-> 1875\\n1657 <-> 261, 1500, 1703\\n1658 <-> 693, 1679\\n1659 <-> 1186, 1659\\n1660 <-> 673, 1061\\n1661 <-> 662, 1180\\n1662 <-> 483\\n1663 <-> 1663, 1904\\n1664 <-> 196, 950, 1664\\n1665 <-> 144, 854, 941\\n1666 <-> 1666\\n1667 <-> 1304, 1890\\n1668 <-> 488\\n1669 <-> 1297\\n1670 <-> 78, 1187\\n1671 <-> 215, 981\\n1672 <-> 145, 358, 719, 1056\\n1673 <-> 1673\\n1674 <-> 25, 935, 1091\\n1675 <-> 1493\\n1676 <-> 190, 1556\\n1677 <-> 1428, 1480\\n1678 <-> 1442, 1462, 1987\\n1679 <-> 577, 1658\\n1680 <-> 16, 1076\\n1681 <-> 1001, 1227\\n1682 <-> 71\\n1683 <-> 90\\n1684 <-> 479, 1463, 1852\\n1685 <-> 1256, 1499\\n1686 <-> 94\\n1687 <-> 687, 978, 1787\\n1688 <-> 332, 1614, 1688\\n1689 <-> 758, 1189, 1779\\n1690 <-> 477\\n1691 <-> 1691, 1986\\n1692 <-> 166, 585, 813, 913, 1203, 1913\\n1693 <-> 671\\n1694 <-> 1711\\n1695 <-> 89, 1795\\n1696 <-> 1554\\n1697 <-> 147, 843, 1900\\n1698 <-> 212, 444, 1793\\n1699 <-> 676, 868, 1394, 1705\\n1700 <-> 87, 1271\\n1701 <-> 849\\n1702 <-> 222, 692, 1543\\n1703 <-> 839, 1657\\n1704 <-> 314, 498, 1579\\n1705 <-> 1699\\n1706 <-> 89, 1993\\n1707 <-> 1990, 1994\\n1708 <-> 1054, 1892\\n1709 <-> 861, 886\\n1710 <-> 1160\\n1711 <-> 1694, 1737\\n1712 <-> 1712\\n1713 <-> 714, 1935\\n1714 <-> 600\\n1715 <-> 217, 1248, 1286\\n1716 <-> 808\\n1717 <-> 278, 1914\\n1718 <-> 580\\n1719 <-> 669\\n1720 <-> 1650, 1762, 1856\\n1721 <-> 422, 1918\\n1722 <-> 1441, 1722\\n1723 <-> 893, 1915\\n1724 <-> 508, 750, 955\\n1725 <-> 1725\\n1726 <-> 1406, 1959\\n1727 <-> 1797\\n1728 <-> 14, 1446\\n1729 <-> 1524\\n1730 <-> 1377, 1737\\n1731 <-> 104, 749\\n1732 <-> 129, 1908\\n1733 <-> 174, 655, 938\\n1734 <-> 816, 1634, 1734\\n1735 <-> 538, 1484\\n1736 <-> 0, 1138, 1529\\n1737 <-> 1711, 1730\\n1738 <-> 26, 1353, 1757\\n1739 <-> 302, 1080\\n1740 <-> 118, 257\\n1741 <-> 152, 219, 876\\n1742 <-> 1841, 1945\\n1743 <-> 333, 1649\\n1744 <-> 659, 743, 856, 1192\\n1745 <-> 1568\\n1746 <-> 1746\\n1747 <-> 579, 1048\\n1748 <-> 283\\n1749 <-> 189, 350, 1523, 1848, 1894\\n1750 <-> 881\\n1751 <-> 344\\n1752 <-> 1099\\n1753 <-> 1753\\n1754 <-> 1011\\n1755 <-> 1755, 1939\\n1756 <-> 933\\n1757 <-> 1738\\n1758 <-> 1121, 1215, 1498\\n1759 <-> 1233, 1269, 1412\\n1760 <-> 198, 679, 840\\n1761 <-> 1176\\n1762 <-> 713, 1720\\n1763 <-> 1617\\n1764 <-> 613\\n1765 <-> 1625\\n1766 <-> 99\\n1767 <-> 623, 751, 1526\\n1768 <-> 82\\n1769 <-> 1311, 1921\\n1770 <-> 565, 1995\\n1771 <-> 77, 1771\\n1772 <-> 805, 1647, 1772\\n1773 <-> 1773, 1826\\n1774 <-> 303\\n1775 <-> 239, 259\\n1776 <-> 225\\n1777 <-> 393\\n1778 <-> 482, 699, 709, 1054\\n1779 <-> 264, 1689\\n1780 <-> 61, 194, 707, 1005, 1410, 1999\\n1781 <-> 165, 1060, 1978\\n1782 <-> 264\\n1783 <-> 897, 1235, 1845\\n1784 <-> 1784\\n1785 <-> 1477, 1915\\n1786 <-> 1055\\n1787 <-> 1057, 1687, 1899\\n1788 <-> 498, 937, 1859\\n1789 <-> 1075, 1125\\n1790 <-> 646, 1350\\n1791 <-> 617\\n1792 <-> 1855\\n1793 <-> 1698\\n1794 <-> 958\\n1795 <-> 1148, 1695\\n1796 <-> 779, 1459, 1857\\n1797 <-> 1150, 1727\\n1798 <-> 500\\n1799 <-> 795, 1149, 1460\\n1800 <-> 368, 1800\\n1801 <-> 220\\n1802 <-> 99, 1093\\n1803 <-> 1810\\n1804 <-> 1299\\n1805 <-> 292, 527, 1317\\n1806 <-> 443, 1865\\n1807 <-> 795, 1911\\n1808 <-> 940\\n1809 <-> 122, 595\\n1810 <-> 345, 1803\\n1811 <-> 1980\\n1812 <-> 892\\n1813 <-> 421, 606\\n1814 <-> 612, 780\\n1815 <-> 656, 884\\n1816 <-> 925, 1355\\n1817 <-> 635, 666\\n1818 <-> 29, 206\\n1819 <-> 1212\\n1820 <-> 1874\\n1821 <-> 227, 967\\n1822 <-> 736, 739, 1430\\n1823 <-> 1378\\n1824 <-> 68, 1439\\n1825 <-> 700\\n1826 <-> 557, 1773\\n1827 <-> 98, 1971\\n1828 <-> 1606, 1865\\n1829 <-> 449\\n1830 <-> 1830\\n1831 <-> 20, 878, 1174, 1557\\n1832 <-> 1379, 1404, 1832\\n1833 <-> 107\\n1834 <-> 423, 560, 1276\\n1835 <-> 867\\n1836 <-> 118, 1646\\n1837 <-> 47, 1120, 1518\\n1838 <-> 243, 990\\n1839 <-> 1839\\n1840 <-> 478\\n1841 <-> 1742\\n1842 <-> 565\\n1843 <-> 594, 747, 859\\n1844 <-> 461\\n1845 <-> 1783\\n1846 <-> 1326, 1431\\n1847 <-> 633, 1888\\n1848 <-> 1749\\n1849 <-> 24, 48, 292, 1851\\n1850 <-> 440, 782\\n1851 <-> 1849\\n1852 <-> 1684\\n1853 <-> 1853\\n1854 <-> 557, 1170, 1565\\n1855 <-> 70, 1792\\n1856 <-> 1720\\n1857 <-> 1796\\n1858 <-> 417\\n1859 <-> 1320, 1788\\n1860 <-> 36, 879, 1136\\n1861 <-> 830, 1114\\n1862 <-> 416, 1262\\n1863 <-> 28, 769, 787, 1062\\n1864 <-> 1609, 1920, 1953\\n1865 <-> 189, 1806, 1828, 1969\\n1866 <-> 451\\n1867 <-> 1555\\n1868 <-> 1868\\n1869 <-> 1444\\n1870 <-> 1396\\n1871 <-> 1939\\n1872 <-> 1914\\n1873 <-> 694, 1043\\n1874 <-> 241, 877, 1820\\n1875 <-> 1646, 1656\\n1876 <-> 1523\\n1877 <-> 1877\\n1878 <-> 159, 688, 907\\n1879 <-> 1328, 1879\\n1880 <-> 415\\n1881 <-> 65\\n1882 <-> 201\\n1883 <-> 812, 1207\\n1884 <-> 731, 861, 1071, 1616\\n1885 <-> 753, 1885\\n1886 <-> 75\\n1887 <-> 766, 807\\n1888 <-> 240, 1581, 1847\\n1889 <-> 800, 1527\\n1890 <-> 1546, 1667\\n1891 <-> 186, 548\\n1892 <-> 1708\\n1893 <-> 1499\\n1894 <-> 475, 843, 1749\\n1895 <-> 622, 1895, 1978\\n1896 <-> 334\\n1897 <-> 1339, 1618, 1949\\n1898 <-> 1171\\n1899 <-> 1787\\n1900 <-> 1069, 1697\\n1901 <-> 142\\n1902 <-> 291, 305\\n1903 <-> 745\\n1904 <-> 1663\\n1905 <-> 829, 1506\\n1906 <-> 316, 767, 1298, 1999\\n1907 <-> 183, 1451, 1583\\n1908 <-> 908, 1732\\n1909 <-> 62\\n1910 <-> 1999\\n1911 <-> 364, 1807\\n1912 <-> 372, 1912\\n1913 <-> 161, 601, 1692\\n1914 <-> 1347, 1456, 1717, 1872\\n1915 <-> 760, 1723, 1785\\n1916 <-> 1270\\n1917 <-> 1355\\n1918 <-> 1721\\n1919 <-> 590, 1010\\n1920 <-> 414, 1864\\n1921 <-> 1769\\n1922 <-> 232\\n1923 <-> 238, 271, 1923\\n1924 <-> 571, 917\\n1925 <-> 556, 1925\\n1926 <-> 129, 581\\n1927 <-> 360, 1544\\n1928 <-> 289\\n1929 <-> 1627, 1929\\n1930 <-> 181, 1347, 1652\\n1931 <-> 469, 1931\\n1932 <-> 1399\\n1933 <-> 919, 1304\\n1934 <-> 290\\n1935 <-> 803, 892, 903, 1713\\n1936 <-> 1146\\n1937 <-> 146, 1472, 1474\\n1938 <-> 149\\n1939 <-> 88, 1755, 1871\\n1940 <-> 980\\n1941 <-> 548, 828\\n1942 <-> 613, 988\\n1943 <-> 1281\\n1944 <-> 239, 326, 530\\n1945 <-> 49, 1242, 1742\\n1946 <-> 1344, 1590, 1648\\n1947 <-> 1050\\n1948 <-> 607, 1303, 1319, 1365\\n1949 <-> 1897\\n1950 <-> 1950\\n1951 <-> 553, 921, 1502\\n1952 <-> 163, 1362\\n1953 <-> 1864\\n1954 <-> 495, 620\\n1955 <-> 735, 1585\\n1956 <-> 11, 1145\\n1957 <-> 941\\n1958 <-> 398, 668\\n1959 <-> 340, 1726\\n1960 <-> 934\\n1961 <-> 641\\n1962 <-> 1447\\n1963 <-> 112, 1050\\n1964 <-> 1296\\n1965 <-> 61\\n1966 <-> 890, 1222, 1274\\n1967 <-> 545, 550, 729, 1451\\n1968 <-> 873\\n1969 <-> 704, 1865\\n1970 <-> 393\\n1971 <-> 1827\\n1972 <-> 326, 958\\n1973 <-> 1086, 1973\\n1974 <-> 319, 1974\\n1975 <-> 452\\n1976 <-> 155\\n1977 <-> 410\\n1978 <-> 1520, 1781, 1895\\n1979 <-> 1132\\n1980 <-> 1510, 1605, 1811\\n1981 <-> 184\\n1982 <-> 39\\n1983 <-> 1983\\n1984 <-> 379, 494\\n1985 <-> 95\\n1986 <-> 1691\\n1987 <-> 1505, 1678\\n1988 <-> 124, 516, 784\\n1989 <-> 322\\n1990 <-> 1512, 1707\\n1991 <-> 226\\n1992 <-> 894, 1534\\n1993 <-> 1196, 1706\\n1994 <-> 16, 1454, 1707\\n1995 <-> 682, 1770\\n1996 <-> 1284\\n1997 <-> 153, 308, 1351\\n1998 <-> 5, 235, 428, 524\\n1999 <-> 1407, 1780, 1906, 1910\";","export default \"You find yourself standing on a snow-covered coastline; apparently, you landed a little off course. The region is too hilly to see the North Pole from here, but you do spot some Elves that seem to be trying to unpack something that washed ashore. It's quite cold out, so you decide to risk creating a paradox by asking them for directions.\\n\\n\\\"Oh, are you the search party?\\\" Somehow, you can understand whatever Elves from the year 1018 speak; you assume it's [Ancient Nordic Elvish](https://adventofcode.com/2015/day/6). Could the device on your wrist also be a translator? \\\"Those clothes don't look very warm; take this.\\\" They hand you a heavy coat.\\n\\n\\\"We do need to find our way back to the North Pole, but we have higher priorities at the moment. You see, believe it or not, this box contains something that will solve all of Santa's transportation problems - at least, that's what it looks like from the pictures in the instructions.\\\" It doesn't seem like they can read whatever language it's in, but you can: \\\"Sleigh kit. Some assembly required.\\\"\\n\\n\\\"'Sleigh'? What a wonderful name! You must help us assemble this 'sleigh' at once!\\\" They start excitedly pulling more parts out of the box.\\n\\nThe instructions specify a series of **steps** and requirements about which steps must be finished before others can begin (your puzzle input). Each step is designated by a single letter. For example, suppose you have the following instructions:\\n\\n```\\nStep C must be finished before step A can begin.\\nStep C must be finished before step F can begin.\\nStep A must be finished before step B can begin.\\nStep A must be finished before step D can begin.\\nStep B must be finished before step E can begin.\\nStep D must be finished before step E can begin.\\nStep F must be finished before step E can begin.\\n```\\n\\nVisually, these requirements look like this:\\n\\n```\\n  -->A--->B--\\n /    \\\\      \\\\\\nC      -->D----->E\\n \\\\           /\\n  ---->F-----\\n```\\n\\nYour first goal is to determine the order in which the steps should be completed. If more than one step is ready, choose the step which is first alphabetically. In this example, the steps would be completed as follows:\\n\\n- Only **`C`** is available, and so it is done first.\\n- Next, both `A` and `F` are available. **`A`** is first alphabetically, so it is done next.\\n- Then, even though `F` was available earlier, steps `B` and `D` are now also available, and **`B`** is the first alphabetically of the three.\\n- After that, only `D` and `F` are available. `E` is not available because only some of its prerequisites are complete. Therefore, **`D`** is completed next.\\n- **`F`** is the only choice, so it is done next.\\n- Finally, **`E`** is completed.\\n\\nSo, in this example, the correct order is **`CABDFE`**.\\n\\n**In what order should the steps in your instructions be completed?**\\n\\n[comment]: <> (PART 2)\\n\\nAs you're about to begin construction, four of the Elves offer to help. \\\"The sun will set soon; it'll go faster if we work together.\\\" Now, you need to account for multiple people working on steps simultaneously. If multiple steps are available, workers should still begin them in alphabetical order.\\n\\nEach step takes 60 seconds plus an amount corresponding to its letter: A=1, B=2, C=3, and so on. So, step A takes `60+1=61` seconds, while step Z takes `60+26=86` seconds. No time is required between steps.\\n\\nTo simplify things for the example, however, suppose you only have help from one Elf (a total of two workers) and that each step takes 60 fewer seconds (so that step A takes 1 second and step Z takes 26 seconds). Then, using the same instructions as above, this is how each second would be spent:\\n\\n```\\nSecond   Worker 1   Worker 2   Done\\n   0        C          .        \\n   1        C          .        \\n   2        C          .        \\n   3        A          F       C\\n   4        B          F       CA\\n   5        B          F       CA\\n   6        D          F       CAB\\n   7        D          F       CAB\\n   8        D          F       CAB\\n   9        D          .       CABF\\n  10        E          .       CABFD\\n  11        E          .       CABFD\\n  12        E          .       CABFD\\n  13        E          .       CABFD\\n  14        E          .       CABFD\\n  15        .          .       CABFDE\\n```\\n\\nEach row represents one second of time. The Second column identifies how many seconds have passed as of the beginning of that second. Each worker column shows the step that worker is currently doing (or `.` if they are idle). The Done column shows completed steps.\\n\\nNote that the order of the steps has changed; this is because steps now take time to finish and multiple workers can begin multiple steps simultaneously.\\n\\nIn this example, it would take **`15`** seconds for two workers to complete these steps.\\n\\nWith **5** workers and the **60+ second** step durations described above, **how long will it take to complete all of the steps?**\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"mb-3\"},[_c('div',{staticClass:\"d-flex justify-content-between align-items-center\"},[_c('h1',[_vm._v(\"Day \"+_vm._s(_vm.day)),(_vm.solvedDays[_vm.year][_vm.day - 1])?[_vm._v(\" - \"+_vm._s(_vm.solvedDays[_vm.year][_vm.day - 1].title))]:_vm._e()],2),_c('b-button-group',[_c('b-button',{attrs:{\"disabled\":_vm.day <= 1,\"to\":{ name: (\"year-\" + _vm.year + \"-day-\" + (_vm.day - 1)) }}},[_c('BIconCaretLeftFill')],1),_c('b-button',{attrs:{\"disabled\":_vm.day >= _vm.solvedDays[_vm.year].length,\"to\":{ name: (\"year-\" + _vm.year + \"-day-\" + (_vm.day + 1)) }}},[_c('BIconCaretRightFill')],1)],1)],1),(_vm.markdown && _vm.markdown.partOne)?_c('div',{staticClass:\"mb-3\"},[_c('b-button',{directives:[{name:\"b-toggle\",rawName:\"v-b-toggle.part-one\",modifiers:{\"part-one\":true}}]},[_vm._v(\"Show Part 1\")]),_c('b-collapse',{attrs:{\"id\":\"part-one\"}},[_c('b-card',{staticClass:\"mt-3\"},[_c('vue-markdown',{attrs:{\"source\":_vm.markdown.partOne}})],1)],1)],1):_vm._e(),(_vm.markdown && _vm.markdown.partTwo)?_c('div',{staticClass:\"mb-3\"},[_c('b-button',{directives:[{name:\"b-toggle\",rawName:\"v-b-toggle.part-two\",modifiers:{\"part-two\":true}}]},[_vm._v(\"Show Part 2\")]),_c('b-collapse',{attrs:{\"id\":\"part-two\"}},[_c('b-card',{staticClass:\"mt-3\"},[_c('vue-markdown',{attrs:{\"source\":_vm.markdown.partTwo}})],1)],1)],1):_vm._e(),_c('h2',[_vm._v(\"Input\")]),_c('b-form',{on:{\"submit\":function($event){$event.preventDefault();return _vm.onSubmit.apply(null, arguments)}}},[_c('b-form-group',{attrs:{\"label\":\"Task input\",\"description\":\"The task input provided for this day.\",\"label-for\":\"task-input\"}},[_c('b-form-textarea',{attrs:{\"rows\":\"8\",\"id\":\"task-input\",\"wrap\":\"soft\",\"disabled\":!_vm.editingEnabled},model:{value:(_vm.input),callback:function ($$v) {_vm.input=$$v},expression:\"input\"}})],1),_c('b-button',{attrs:{\"type\":\"submit\"},on:{\"click\":function($event){$event.preventDefault();return _vm.onSubmit.apply(null, arguments)}}},[_vm._v(\"Run\")])],1),(_vm.solutions.partOne !== undefined && _vm.solutions.partOne !== null)?[_c('h2',{staticClass:\"mt-3\"},[_vm._v(\"Solution Part 1\")]),_vm._t(\"partOne\"),_c('b-form-input',{staticClass:\"mb-3\",attrs:{\"readonly\":\"\",\"value\":_vm.solutions.partOne},on:{\"focus\":function($event){return $event.target.select()}}})]:_vm._e(),(_vm.solutions.partTwo !== undefined && _vm.solutions.partTwo !== null)?[_c('h2',[_vm._v(\"Solution Part 2\")]),_vm._t(\"partTwo\"),_c('b-form-input',{staticClass:\"mb-3\",attrs:{\"readonly\":\"\",\"value\":_vm.solutions.partTwo},on:{\"focus\":function($event){return $event.target.select()}}})]:_vm._e()],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"mb-3\">\n    <div class=\"d-flex justify-content-between align-items-center\">\n      <h1>Day {{ day }}<template v-if=\"solvedDays[year][day - 1]\"> - {{ solvedDays[year][day - 1].title }}</template></h1>\n      <b-button-group>\n        <b-button :disabled=\"day <= 1\" :to=\"{ name: `year-${year}-day-${day - 1}` }\"><BIconCaretLeftFill /></b-button>\n        <b-button :disabled=\"day >= solvedDays[year].length\" :to=\"{ name: `year-${year}-day-${day + 1}` }\"><BIconCaretRightFill /></b-button>\n      </b-button-group>\n    </div>\n\n    <div v-if=\"markdown && markdown.partOne\" class=\"mb-3\">\n      <b-button v-b-toggle.part-one>Show Part 1</b-button>\n      <b-collapse id=\"part-one\">\n        <b-card class=\"mt-3\">\n          <vue-markdown :source=\"markdown.partOne\" />\n        </b-card>\n      </b-collapse>\n    </div>\n\n    <div v-if=\"markdown && markdown.partTwo\" class=\"mb-3\">\n      <b-button v-b-toggle.part-two>Show Part 2</b-button>\n      <b-collapse id=\"part-two\">\n        <b-card class=\"mt-3\">\n          <vue-markdown :source=\"markdown.partTwo\" />\n        </b-card>\n      </b-collapse>\n    </div>\n\n    <h2>Input</h2>\n    <b-form @submit.prevent=\"onSubmit\">\n      <b-form-group label=\"Task input\" description=\"The task input provided for this day.\" label-for=\"task-input\">\n        <b-form-textarea rows=\"8\" v-model=\"input\" id=\"task-input\" wrap=\"soft\" :disabled=\"!editingEnabled\" />\n      </b-form-group>\n      <b-button type=\"submit\" @click.prevent=\"onSubmit\">Run</b-button>\n    </b-form>\n\n    <template v-if=\"solutions.partOne !== undefined && solutions.partOne !== null\">\n      <h2 class=\"mt-3\">Solution Part 1</h2>\n      <slot name=\"partOne\" />\n      <b-form-input class=\"mb-3\" readonly :value=\"solutions.partOne\" @focus=\"$event.target.select()\" />\n    </template>\n\n    <template v-if=\"solutions.partTwo !== undefined && solutions.partTwo !== null\">\n      <h2>Solution Part 2</h2>\n      <slot name=\"partTwo\" />\n      <b-form-input class=\"mb-3\" readonly :value=\"solutions.partTwo\" @focus=\"$event.target.select()\" />\n    </template>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport { BIconCaretRightFill, BIconCaretLeftFill } from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BIconCaretRightFill,\n    BIconCaretLeftFill\n  },\n  props: {\n    day: {\n      type: Number,\n      default: 1\n    },\n    year: {\n      type: Number,\n      default: 2020\n    },\n    solutions: {\n      type: Object,\n      default: () => {\n        return {\n          partOne: null,\n          partTwo: null\n        }\n      }\n    }\n  },\n  data: function () {\n    return {\n      input: null\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'editingEnabled'\n    ]),\n    taskInput: function () {\n      try {\n        return require(`@/assets/input/${this.year}/Day-${this.day}.txt`).default\n      } catch (err) {\n        return null\n      }\n    },\n    markdown: function () {\n      let markdown\n\n      try {\n        markdown = require(`@/assets/markdown/${this.year}/Day-${this.day}.md`).default\n      } catch (err) {\n        // Ignore errors\n      }\n\n      if (markdown) {\n        const parts = markdown.split('[comment]: <> (PART 2)')\n\n        return {\n          partOne: parts[0],\n          partTwo: parts.length > 1 ? parts[1] : null\n        }\n      } else {\n        return {\n          partOne: null,\n          partTwo: null\n        }\n      }\n    },\n    splitData: function () {\n      if (this.input) {\n        return this.input.split(/\\r?\\n/)\n      } else {\n        return null\n      }\n    }\n  },\n  methods: {\n    onSubmit: function () {\n      this.$emit('input-changed', this.splitData)\n    }\n  },\n  mounted: function () {\n    if (this.taskInput) {\n      this.input = this.taskInput\n    }\n  }\n}\n</script>\n\n<style>\n#task-input {\n  font-family: monospace;\n  white-space: pre;\n  overflow: auto;\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Day.vue?vue&type=template&id=746bb184&\"\nimport script from \"./Day.vue?vue&type=script&lang=js&\"\nexport * from \"./Day.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Day.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default \"Following the twisty passageways deeper and deeper into the CPU, you finally reach the core of the computer. Here, in the expansive central chamber, you find a grand apparatus that fills the entire room, suspended nanometers above your head.\\n\\nYou had always imagined CPUs to be noisy, chaotic places, bustling with activity. Instead, the room is quiet, motionless, and dark.\\n\\nSuddenly, you and the CPU's **garbage collector** startle each other. \\\"It's not often we get many visitors here!\\\", he says. You inquire about the stopped machinery.\\n\\n\\\"It stopped milliseconds ago; not sure why. I'm a garbage collector, not a doctor.\\\" You ask what the machine is for.\\n\\n\\\"Programs these days, don't know their origins. That's the **Turing machine**! It's what makes the whole computer work.\\\" You try to explain that Turing machines are merely models of computation, but he cuts you off. \\\"No, see, that's just what they **want** you to think. Ultimately, inside every CPU, there's a Turing machine driving the whole thing! Too bad this one's broken. [We're doomed](https://www.youtube.com/watch?v=cTwZZz0HV8I)!\\\"\\n\\nYou ask how you can help. \\\"Well, unfortunately, the only way to get the computer running again would be to create a whole new Turing machine from scratch, but there's no **way** you can-\\\" He notices the look on your face, gives you a curious glance, shrugs, and goes back to sweeping the floor.\\n\\nYou find the **Turing machine blueprints** (your puzzle input) on a tablet in a nearby pile of debris. Looking back up at the broken Turing machine above, you can start to identify its parts:\\n\\n- A **tape** which contains `0` repeated infinitely to the left and right.\\n- A **cursor**, which can move left or right along the tape and read or write values at its current position.\\n- A set of **states**, each containing rules about what to do based on the current value under the cursor.\\n\\nEach slot on the tape has two possible values: `0` (the starting value for all slots) and `1`. Based on whether the cursor is pointing at a `0` or a `1`, the current state says **what value to write** at the current position of the cursor, whether to **move the cursor** left or right one slot, and **which state to use next**.\\n\\nFor example, suppose you found the following blueprint:\\n\\n```\\nBegin in state A.\\nPerform a diagnostic checksum after 6 steps.\\n\\nIn state A:\\n  If the current value is 0:\\n    - Write the value 1.\\n    - Move one slot to the right.\\n    - Continue with state B.\\n  If the current value is 1:\\n    - Write the value 0.\\n    - Move one slot to the left.\\n    - Continue with state B.\\n\\nIn state B:\\n  If the current value is 0:\\n    - Write the value 1.\\n    - Move one slot to the left.\\n    - Continue with state A.\\n  If the current value is 1:\\n    - Write the value 1.\\n    - Move one slot to the right.\\n    - Continue with state A.\\n```\\n\\nRunning it until the number of steps required to take the listed **diagnostic checksum** would result in the following tape configurations (with the **cursor** marked in square brackets):\\n\\n```\\n... 0  0  0 [0] 0  0 ... (before any steps; about to run state A)\\n... 0  0  0  1 [0] 0 ... (after 1 step;     about to run state B)\\n... 0  0  0 [1] 1  0 ... (after 2 steps;    about to run state A)\\n... 0  0 [0] 0  1  0 ... (after 3 steps;    about to run state B)\\n... 0 [0] 1  0  1  0 ... (after 4 steps;    about to run state A)\\n... 0  1 [1] 0  1  0 ... (after 5 steps;    about to run state B)\\n... 0  1  1 [0] 1  0 ... (after 6 steps;    about to run state A)\\n```\\n\\nThe CPU can confirm that the Turing machine is working by taking a **diagnostic checksum** after a specific number of steps (given in the blueprint). Once the specified number of steps have been executed, the Turing machine should pause; once it does, count the number of times `1` appears on the tape. In the above example, the **diagnostic checksum** is **`3`**.\\n\\nRecreate the Turing machine and save the computer! **What is the diagnostic checksum** it produces once it's working again?\";","export default \"An urgent interrupt arrives from the CPU: it's trapped in a maze of jump instructions, and it would like assistance from any programs with spare cycles to help find the exit.\\n\\nThe message includes a list of the offsets for each jump. Jumps are relative: `-1` moves to the previous instruction, and `2` skips the next one. Start at the first instruction in the list. The goal is to follow the jumps until one leads **outside** the list.\\n\\nIn addition, these instructions are a little strange; after each jump, the offset of that instruction increases by `1`. So, if you come across an offset of `3`, you would move three instructions forward, but change it to a `4` for the next time it is encountered.\\n\\nFor example, consider the following list of jump offsets:\\n\\n```\\n0\\n3\\n0\\n1\\n-3\\n```\\n\\nPositive jumps (\\\"forward\\\") move downward; negative jumps move upward. For legibility in this example, these offset values will be written all on one line, with the current instruction marked in parentheses. The following steps would be taken before an exit is found:\\n\\n- `(0) 3  0  1  -3 ` - **before** we have taken any steps.\\n- `(1) 3  0  1  -3 ` - jump with offset `0` (that is, don't jump at all). Fortunately, the instruction is then incremented to `1`.\\n- ` 2 (3) 0  1  -3 ` - step forward because of the instruction we just modified. The first instruction is incremented again, now to `2`.\\n- ` 2  4  0  1 (-3)` - jump all the way to the end; leave a `4` behind.\\n- ` 2 (4) 0  1  -2 ` - go back to where we just were; increment `-3` to `-2`.\\n- ` 2  5  0  1  -2 ` - jump `4` steps forward, escaping the maze.\\n\\nIn this example, the exit is reached in `5` steps.\\n\\n**How many steps** does it take to reach the exit?\\n\\n[comment]: <> (PART 2)\\n\\nNow, the jumps are even stranger: after each jump, if the offset was **three or more**, instead **decrease** it by `1`. Otherwise, increase it by `1` as before.\\n\\nUsing this rule with the above example, the process now takes `10` steps, and the offset values after finding the exit are left as `2 3 2 3 -1`.\\n\\n**How many steps** does it now take to reach the exit?\";","export default \"Somehow, a network packet got lost and ended up here. It's trying to follow a routing diagram (your puzzle input), but it's confused about where to go.\\n\\nIts starting point is just off the top of the diagram. Lines (drawn with `|`, `-`, and `+`) show the path it needs to take, starting by going down onto the only line connected to the top of the diagram. It needs to follow this path until it reaches the end (located somewhere within the diagram) and stop there.\\n\\nSometimes, the lines cross over each other; in these cases, it needs to continue going the same direction, and only turn left or right when there's no other option. In addition, someone has left **letters** on the line; these also don't change its direction, but it can use them to keep track of where it's been. For example:\\n\\n```\\n     |          \\n     |  +--+    \\n     A  |  C    \\n F---|----E|--+ \\n     |  |  |  D \\n     +B-+  +--+ \\n```\\n\\nGiven this diagram, the packet needs to take the following path:\\n\\n- Starting at the only line touching the top of the diagram, it must go down, pass through `A`, and continue onward to the first `+`.\\n- Travel right, up, and right, passing through `B` in the process.\\n- Continue down (collecting `C`), right, and up (collecting `D`).\\n- Finally, go all the way left through `E` and stopping at `F`.\\n\\nFollowing the path to the end, the letters it sees on its path are `ABCDEF`.\\n\\nThe little packet looks up at you, hoping you can help it find the way. **What letters will it see** (in the order it would see them) if it follows the path? (The routing diagram is very wide; make sure you view it without line wrapping.)\\n\\n[comment]: <> (PART 2)\\n\\nThe packet is curious how many steps it needs to go.\\n\\nFor example, using the same routing diagram from the example above...\\n\\n```\\n     |          \\n     |  +--+    \\n     A  |  C    \\n F---|--|-E---+ \\n     |  |  |  D \\n     +B-+  +--+ \\n```\\n\\n...the packet would go:\\n\\n- `6` steps down (including the first line at the top of the diagram).\\n- `3` steps right.\\n- `4` steps up.\\n- `3` steps right.\\n- `4` steps down.\\n- `3` steps right.\\n- `2` steps up.\\n- `13` steps left (including the `F` it stops on).\\n\\nThis would result in a total of `38` steps.\\n\\n**How many steps** does the packet need to go?\";","export default \"You arrive at the airport only to realize that you grabbed your North Pole Credentials instead of your passport. While these documents are extremely similar, North Pole Credentials aren't issued by a country and therefore aren't actually valid documentation for travel in most of the world.\\n\\nIt seems like you're not the only one having problems, though; a very long line has formed for the automatic passport scanners, and the delay could upset your travel itinerary.\\n\\nDue to some questionable network security, you realize you might be able to solve both of these problems at the same time.\\n\\nThe automatic passport scanners are slow because they're having trouble **detecting which passports have all required fields**. The expected fields are as follows:\\n\\n- `byr` (Birth Year)\\n- `iyr` (Issue Year)\\n- `eyr` (Expiration Year)\\n- `hgt` (Height)\\n- `hcl` (Hair Color)\\n- `ecl` (Eye Color)\\n- `pid` (Passport ID)\\n- `cid` (Country ID)\\n\\nPassport data is validated in batch files (your puzzle input). Each passport is represented as a sequence of `key:value` pairs separated by spaces or newlines. Passports are separated by blank lines.\\n\\nHere is an example batch file containing four passports:\\n\\n```\\necl:gry pid:860033327 eyr:2020 hcl:#fffffd\\nbyr:1937 iyr:2017 cid:147 hgt:183cm\\n\\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\\nhcl:#cfa07d byr:1929\\n\\nhcl:#ae17e1 iyr:2013\\neyr:2024\\necl:brn pid:760753108 byr:1931\\nhgt:179cm\\n\\nhcl:#cfa07d eyr:2025 pid:166559648\\niyr:2011 ecl:brn hgt:59in\\n```\\n\\nThe first passport is **valid** - all eight fields are present. The second passport is **invalid** - it is missing hgt (the Height field).\\n\\nThe third passport is interesting; the **only missing field** is `cid`, so it looks like data from North Pole Credentials, not a passport at all! Surely, nobody would mind if you made the system temporarily ignore missing `cid` fields. Treat this \\\"passport\\\" as **valid**.\\n\\nThe fourth passport is missing two fields, `cid` and `byr`. Missing `cid` is fine, but missing any other field is not, so this passport is **invalid**.\\n\\nAccording to the above rules, your improved system would report `2` valid passports.\\n\\nCount the number of **valid** passports - those that have all required fields. Treat cid as optional. **In your batch file, how many passports are valid**?\\n\\n[comment]: <> (PART 2)\\n\\nThe line is moving more quickly now, but you overhear airport security talking about how passports with invalid data are getting through. Better add some data validation, quick!\\n\\nYou can continue to ignore the cid field, but each other field has strict rules about what values are valid for automatic validation:\\n\\n- `byr` (Birth Year) - four digits; at least `1920` and at most `2002`.\\n- `iyr` (Issue Year) - four digits; at least `2010` and at most `2020`.\\n- `eyr` (Expiration Year) - four digits; at least `2020` and at most `2030`.\\n- `hgt` (Height) - a number followed by either `cm` or `in`:\\n  - If `cm`, the number must be at least `150` and at most `193`.\\n  - If `in`, the number must be at least `59` and at most `76`.\\n- `hcl` (Hair Color) - a # followed by exactly six characters `0-9` or `a-f`.\\n- `ecl` (Eye Color) - exactly one of: `amb` `blu` `brn` `gry` `grn` `hzl` `oth`.\\n- `pid` (Passport ID) - a nine-digit number, including leading zeroes.\\n- `cid` (Country ID) - ignored, missing or not.\\n\\nYour job is to count the passports where all required fields are both **present** and **valid** according to the above rules. Here are some example values:\\n\\n```\\nbyr valid:   2002\\nbyr invalid: 2003\\n\\nhgt valid:   60in\\nhgt valid:   190cm\\nhgt invalid: 190in\\nhgt invalid: 190\\n\\nhcl valid:   #123abc\\nhcl invalid: #123abz\\nhcl invalid: 123abc\\n\\necl valid:   brn\\necl invalid: wat\\n\\npid valid:   000000001\\npid invalid: 0123456789\\n```\\n\\nHere are some invalid passports:\\n\\n```\\neyr:1972 cid:100\\nhcl:#18171d ecl:amb hgt:170 pid:186cm iyr:2018 byr:1926\\n\\niyr:2019\\nhcl:#602927 eyr:1967 hgt:170cm\\necl:grn pid:012533040 byr:1946\\n\\nhcl:dab227 iyr:2012\\necl:brn hgt:182cm pid:021572410 eyr:2020 byr:1992 cid:277\\n\\nhgt:59cm ecl:zzz\\neyr:2038 hcl:74454a iyr:2023\\npid:3556412378 byr:2007\\nHere are some valid passports:\\n\\npid:087499704 hgt:74in ecl:grn iyr:2012 eyr:2030 byr:1980\\nhcl:#623a2f\\n\\neyr:2029 ecl:blu cid:129 byr:1989\\niyr:2014 pid:896056539 hcl:#a97842 hgt:165cm\\n\\nhcl:#888785\\nhgt:164cm byr:2001 iyr:2015 cid:88\\npid:545766238 ecl:hzl\\neyr:2022\\n\\niyr:2010 hgt:158cm hcl:#b6652a ecl:blu byr:1944 eyr:2021 pid:093154719\\n```\\n\\nCount the number of **valid** passports - those that have all required fields and valid values. Continue to treat cid as optional. **In your batch file, how many passports are valid?**\";","export default \"{{{{{{<o,!!!!!!!!iuo!!!>}{{{o{{a<u}>},{<!>,<,\\\">}},{},{{{<},e<i!!!>!!!{'u,!>!!!>}!!!>a>},<u>},{{{<>},{<!!\\\"<e!>,<<!>,<!!!!uu!>,<ee,,!,!}!>},<!>>}},<!!,!>},<'<,!!e!{!>},<'a!!i<!!!>a>},{<'!>ao!i{a!!'!!!!'!!!>},<e!>,<>,<o!!{>}}},{{<{u!>,<!!!<<{!!!>!!a>,{<!!<!!!>a>}},{<>}},{{<<!>,<,!e!>},<!>},<i!<!!!!!>>},{},{<\\\"{ou!!!>u!!u!>\\\"e{!!!!!!{!!}!!}\\\"}!!e>,{<!>},<u!i!!!>'!!'!!oi{!!!>!!!>o!>},<'\\\"<i>}}},{{{{{{<e!>},<<o!u>}},{}}},{{<!!u{i!>,<!o!>},<eo!u!!!>,a!!!!!>u>,<!>,<o\\\"!>},<{!!!>},<ua'{u{a>}}}}},{{{},{<!>,<o!!>},{{<'i!>o!uu>},{<!!ia!>,<>}}},{{{{},{{},{<\\\"!!o{!e!>},<!!!>!>},<ou>}},{<>,<e!!!>,o!>,<!>,<!!<!>,'\\\"'!>},<>}}},{{{{<!!!!i!!\\\"ei!>},<,,{{{oeu\\\">}},{{<'}}!i,>},<o,ou'!ai!>,<a\\\"\\\"u>},{{{<!>},<!!!>!>,<>,<,\\\"o!!'!!!>!>},<e!\\\"<!'\\\">},<!>},<!!!>!>''i!!{i!!!>i!!!>,<!>},u'o!!'>}}},{{}}},{{{},<!!!!!a{\\\"<''!!!>\\\">}},{{{},{<!!{,!>,<!>,<!<!}o{ee{!!!>>}},{{{{<!',i!!!>},<>}},{{{<!>},<\\\"!>'!!!!!!!>i>},<{!><!!!>!>!i!!!>!!,'>},<!!<>}},{<!!!>\\\"!!u!>,<{'i!eu>}}}},{{{{{<!',>}}},{<<!>},<a>,{<,o}uu!>!!!>eiuuoi,{!>{>,<\\\"{{<,i<!!!>''!>,<ai<>}}},{{<!!{}o!!,!!a}<!!!!<a!>},<'>,{<e{u{u''>,{}}},{{{<!!}e!!!><!>},<u!>},<!>!>u!>,<!!!<e>}},{<,{a!!!!}!!{!{ei!,!!<!>},<,o!!o!!i!!>,{{<!>,i}{'!>,<!><a'{i!>,<<>},{}}},{}}},{{{},{{<u>},<'i'!>},<o}!!!>eo}!>,<ui!>,<>}}},{{<!!ai!!''\\\"ea\\\"o!>},<!>,<}o}!!<{!!ie>,{<'e{u!u>,<'!\\\"u!!<!>,<!!{o!!!>o}}>}},{<>}}},{{{}},{{{<o!>a!!ou!!,!>,e'e!>},<{!\\\"}!!!>>}},<!!!!i!!!>},<!!!>,,!>!>},<>},{<i>,{}}}},{{{{},<e!!i{oau!>,<,,i!!!!!>},<>},{<ieeeu<>,<!><\\\"ooa'>},{}}},{{{<ii>},{{<!!>,{<ao,\\\"{!!!>,<{!!!>},<!!o,!>,<e{>}},{<!>,<{a!>a!!'>}}},{{<\\\"!>},<,,a<e'!>,<,ii>}}}},{{{{}},{{},{{<\\\"e!>,<ao!!!!!!}i!<aau!!{>,{<!>},<}>,{<e!!\\\"<u>}}},{{<>}}},{{{<,i!>o!!!>i>}},{{},{<o!>},<u'}i\\\"}o'!>,<>}},{{{<!>}{e}o!>,<e}>,{<{!!,a!!,uiaui!'u<>}},{<!>},<<}!!'}}a!>},<!>},<!>,<}e!!!!!>u'i>,{}}}}}},{{{{{}},{{},{{<!{!>!!<'<,'}!>},<<u>},<a!>!u!!\\\"!o{!!auae<!!!>,<,!!!>!>,<>}}},{{{{{{<\\\"\\\",i!u{oa!>},<,}aoou!{<>},<{a!!!>,<u!!a!!!>!>i!>,<!!!\\\"!>>}}},{<!>oi!>!>},<o!>,<o!>,<a}>}}},{{{{<o>}}},{{{<},{a!!!>o!>},<\\\"<!!!!!>{!!!>},<!>},<e!!{>}},{<a!!!>}!!!>!>!!!>}'!!!>eu!>},<!!a>}}}},{{{},{<!>,<{!!ii,!!!>'!<\\\"!>},<!!!>!!a>}},{{<!>,<!!!>!!!>u>},{<i>}},{{{{{{<!!e!>a!!ai!>},<a<!u>},<<!,!!,!!iou!!!>},<!}>}},{{<}a!!!>!>!!!!!!i\\\"'!!io\\\"<e!>,<!>,<!>>}},{<{\\\"i>}}}}},{{<o,i\\\"!'\\\"<!!!!}iu!>,<'\\\"!!!>},<!!!>!{u>,{<!!<e!>i!>,<,>}},{{}},{{}}},{{{},{<!!!!o!>},<!!!>i{!!!>a}{!!{{}i}u!!!>}i>}}}}},{{{{<!>!>,<{e'!!!\\\"!!!>'!!!>!!i>},{}},{{{}},{{{<u<!!<!>},<}ou,',!!!>>,<<!>},<!!!!!>},<!!}>},<>},{}}}},{{{}},{<,!!ue>,<!>},<}>},{{<a!!\\\">,{{{<e!!!!!!!!!!!>!>\\\"o}{!o}!!\\\"'!!!>!>,<<<>}},<o'!!!>}u{!!e!>},<>}},<>}},{{{{},{<>,<!{!>},<!!u!!!>}!>ei,a\\\"{e!!\\\"!,<}>}}},{{<!>},<{!>},<!!!>>}}},{{{<{<}}{,>,<!<'<!!!>,<iu!!o!>,<'!i{>},{<,}!\\\"\\\"!!!>!<!!o!e{}'!!!>,<!!o>},{{{{{<!!!>!,o},!!}>},<}!a}!>!!!'u!!!!!>!>},<!!!!!<!>},<!>,<!!!>,<}!\\\"!!!!a!!>},{<''!>!!o!>i!>},<>}},{<i!>,<e'}{e!!!>!!!>,\\\"{}}!i!!\\\"!'!a!>,<>,<i!!!{'!!o}e<,!>},<\\\"{!!!,,i!<o!!!>>}},{},{<e>,<}o}>}}}}},{{{{{}},{{<'!!!!e!>},<{>},{<o}!>},<\\\"!o!{\\\">}},{{{},<{!!>},{},{{<a<!!!>!!!<\\\"!!i}'!!!>\\\"!!!u<\\\"!>,<\\\"!!!>!!{i<>,{<\\\"{!!!!!>a!!!>i\\\"i>}}}}},{{<!eoi!>,<i}!!!!!>!!!>i!!!>!>,<>,{<u!!!!!>,>}},{<u!>},<>},{{<!!i,!>i,u!!a!o,}!>,<o!>,<u}>}}},{{{{<!{{!!e>}},<}!>!>,<u!!'u!!!>!!\\\"\\\"i!!!><e,!!!>{<>},{<a\\\"i!!<\\\"ai!i!e!>},<}}\\\"<>,<u{!!!>>}},{{{<{}o'a'!>!!<!>,<,}>,{{<u!>,!!!!!>i{\\\"!>}!>u!>>},<,<>}},<>},{<\\\"!>>,{<!!!>!!!>!!}!>,<!!!!i!>!!!>>}},{<\\\"<a}u!>},<!!!>i}<!>},<>,{}}}},{{{{<<!!!>'uo,!>!!'}e!}u!>e,u{\\\">},{}},{<\\\"!!!>},<!!!!e<e!u>},{<!!!>>,{<!!\\\"i!>},<!!u!!!!!!}!>,<'!>},<!>!{<i{!!!>},<!!!>o>}}},{{{<!>,<eua,}!!!>!>,\\\"a\\\"!>>},{{<>}},{{<!a!!!>!>u!!o!>a,,!>,<!!!!!o<eia!!!!{!>},<>,{}}}},{<}!!\\\"}!>},<!{!!!!'!>},<!!'!!>,{}},{{{{<!!!>!!,!!,!!!>!>},<\\\"<!>},<!!!>!!!!!!>,{{}}}}}}},{{<\\\"!o!!!><!u''!!!!e!>},<<!>,<>,<!!!>!!!>},<e!!!>!}a!{e!iu!>,<!!\\\"\\\">},{<!!'!>},<,!>!!!>!!!>!!!>},<''uo<>},{<>}}},{{{}},{{},{{{{{<uoa!>,<<'!>>}},{{<!!!>},<!e<!!!>{!'}!>ae,>},<uu<!>>}},{<!>!>},<>,<!!!>\\\"o<i>}},{<a!>}i!>,<{!<\\\"!!'}e!e}!a,!>>,{<i>}},{<>,<i,!>,<oe!!!!!!!>\\\"i!!>}},{<!>},<ao>}}},{{},{{{{<u!>,<!>!!}}},>}},{{<i,!!!><i{!>{e!!!io{!!,a!!'!!>},{}},{}},{{{<!!<!>},<a<a>,{}},{{},<}}!>,<,!'>},{{<<!>,<!!!'!e<!!!>\\\"!!!>\\\"!>,<!!{!>},<!'!!!>!>,<!e!!{i>}}},{{<\\\"!!!>!>},<{!!!>!!<>}}},{{},{{}},{{<!!!!!!a!!!>}>,{<!!o'!>},<o!!!>!>,<'oe'>}},{<'!!!>,<!!}>,<!>,<!!'!>},<!u!!{!!a!!o!!!>,<{,!!!>!!!>>},{{<<'!,\\\"!i!u!>,<\\\"!>},<}!>a!!,u!!!!!>\\\"'u>},{<<!a!u!!!!u!>!>,<u'i!!!>!{!!!>!!u}!>},<u>}}}}},{{{<!!'!!!>!>,<!>,<!>\\\"'!!!>!\\\"}a!>},<!o!u!!!!!>o>,{<iea'}i!!!!\\\"!!!>!!!!u!\\\"e\\\">}}},{{{<i!ui!!!>{!!!><!!!>oe!>,<>},<!!i!!!>!'u{<!>,<ioau>},{<!!}!>a{!e!!!!!!!!o\\\"!!!>>,{{{<,o'!>!!{\\\"o!!e!,oi!'!!!>},<,e>}},{<\\\"!!!>\\\"<i,!!{!>,<!!<{>}}}},{{<!!!>}}!>},<o!,,!!!>,<>,<>},{{<!>},<!!!!{o!!<{o!{>,{<'e}\\\"uo!e>}},{{<!!!!o}ae!!!>,<{e<a!>},<{!oa>}},{}},{{{{},{<<!!!>}!!a!>{!>},<!>},<,!!<,!!<i!!!!e'!!<!>},<>}}}}}}}}},{{{{{{{<!e!i{!>,<i!,ai!!!!!>'>,{<!!e<e<!u!>,<!a,<u!,{<e>}},{}},{{<!!e!,!i!>},<!!!>!!!>,<o{{{!>,<}a{'o!!!>,<>,{{},<!!!>a>}},{{{{{}}}},{<!!!>}'!!!>},<{a}!!aa!!u{!!\\\"!!!iu>,{{<a!>!!!!!!!>!!!><!!e!>!>,<ea!>,<!>!>\\\"\\\"!!!>ae>},<,<!>},<!!u!!!>,aa>}},{<o\\\"'o!!u!!!!!>!>},<>,<!a!!!!!!\\\"!!!!!>,<\\\"'\\\"e{!!!>!!!>!>,<>}}},{{{{<\\\"!>},<!!a!,e!!e!'{\\\"!>},<>}},{{{<!!ou>}},{{{<!>},<!!<}{!\\\"!!!>,<u!,ao<{'!!>},{<},>}},{<u!!,!{!>},<i}o!!!>},<!>,<u!i<\\\"'!>,<{\\\",>}},{{}}}},{{},{<!!!>}\\\"!!!>!!!!!>!>'''<,!!!!!>!!!>!>,<a>}},{{<u!>!>u!!!\\\"!>!!\\\"!>,<!!ei{!!{uo>,{<e!>,<!!!>!!!>!>},<!!!!!!!!!>!!!!<!!!>o>}}}},{{{<!>},<e!!!>!{ei!>},<{{i\\\"u!!u>},<<>}}},{{{{<!>i!>},<!!!>,!!!!!!<>},{{{<!!!>!>,<!!},!!!,<e!>},<i!!!!!>!!'!>},<!>},<{,>}},{<aea!!!>i}>,<!>},<!!!>},<<,e\\\"iu\\\"{{!!a{!!!>o,!>,<o!!>}}}},{<\\\"\\\",!>},<!{!>a\\\"<\\\"{!>!!e!!!!!>i>},{<{<e!}!>,<,u}!>,!>!!iua!>,<!!,{e>}},{{<!!!>},<e!><',!!iu!!!>!>!!!>,<'!>,<>,<!!u<>},{{<{!!!>!><!}{>,<\\\"!>},<>},{<!!i!>i!>},<a}!}iei!>},<u}i\\\"{!>,<>},{{{<ue!!!a!>,<<{!!{{!!!>!!!>!!!!!>},<!>,<>}},{<o!>,<{o!>},<!!,'!>},<{!!!!,>,{}},{{<!>>},{<!>},<>,<}e,!!!>\\\"!ee!!!>},<\\\",a!>},<!>!'{e!!o>},{<eu,!!!>!!!>!>,<!!!>>}}}},{{<ei'!>>},<!><!>},<!>!!!>{o!!!!!>},<!>},<!!<<{!!e!uii>}},{{{},{<<!>!!!!!>'ai!>a{!!!>>}},{{<!!e<\\\">},{<\\\"e>}},{{{{}}},<u!'!!!o}i!>}\\\"<!>,<!>},<i,>}}}},{{{{<a}!>,<,!a{>},{<!',!>!>},<!!'{!>ae!!,\\\">}},{<o!>!'!!!>a,,eo>,<!>},<!!o>}},{},{{{{},{{<,!!!>!><>}}},{<<{!!!>{{'e{!!o\\\"{oe!>,<{,!e>,{}},{}},{{{}}}},{{{{<!!!!{e!!'!,>},<,!>},<'uo>},<'!!oouo!>!!!>!\\\"a{!u<!>,<>},{{<!u!!!><{{,e'}!!u!>},<i!!io>},<\\\">},{{},{{{<}ai!!o\\\"u!!!>a!>},<\\\"!!!>!>},<{!!!>>},<!>},<!'!>!>,<!!!><!>,<',{!<>}}}}},{{{{},<\\\"}\\\"{!>},<}<!>e!>},<!!'>},{{}},{<!!!!!>eu!!\\\"!<o!>o{}<,>}},{{<a{!!!>!\\\"u\\\"i!!!>,<!>,<e{!<<a}!!!>'>,{{{<'oei!!!>},<!!!>},<!!!>,<!!!>>}}}},{{{{<!>'u!'u},!>,<o!>'!!!>{i}u!>>}},{<\\\"o}>}},{{<!!'!>,<e!!!>!!'}!!!>!>,<!!!>eu>},<oa>}}},{{},{<!>,<>},{}},{{},{{{},{<'!>,<!!!!{!>a>}},{{<ea<!<''!>},<ie'!>,<{aa},!!o>},<>}},{<!>,<!>,<!>!o!>!!!>u!>u!!,!!o>}}},{{{{<}'<!>,<i!!!>ei!a\\\"!!!><{}!>,<!<!!e<}>,{<>}},{}},{{{}},{{<<>,{<!>,<>}}},{<\\\"!!!>\\\"ea}!>!>!!'!>},<<{!u!'>,<u>}}},{{{{{<a!o\\\"!>},<>}}},{<\\\"u!!!>}!!!>!>!>i'!>{i<oe!!,!i>},{<e!>aae!!!!<a}!>},<{>}},{{},{{{<,>},{<'!>},<<<!>!!'!!!>aoai!\\\"!!'!>u!>},<>}}},{<'o}!>,<!>},<o,>,{{{<\\\"{'!}!!<!!o!!,}!>},<}}ui}!!!!!>!!!>>}}}}},{{{{{{},{<u!>},<!!!>\\\"{u\\\"i>,{<eie!ea'!!{!>},<!!a>}},{<!>},<e>,<!>,<i'i!!!>{!!!>a!\\\"!!!>o}!>,<o{}>}},{{},<!!o\\\"'e{o!>},<!!'o!!!>!>a!>},<!!!!!!!!},>},{<\\\"a}!!\\\"!<}>,{<>}}},{{<i!!!>}<!>,<!,!!!>u!!!!a'o\\\"'!!>},<iee!>,<!>,<!>!\\\"o!<ei!<<uua{>}},{{<{>}}},{{{<aou!>>},{}}}},{{{{{<>},<>},<!!!>>},{<{o!>e,!>},<<oaa!!!>!!!>!!!>e>,{<e!>!>},<oo!!!>!>},<'!,!!!!!>}!>!!!>,<!!!>i!a>}},{{<!!!!e!>!!>},{}}},{{<a,}!!!>,<'!>},<!>,<!,i!>},<,\\\"!!!!>,<!}\\\"<!>,<i'!!''!!!!!!!>!>!'{!!!!!!!>!!!>,<,e>},{<!!!>},<!>,!><u!><>,<,!>},<!o\\\"!>,<u!!!!e>},{{<!>},<{!!!!!>e!>,<>},{{{<!>,<!!!>,<!!'!!}e!>}aoi!!!>'a!!!>a!!\\\">},<!>o>}}}},{{{{<\\\"!>},<}o!>u!>,<i!>,<<e!!!>>,{<o{{i!>},<e\\\"{'o!>,<>,<!>,<!!{!a\\\"!i!!!!!>!>},<'<!!!!!>!!!>!!!}!!!}!!}!>>}}}},{{}}}}},{{{<e!!<!!!>,<'!e!>,<au!>i{<!!>,<!>,o!>!>!!ea!!{<a!!!>,<!>},<>},{<,,{e!\\\"!!!\\\"\\\">}},{{{}},{<}a!>!!!>a!!!>!><}!o!>},<!>},<,i!!<,'<>,<!!>}},{{{{},{<'a!a{e!!!>u>,<{<!!!>!!!>i,!>},<!!!>iu\\\"!!!>,<!>,<>}},{{}},{}},{{{{<!!!i>,<,!u\\\"!!!>!!\\\"!>!>!>},<{}>}},{{<!!!>!!!>{>},<!{,{!!!>,<u!!!>{!>,<!!a!>},<!!!>!'<o>}},{{{{{},<{!!!>i!>,<u!!i}u<>},{{{<i!!!>}!o!!!<}!>,<>}},{{<{'!>!!u'o!>},<!u,!>!\\\"\\\"ui>}},{{{<u<!!\\\"'<,\\\"<!o!!!>'>},<{!i!>o!>,<'<i!>,<>}}},{<!e!><!!!{i{'o!!!>!}u!>},<!!!>!!!>}!!!>},<{>,{}}}},{{{<!!!>!!o{!!o!>>,<i!!{!!i,!>,<i!}!>},<a!!'!e!!}i!,!!!>'!!!e>},{{<!><a'i!}!>,<!>e!>}!>},<i'>,{}}},{{<,u!'!!\\\"'u\\\"{!>,<}i\\\"!\\\"!!e!a!!u{>}}},{{{{<{!!!>!>,<<{!!o!!!>!,!>,<!!,!>!!'e{>}},<<{}!!!>},<!!!>>},{{<!!!>e\\\"!!'!><!!o!<}',>}},{<>,<'!>,<!!\\\"!<ui'a!>},<!>,<!>>}},{{},{{{<!>,<!>,<!>},<!'!!!>!!>}},{<ui!!!>,<<!!!>>}},{}},{{{{<>},<o!!!>a!!,!ioe'!!!><}!>},<>},{<e!>},<!>,<i}e>,<!!!!!>u,u}!!!>!>},<!!!!eau}o'!e>}},{{<'a\\\"!u>,{}}},{{{<!!<!>},<<!!!!\\\"!>,<{!!!!!>!>,<uo>}},{{},{<!!{u!!{{>}}},{{},{{{{<}<u!u!!!\\\"!!e!>o!!!<!!}a\\\"{<!!!!!u,o!!>}},<a}!!'!!!!{i\\\"{>},{<!>,<>}}}}},{{{{},<!}>}}},{{<<!!!!i{e!>\\\"e!!!>!!',a!>},<!>}>},{<o\\\"ia}!>,<u!>,!!!>!>,<!>!oa!>i>}}},{{{{{<!<}{!!!!!>}e>,{}}},{<e'i>,{}},{{<o!>,<!!<u!!!>}u!!!>io'!!>}}},{<ui!>},<!a!,'!!!>},<>,{<'!!!!!!!>!!<!!e>}}},{{<!!!!!!e!>a<>,<{!!}a!!!!!>!{'!!<!!\\\"{\\\"!!!>,<i!>},<>},{<{}}}{!!!>oai}!!!>iu!'!>},<o!'u>,<\\\"!!\\\"}>},{{},<!>},<a!>},<'!><<!!!>},<{u!!!>,<a\\\"!{>}}},{{{<!!u}o\\\"e!!>,<}!>},<\\\"!>,<oueu!>u,e!>},<u!!>},{{},{{<>},<!!!>!!}!i>},{<a!!!>,!!'o,a'!!!>>,<!!{\\\">}}}}},{{{{<i!!!!o!>,<}{i!>},<uo!!!>i!>},<o!>>}}},{<!>,<!!!>a!!!>!!!a!!!>!!!>!!!>}!>},<}\\\">,<!!o{u!<!i>},{}}}}}},{{{{<!!!>!!!!ee<!!a!>!!!>!>>},{{<{\\\"'!!'},!!}oa<!>o>},{{<!!!>!!!>,<!>,<>}}}},{{<i!!!!!>o!>oo!>!!uo,u>},<e!>},<!!!>!!!>\\\"!!!>!!!>!!!>},<!},oi!!}{ao,ii>}},{{{<!>!>},<!{!>!!!>ea!}{!!{i!>!!!>o>,{<!o!>,<o>}}},{<!>,<!!\\\"!!!>{!>!>,<>,{{{<!!!>ae!>},<o!>},<!a>},<o!>},<<\\\"!}!!!u!>!>},<!!!>'!!!!!>},<>},{}}},{{},{{<!>,<<!>},<o!>,<!>,<}<'}oaa,!!!>,<!>,<>},<ei'!!!>!>!!!>,<!!ue,,>}}},{},{{{}},{{<i!>},<u!!!>!\\\"},!>,<',!>},<}!>},<>},{{{},<>},{<!>!o!>,<!>},<o!>!!u!!!,!>,<a!{!>},<}'>,{{<<u>},{}}},{{{{}},{{<ee>}}},{{},{{},<>}}}},{<!>},<{e!!!>},<u}<!!!!e!>},<ae!!!>!!,,u!'<!>},<>,{<!>}u'!>,<{e!>'<!!!}a<<>}}},{{}}}},{{{<!!!!!!i!!!>,<!!!>!>,<\\\"<e!!'>},{{{}},<!!!!!>,!!!>!>,<u>}},{{{},{<<>,<o!!!>!>i\\\"e!'}!e}>}},{{{<ue!!!>}u!!!>,!>!!}>},{<!!u{}!!uo!!!!a>}},{{},{{<!>,<!!!>ii,'!!<!>,<!i!!!!!o,,,!!,!i<>}}}},{{{{<!!!'e!>ea!!!>,<!><a!!e{>}},{{{{<{!!!>ou!!',!>},<\\\"!>},<}!!!>>}},{}},{{{{},{{<!!!!\\\"'<>},{}}},{{<!!i{e!'!>},<!>},<e',!>,<>},{}}},{<i!!}u>,<!!<,i!!\\\",ue!>i>},{{{<ao\\\"!>e<>},{{<,!>,<a!!o'<e{ieo!>>},{<u{!!!>!o{<aa!!!>!!'!>,<\\\">}}}}},{{},{<!!e}>}}},{<!!o!!!>}o!ae!!!>iiu!>>}},{{{<i!!!!,}iai!>},<,{!>},<a!>!!e>},<uu'!!!>!!!>{!!!>iu'}!>!!!>e!!!>!a>},{{<!,!>},<,{!!<ae!>},<ao<<!>},<eoa!>,>}}}},{{{<ie}o!!!>},<!>>,{{<\\\"e!>e<!''u!!!!u!!{>}}},{{<ue!'!,,{ui!>,<i>},{<{!>,<!>,<!!e<'!!!>},<'<!!'i!!!!!>>}}},{{{<!!!,!!!>\\\"!!i<u!\\\"e''>},{{},{<!>},<a>}}},{{{},<!!!!!>,<!!oo!!!>},<!!u!!!!!>!a\\\">},{{<i{!>,<!>},<oi!!!>},<!!a!>,<!!!>e,o!!!>!!!\\\"i>},{<!!!>iue\\\"'ue'>}}},{}},{{{{<!!,e,!>},<}!!!!a!>},<}!>,<}!>},<e>,{<i!!!!!>!>,<!!\\\">}}}},{{<a!!!>,<!a!!ea!!a!u!>},<u!>,<i!!e>,{<o!!!!!u!!!!e!>e<\\\"ue!>,<!!a!>,<{'<<>}},{{{<e<{!!!>!!!!{,}i<o\\\"a!!o!>,<{>},{<oe\\\"!!!>\\\"!!i!!!>iiau>}},{},{{},{<o<!{!!!!!>!>},<}ii{u\\\"!!<!!,>}}}}},{{{},{<!!}u!>,<o!o}u!>a!>},<\\\"<!>},<>}},{<e>,<!!u\\\">},{{},{<!>},<a{ia<\\\"\\\"u\\\"<!!}!!!>},<!!!>!'!>},<>,{<!e{,i<!oe!>ie!!a{<>,{{{{}}}}}}}}}},{{{{<}!a}!!{!!!>o!!!o!<u!<!>},<,>},{{<!>},<}!>!>}!<>},<!>},<\\\"!!{!u!!!>!!!!}!!!!'!>u>},{{<!,!!!>o!>ua!}\\\"!!a'i>},{<u>,{<a!!{!>}ia\\\"!>,<!!!>!!}!>\\\"!>e!>,<!!{>}}}},{{<aeaia{!!!{!!!>{!>}>,<o<!>},<a!!!>!!ie>},{<!>},<!{}!!!>}!eo'{<>,{{}}},{{{<!>},<e!!'e!!'!}o\\\"!!>}},{<oi!!!>!>}ao!!\\\"\\\">,<!!eoa>}}},{{<o<{!!!>,<a'>},{{<!!!!',!!!!ouia>},{<ouu!>,<a!a!>!!!!o,i!a'!!!!!>!!!>},<'>}},{{}}},{{{{{<!!,>}}},{<uu\\\"<{!>,<!>,<<!>},<{euo>,<!>}!>},<!!a}!!{!,'{a<!>},<!!!>},<!!!>,<}e>},{{}}},{{{},<!!!!e!,!>},<o!e>},{{<},,!!!>u!>!!!>!>,<!!>}}}}},{{{{<!>,<!!!!'u<\\\"ii!>},<'!!!>'a!!!!\\\">}},{{<i{i!>},<a!!!>!!!>iei!>!!!!{!>>,<'ioie'euee'!!!>>},<o,au}aa,o{>}},{<'}\\\"!>},<>}},{{<\\\"\\\"!>!>,<a'!>},<!>,<o'>,<!!!>i!a!>,<!>,<}!!,!>},<!>,<i'!!!>!>},<uo!>},<!>>}},{{{<uo!>!!e!!!>,<{a>},<\\\"!!!>},<'e\\\"!}u!{!>},<!>},<{>},{<{!<o'!<!>},<{,}!}!>,<!!!!a\\\",!>}}{>,<,oo>}}}},{{}},{{{{{{}},<<ouou}o!!!>!!!!oe!!\\\"!u,!!{>}},{{<!!!!!!'!!!>a!>,<,>},{<!!!!>}}},{{{{{{{},<!!!>'oo\\\"\\\"aa{!!{<ue>},{{},<<!!\\\"!>eo!!<!!!>!>!>},<!>},<},!>,<!!a{!!!>!>,<!!!>>}},{{{},<{''!>uo!!!!o',>},{{<e{!>,<!<}a!>'!a!!!!,o!!!>!{>}}},{{{<<e\\\"o'{}e!e}\\\"e\\\"ai}}o<>},{<u<!!}<}!!!{!>},<}<!>eo!,!>>,<a!!e\\\"!>},<!!{e!!!>}!>,{!!i}!!!>!>},<>}},{{<o\\\"'!>,<}!>},<,!!!eu!!!!!>i!{<}>},{<ie}{,i!!!!!iua!,!>!!,!!!>!>,<>}},{{<!!!>!>,<,ieiu!!!!ia!!!!!>oo!>,<ie>,<oe'o!,!'!!{\\\"!>,<!,>},{<}<!>!>},<i}>}}},{{{<{!>!!!>!>>},{{<e!!a!>},<,!i>},<!!,u!>},<!>,<{!!!>},<!!'ii!>,<}!>,<!!!>\\\"\\\"!!\\\"!>},<!!a>},{{{<!>},<eo!\\\",e}<ua}ui!!!>{>,{}},{<!>},<ouu!>},<{iu,a!e!!>}},{{{<i!!{}!!!u!!!!!!!>e{u>}},{{}}}}},{{<<,,u!>,<a<>},{{{{}}},{{{}}},{}},{{<!!!!!!,\\\"!>},<oi!!!>,<>,<oe!!!!!><}>}}},{{{<'!!!>!!!>>},<!\\\"\\\">}}}},{{{<a!>u>}},{<!{i'!>},<!!>},{{},{{},{{},{<!>ai!>,<>,{{<!!!>o!>ee\\\"<\\\">},<eaa!>!!{!!!>,<!!!>},<\\\"iau}<}!>!!!>,<,o>}}}}}},{{},{{{<!>\\\"!!i!!<,''!!!>}!>!!},!>},<!>}!>,<!!!>}>}},{<!!!>,<{!>i,e!!!>!>,<!!!'oeo!!!}\\\">}},{{},{}}}},{{{},{{{<ii!>\\\"{!>,<ui!,!!\\\"!!o>}},<!ouaou!>\\\"!!,!u!!!>,<>},{{<\\\"o<'!!!!!!!!!>!!!>!!,!!!>!!u!!!>!!!>!!\\\",!!!>>},{<{,e!!}a\\\"ii!!\\\"'{,ea>}}},{{<}!>},<,!a!{{',\\\",!u\\\"!>},<e>},{{}}},{{{},<}>},{<!!!>ia!o!o,\\\"o!!!>{ai!'!!!>!!!>>,<!o,!!!>>},{{{{},{{<},iai<u>,{<!!!!!>},<a!!!>},<i>}}}},{{},<!>},<!!{'>}},{{{}},{{{{{<<<u!>}!!u!>},<!>uuai!\\\">}},{<}{<!>,<u!>},<'!{>}},{<u!!i<!!,\\\"}}!!!ii!>,<,!!!>!!'>}},{}},{}},{{},{<,i!uui!!'!>!>i>}}}},{{{<!o\\\"{\\\"!>e!>},<!!}!>},<}!>,<\\\"!!,!!!>,>},{<!'!!!!{o!!!!>,<!>,<{u!!!>!!!>,<,{!>,<!!!>,<!>!!<!<<!o}\\\"i{>},{}}}},{{{<,o!>{>},{}},{},{<!>,<!ia}!!'!!!>}>,{<!>,<!>},<{!>,<!>i!!!!>}}},{{<,,!>,<!!}<o!>,<ii!!ao!{!>},<!>},<!>},<>,{<\\\"a!!<!'>}},{<i!!!!!!'i!>,<!>},<e}!<u>,<!>},<\\\"oa!!!ia!>},<u>}}},{},{{{<e<!!u'e!!!>{aa\\\",a!!!>!!!,a!}>,{<<u!>},<e!!uu'<}!>,<!>,<o{!!!!!>!oo'>}}},{},{{},{{},{}}}},{{<a\\\"{!!!>!>ao!u!!!!!>!>,<'!!!>\\\"}}!>},<o>,<ia!>,<!>},<!!!!!!au!>,<\\\"<o!>},<!oi!!!!!>!!\\\">}}}}},{{{{{{<e>,<!!\\\"!>aa!!!>},<!!!!!!a!!!ao!!o!>,<,!>},<!!!>{>},{}}}},{{{{<!i!>,<i!!},,!!!>i}!>!'!{\\\"!u>,<!>!>,{!>,<i!uia!>!!!>!>!a>},{<{\\\"!}!!oi!a!!!>u>,{<,>}}},{{{<ae'e!!,i!!}!>},<o!!!!!>,<!!!!'!>,<i,,o>},{<!!!>,<!!!>},<u!><,!!!>o>}},{}}},{{{<!<\\\"uu!>,<}>,{<o!!!'!>,<io'!>>,<,e>}},{<!!!a>,<!!\\\"!!e!!{!>,<aiu>}},{{},{{}},{{{{<e!>},<a!>},<,e,!!!!!>!!!!!,!>u}\\\"<!u!>,<e>}},{{{{<!>},<,!!{!>},<!!!{!>},<!!!>{!>},<!!<,!!!>!!<!!<!!!>>},<!!'o!>!!!>ii!>,<!i!!<!>},<>},{},{<o>}},{<!>!!!>{!,e>,<!>,<!!'a}'!>,<!>,<!!!>},<{\\\"{>}}},{{{{<!}!!a'>}},{{{},<\\\"'!!ea!>},<!>{!>,<!>},<e}!>,<!!!>},<,{!>,<>},{<!>,<!>},<i{,>}},{{},{<!>,<!!'ou!!!!u!!!><!!e,!!!>!>},<!!>}}},{{},<eai!!!>>}},{{<!o{<o>,{}},{<!!!>\\\"\\\"!>},<<{,!>,<!!!>\\\"ee!!!>u>,{<!!!!!{''!>},<!><'!u>}},{{<i\\\"o!o!>,<a!!!!!>,}{o,!>},<<\\\"!!!e!>},<>},{{<!!}!!i!!,!>},<'uai!>,<!!<u,!>},<!}!>,<>}}}},{{{{{<>},<!>ee>},{{<!!!>!!!>}!!!>\\\"!o!!!>e!!!>!u'!>},<!!!!}o,e{>}}},{{},{<}{!!!>{!!!!!>!!!>}!!uu}!{!!!!!!{a!,!!}!>,<>}}},{{<a\\\"}uae!>},<>},{<}>,<i''!>,<i!'!!!>'uu!o<}\\\"!!!!!>!!!',>}}}},{{},{{{<oo!!!>i!u!!o\\\",ua'!!!>u\\\"'!>>}},{{},{<!\\\"!>},!>!!!>,<!!!>,<!>,<!!i!>},<u!!},!}!!!!!>>,<<,!!!>},<!!'!!!i}!!!!!!<i{}i!!!>},<!>},<>},{{<'!>'i!>,<\\\"{!>e!>},<>},<\\\"<!!!>},<i!u!!i!!a!eu}i!>,!!a<{!!!!!}!!!!\\\">}}},{{{{{<!!!!!>>},<!!\\\"o!>},<\\\"!>,<u>}},{{<!!i!>i\\\"i{}o!!!>!!!>,<!,a!!!>},<!!!>!!!>,<!!!>!>},<!!{>},{}},{<!!i!>},<{o<!>i}a!>!'!<io<\\\"{>,{<aii!!!>!!{{>}}}}}},{{{{{<oa!!\\\"!>,<ai!<!!!!!!e!!{e>}},{{<a}!!!>'!>},<'i}o!,<>},{{<!!!>\\\"!e',{\\\",e\\\"ei<}{<>},{<!{i,o'!>},<ii!!!>!>>}}}},{{<e!!i,!!!!!!!>},<a<>},{{{<<!!!>},<'!!u!!!!!>ae<>}}}},{{{<{!>},<e!>'>}}}},{<!>,<>,<oo!>},<oiu!>u,!><'!!!>!!ou{>}},{{{},{<!>'ua!i!\\\"!!!>e>,{}}}}},{{{{<>,{<!}!>},<},oo!>},<!!e}{<<!>u!}<!>,<>,<e>}},{{<,!>,<\\\"{>},<!o}!a!!!>!>,<!>},<!!e!!!>!!ui<!!!>o!!!>!>},<!!>},{{<<''!!!!''<iu!ea!>!>!!!a!,>}}},{{},<!!!'!>,<,!>,<}>},{{{{<u!!}i!!i\\\">},{<{!>!!<!<i!!!>ai}a!!!>'!>u<u<}o>}},{{},<!\\\"!!<,!>!!!>a!!<!>,<{}'>},{<!>!o!!ei!!!>!>},<!!!\\\"o!><o>}},{}}},{{{}},{<u\\\",a}!!o,}!>!\\\"!>},<,<>,<!!!!ui,{\\\"!>,!>,<>}},{{{{<o!>},<i{!!\\\",!!!>!!!>>},{{{<!>},<,!!}a!>o!>,<a}uee>},{}}}},{{<{!!!>!!!>\\\"e!>!,!}!!>},{{<,!!ia}!!!>!!!>i!!o!!!>aa!>,<!>},<!!!!i>},<!!o!!!>>},{{<{!!ea!>,<u{!!<!\\\"{!>!!!>!{>}}}},{{<aio!>\\\"!!,<>},{<i!!!!!>\\\"u!!}!ii!!!>'i!!e!!!>!!a!io!>>}},{{{{}},{<\\\"!>},<\\\"o!!!>i}!!i!>{i{!>!,!!!\\\"{!>},<>}}}}},{{<a,e!!a{!!!oe!,o!!!!a!!>,{}}}},{{{{<'!!'{!!{i!>>}},{<a>},{{<e,i!!oe,'>}}}},{{{{<e!>!\\\"o,!!!>!>,<!>,<!>},<u!a'{i!>,<!>{>},{<!!}!\\\"!!!>!>,<!>},<<<!!!!!!!>}\\\"e'!>,<!>},<!!!>>}},{},{{},{<!!}o!!!!!>\\\"}\\\"o!>},<u!oaa!!u!>,<!>},<,>}}},{{<\\\"!!!>!>!!!>,i!{u'\\\">},{},{<i!>,<\\\"{!!}!{u{o!!!!}au>,{<\\\"!>},<}u!>!>,<i>}}},{{<!,!>},<,>,{<,{!!!\\\"a!oe!!u!!,ai!>>}},{{},<\\\"!>,<ai<{,!>},<>},{}}},{{{<!>},<<!!!><,!!u>},{{{{},{}}}},{<!!'!>!><!>o!!,!!!><!!a>}},{{<u<!!}!!i\\\"o!>},<!i}>},{}},{{{<e!!!>,!}<,>},{<i'!>},<}<!>,<{'!u}!>!!<a!!>}}}}},{{{{},{<{!!!>},<!'{!!'{{,,!>>,<!>,<<!!!>o>},{{{},{}}}}},{{{{{<'!>\\\"i}ao'!>,<!!'o!>},<u'}!>!><i>},{<!!'o!<!!!>,<!>,<!!!>!!eau!ie{!><<>}},{{<,e!!u}',a!>,<eueo,}!>},<<!}>}}},{{<'uo!>,<<auue!u{>,{<}>}},{{{<a>}},{{<>}},{<i'{!!!>,!>,!uie!>},<!!<'>,{<>}}},{}}},{{<!>},<!>,<!!,!!\\\"e{!>},<oa!!}u,'<,o'a>,<!>,<!{{!o}!u!>i,'!>},<e!}>},{{},{<o!!>}},{<!!!!!>!>},<{ii!>!>{{>,<!e!>!!'!!!>,<!>,<i>}},{{{<!>u!>,<!i'!!!>o}!>},<!!{!>!>},<iae{ai!>},<>},{<!!ao>,{}}},{{{}},{{{<aeu!>},<!>,<,!>},<'!>u!ou!!\\\"iiu\\\"!!\\\"{>}}},{{},<\\\"uiau!!!>ii!!!>},<<!<!>,<'i'>}},{}}},{{<e,!!a>,<!>},<ei!!!>},<a<o>},{{<\\\"\\\"a'!!{a{a,,}<!>,<!!ie>},{{<\\\"'!!!!!>!>,<\\\"!!!>,o',!!!'>,<!!\\\"!>\\\"!!i!!!>o'!>,<u>},{{},<u!'!!o!o'!,'>},{{{}},{{<\\\">},{{<!!!>,<i\\\"{!'{!o,eoio,i!u!>,<!!>}}}}}},{<!!\\\"e!!!o\\\"a!>}!>\\\"u!i{!!oai<!!!>,>,{<,!>,<eu,,o!>},<<o!!!,!!,io!!!\\\"!>,<a!>},<>}}}},{{{{{<!>},<<o!!!>},<<u!!,u\\\"!>},<!!,}!>,<!,>}}},{{<o\\\"}!uu!!!>'\\\"\\\"u,{<>,<,u<e!!!>,<!!}!<i!!!>!!!><!!!!!!o!!!>!!}>},<!!\\\"!>,<<\\\"!>},<}!>,<<{o!!e'}>}},{{{{{},{}},{{<!!ou{!!!!,!>!!!>!>!!}!>{o!!!>},<o!>e!!!>>}}}},{{<i!!\\\"'\\\">},{},{{<e!!a!!oiu!!!>!>!!}!!!>!'!!!!{i!!u>},<{'>}},{{<'!>>},{{<\\\"}i!>},<}\\\"!>,!{<!<>},{}},{{{<!>!!o>}},<!!<u!>},<e{a!>eo!!!!!>,<!a<!}ee>}}},{{<'u,<o!!i}}e}o!o\\\">,{<>}},{{{{}},{{{{<!!!>!>},<'}!!ai!!ou!>,<'!>!>i>}},<'o!<<>}},{{},{{<!!,!!!!!>>}}}},{<i>},{{{<!!!>>,{{<!>},<''!!!>},<!!},\\\",!!{!!,i!!!>a,!>,<!>},<<\\\">}}}},{}}}}}},{{{{},{{<eu!!}o!,o!>},<{!o!\\\"{{i}\\\"a<>},<\\\"!!>},{{{}},<<u!!!!!>!>},<!}!!ei'{>}}},{{{{{<aue!!!>!<uai{>},{{{},{<\\\"oo'ee{>,{<o!}!>,<!!!>oo{!!!ae}>}}},{},{<!!,!>}!!!>!>},<i!!a'>}},{{}}},{{{{<}!!!!!!<!>},<!!>}},{<!ea}\\\"\\\"ii<u!{\\\"}\\\"{!>!!!>},<>}},{{<\\\"a!!ii{!>>}}},{{{<!!!!}>,<i\\\"}!!!>,<!>,<\\\"i!\\\"!!uo!!!>>},{<o<!>,<\\\"'e!!!>!'!<!oe>}}},{{<\\\"!>},<!!!>o}<<\\\"'!!!!'!!!>'o!>>},{<!!!>},<!!ooa!!!>!>eiea!>!>,<!!i!o>}}},{{<i<,>}},{{<u!>},<,!>},<u!!!>},<}a>,{{<!>},<u!>},<!i!>,<au!,'>},{<!e!>},<!!!>},<>,<{u!!ouo,ui'!!!>!'>}}},{<,!!!>\\\"\\\"o,e>},{<!!e!>'!!!>,!!<!!ioe!!e<<{!>},<,\\\">,{<!ui!,!!!>!!a!>!>,<\\\"uu>}}},{{{<'a{!!!o{!o>,<}!>,!>},<\\\"u\\\"!eu!!!>>},{{{<>}}}},{{{<!!\\\"<>}}},{{{{<},,!>},<!>!!!>!>a!>!!!>,<u!!!u!!i>}},{<!>},<\\\"!>},<>}},{{{<'o!!!>!!!>!!!!!>!!{!>,<!>!!!>!>,<e\\\"!>,<i}!><>,{{<}e!!!>'u!>{!!!>'!>,<!>},<>}}},{<'!!e!>au<!>,<{!>,<}<}!>u,o\\\">,{{<!>!>,<!!!!!!!>,<}!!u!>},<!!!>,<!>},<'\\\"\\\"'{!!}!>},<>}}}},{<'!!!!!>{i!oa\\\"!>},<,!!!>>},{{{},<!>,<>}}},{{{}}},{{{{<>}}},{{{},<uu!}u,{!!},!u!!!!!>{ao>},{{<a>},{<u!>\\\"\\\"'u\\\"iio'u!!'!>,<<>}},{{},{}}}}}}},{{{{{<}\\\"ei\\\",,u!!!>},<o!!e!}u!!!>u>}},{}},{{{<!!{i{!{,e!!!'a}>}}}},{{{{<oo!au'!!{>,<i!!!>'!!!>e{i<}<>},{<!!!!,e>}},{{<i,,!!!>},<!,!{o\\\"{u!>},<o,!!>},{{{<<!!!>,!!ui<{!!!>,<>}},{{<>}},{<a,e!!!!!>\\\"i!>,<{>,<>}}}},{<!>!>,<!>},<}!\\\">,{}},{<\\\"!>},<o!>a\\\"!!!>},<!>},<},!\\\"!}e}!{,!>,<<>,{}}},{{<!>},<!>\\\"o!>,<uu!!}!,<!!!o'a>,{<!!!!{!!\\\"{}!!<{'a!'!!!>},<i{!>},<a}!u<>}}}},{{{{{{<!!\\\"<,!e!>u!!!>!>},<<!!a!!'a>,{<!>,<!>},<'!>},<!>\\\"a!!!>,}!>,<!!o,\\\"'>}},{<!!!>a<uao!>},<\\\"!!!,!!}!!}\\\"!>},<>}},<i!>,<!!!>ou!\\\"o'!>,<i!!'!!}'>},{}},{{<<!{!!u,!!!!\\\"!>},<!>,<oe'e}!'o!,u!!>}},{<}!!}>}},{{{<aoi!!>},{<e!>,<\\\"!>},<a!>'u>}},{{<a,!!!>a'!>},<o!>,<e>,{}}},{<<\\\"!>,<ou!!!>!!!>a!o!!!>!!}a>,{<!!!><'!!!u!>},<i'!{!>},<>}}},{{{<{!>,<e!'a!!'u!!,ieu!ee!>},<!>,<!>,<>,{<!\\\"o>}},{{},{<ea!!!!,'!}o,!!!><ia}!>!!!>!!!!!>u>}},{}}}},{{{{{<!!!>'\\\"!>,<!!!>,<\\\">},<!!e{!!''!{,\\\"\\\"a!>,<i>},{},{{<iiu!}!!!>{}!!!!!!'e'!!''>},{<!>!>},<!i>}}},{<'\\\">,{}},{{<e!,!o!!!>'i}!'!>,<{e'}}e!>,<u>}}},{{{<}{},!>oa'aia!!!>!>},<!!!>a>},<!!!>!!!!!>!>,<!!!>'!>!>>},{<'o!!!>o!{!>},<!!!>,<!>,<>},{{{}}}},{{{<!>,<aoo<'!!!>u}!>},<!>,<!!!>!>o<io,>},<>},{{<!u},e!!o'},<!>,<!!!>!>i!!a!e!>,<!!!>>},{<ue!'>}},{<}}o!!!>!!!!!!!>!!!>>,<<!!u<!e}\\\"ei\\\"o,!>,<'o!!!>!<<u>}},{{{<!>,<i<!>},<u!!!>!!!>!!!>},<,!>,<i!}!>,<!>},<>},{}},{},{<o}'>}}},{{{{{<!!!!!!,'}i<>},<!\\\"!>,<!!'ui!!!>'u!>},<!!>},{},{<i!!!>i!o>,<!!>}},{}},{{{},{{{{<!{}!!!!!>>},{<i!>},<!>,<!!!>!>,<\\\"o>,{<o<ei''!!!>},<u!<!>},<!}e,<oaa>}}},{}}}}},{{<<''}!>,a\\\"!!!>!>},<ia,!!!>,<u>,{<!>,<>}},{{{<<!!!>},<iaaae>}},{{<>},{{<{a>},<,!!e!o{!!e>}}},{{<>},<!!e''!!{'o!!,,'{}i,i!>},<>}},{{<!>o!>},<!!!>>,{<}e'a'\\\"!>,<!e!>},<!!!<!!oa!>},<!>},<!!!e>}},{{<}!>},<i!e'!>,<!!au>,<!>,o!>,<!>},<!>,<!!!>!>},<!>,<\\\"a!!!>,<a}>},{<{<o>}}}}},{{},{{<!!!>'}a{!i,\\\"!>',eao!!}<>},{{},<}<{\\\"!>,<!!!>,<!!,<iuaeu\\\",ee>},{{<ui!!!}>},<!!!>>}}},{{{{{<>,{<,}eu<\\\"!}{u\\\"i!>!!oao>}},<,,<o!>},<}!!!>!>,<}a!>\\\"!>},<!!>},{{<,a!a!!\\\"!!u!!!!<i>},{<!>!>'!>,<!>!!\\\"!>,<!!\\\"!{!!!>}>}},{<!<!>,<!!!!uo'!!!>}!<!!!!!!}!>!!u!!!><!>},<<>}},{{{{<{ai!!!>!>!!euie!>,<!!u!!i,u!!!>,<\\\">},<!>{'!><!!!>!u,!!!!!o!{ie!u}>},{<,!!'{'i>,{<!!o<!!!!!>ooa!oo<<oi'>}},{}}},{{{{}},{<u}}<\\\"e<o{\\\">,{}}},{<},!!ea!!!!!>},<!>},<,!\\\"e}!>},<>}},{{{{{<'}!>,<,}!>},<ea{,!<o>,{<\\\"!>,<,!!{ei<'o>}},{<<!oiu!!o!>},<!o<'!!\\\"{>}}},{{<!>},<}a>}},{<!!u>}},{{<e}!!u!!}!>oa\\\">},<{!i!i>},{{{<!!!>!>!!!!!!iu!!!>!>,<a!!,,!ai\\\">}}}}},{{{{{<!>,<e>},{}}},{},{{}}},{{{<u{{{!!!>,,!><!>,<!>,<a>}},{{},{{}}},{}},{{{{<!>i!>,<u!!{<u<!>u!!!>\\\"ooe{!>},<>},{<!!!u{!>},<!!o}i,{u!!!>!>},<,ea>}}},{<\\\"!!!i>,<!!}!!!>},<!!a!>},<!>},<'}ue!>},<>}}}}}}\";","export default \"wdysq (135) -> sxldvex, wiasj\\nvjwuuft (33) -> inuci, neddz, rwamq\\noislgqy (77)\\nlphki (233)\\nwgbviwb (417)\\nvikip (136) -> eofyk, dkexo, xzsxx\\nelmieqh (19) -> dbziu, spefs, krtxpw\\ntmzef (79)\\nectlgy (232) -> zmstcy, ncobxr\\nsdatyo (91)\\nuisri (11)\\nsmqimxg (132) -> husor, olzys\\npltzthr (82)\\nszaqj (188) -> ptnndxj, fljpye\\njqdngi (58)\\nuazwsu (15)\\nxrrhso (79)\\ngxeehd (68) -> iweii, rnqlzmv, hpmtom, vfzwqfr, xfzxrd, sgqhelx, hibjkps\\nevkoenr (43) -> oecxbyt, qbthgst\\nqivuzn (52)\\nudeev (389) -> lphki, qthzk, hpgsb\\nizgqzs (96) -> vbxzk, ubrrdtd\\nnaxtp (65)\\nmvtkwn (42)\\nsxldvex (34)\\ntnlpmw (49)\\nrzbrbmy (31) -> dvnqv, helyy\\nesavxwq (81)\\nyqgru (465) -> gfuyuz, elmieqh, xckzut, tmbhjxf\\nygypj (1303) -> ohcuki, ejdjxu, ytabct\\nyggqq (855) -> gowlaq, ebtoxi, xpljwl\\nubaxya (92)\\npjkzokv (23)\\nlvarp (76)\\nyrysmsi (14)\\nnofepy (23)\\napjeywv (132) -> kclmmu, exsugls\\nlicrtwb (56)\\ngspffet (84) -> wqzxa, lptaikg\\ngkrqba (82)\\nmqreb (126) -> jvdoo, paykww\\nxtidu (12)\\nkjauagn (88)\\nvvafqjs (56) -> qbvhefh, vfhgfb, iqtyv, ebdva, uxqkau, tydtcxc\\nsnuewn (118024) -> vvafqjs, mhaucon, kikva, mqnbmre\\ngtkii (163) -> txcon, vuvwa\\noaoisa (61)\\nssqrs (24)\\nybditq (21)\\nxgqxofa (119) -> bedzc, hdbkw, zwgsh\\nwxfir (71)\\npxvse (19)\\nxemcuk (23)\\npaunv (28) -> zzvhmse, mubkcmk, vksephm, cbsdget, mellhhn\\ncouhjsv (11)\\ntuzpls (58)\\npuomwl (90) -> wtxjnc, jdjbnc\\nwudlze (78)\\nibslyw (153) -> ksncpee, npvuz\\nzzmczwl (54)\\nkidvt (3136) -> tuzzzct, qtqhwon\\npatlvg (20)\\nyvvxtg (90)\\nepxwjhy (22)\\nepvyxld (17)\\nxhecnbf (85) -> yituewe, wwhyd\\nmqsrwsz (26)\\nbhyzi (73)\\nbatky (18815) -> woctu, iykjtnw, tpiwftj\\nsdponx (44)\\nqhotyqx (95) -> vdwfz, agthd, tuwedv, ixkkdyc, lnlkwq, bvmhqar, rlwmfp\\nnubqteb (89)\\nzygfdu (70)\\ntkerz (18)\\nsolqvvf (10)\\nakiaxs (86)\\njsfqyd (70)\\naialff (68)\\nuiilkiq (73)\\nadlyhbs (46)\\ntnljdhr (20)\\nfrctm (471) -> isqnx, euhgw, nrfqc, cmmnjch, zevrg\\njjklma (105) -> xrrhso, uyjor\\nlpmnwh (56) -> orrfh, bqfzqra\\nowxski (23)\\ngqxyh (18)\\nlpyntz (91)\\nivvyjos (81)\\nqssjswr (268)\\njkbks (225)\\njwbdb (83)\\naxqrke (119) -> mgoic, yivgs, bxggi, xamfjfv\\nuwizlce (24)\\nwuwhup (50)\\nsuawycj (60)\\nwazvn (99)\\nwtxjnc (53)\\nebtoxi (64) -> ttbns, voxychz, umsdpa, ajjmsnw\\nuuhoydu (82) -> gvucdh, hesyq, glwsf\\ntshyvej (1373) -> ebiovn, uvzpp, pblqb\\nbhakbq (991) -> izqxal, nhhytw, flmma, isgky, coqek\\nhcsjun (60) -> inelfwo, qcnstq, eymmhh, lpyntz\\notjbn (67) -> szaqj, kkhlzm, jtzdqn\\nvtwud (10735) -> jldhlug, ikfzj, tsevkec\\nheztht (86)\\nrqonynk (65) -> olzqxap, oyhqsok\\nesbdjah (61)\\nhdinwud (1515) -> bdiftdg, ydtuje, aambg\\nrbbjcq (71)\\nkimffjc (155)\\nwifrwut (91)\\nhrlgs (9)\\nieowdj (76)\\nvpqsjbj (147) -> eziosif, rptcpf\\nrlurjca (51) -> gtbjtpi, ohpkkhx, zkwnhn, cagvlf, zvlobk, ahsqaob, iactix\\nyzykfd (43) -> atqfhm, kazwz\\nkikva (6131) -> gkpalaj, jafrv, uekzf\\nlsoen (51)\\nuexqjw (10923) -> dxczurt, omqhf, ylfxp, qofsaux\\nnlnphv (117) -> vzlzrt, ypiwnt\\nbemxocu (78)\\netcsuuv (312)\\nihwbmt (27)\\noorvvpt (63)\\ndvnqv (88)\\nntlawn (60)\\njhaow (45)\\nkccpv (17)\\nkbybvzk (89)\\nctcmfv (49)\\nujqjrz (89)\\nxekft (62)\\nwihtv (1278) -> qgbbhdv, adlyhbs\\nagthd (158) -> ucnehpw, hnutx\\nvuytzn (21)\\nsvcqds (7)\\nemqqf (5)\\nuqddsal (17) -> trait, sdatyo\\nuhwlk (252) -> sxtto, qyvsaxn\\nttbgzv (46) -> rokri, pygoqsv\\noecxbyt (71)\\nxunvu (33)\\nmvbtomp (35)\\nuxqkau (693) -> qubhi, gneut, htmcpcy, qmncyu, wdysq\\nycrnaf (177) -> ssqrs, twimkx\\nnlalji (28)\\ndgvvo (37)\\nniydqsy (33)\\npprvv (89)\\ntmbhjxf (135) -> jutep, vkhiz\\niaftm (63)\\nzjnrzph (81) -> gsxmqnw, gnxfwv\\nggzqccl (5)\\nwwtiby (121) -> kytha, dgzywn\\nzismp (58)\\nhjbrfba (28)\\nxnlkkx (79) -> puomwl, xnbvupf, hgksz\\nbptaz (38)\\nozaogat (15)\\nhxxml (27) -> emazu, kproiw\\nxpptslq (76)\\nilohfvn (10)\\nhadddf (128) -> geapi, ocltuv\\ngtprqg (17)\\nqofsaux (209) -> bbnjml, fwskxq\\nxpljwl (128) -> ufust, aialff\\nthhbhrm (41) -> smqkli, ovtfd\\nxamfjfv (36)\\njdjbnc (53)\\nkecpcmj (72)\\nixkkdyc (80) -> wutzrk, antev\\nysnbr (35)\\ncyvwwa (190) -> jtqxxa, pgmtcg, btvsj\\nuyjor (79)\\noztxmy (76)\\ncancxr (213) -> ivdvlvq, ykxalh\\nzlads (14)\\npeokkb (167) -> mqkqtjo, qpchzkg, epssvr, yzose\\niauxpc (81)\\nqbodszw (945) -> rgdvqu, oktgjb, abstvp\\ndmwutl (73) -> desuqj, etjwno\\nfcaht (134) -> ajidd, kigxtt\\nfkgkcwd (51) -> mqwagy, gvtve, djvbdm, ckapp, ldiqm, ezspaq, pyrvg\\ndqzkic (1032) -> inglhm, dgxdydd, hxhhhu\\nydtykm (75)\\nzatfy (35)\\nrmenjck (89)\\nnrfqc (238) -> zgxjjm, fwide\\nschexn (97)\\nlrplxk (22)\\nnroecsv (44)\\nkiawm (64)\\nzpfuxux (73)\\nmvdkbch (28)\\nsufdte (71) -> gfjeud, rbbjcq\\nxmjunhp (45)\\nwsnsqx (7)\\netyaxa (13)\\ncfrqn (57)\\ntslujme (60)\\nbebuqpx (33)\\nwwyuud (11)\\ngtotarq (95)\\nvtopekt (65)\\nhxhhhu (230)\\naubvpzf (73)\\nkllsasv (73) -> enuvuv, jlhipos, hittl, smyzyqg\\nmgiuz (94)\\ndsytvn (296) -> mxfonyo, yihru\\nicsxziz (256)\\nagflbq (73)\\namtrbok (12)\\nqcebc (20)\\neymmhh (91)\\npbpva (95)\\nrodxm (199) -> rzvlc, vnmml, rrmlgct\\nekblpi (97) -> flwbwcq, ecwpa, usgpgi, pknsw, gkjwl, zzfom\\nltpmtif (86)\\nbkfnip (4873) -> murnoa, qhzem, udeev\\nyhiab (249) -> sdponx, yvattv\\nhbaai (70) -> rmnkup, dgtsic\\nanazjn (225)\\nzjjyjj (101) -> viwez, ihwbmt, qnwwjwt\\nhusly (98)\\njlhipos (20)\\nxflsc (2516) -> qodow, vdkhvyp, masvpfj\\ncenqs (156) -> jhaow, mivmhi\\nrgrcla (84) -> nroecsv, pexfst\\npdddwgk (30)\\nupefkx (75)\\nabstvp (46) -> wqgoxl, gbwaobo\\nglzmsn (93)\\nbgtzw (37)\\nflvrfdl (146) -> ybditq, vuytzn, yqdaz\\njmzpxql (47)\\nwulvcf (89)\\nmxfonyo (20)\\naambg (69)\\njfjvw (32)\\nuslhk (8)\\nwwzjdv (45)\\nzwtsg (248) -> bjjtifj, ogbov\\nmbxyf (56)\\nxckzut (157) -> gaalz, upefkx\\ntrseebo (18)\\nhbcpm (32)\\nggoaczz (88)\\nzangrh (66)\\nktbto (55) -> pdqzfg, mfoismz, mkirruz\\nrhpcgg (197) -> evkoenr, klpzhup, cigew\\nkbbcau (25)\\nporttu (92) -> haaqbj, lttlp\\ngfsgzni (73)\\npyaqqhu (134) -> kdkobz, szvocp\\neiyiuq (54)\\nfjgjfpc (17)\\nlvvkjx (56)\\nkinah (22)\\nivdvlvq (31)\\nnjerlzh (35)\\nzzdae (63)\\nrrkbjhn (78)\\nhnutx (50)\\noqokji (198)\\nvoxychz (50)\\nzovlqz (56)\\nulood (81)\\nyzttfu (15)\\nhtmcpcy (203)\\njmytuxi (221) -> dvuctqv, sgilmx, fqdolnu, rdrncg\\nrehhbv (17)\\nixkpaf (59) -> jqbdh, atvtit, qcebc\\nantev (89)\\njfikdf (20)\\nykxalh (31)\\nvqwclk (19) -> ewldimp, wkeqlvj, ouxuh\\nhxeqn (528) -> kimffjc, qpgphk, vqfiq\\numsdpa (50)\\naodfzpi (69)\\nwutzrk (89)\\njyjvpeb (81)\\nttbns (50)\\nwmewl (977) -> yhiab, iordzi, uuhoydu\\nydejjeb (159) -> yvcanc, jrrubn\\nbykuuwe (80)\\niesjhoq (336) -> bhzfx, sxexfai, mjounwc\\nkdrhj (1832) -> rrkbjhn, gzpgvqq\\nsmyzyqg (20)\\nkigxtt (80)\\nrokvo (7)\\nwpcng (50)\\nkoevsvb (97)\\nyihru (20)\\nkrtglj (18)\\ncmfwwv (40)\\njsaujq (1397) -> rgrcla, vqwclk, rxilrp\\ngmjxxi (97)\\nekvmhd (49)\\nlttlp (66)\\ntakbkro (200) -> ngjipr, inhfutj\\nwhvpgmw (54)\\nlqaveh (97)\\nqthzk (187) -> wntmkg, pjkzokv\\nhaaqbj (66)\\nvxufrto (40)\\nzseldo (181) -> hdvtd, papbxya\\npsmgm (95)\\nclwtgt (34)\\nbpwxvvw (89)\\npmyrysb (77)\\ngjclsl (75)\\nolzys (57)\\nwoqoljk (99)\\nocodtdz (30) -> gjclsl, ogioyhi\\nnbybi (54)\\nveiaf (139) -> vlqqgb, iaftm\\nuvzpp (165) -> mxvba, jjtafg\\nqodow (63) -> oqxnfd, rpxaf, sybnvtp\\nkouye (58)\\ndlhuell (84) -> schexn, otzinx\\nnlrlj (145) -> veknoj, lfpjfv, yrlnu, ugelox\\nsambc (138) -> mnoinr, pkordz\\nbypqww (50)\\nrgkfzk (35)\\nkiatxq (1232) -> dispgy, irnjtjo, iqpoc\\ngigtu (60)\\nxzsrv (89)\\ndhafpel (636) -> vxddev, nxkpnt, zbuftv\\nbqfzqra (71)\\nrcbqqok (243) -> ofrogun, wwyuud\\noaqkk (69)\\ndgxdydd (132) -> mudewqe, bazwto\\nvxddev (128) -> bzpjiss, qmjamoi\\niqtyv (800) -> lvtotof, zddmrx, yzykfd, nlnphv\\nvdcmrrr (93) -> xuoyxmc, amrcopl, fcnsfy\\njutep (86)\\ncyanr (23)\\ncxyxa (97)\\ntuzkv (153) -> iflll, tipewrj\\ncdegn (52)\\nmvijo (35)\\nxnbvupf (60) -> frlgjzf, wtorpp\\nrwopuzo (15)\\nuxfsb (76)\\nqedyqs (157) -> bjzbqzq, alfqryh\\nrwhgw (76)\\ncsmjozb (79) -> sasym, wmewl, kdrhj, btvmyff, sqkfgo, jcputh\\njbujmr (294)\\nxvjfw (8)\\nekfwu (17)\\nebiovn (225) -> mnufo, rokvo\\nohcuki (197) -> alsfpfg, xsfryrh\\nzavisuv (15)\\nglwsf (85)\\nvurdlqx (196) -> acfdkr, aefjv\\nihksnmq (95)\\necwpa (248) -> soyta, ytomr\\njldhlug (234)\\noazfz (61)\\nrdrncg (16)\\nrrrmaka (51)\\nqhgzopn (66) -> tmzef, iiiupn\\nifetn (86)\\nplgjg (99)\\nokjds (73)\\nalgkwbg (99)\\nugmhzm (56)\\nvvnhm (135) -> ntrtfv, ihuqmbd\\ncsuywzh (1788) -> wgvpotf, fwtxvo, vikip, bpzhj, bomuft, otjbn, zsotrv\\npawpvkj (47)\\nzzvkwsb (148) -> hjfucl, gxcft\\naivbhtz (78)\\nnyckm (23)\\nqwqpht (68)\\nkbuurtb (62)\\nahexrp (19)\\ndlikiv (247) -> kinah, sthtydb\\nudiai (50)\\nlopnwz (91)\\nxbtvux (73)\\ngvtve (222) -> typbqmw, vdsaccd, sdlta, uisri\\nvczyhcg (8)\\nedswttn (58)\\nkqaua (89)\\nlmnuii (536) -> rlwoz, gjvmrh, ukapl, lthoz, boahhv, ylpxahm, rqonynk\\nkwlyw (193) -> hcruo, kecpcmj\\ntrskdr (322) -> hdrfo, bimxf\\nclbmn (33)\\nscffzsr (48)\\newldimp (51)\\nqhixu (21) -> roorbg, oruhqn, psmgm\\nypcup (94)\\nvrszijz (56)\\nvksephm (157) -> ngkax, tkerz\\nsxtto (30)\\ntkojiz (12)\\nelygt (569) -> bixtvg, xsqbapj, ocodtdz\\nvdctvf (84) -> iauxpc, cuyweja\\nrktxkyb (108) -> xjbot, flwjj\\nzckdwxe (54)\\nvfzwqfr (54) -> mphzxio, clbmn, donnc, niydqsy\\niqpoc (260) -> zlads, jhapr\\npojst (51)\\nueitm (169) -> emqqf, qqstwmn\\ndgzywn (39)\\nldcmzd (130) -> mertvs, ggoaczz\\nxtgmmc (306)\\nmjounwc (9)\\nftbiwxy (62)\\nogioyhi (75)\\nfkitgnx (69)\\ngvucdh (85)\\nopsrep (43)\\nolsycb (59)\\njiizacd (49)\\nqbthgst (71)\\nnxqvwm (69)\\nrvrzp (113) -> xrqhewm, ifetn\\npkordz (84)\\nvempqu (6)\\nulmwqtm (230)\\nzwgsh (43)\\nsrgob (561) -> plrig, djbtbrk\\nrmnkup (47)\\nbtvmyff (1442) -> mrqtrkq, zjjyjj, uqkskjn\\nnrfyua (11)\\nnuozixg (1064) -> nnelc, zmzobfp, oggljxs\\nicrvj (22)\\nvksphlf (1423) -> kdykksn, wwtiby, uqddsal\\nxmnbar (58)\\nukapl (195)\\nlijszmh (44)\\nzzonk (28)\\njhapr (14)\\nmrqtrkq (88) -> zaxbfog, pawpvkj\\naibtig (109) -> ggzqccl, hyxtojc\\nvuvwa (87)\\nahysv (90)\\nmqwagy (88) -> uxlisdh, rmenjck\\nxpttnwd (95)\\noullg (25) -> dlhuell, imrwgqw, hadddf, rktxkyb, zwtsg, wllrov\\nbwsgfa (22)\\nvmiykci (153)\\njcgvp (18) -> mvbtomp, zatfy\\nwetluzb (33)\\nzvnzrr (37)\\nsgilmx (16)\\ngeabygu (96)\\nkakvi (41)\\nfuujiy (92) -> xnfuz, urrhqwc, fmdfm\\nppvsy (285)\\nnyuxiu (122) -> nzvqjrt, dhzsao\\ntjwynpa (75)\\ngowlaq (138) -> uwvfga, bnvlydl\\nsnywwu (26) -> snqey, aodfzpi\\ncvude (41)\\nsnqey (69)\\nejqam (17)\\npgmtcg (47)\\nrtcqml (85) -> zangrh, dspug\\nezspaq (215) -> rehhbv, epvyxld, oguxu\\nytabct (89) -> frfotet, zerxp\\nnxkpnt (248)\\nqubhi (107) -> lnznpq, scffzsr\\ntfotbwz (424)\\nwkgyfpp (824) -> ccbie, iesjhoq, kdffrsb\\nwjsxcmb (95)\\nztdbvxb (53) -> zismp, dqoagdt, yxfjglq, givaxj\\nouxuh (51)\\nxfzxrd (22) -> kakvi, mjlvx, wridnv, zeexkde\\nrekerpj (7)\\nredkli (81)\\nqdkhjb (53)\\nyituewe (95)\\nocnkhq (10)\\niaayhc (300) -> fwhhoz, ycrnaf, jkbks, anazjn, yhzjjgc, pocwgw\\nmjlzzq (212) -> hwycny, gmzabjk\\nrhaoo (36) -> kdzhiq, ydkhmp, dsytvn, wzezz\\nfqkzcq (293) -> gztng, oiaxzp\\nessijo (1248) -> wuqapgg, msmxf\\nckapp (94) -> clktah, akiaxs\\nnktwwvp (159) -> qivuzn, cdegn\\nqxwdzl (50)\\nlfpjfv (48)\\nlmfclbd (14)\\ncglyptu (240) -> icrvj, epxwjhy, tpmqmg\\ndhzsao (24)\\nbckfa (16) -> ntlawn, tslujme, ccjze, woklobt\\nmivmhi (45)\\nbfjxeyo (24)\\nplrig (53)\\nijlooi (1429) -> jcgvp, zvsgd, fzafkj\\npyhcj (64)\\ngdvbtjk (71)\\nfxrkz (70)\\nhusor (57)\\nriiaj (44) -> lvvkjx, mbxyf\\nlxmvg (4738) -> msjbv, ijoaqyv, yname\\nwntmkg (23)\\nhelyy (88)\\nmuxvdx (57) -> veiaf, rcbqqok, gfnmx, zezeds, ktbto, qedyqs\\nrroub (41)\\nhnwfe (89)\\nenuvuv (20)\\nwzzlsg (18)\\nhpgsb (81) -> xpptslq, jtoryw\\nwoklobt (60)\\njicyq (18)\\nlybwr (64)\\nujgpnsy (12)\\nmbtweib (86)\\nvgzejbd (10) -> vuoqao, vwkkml, kmpfxl, snuewn, jjgjvki, fiprusz\\nvgfveov (198)\\nlvtotof (49) -> pprvv, gsckda\\nylpxahm (33) -> jyjvpeb, tytsynv\\nglximrw (53)\\niykjtnw (542) -> dizqtw, oiozpzq, dmwutl\\nxuoyxmc (51)\\nwpvale (18626) -> wihtv, isbdm, gxeehd\\njruttt (28)\\nurrhqwc (84)\\nyfyaho (7)\\nklpzhup (11) -> befwz, mypula, xmnbar\\nkclmmu (49)\\nqcnstq (91)\\nsasym (13) -> vimnt, eoign, lusub, peokkb, mlhaxv\\nmgoxhns (130) -> edswttn, ioycu\\nstzzli (89)\\nltesfzf (44) -> sufdte, vpqsjbj, oghyxz, hxxml, mnhrjdv\\nyxfjglq (58)\\nfuhbay (82)\\ngxcft (25)\\nrwamq (86)\\nqxqwmye (68)\\nketopn (42)\\ntmsmb (84) -> pkxrm, pbbkg\\nzerxp (75)\\nzpbrw (95)\\nwuqapgg (66)\\nnmsats (82)\\nvvzctek (9)\\ncmoty (91)\\nqkkhj (88)\\npocct (99)\\nxyfvxng (45)\\nmqnbmre (2069) -> vecnb, azhddw, muxvdx, qbodszw, yggqq\\nmsjbv (918) -> nktwwvp, qijleb, ttnoqm, ulaio, furlcyu\\nmkirruz (70)\\nmubkcmk (163) -> solqvvf, ocnkhq, wntitz\\nlvzzwy (89)\\nypiwnt (55)\\nbveilrx (306) -> pxvse, ahexrp\\nshiaqps (45)\\nmlhaxv (297) -> ctcmfv, ekvmhd\\neiohuhm (72)\\nisqnx (122) -> azgohsw, pltzthr\\nqqstwmn (5)\\nfiwvclv (80)\\nzobti (87)\\nqbvhefh (53) -> ylazd, cyvwwa, sfkpzr, zsjlevq, zseldo\\nxqgxel (54)\\nyrlnu (48)\\nrrmlgct (19)\\njtzdqn (178) -> lsoen, pojst\\nnffvt (37)\\naxtepsa (13)\\nngkax (18)\\nviwez (27)\\nkdykksn (7) -> geabygu, cfiqn\\nzvlobk (419) -> mdfkbxa, wzzlsg\\nxsqbapj (164) -> xqxvktz, xvjfw\\nnzvqjrt (24)\\ngbqbg (18)\\nhskko (38)\\nbgmntpq (6)\\nzddmrx (227)\\ndgtsic (47)\\niijfq (73)\\nqytxu (71)\\nmklcsj (54)\\njnwdraz (63) -> aubvpzf, zpfuxux\\nhudde (1072) -> wyrfplr, rzbrbmy, ujmfmiu\\njcoyk (18)\\ndspug (66)\\nqgbbhdv (46)\\nneddz (86)\\nboahhv (195)\\najjmsnw (50)\\nlusub (209) -> nrloleu, lfwpqb\\nbkgise (17)\\nxsgyar (568) -> fesce, vfteg, thhbhrm, vvnhm\\nmudewqe (49)\\ntrait (91)\\nfljpye (46)\\nxobszr (61)\\npkxrm (57)\\nqrynkpt (22) -> kswafh, oztxmy, zejcp\\nfrlgjzf (68)\\naomksx (70) -> pmyrysb, robpw\\ngjvmrh (167) -> xxtyban, mfjdb\\natvtit (20)\\nihuqmbd (34)\\nmfjdb (14)\\nrptcpf (33)\\nljitswv (89)\\nzkujvlv (51)\\nydtuje (69)\\nemazu (93)\\nsqkfgo (1451) -> ueitm, okbtg, cnzynyj\\nflmma (86) -> ygglox, ocvrlia\\njnqgs (76)\\nctken (72)\\nkxdbyp (20)\\nktlkx (112) -> etyaxa, axygpr, rqsyc, axtepsa\\nhesyq (85)\\ntydtcxc (919) -> swcsd, nkclzqq, dhcopz\\nsqbxzl (12)\\ndispgy (52) -> olsycb, ynecxzo, esqvkcm, xclsj\\ndjbtbrk (53)\\nsvjnd (47)\\nfizbyu (78)\\nvqfiq (61) -> zdrhuz, jmzpxql\\ntqsrg (70)\\ndulrvcq (2086) -> apjeywv, vurdlqx, bwemy, ulmwqtm, qkxtwct\\ngfjeud (71)\\nxdzgwl (220) -> jicyq, prbbfe\\njcputh (196) -> xdzgwl, rodxm, piutfin, ezmot, bckfa, zyisjsj, icsxziz\\ngbwaobo (94)\\nmlyar (44)\\nzsotrv (751) -> wudlze, hjmreq\\nchxgqe (47)\\njunva (83)\\nfmdfm (84)\\newwab (70)\\nhdrfo (51)\\nqijleb (111) -> qngug, voxemk\\nqmjamoi (60)\\npyrvg (230) -> shcavm, trseebo\\njoszidy (95)\\nrxilrp (138) -> gtprqg, xqgqp\\nptnndxj (46)\\ntypbqmw (11)\\nfesce (39) -> fuhbay, jozav\\noeixw (65)\\ngjhfseh (20)\\nzeexkde (41)\\nynecxzo (59)\\noqfpo (78)\\nkeazynv (68)\\ngnsdn (51) -> njerlzh, rgkfzk, lhyzwtf\\nsqljeh (20)\\ndclmckh (93)\\nrqsyc (13)\\nwvwjep (70)\\nncobxr (8)\\nbuilgr (78)\\nxkdjbxo (81)\\nbzpjiss (60)\\nvfomix (95)\\nwtorpp (68)\\npruui (1276) -> glaosn, xgqxofa, ggkael\\nmonhu (76)\\npiutfin (156) -> wpcng, qxwdzl\\nwrwim (10)\\njrrubn (52)\\nvkdytw (24)\\nvdtdmy (26)\\npbbkg (57)\\nuwviodb (208) -> bkxfso, evrtfzj\\nvfhgfb (1084) -> gnsdn, ttbgzv, pyaqqhu, riiaj\\niordzi (223) -> cfrqn, nzuhp\\nbiffdx (42)\\nbpsesr (50)\\ncglfuq (199) -> vempqu, noogeuk, bgmntpq\\nbkxfso (19)\\noopnu (88)\\nwlavb (92)\\ngmzabjk (41)\\nehrfv (57) -> pruui, eondv, ygypj, vksphlf\\nlpwuzn (89)\\ncnzynyj (89) -> wwzjdv, xyfvxng\\ndgmtgrv (12)\\nhpmtom (50) -> zzpwgcd, qxqwmye\\njafrv (719) -> qhgzopn, aomksx, porttu\\nmsmxf (66)\\nldiqm (266)\\nllydxxz (37)\\nvdsaccd (11)\\ncbsdget (81) -> licrtwb, zovlqz\\nqgwhbwh (62)\\nepuqu (17)\\nloojs (43)\\novshy (95)\\nqhayeqe (86) -> opsrep, loojs, fvukbun\\namrcopl (51)\\ntsncd (108) -> zygfdu, jsfqyd\\noguxu (17)\\nskyaki (69)\\nufxfx (25)\\nmpzyapm (19409) -> elygt, ltesfzf, dhqrk\\nlthoz (150) -> rwopuzo, uazwsu, ozaogat\\nxxtyban (14)\\nggkael (54) -> gmjxxi, koevsvb\\nyuyhys (12)\\nqngug (76)\\nkazwz (92)\\nowysb (71)\\neondv (25) -> uxggaix, ngfxax, ztdbvxb, jmytuxi, hkxfb, rvrzp, ppvsy\\noyhqsok (65)\\niflll (97)\\nxjbot (85)\\ntytsynv (81)\\nrsyxcdq (157)\\nvuoqao (102055) -> kahduw, lxmvg, vtwud, ktcffyf, ggdoqnl\\nocvrlia (48)\\ncpuxdo (75) -> rroub, cvude\\ntpiwftj (482) -> cancxr, xhecnbf, ilcmx\\neaoxb (2777) -> cfrbz, vmiykci, kllsasv\\nalfqryh (54)\\ngfnmx (214) -> ekfwu, ejqam, kccpv\\ndaerl (14)\\nnvahhge (14)\\nrzvlc (19)\\nktcffyf (1777) -> dhafpel, jtyljl, nmcewof, rhaoo, xsgyar, otetl, essijo\\npntvfpd (49)\\nhkxfb (285)\\nngfcc (87)\\nyqdaz (21)\\nqzwauo (49)\\nkdkobz (11)\\ntslbp (224) -> mvijo, qolgxnd\\nvlqqgb (63)\\nzsjlevq (175) -> bemxocu, builgr\\nxzsxx (79) -> zugkqyx, jubeqci\\nyvattv (44)\\nnhhytw (44) -> skyaki, nxqvwm\\nzmzobfp (75) -> ntxtwk, yhvdjl, xzsrv\\nsretj (240) -> wsnsqx, rekerpj, knciro, svcqds\\nawwhgzp (70)\\nadqnigs (72)\\noipscid (85)\\nxsyqdlv (26)\\neoign (134) -> aujeia, ngfcc, zobti\\nnfulfov (14) -> aivbhtz, exlwxxi, oqfpo\\nfqehxv (168) -> lgonp, vxufrto\\nimpzr (70) -> lybwr, pyhcj\\nbnvlydl (63)\\nolzqxap (65)\\nfrfotet (75)\\najidd (80)\\nqyvsaxn (30)\\nrlwoz (19) -> kjauagn, qkkhj\\nhysssy (12)\\nptmsqz (81)\\nkahduw (31) -> qhotyqx, xhxek, bhakbq, ivgpv, lmnuii, frctm\\nejdjxu (41) -> wazvn, algkwbg\\nylfxp (99) -> heztht, mbtweib\\nisgky (80) -> kecckss, obakqyf\\nxclsj (59)\\nqhzem (47) -> fnkgp, ujipv, tuzkv\\nzaxbfog (47)\\nuekzf (1315) -> qjxikz, bptaz\\ngkjwl (50) -> pucdapo, zckdwxe, xqgxel, vcprhe\\nxqgqp (17)\\nntrtfv (34)\\nufust (68)\\nyvcanc (52)\\njtqxxa (47)\\nrfumv (92)\\nqjxikz (38)\\nsybnvtp (59)\\npugxio (62)\\nolfwppt (154) -> bwsgfa, lrplxk\\nugelox (48)\\noruhqn (95)\\nrlwmfp (158) -> bypqww, wuwhup\\nqnwwjwt (27)\\nhjmreq (78)\\npaykww (22)\\naefjv (17)\\nhvpess (1924) -> vaxtfaa, wbnmb\\ndbziu (96)\\nxnfuz (84)\\ntpmqmg (22)\\nqrinzet (69)\\nldrpjd (88)\\npocwgw (13) -> glximrw, bhmirp, rcqkas, qdkhjb\\nsxexfai (9)\\neuhgw (208) -> xrbkzmk, xsyqdlv, vdtdmy\\nulaio (203) -> pdddwgk, sakmm\\nvnmml (19)\\nksncpee (28)\\npucdapo (54)\\nucnehpw (50)\\nbtvsj (47)\\nveknoj (48)\\npapbxya (75)\\nsdzhsq (94)\\norrfh (71)\\ngnxfwv (68)\\ngrthhzv (244) -> dgmtgrv, tkojiz\\ndxcozh (35) -> phrpja, ahysv\\nvekndsc (94)\\nujmfmiu (39) -> vrszijz, ugmhzm, sdrcc\\njctafp (62)\\nbhmirp (53)\\ntmqlkof (28)\\nwyrfplr (109) -> qzwauo, pntvfpd\\nshcavm (18)\\nxmkegiw (28)\\nydkhmp (290) -> cyanr, nofepy\\nivkcc (70)\\nujipv (183) -> gkrqba, nmsats\\nlnznpq (48)\\nxqxvktz (8)\\nwzezz (264) -> bfjxeyo, vkdytw, uwizlce\\nnvgohm (26)\\nydqtt (158) -> oeabdth, bkgise, fjgjfpc\\nnmcewof (1182) -> plgjg, imtzl\\nbbnjml (31)\\niweii (8) -> lvzzwy, nubqteb\\nkmpfxl (134829) -> csuywzh, ehrfv, bkfnip\\ndbkxe (34)\\nsfkpzr (76) -> lsszcka, manlcoz, oipscid\\nbbyoqzx (14)\\nuuavydd (43)\\nhjehgnc (489) -> ujqjrz, wulvcf\\nqmncyu (17) -> ofveqm, qgwhbwh, ftbiwxy\\nzzfom (210) -> jruttt, mvdkbch\\ncigew (185)\\nnozgflw (89)\\ntrfjf (174) -> hskko, evbeo\\nidqhx (12)\\nnoogeuk (6)\\nccjze (60)\\nbedzc (43)\\nuymju (8) -> ectlgy, pchapba, tsncd\\njvwvi (86)\\nxrqhewm (86)\\nifijr (28)\\ntuzzzct (50)\\nzwrjdk (82)\\nekvzyod (11)\\nvivco (626) -> okhisbv, biffdx, rbascuz\\natujmm (250)\\nbdiftdg (69)\\nwqzxa (82)\\njtoryw (76)\\nsttlowq (207) -> xmkegiw, tmqlkof\\nwqkoep (90)\\nsdloeq (14)\\nhzruk (47)\\nmgoic (36)\\nmqkqtjo (57)\\ngsxmqnw (68)\\npexfst (44)\\nycfbxe (254) -> tnljdhr, jfikdf\\nkenxmax (91)\\nyhvdjl (89)\\ngzpgvqq (78)\\ninglhm (94) -> qwqpht, keazynv\\nuytmyv (91)\\nwqgoxl (94)\\nyfxbu (32) -> jbujmr, mjlzzq, hcrys, mwfksx, fcaht, ycfbxe, tslbp\\nmnhrjdv (185) -> lmfclbd, sdloeq\\ngcasp (17)\\njjgjvki (99205) -> suuppr, csmjozb, uexqjw, cckrzh, yuzzsk\\nzvqvvyp (39)\\nbgpab (1781) -> qmqpbm, rdwxvvp, vjwuuft, dlikiv, acaqfng\\nprbbfe (18)\\ngaalz (75)\\nrobpw (77)\\nrcqkas (53)\\naxsimnf (403) -> yfyaho, qeyjc\\nmypula (58)\\nmnahxn (52) -> cxyxa, lqaveh\\nsmqkli (81)\\nnkclzqq (44) -> bhyzi, okjds, gfsgzni\\nsoyta (9)\\ncagvlf (267) -> ypcup, mbffei\\ndvuctqv (16)\\nhdvtd (75)\\nlexqf (96)\\ncuyweja (81)\\nvfteg (17) -> dclmckh, iihwb\\nfzuosl (94)\\nipctg (80) -> zzyxzr, rqdtsp, esbdjah\\nyuzzsk (3542) -> ijlooi, yqgru, oullg, ekblpi, hudde\\ntpvhe (42) -> sretj, grthhzv, luqqu, uwqee, qssjswr, kbrwk\\ngpbdzes (96) -> dgvvo, zvnzrr\\ncmfwvem (23)\\nbefwz (58)\\nmellhhn (166) -> vvzctek, hrlgs, evqbli\\nbmxolxn (20) -> bpwxvvw, sfnix, fxnap\\nrnqlzmv (88) -> tnlpmw, hrfbh\\nqeyjc (7)\\njozav (82)\\ngjahajj (62)\\nqyfzonc (89)\\nngjipr (24)\\nsepmxir (33) -> uuavydd, xocoiqa\\nqizpmf (98)\\nmroft (77)\\nlyeyx (61)\\ngtgovt (134) -> gqxyh, gbqbg\\nhrihd (50)\\npygoqsv (55)\\ndxczurt (89) -> rupxxhm, lopnwz\\nmdfkbxa (18)\\nhcruo (72)\\nytomr (9)\\nbhzfx (9)\\nmbgapsj (39)\\nomqhf (105) -> jwbdb, junva\\nwntitz (10)\\nzugkqyx (89)\\nntxtwk (89)\\nphrpja (90)\\nilcmx (129) -> xbtvux, agflbq\\nhhcoc (63)\\nbxggi (36)\\nobakqyf (51)\\nxrbkzmk (26)\\nsthtydb (22)\\nxvljr (21744) -> nfulfov, takbkro, gspffet, fqehxv\\nhofirm (33)\\nokhisbv (42)\\nuldgij (64)\\nsakmm (30)\\nzbuftv (62) -> glzmsn, oacnj\\njxevsc (57) -> wvwjep, jilzdse, fxrkz, vkgfrb\\nioycu (58)\\nysuttai (72)\\nttnoqm (133) -> vtopekt, naxtp\\nereyjs (54)\\nhgksz (174) -> msuvilq, couhjsv\\nluqqu (112) -> yfaihrb, fizbyu\\nbixtvg (180)\\nkswafh (76)\\nfwide (24)\\nghgou (12)\\naujeia (87)\\nlgqad (75)\\nszvocp (11)\\nyivgs (36)\\nlnlkwq (216) -> nvahhge, bbyoqzx, daerl\\nqtcck (137) -> lgqad, ngtdwvu\\nwkeqlvj (51)\\nvbxzk (75)\\nuqkskjn (132) -> kbbcau, ufxfx\\ngacpvy (26)\\nccbie (90) -> cmoty, uytmyv, dmiccse\\nsuuppr (9751) -> uymju, rhpcgg, vivco\\nfqdolnu (16)\\nvcprhe (54)\\niihwb (93)\\nswcsd (91) -> ltpmtif, jvwvi\\nnbwaei (61)\\nzdgyktc (84) -> jnqgs, uxfsb, xkzcttf\\nbimxf (51)\\npdqzfg (70)\\nbomuft (785) -> xobszr, idpttp\\nkytha (39)\\nzyisjsj (58) -> woqoljk, pocct\\nhwycny (41)\\nofveqm (62)\\noqxnfd (59)\\npnpsnjp (803) -> zpbrw, pbpva\\nysekeoo (126) -> suawycj, gigtu\\ngneut (203)\\nzdrhuz (47)\\nqmqpbm (7) -> owysb, gdvbtjk, qytxu, wxfir\\nimrwgqw (170) -> yhncv, mklcsj\\ndymzl (72)\\nvzlzrt (55)\\nlfwpqb (93)\\ndirhtk (65) -> hrihd, udiai, bpsesr\\ndonnc (33)\\niactix (293) -> ulood, xkdjbxo\\nacaqfng (271) -> wrwim, ilohfvn\\ntuwedv (150) -> eiyiuq, ereyjs\\nmjlvx (41)\\nfwhhoz (72) -> rrrmaka, zkujvlv, fyaco\\nmsuvilq (11)\\nmxvba (37)\\nsmvskd (1262) -> cglfuq, rtcqml, zjnrzph\\nggdoqnl (9436) -> hjehgnc, xnlkkx, srgob\\naifpyc (61)\\nvwkkml (148790) -> hvpess, nuozixg, tshyvej, yfxbu, kiatxq\\ntipewrj (97)\\npblqb (7) -> kouye, ibydam, jqdngi, tuzpls\\noktgjb (70) -> lcbgeev, zwrjdk\\ndqoagdt (58)\\nxkzcttf (76)\\nzevrg (108) -> stzzli, kbybvzk\\nlomrivn (92)\\ngrkzvkj (124) -> xemcuk, cmfwvem\\nuwvfga (63)\\nfrxshon (95)\\nzzvhmse (157) -> ujgpnsy, idqhx, hysssy\\nahsqaob (75) -> gtotarq, joszidy, frxshon, vfomix\\njqbdh (20)\\nkvzmie (69)\\noiaxzp (22)\\nspefs (96)\\nfxnap (89)\\nazhddw (909) -> smqimxg, mgoxhns, izgqzs\\nepssvr (57)\\nkxhvvgi (8) -> ihksnmq, wjsxcmb\\netjwno (91)\\ntlwxovy (91)\\ncapuc (91)\\nevbeo (38)\\ndjvbdm (50) -> zzmczwl, whvpgmw, szqdapo, nbybi\\nmbffei (94)\\nuwqee (90) -> qyfzonc, nozgflw\\nbpzhj (251) -> hbaai, gfsnz, snywwu, ktlkx\\ndhcopz (207) -> hjbrfba, nlalji\\njilzdse (70)\\nlgonp (40)\\nzvsgd (58) -> yzttfu, zavisuv\\nrdwxvvp (203) -> mlyar, lijszmh\\nwridnv (41)\\novtfd (81)\\nkttsf (35)\\nmurnoa (238) -> gpbdzes, gtgovt, mqreb, grkzvkj, nyuxiu\\notzinx (97)\\nbjjtifj (15)\\nirnjtjo (12) -> ubaxya, lomrivn, rlhmcf\\nzezeds (79) -> kbuurtb, pugxio, gjahajj\\nofrogun (11)\\nbjzbqzq (54)\\nqolgxnd (35)\\nvdkhvyp (52) -> kfkfyx, mgiuz\\nrlhmcf (92)\\nokbtg (35) -> dymzl, eiohuhm\\nkkhlzm (96) -> wlavb, rfumv\\ndmiccse (91)\\nesqvkcm (59)\\nzzyxzr (61)\\ntegtsu (72)\\nkbrwk (124) -> tegtsu, adqnigs\\nmertvs (88)\\nawmmdn (49)\\npknsw (74) -> lexqf, pxadg\\nfwtxvo (71) -> ibslyw, jnwdraz, ydqtt, flvrfdl\\nflwjj (85)\\nasbmk (76)\\nsdlta (11)\\nvdwfz (234) -> amtrbok, brpgc\\nexsugls (49)\\nyfaihrb (78)\\noghyxz (213)\\nmanlcoz (85)\\nmnoinr (84)\\nibydam (58)\\nhjfucl (25)\\nlcbgeev (82)\\nygglox (48)\\nxhxek (425) -> uwviodb, cenqs, mnahxn, ysekeoo, vdcmrrr, vdctvf\\nkrtxpw (96)\\nzgxjjm (24)\\nvkhiz (86)\\ninhfutj (24)\\nqkxtwct (166) -> jfjvw, hbcpm\\nmfoismz (70)\\nvoxemk (76)\\ninuci (86)\\nwllrov (200) -> nvgohm, mqsrwsz, gacpvy\\nfyaco (51)\\nngtdwvu (75)\\nkfkfyx (94)\\niiiupn (79)\\ngkpalaj (76) -> jjklma, ydejjeb, sttlowq, axqrke, ipctg\\nubrrdtd (75)\\nfwskxq (31)\\nnzuhp (57)\\nnpvuz (28)\\nfnkgp (65) -> vekndsc, sdzhsq, fzuosl\\nroorbg (95)\\ncfiqn (96)\\nfcnsfy (51)\\nidpttp (61)\\nvaxtfaa (83)\\njubeqci (89)\\nuxggaix (195) -> shiaqps, xmjunhp\\nvvlimno (63)\\ntxcon (87)\\nocltuv (75)\\nkdffrsb (187) -> ldrpjd, oopnu\\nimtzl (99)\\njvdoo (22)\\nyhzjjgc (93) -> xunvu, bebuqpx, wetluzb, hofirm\\nclktah (86)\\ngivaxj (58)\\nfiprusz (88) -> bgydix, mpzyapm, xvljr, bnywvsx, snmey, batky, wpvale\\nwgvpotf (115) -> tmsmb, zzvkwsb, olfwppt, impzr\\nohpkkhx (385) -> kttsf, ysnbr\\neofyk (41) -> ctken, jyrzc, ysuttai\\nubllty (91) -> qizpmf, husly\\naqgumo (47)\\nzezbp (91)\\nmphzxio (33)\\ngfuyuz (209) -> jiizacd, awmmdn\\nrpxaf (59)\\naewlgu (62) -> oazfz, aifpyc, oaoisa, nbwaei\\ncoqek (166) -> uslhk, vczyhcg\\nkecckss (51)\\njqlbenn (65)\\njyrzc (72)\\nazgohsw (82)\\nqtqhwon (50)\\nfurlcyu (85) -> lpwuzn, hnwfe\\nevqbli (9)\\nzwvhgce (121) -> chxgqe, hzruk\\nxsfryrh (21)\\njjtafg (37)\\nacfdkr (17)\\nrupxxhm (91)\\nnnelc (342)\\nhdbkw (43)\\nusgpgi (182) -> ketopn, mvtkwn\\nthxqmj (81)\\nbgydix (16136) -> tpvhe, excdqtl, yjvfni, iaayhc\\npxadg (96)\\nuiryg (2879) -> aibtig, sepmxir, ixkpaf\\nexlwxxi (78)\\nvecnb (897) -> atujmm, qrynkpt, trfjf\\nzkwnhn (329) -> oorvvpt, zzdae\\nezmot (96) -> bykuuwe, fiwvclv\\nvrxkr (37) -> jxevsc, gtkii, nlrlj, kwlyw, fqkzcq\\nzmstcy (8)\\naxygpr (13)\\nyzose (57)\\nkproiw (93)\\nlptaikg (82)\\ncmmnjch (6) -> ewwab, awwhgzp, tqsrg, ivkcc\\nqpgphk (33) -> lyeyx, cqfsg\\nhittl (20)\\nwbnmb (83)\\ntsevkec (54) -> yvvxtg, wqkoep\\nmwfksx (216) -> mbgapsj, zvqvvyp\\nbvmhqar (224) -> epuqu, gcasp\\noeabdth (17)\\npchapba (70) -> kqaua, ljitswv\\ngsckda (89)\\ngtbjtpi (265) -> ovshy, xpttnwd\\nxocoiqa (43)\\nwoctu (56) -> qrorhfv, axsimnf, wgbviwb\\nfoxvut (77)\\nzerhdhs (150) -> xtidu, yuyhys, ghgou, sqbxzl\\nrqdtsp (61)\\ndizqtw (103) -> ieowdj, vgkhk\\nebdva (718) -> vgfveov, zerhdhs, kxhvvgi, oqokji, lpmnwh\\nikfzj (212) -> nrfyua, ekvzyod\\nhcrys (63) -> foxvut, oislgqy, mroft\\nvkgfrb (70)\\nbwemy (92) -> oaqkk, kvzmie\\nyname (1373) -> qhayeqe, dxcozh, dirhtk, zwvhgce\\ndesuqj (91)\\nbnywvsx (19757) -> pnpsnjp, paunv, hxeqn\\nwiasj (34)\\nlhyzwtf (35)\\ngztng (22)\\nszqdapo (54)\\nflwbwcq (142) -> xekft, jctafp\\nijoaqyv (91) -> ldcmzd, sambc, aewlgu, wrkoi, xtgmmc, cglyptu, qhixu\\nknyvyft (81)\\nngfxax (139) -> uiilkiq, iijfq\\natqfhm (92)\\nmasvpfj (184) -> ifijr, zzonk\\nyhncv (54)\\nwwhyd (95)\\noggljxs (314) -> awrbrc, yrysmsi\\nsdrcc (56)\\nsgqhelx (60) -> hhcoc, vvlimno\\nsnmey (84) -> bgpab, xflsc, kidvt, rlurjca, uiryg, eaoxb, dulrvcq\\nqpchzkg (57)\\nmhaucon (2652) -> smvskd, wkgyfpp, fkgkcwd, jsaujq\\nbrpgc (12)\\nvimnt (91) -> rwhgw, asbmk, lvarp, monhu\\nexcdqtl (378) -> hcsjun, trskdr, tfotbwz\\nuxlisdh (89)\\nisbdm (1276) -> aqgumo, svjnd\\nalsfpfg (21)\\nzzpwgcd (68)\\nglaosn (86) -> ptmsqz, ivvyjos\\nfvukbun (43)\\nrokri (55)\\nqrorhfv (93) -> redkli, thxqmj, esavxwq, knyvyft\\neziosif (33)\\njqgfu (40)\\nnbqaqp (298) -> owxski, nyckm\\nhyxtojc (5)\\nawrbrc (14)\\nogbov (15)\\nrbascuz (42)\\nkdzhiq (63) -> kenxmax, tlwxovy, zezbp\\ngeapi (75)\\noiozpzq (127) -> uldgij, kiawm\\nfzafkj (88)\\nzejcp (76)\\nwrkoi (124) -> capuc, wifrwut\\ndhqrk (173) -> zdgyktc, etcsuuv, uhwlk\\njtyljl (348) -> bveilrx, nbqaqp, fuujiy\\notetl (1340) -> patlvg, gjhfseh\\nmnufo (7)\\ncfrbz (117) -> krtglj, jcoyk\\nlsszcka (85)\\nrgdvqu (166) -> dbkxe, clwtgt\\nyjvfni (1179) -> ofnqgn, rsyxcdq, cpuxdo\\ngfsnz (14) -> ydtykm, tjwynpa\\nknciro (7)\\nsfnix (89)\\ncqfsg (61)\\nizqxal (142) -> kxdbyp, sqljeh\\nivgpv (1040) -> ubllty, qtcck, bmxolxn\\nbazwto (49)\\ntwimkx (24)\\nevrtfzj (19)\\nofnqgn (19) -> qrinzet, fkitgnx\\nnrloleu (93)\\nylazd (201) -> jqlbenn, oeixw\\nhrfbh (49)\\ndkexo (146) -> nffvt, llydxxz, bgtzw\\nhibjkps (106) -> cmfwwv, jqgfu\\noacnj (93)\\ninelfwo (91)\\nvgkhk (76)\\ncckrzh (6841) -> hdinwud, dqzkic, vrxkr\";","export default \"9 11 6 3 4 4 3 5 1 9 0 10 1 7 2 6 3 2 8 4 6 3 3 1 1 2 2 3 1 3 1 1 8 0 9 1 1 8 5 2 5 6 6 4 3 1 3 2 2 1 1 1 1 8 0 6 1 3 5 8 4 3 1 1 2 3 1 3 2 3 3 4 1 4 5 3 4 1 8 0 7 9 1 6 4 2 7 9 1 1 1 1 2 2 1 1 1 5 0 6 3 5 1 6 1 3 2 2 1 3 2 1 9 0 11 1 2 8 9 6 7 7 1 1 3 4 1 2 1 1 2 3 3 1 3 2 2 5 2 3 5 1 5 0 7 6 3 1 3 7 7 3 2 1 2 2 1 1 7 0 9 7 6 4 9 1 7 9 1 5 2 2 1 2 3 1 3 1 9 0 6 1 6 3 2 8 1 3 3 1 3 1 3 1 3 1 1 2 5 3 2 3 4 1 7 0 7 7 4 1 7 3 9 8 3 1 1 1 3 2 2 1 6 0 8 1 4 5 4 4 1 1 3 3 1 2 1 1 2 1 5 0 8 8 7 3 8 4 3 9 1 1 3 1 3 1 4 1 3 1 4 5 4 6 5 3 3 5 1 8 0 11 8 4 3 5 3 1 4 1 8 8 7 3 3 1 1 1 2 3 3 1 7 0 11 3 4 2 6 6 4 4 6 2 5 1 3 1 3 2 1 1 3 1 5 0 9 7 2 4 1 1 2 3 5 9 3 2 1 2 1 3 5 1 1 3 3 6 1 9 0 7 3 7 4 1 3 4 9 1 1 3 1 1 3 2 2 1 1 5 0 6 6 1 8 9 9 7 2 3 2 1 3 1 8 0 6 6 3 4 9 1 4 1 1 3 3 2 3 1 2 4 5 1 4 5 3 3 4 1 9 0 7 3 4 4 5 9 1 1 1 1 2 1 1 2 2 1 1 1 6 0 10 7 1 9 8 8 5 7 8 7 5 1 3 2 3 1 3 1 9 0 9 1 3 2 1 1 6 8 1 1 1 1 2 1 2 3 3 2 1 2 3 1 2 3 6 1 6 0 7 4 1 9 1 9 2 9 3 1 1 1 1 2 1 6 0 9 1 9 7 1 6 1 2 3 5 1 3 3 2 1 1 1 5 0 9 2 9 5 1 1 7 6 6 1 3 3 3 1 2 3 3 2 4 1 1 3 6 1 9 0 9 7 6 1 1 8 3 2 2 1 1 3 2 3 2 2 3 3 3 1 6 0 7 1 7 6 2 2 4 7 2 1 3 1 3 1 1 5 0 11 7 3 5 1 4 3 2 3 8 8 7 3 1 1 2 1 5 4 5 3 1 5 2 5 6 4 3 3 7 1 8 0 8 1 6 8 6 7 9 7 1 1 1 1 2 1 2 2 2 1 8 0 7 1 8 4 1 9 7 1 1 3 1 2 2 1 3 1 1 9 0 8 9 3 7 8 6 1 1 4 2 3 1 3 1 2 2 2 1 3 1 5 4 4 1 2 3 7 1 5 0 11 2 3 4 5 7 4 3 9 1 2 1 3 2 1 3 1 1 7 0 11 9 1 1 7 6 6 6 2 6 1 1 2 2 1 3 1 3 1 1 5 0 7 4 9 2 1 7 7 3 1 2 1 2 1 5 2 5 5 2 5 3 3 5 1 8 0 8 4 8 3 9 4 5 3 1 1 2 3 3 1 3 3 2 1 5 0 7 2 1 8 6 2 4 9 1 2 1 2 1 1 6 0 6 9 1 8 5 8 1 1 2 3 2 1 1 5 1 1 4 1 3 6 1 5 0 11 6 2 1 9 8 9 7 6 2 6 5 3 2 1 1 1 1 8 0 9 1 5 6 2 9 2 8 4 8 2 2 2 2 2 1 1 3 1 9 0 9 6 2 6 8 1 4 4 9 4 1 2 1 2 3 3 3 1 3 5 2 2 2 1 3 4 1 4 5 3 3 5 1 8 0 8 2 1 2 3 1 2 5 8 2 2 2 1 1 1 3 2 1 8 0 6 4 3 9 8 1 9 3 2 2 1 3 2 3 1 1 7 0 7 1 3 1 7 4 7 3 1 1 2 2 2 1 1 4 3 1 2 2 3 4 1 9 0 9 3 1 1 9 5 1 4 6 7 3 2 1 2 1 2 2 1 1 1 6 0 11 2 1 5 4 4 1 3 7 3 5 1 2 1 3 3 1 3 1 9 0 7 6 1 8 8 7 3 4 3 2 2 3 2 1 2 2 3 5 1 4 3 3 6 1 7 0 11 1 9 6 3 4 1 2 7 2 1 3 1 2 1 3 3 1 1 1 9 0 10 7 5 7 6 1 3 6 8 8 1 3 1 3 1 3 3 3 2 2 1 9 0 6 1 6 2 5 4 1 2 1 2 3 2 3 2 3 1 5 2 2 5 1 5 3 4 1 8 0 9 4 5 1 6 2 8 3 7 1 3 3 1 1 3 3 2 1 1 8 0 11 2 1 1 7 3 3 7 9 7 1 2 2 3 2 3 1 1 2 1 1 7 0 10 7 3 2 3 3 3 1 9 2 6 2 2 1 2 1 1 2 5 2 2 5 3 7 1 9 0 6 8 5 1 9 6 5 2 2 1 1 2 1 3 2 1 1 8 0 11 6 3 7 8 2 2 9 1 7 1 5 3 1 3 2 1 3 1 2 1 7 0 7 8 9 1 2 4 8 1 3 2 1 1 1 1 1 3 1 2 3 3 5 3 4 2 2 4 4 3 6 1 5 0 9 9 7 5 1 8 1 2 5 8 1 3 2 2 1 1 7 0 6 1 3 5 3 3 4 2 1 2 1 1 1 1 1 6 0 11 1 7 2 8 3 1 3 2 9 7 6 1 3 1 3 1 2 3 2 5 4 3 2 3 5 1 8 0 6 3 3 4 7 6 1 2 1 2 1 2 1 3 2 1 6 0 6 6 1 6 5 2 6 2 2 1 3 2 1 1 6 0 11 5 3 7 9 7 2 8 1 2 3 3 1 1 2 3 2 3 3 5 2 2 4 3 6 1 5 0 9 2 1 4 1 6 3 4 4 1 1 1 1 3 2 1 9 0 9 4 2 6 1 3 8 1 8 5 2 2 1 2 2 1 3 3 1 1 8 0 11 1 6 8 9 4 4 1 1 6 7 1 2 2 2 3 2 1 1 1 5 1 1 2 4 3 3 6 1 6 0 8 1 9 6 3 7 9 2 1 3 1 3 2 2 2 1 9 0 6 1 8 4 1 1 1 1 3 2 2 1 1 3 2 2 1 6 0 11 1 1 2 7 7 1 4 6 6 8 9 1 3 2 3 1 3 5 2 2 2 3 2 1 6 4 2 5 4 3 4 1 9 0 8 8 9 4 1 1 9 9 3 3 1 3 2 3 3 3 2 2 1 5 0 11 3 7 5 6 1 1 7 3 1 2 6 2 1 1 3 1 1 6 0 6 1 1 4 2 5 7 1 1 1 2 1 1 5 2 3 2 3 5 1 9 0 6 5 1 1 3 3 1 3 1 1 2 2 2 2 1 2 1 5 0 9 4 3 1 8 1 3 5 1 6 2 3 2 1 1 1 5 0 10 8 6 4 9 4 3 9 1 8 9 1 2 1 1 2 1 1 2 4 2 3 4 1 9 0 9 1 9 2 1 1 3 5 6 5 3 3 3 3 2 1 3 2 2 1 6 0 11 1 4 3 2 1 3 6 7 3 9 9 1 1 1 2 3 2 1 5 0 11 8 7 5 3 2 4 6 7 8 5 1 1 2 2 1 3 1 2 2 1 3 6 1 6 0 9 1 8 8 9 1 4 2 2 4 1 1 3 1 2 2 1 7 0 9 1 1 3 1 1 9 7 1 3 1 1 1 2 2 3 2 1 7 0 6 4 9 3 1 7 7 1 1 2 2 2 3 2 4 2 2 4 5 4 3 7 1 6 0 11 9 7 2 4 4 5 1 8 6 7 7 2 3 3 2 1 1 1 6 0 6 7 8 1 6 1 9 3 1 1 3 1 1 1 6 0 8 8 5 2 5 5 9 4 1 2 1 1 2 3 3 4 5 1 3 4 2 1 4 5 1 7 2 6 2 6 3 5 4 3 6 1 5 0 9 3 4 9 5 9 1 7 5 4 1 1 1 3 1 1 8 0 10 3 6 7 4 6 5 1 1 4 1 1 2 1 1 1 3 3 2 1 7 0 7 1 4 9 7 3 5 3 1 3 3 1 1 1 3 1 2 4 1 3 3 3 6 1 8 0 9 9 1 7 1 8 1 2 8 4 3 2 2 2 1 3 3 1 1 6 0 7 7 8 9 1 7 8 6 2 1 1 1 2 2 1 5 0 8 2 2 4 2 4 5 2 1 1 1 2 3 3 1 1 3 3 1 1 3 4 1 8 0 6 6 1 4 2 4 9 1 3 1 2 1 2 1 2 1 5 0 6 1 4 4 1 7 7 2 1 1 3 2 1 5 0 6 8 1 4 5 7 9 2 1 1 2 1 5 2 5 1 3 4 1 7 0 8 1 1 1 1 5 4 7 9 3 1 1 3 1 3 3 1 9 0 10 1 1 2 6 7 2 1 1 4 6 3 2 1 2 1 1 1 3 2 1 7 0 8 3 1 8 7 5 8 4 8 1 2 1 1 3 1 2 4 5 1 2 3 7 1 6 0 6 9 1 5 4 2 4 1 1 1 1 2 2 1 5 0 7 5 1 2 2 5 6 2 1 1 3 2 2 1 6 0 11 7 8 1 4 2 9 1 1 3 3 3 3 1 1 2 1 1 3 4 5 1 1 5 1 3 1 5 4 5 4 3 4 1 6 0 6 3 4 2 1 9 6 1 2 3 2 1 1 1 8 0 6 2 5 1 1 1 4 1 2 2 1 1 2 1 2 1 9 0 6 1 5 2 4 1 1 3 1 1 2 3 2 1 3 2 3 3 1 2 3 4 1 7 0 11 7 7 7 4 7 8 8 1 3 5 1 1 3 1 2 3 2 1 1 8 0 6 9 7 8 6 1 6 1 3 1 3 2 2 1 1 1 8 0 9 9 1 2 5 3 3 9 5 8 2 3 1 1 1 1 3 1 2 5 5 3 3 6 1 9 0 7 1 1 3 5 2 4 8 3 2 1 3 3 1 2 1 1 1 9 0 10 1 9 8 5 5 8 9 4 5 5 1 1 1 3 3 3 1 3 1 1 8 0 9 1 2 5 7 8 5 6 1 6 1 1 3 2 1 2 1 3 4 3 3 1 1 2 3 5 1 8 0 7 9 1 3 8 1 2 4 2 2 2 2 2 1 1 2 1 9 0 8 4 4 9 8 9 2 7 1 3 3 1 1 2 3 1 1 3 1 5 0 6 1 6 5 3 9 5 3 2 3 3 1 5 1 1 4 5 3 5 1 8 0 7 5 3 9 3 3 2 1 3 1 1 3 1 2 2 2 1 5 0 9 4 2 3 7 1 4 8 5 3 1 1 3 2 2 1 6 0 6 9 6 4 7 9 1 1 1 2 3 2 1 3 1 2 4 4 5 1 1 1 5 4 3 4 1 5 0 10 1 4 8 6 4 7 5 3 8 5 2 1 3 2 2 1 7 0 6 3 1 8 1 9 3 2 2 1 2 1 3 2 1 9 0 9 4 7 2 3 1 1 7 7 7 1 1 1 1 1 1 2 2 3 2 3 5 1 3 6 1 8 0 7 4 6 5 1 8 9 2 2 3 2 1 2 1 1 2 1 5 0 11 6 5 9 5 7 8 5 3 1 6 6 1 3 1 1 3 1 5 0 9 4 3 3 4 4 4 1 1 4 2 3 2 1 3 4 1 2 3 5 1 3 7 1 6 0 7 7 2 6 3 1 5 6 1 1 1 1 3 2 1 5 0 8 7 6 2 5 2 7 1 4 3 1 2 1 3 1 9 0 8 7 9 9 7 6 7 1 4 1 3 1 2 3 3 2 1 3 1 3 5 5 2 5 2 3 4 1 5 0 9 7 7 2 3 3 1 5 1 9 2 1 3 1 2 1 7 0 7 2 7 3 7 3 1 2 1 3 3 2 2 3 3 1 7 0 10 8 6 9 9 3 5 4 3 1 5 3 3 1 3 1 3 1 5 4 2 2 3 6 1 7 0 8 5 1 8 6 8 5 2 4 1 1 1 1 2 2 1 1 9 0 9 5 1 1 7 1 8 5 7 6 1 1 3 3 1 1 3 1 1 1 7 0 7 5 6 1 9 1 5 6 2 1 2 1 1 1 1 5 2 3 5 3 3 6 5 4 1 4 4 3 6 1 7 0 6 3 2 7 9 1 5 1 1 2 3 3 1 3 1 8 0 6 1 8 8 1 4 4 2 2 3 3 1 3 2 1 1 5 0 10 8 2 9 1 7 4 1 4 8 5 1 2 3 1 1 1 3 4 3 5 1 3 7 1 6 0 9 4 4 9 6 6 1 5 5 1 1 2 2 1 1 3 1 7 0 9 9 1 2 2 7 3 7 7 8 1 2 3 1 1 1 3 1 5 0 6 2 3 1 4 7 1 1 1 3 1 3 1 5 1 4 5 1 3 3 6 1 7 0 6 5 3 1 2 6 3 1 2 3 2 3 2 1 1 6 0 6 9 1 6 1 2 8 1 3 1 1 2 1 1 6 0 10 1 9 9 9 7 5 3 4 5 4 1 1 2 2 3 2 2 2 5 2 2 1 3 5 1 5 0 7 6 3 4 6 1 3 9 2 1 2 3 1 1 7 0 11 1 1 1 1 7 9 5 3 5 1 9 1 3 1 3 1 3 3 1 6 0 7 1 4 1 3 2 7 5 1 1 2 2 3 1 2 1 3 5 5 3 1 1 4 5 4 3 4 1 8 0 9 8 6 8 2 7 9 1 2 9 3 3 2 3 1 1 3 3 1 8 0 7 7 6 9 2 1 2 3 2 1 2 1 3 3 1 2 1 5 0 8 9 2 8 1 9 5 8 3 2 1 2 2 1 3 5 3 5 3 5 1 6 0 6 3 6 8 5 1 1 1 2 2 2 2 2 1 6 0 8 9 1 3 7 3 3 1 9 1 2 2 3 3 1 1 7 0 9 7 8 7 5 1 4 7 4 8 3 1 1 2 1 1 1 4 5 1 2 4 3 7 1 6 0 10 7 8 6 1 3 3 9 5 6 1 2 1 1 3 3 1 1 8 0 9 8 1 9 1 1 8 3 3 6 3 1 1 3 3 2 1 1 1 7 0 7 1 2 1 1 9 7 2 2 3 1 3 3 3 3 3 2 1 3 3 5 3 3 7 1 7 0 11 4 5 1 6 3 5 6 8 6 8 6 2 2 1 2 1 2 2 1 9 0 10 5 3 1 8 6 6 8 6 3 7 1 3 2 1 2 2 3 3 3 1 6 0 7 9 6 8 9 1 6 3 3 2 1 2 3 1 1 5 1 5 5 4 1 3 4 1 8 0 6 3 3 7 2 7 1 2 1 3 2 3 3 2 3 1 5 0 7 8 9 9 1 1 8 1 2 1 2 1 2 1 8 0 6 5 2 9 1 3 9 2 1 1 3 3 2 2 3 2 5 3 5 3 3 6 1 5 5 3 4 1 8 0 6 1 9 9 1 3 9 2 3 1 3 1 3 3 2 1 6 0 8 9 3 1 2 1 6 5 5 1 3 1 3 1 2 1 9 0 6 1 1 4 6 9 9 2 1 3 1 2 1 1 2 1 1 2 1 2 3 7 1 9 0 10 7 9 1 7 5 1 6 7 9 3 1 2 1 1 3 3 2 2 1 1 5 0 8 3 1 6 1 3 5 1 1 1 3 3 1 3 1 5 0 7 1 2 6 3 9 2 2 3 1 2 1 3 1 4 3 2 1 4 1 3 6 1 9 0 6 1 4 1 5 7 7 3 1 1 2 3 3 2 2 1 1 7 0 10 8 1 2 7 7 5 8 8 1 6 3 2 3 3 1 1 3 1 7 0 7 4 1 3 7 8 3 6 1 2 3 1 1 2 1 2 3 5 2 2 5 3 6 1 6 0 10 7 1 9 1 4 1 1 2 3 8 1 3 3 1 2 3 1 8 0 7 9 4 5 6 5 4 1 1 1 3 3 2 3 3 3 1 8 0 6 9 1 1 1 3 1 2 2 1 3 3 1 3 2 1 2 5 3 1 2 3 4 1 9 0 10 1 5 5 2 1 2 3 9 2 6 3 3 1 2 1 1 3 2 1 1 9 0 11 9 6 4 6 5 8 3 5 1 1 9 3 3 2 1 1 3 2 3 2 1 6 0 11 6 6 2 7 9 1 8 4 5 4 2 1 1 3 2 2 1 3 1 5 1 6 2 2 3 3 1 3 4 7 3 5 4 3 6 1 5 0 6 3 5 7 8 1 3 1 3 1 1 2 1 5 0 11 9 9 3 7 1 6 1 3 1 9 8 1 2 3 2 1 1 8 0 10 5 4 1 1 4 6 9 3 9 6 3 1 3 1 1 1 3 3 1 3 2 3 3 1 3 7 1 8 0 8 4 1 6 6 9 1 1 1 1 3 3 2 3 2 1 2 1 6 0 8 3 8 3 1 4 9 9 1 2 1 3 1 1 1 1 8 0 11 7 7 1 7 4 8 6 6 8 3 6 2 3 1 1 1 2 3 3 4 3 4 4 2 3 2 3 5 1 9 0 11 3 2 1 2 7 4 2 2 1 7 4 3 3 3 1 3 2 1 2 3 1 5 0 11 4 8 3 4 3 6 7 9 4 1 6 2 3 1 2 2 1 6 0 7 6 8 7 7 9 1 8 3 1 1 3 2 3 1 3 1 1 3 3 6 1 8 0 7 1 6 3 7 1 5 3 1 1 2 2 2 3 3 1 1 6 0 11 3 7 9 1 9 1 4 3 2 1 5 1 2 2 2 1 3 1 7 0 6 4 3 3 7 9 1 3 3 2 1 3 1 1 1 1 4 2 2 4 3 6 1 9 0 8 5 6 9 8 4 9 7 1 1 2 1 1 2 1 1 3 3 1 6 0 8 3 3 8 1 6 1 1 8 3 3 1 1 2 1 1 7 0 8 8 4 9 7 7 8 1 8 2 2 1 1 1 3 1 1 1 2 3 1 5 7 1 6 1 5 3 3 6 1 9 0 7 8 1 2 8 1 8 8 1 2 2 2 1 2 1 1 1 1 6 0 11 1 8 8 1 5 5 7 5 2 2 2 2 1 1 3 1 1 1 6 0 10 6 6 4 4 9 1 7 6 2 2 3 1 3 1 2 1 3 3 1 1 5 4 3 7 1 5 0 11 7 6 3 2 1 5 6 1 4 7 4 1 3 2 1 2 1 6 0 7 6 1 5 1 5 7 8 2 1 1 2 3 2 1 9 0 9 2 3 8 1 4 4 9 8 3 2 1 2 2 1 2 3 2 1 3 1 1 1 4 3 2 3 6 1 9 0 7 6 6 1 1 5 3 5 1 1 2 2 3 1 2 3 3 1 5 0 10 4 2 6 5 7 5 7 1 9 4 1 3 1 1 1 1 8 0 7 1 7 1 2 6 6 8 1 1 3 3 1 1 1 1 2 4 1 1 1 1 3 7 1 5 0 8 8 1 2 3 9 3 8 6 2 1 1 1 3 1 9 0 6 9 6 7 2 9 1 3 3 2 1 1 1 2 1 2 1 9 0 8 4 8 1 2 9 6 9 8 2 3 3 2 2 2 1 1 1 3 3 1 1 5 3 4 3 4 1 6 0 7 9 1 9 7 9 4 3 1 3 2 1 1 3 1 6 0 6 9 1 5 9 5 7 1 1 2 1 3 3 1 9 0 9 5 9 3 4 4 5 1 6 3 2 1 1 3 3 1 1 3 2 1 5 5 3 4 4 6 4 4 3 4 1 5 0 10 6 5 1 2 8 6 8 1 5 5 2 3 3 3 1 1 9 0 11 8 9 5 8 6 9 3 6 1 9 1 1 1 1 2 1 3 3 3 2 1 6 0 10 5 8 9 2 9 2 1 4 1 1 3 2 1 1 1 2 4 1 2 5 3 7 1 6 0 10 4 5 7 8 4 1 8 7 4 3 1 3 1 3 2 2 1 5 0 10 1 7 2 3 1 4 2 8 3 7 1 1 1 2 2 1 7 0 7 1 2 2 2 9 4 9 2 2 2 2 1 1 1 5 5 2 2 2 1 5 3 5 1 5 0 10 5 1 4 5 4 9 3 6 7 5 2 3 1 1 2 1 9 0 9 8 6 8 1 9 5 7 8 3 3 2 1 2 3 2 1 3 2 1 6 0 6 5 4 9 1 8 1 2 1 2 1 2 2 4 2 5 2 4 3 6 1 8 0 11 8 9 7 2 6 9 8 4 3 1 5 1 2 1 1 2 1 1 2 1 7 0 10 1 3 4 5 1 7 9 9 5 3 2 1 1 3 2 3 2 1 5 0 10 7 3 9 9 4 3 7 1 6 5 1 1 3 1 1 2 3 5 2 4 2 6 5 2 4 5 3 3 5 1 8 0 10 9 5 9 2 8 1 2 1 2 7 2 1 2 1 1 1 3 2 1 9 0 8 5 8 7 9 3 1 1 4 2 2 1 1 1 3 2 1 3 1 8 0 11 9 2 1 8 9 5 8 9 4 1 3 1 2 1 2 1 1 1 3 2 1 3 1 3 3 7 1 9 0 7 6 3 5 1 5 4 1 1 1 3 1 2 1 1 3 2 1 9 0 10 4 8 9 2 1 3 8 1 5 6 2 2 3 2 1 3 1 3 3 1 8 0 8 3 4 7 6 9 8 1 4 2 2 1 1 3 3 3 3 2 5 5 1 1 4 5 3 7 1 5 0 9 9 3 6 7 4 1 9 5 8 2 1 3 1 3 1 8 0 8 6 1 5 2 1 1 9 8 1 2 1 1 2 2 1 3 1 9 0 10 6 8 4 7 1 7 4 7 6 7 1 3 2 2 1 1 3 1 2 4 5 2 2 1 1 2 3 5 1 6 0 6 7 1 6 1 5 2 3 2 3 3 1 1 1 5 0 7 6 8 2 7 1 2 6 2 2 3 3 1 1 9 0 10 1 7 1 8 1 1 4 6 6 2 2 1 3 3 3 1 1 1 3 1 5 1 4 4 3 5 1 6 0 11 1 4 1 7 3 5 4 9 9 3 6 3 1 2 2 1 1 1 7 0 9 6 9 1 6 8 6 3 2 9 2 1 2 1 2 1 3 1 8 0 11 5 8 1 9 4 5 2 8 7 8 1 3 1 1 1 3 1 1 1 1 2 2 3 4 2 4 3 5 3 3 4 1 5 0 8 4 4 4 7 2 1 2 6 2 2 2 1 1 1 9 0 10 7 6 1 3 1 6 1 1 9 2 3 1 3 2 3 1 3 1 2 1 8 0 9 4 6 1 1 9 3 2 4 6 2 2 2 2 2 1 2 3 2 4 2 5 3 6 1 9 0 6 5 1 8 2 8 6 2 1 1 3 1 3 3 1 2 1 9 0 10 9 8 7 8 6 7 3 4 1 7 2 2 3 1 2 1 3 2 2 1 8 0 11 6 7 4 4 9 1 7 5 1 7 2 1 1 1 1 2 2 1 1 3 3 1 3 5 4 3 4 1 7 0 10 4 3 5 3 7 7 5 4 7 1 2 1 3 1 2 3 3 1 8 0 10 1 3 4 4 5 1 3 9 8 4 2 2 1 1 1 1 1 3 1 6 0 11 8 2 5 1 7 1 8 4 5 6 2 1 1 1 1 1 2 1 2 4 4 3 5 1 5 0 8 1 1 8 6 2 3 7 1 1 1 2 3 1 1 6 0 7 1 1 2 1 9 3 4 3 1 2 1 1 3 1 9 0 11 1 1 8 9 4 8 7 2 6 6 7 1 2 2 3 3 1 2 1 2 3 4 4 1 3 3 5 1 5 0 9 8 6 8 7 1 7 8 8 1 2 1 1 2 2 1 7 0 11 1 6 8 1 1 7 8 1 1 8 9 3 1 3 1 1 1 3 1 8 0 10 9 9 3 1 7 8 2 9 9 5 2 3 2 3 1 1 1 2 2 3 3 5 1 7 4 4 4 5 3 4 1 6 0 6 4 7 4 4 1 8 1 3 1 1 2 3 1 9 0 7 7 5 8 1 1 2 4 3 1 3 1 2 2 2 1 2 1 9 0 9 9 9 2 5 7 1 5 1 9 1 2 1 2 1 1 2 2 2 2 1 4 5 3 5 1 6 0 11 6 3 9 1 6 1 7 1 9 5 8 2 1 3 2 1 1 1 8 0 10 9 7 8 6 9 9 1 8 1 4 3 1 2 3 1 1 1 2 1 6 0 7 1 3 3 1 8 5 4 1 2 1 1 1 2 2 3 2 3 1 3 4 1 8 0 9 5 2 1 4 5 3 2 2 4 2 2 2 3 3 3 1 1 1 6 0 7 1 6 6 4 7 7 7 1 1 1 1 1 1 1 8 0 7 2 8 1 3 8 9 6 1 1 2 3 3 1 3 1 2 3 4 5 3 5 1 8 0 10 1 5 2 7 3 5 8 4 1 7 1 3 2 3 2 1 1 1 1 7 0 8 9 1 2 6 1 6 6 4 1 2 1 1 1 3 3 1 5 0 6 1 5 8 1 6 9 2 1 3 1 2 2 1 3 1 3 5 4 4 5 1 5 5 3 5 1 7 0 6 8 9 3 5 1 2 2 3 2 2 3 1 2 1 9 0 6 9 4 1 7 1 2 2 2 2 1 2 3 1 3 2 1 6 0 7 7 5 3 9 1 3 7 1 1 3 1 3 1 3 4 1 2 4 3 6 1 5 0 10 1 9 2 5 4 8 1 7 6 5 3 1 2 1 3 1 9 0 11 8 2 6 7 7 2 4 1 4 2 5 3 2 1 2 1 3 2 2 1 1 7 0 8 1 8 2 9 6 4 6 9 1 2 3 3 2 1 1 5 4 3 1 1 3 3 5 1 9 0 9 2 9 4 1 1 9 1 9 6 1 2 1 3 1 2 3 2 1 1 9 0 10 1 7 6 8 8 8 8 7 9 9 1 2 1 2 1 3 3 3 2 1 8 0 6 9 8 8 5 7 1 2 1 3 1 3 3 1 1 1 2 5 4 3 3 7 1 8 0 7 3 3 5 8 1 6 1 1 3 3 3 1 2 2 1 1 7 0 6 8 1 1 4 4 7 2 1 3 1 2 2 1 1 5 0 7 9 3 8 1 8 9 1 1 3 2 1 2 3 3 4 1 4 1 2 3 7 1 7 0 10 9 8 5 5 8 4 1 1 2 3 3 3 3 3 2 3 1 1 6 0 6 1 2 3 9 9 3 3 3 2 1 3 1 1 6 0 9 3 2 1 1 2 6 2 1 2 1 2 1 1 1 1 5 2 4 3 4 2 2 2 3 4 6 7 3 4 3 6 2 5 5 3 4 1 5 0 9 8 7 2 6 2 8 1 9 7 2 1 3 3 3 1 8 0 6 9 4 1 1 8 7 1 2 1 2 1 2 2 1 1 7 0 9 3 8 2 3 5 7 7 7 1 3 2 1 3 1 3 2 5 3 4 1 3 5 1 9 0 11 3 9 1 2 1 4 2 2 1 9 5 1 2 3 3 1 2 2 2 1 1 5 0 11 9 2 7 1 5 4 3 7 8 4 5 2 1 3 3 1 1 7 0 9 5 8 5 7 1 4 9 2 6 3 3 3 3 3 1 2 2 2 2 4 5 3 4 1 7 0 6 5 1 7 1 6 9 3 2 1 1 3 2 1 1 5 0 9 5 6 1 5 6 2 5 8 7 3 3 3 2 1 1 5 0 7 7 3 5 5 3 1 9 2 3 1 1 2 2 5 2 4 3 4 1 9 0 8 7 6 8 2 9 9 7 1 3 1 1 2 2 1 1 2 1 1 7 0 9 6 5 9 6 7 1 9 6 2 3 1 1 3 1 1 3 1 5 0 7 1 4 7 7 5 5 5 3 3 2 1 1 1 5 1 1 3 7 1 8 0 10 7 5 2 1 9 4 5 3 6 1 3 2 3 3 1 2 1 3 1 8 0 10 7 1 7 1 2 5 8 3 2 7 2 1 3 1 1 3 3 2 1 8 0 11 6 2 7 7 1 6 8 1 1 1 6 2 1 2 3 1 2 1 1 3 2 2 3 4 2 1 2 6 1 4 2 5 5 3 5 1 7 0 7 7 1 3 1 9 2 3 1 1 2 2 3 2 1 1 6 0 8 1 8 3 5 2 3 3 6 3 3 3 2 1 1 1 5 0 9 6 8 5 8 1 1 7 7 1 1 3 2 2 1 1 4 2 4 3 3 7 1 8 0 7 9 3 7 1 8 1 7 1 1 2 1 2 1 1 2 1 9 0 9 4 1 6 2 9 1 8 5 1 1 3 3 2 1 3 3 2 1 1 9 0 11 8 7 1 7 9 4 9 7 4 5 9 3 3 3 2 2 1 2 3 2 5 3 1 2 1 4 4 3 5 1 7 0 8 1 5 5 9 7 3 1 2 1 3 1 1 2 2 1 1 8 0 6 2 7 7 9 1 2 2 1 2 2 1 1 2 1 1 5 0 6 4 1 1 4 9 4 1 1 3 3 2 1 3 3 1 2 3 6 1 8 0 7 3 6 6 4 2 1 6 3 3 2 1 2 2 1 2 1 6 0 10 4 6 8 5 9 9 4 5 1 7 3 3 2 3 1 3 1 9 0 7 8 7 7 5 1 9 4 1 3 1 2 1 2 1 1 3 4 4 3 3 4 1 3 6 1 8 0 7 4 1 6 5 3 5 5 1 1 1 3 1 2 2 1 1 7 0 10 6 5 5 6 5 7 1 4 3 6 3 3 3 1 1 3 1 1 9 0 11 1 2 3 5 8 2 2 6 1 6 5 1 3 2 1 1 1 1 1 1 2 1 1 1 3 2 6 3 5 2 7 5 5 3 5 1 9 0 6 6 8 5 1 2 1 2 1 1 1 2 3 2 2 1 1 8 0 6 6 3 7 4 7 1 2 1 1 1 1 1 2 2 1 6 0 8 7 8 2 1 4 7 2 7 3 1 1 2 2 3 5 1 3 5 5 3 7 1 6 0 8 3 8 5 2 7 5 1 6 1 3 3 2 3 1 1 9 0 8 1 1 3 2 1 8 8 5 3 1 1 1 2 3 1 2 2 1 7 0 9 3 1 8 5 4 3 4 6 3 3 3 2 2 3 1 1 1 2 1 3 1 3 3 3 6 1 6 0 6 1 4 3 3 9 9 2 1 2 1 1 1 1 6 0 6 1 2 9 5 6 4 1 1 3 1 2 3 1 6 0 9 2 1 8 1 8 5 2 7 7 2 3 2 1 3 1 1 4 4 1 5 1 3 6 1 8 0 7 4 4 5 1 2 3 7 3 1 1 1 2 2 2 2 1 5 0 9 1 1 9 6 3 9 5 7 5 2 1 3 2 1 1 5 0 11 3 3 7 7 1 5 1 2 8 7 1 1 1 2 1 1 1 2 2 5 5 2 3 7 1 7 0 11 6 1 3 4 8 3 8 1 1 8 9 3 3 1 3 2 2 3 1 8 0 11 9 8 5 7 1 8 7 2 6 5 5 1 2 3 1 1 2 1 1 1 8 0 9 3 5 5 7 1 9 5 5 6 2 3 2 1 2 1 2 2 1 2 5 2 3 3 1 1 5 4 3 7 4 5 3 5 1 5 0 11 1 9 9 2 9 2 7 2 2 9 7 3 3 1 3 2 1 9 0 8 4 2 6 1 8 8 2 9 1 1 1 1 2 1 1 2 3 1 8 0 11 3 9 6 3 6 4 9 2 1 7 1 2 3 2 3 1 2 3 1 3 3 2 3 2 3 6 1 9 0 7 9 8 2 9 7 1 3 3 3 2 1 1 1 1 3 1 1 5 0 6 6 2 1 6 1 6 1 1 1 1 1 1 5 0 10 7 5 5 5 7 6 1 1 2 1 2 2 2 1 3 5 1 3 4 3 3 3 6 1 7 0 7 1 4 2 9 9 1 5 1 2 3 2 2 1 3 1 6 0 8 8 6 7 8 4 1 9 3 2 1 2 2 1 1 1 9 0 10 8 1 5 5 6 9 7 5 5 8 2 1 3 2 1 3 1 2 2 3 5 3 1 1 3 3 4 1 8 0 7 4 6 1 7 2 4 6 2 2 1 1 3 3 2 2 1 7 0 11 2 8 1 5 2 5 8 7 9 1 7 3 1 3 3 3 2 1 1 5 0 9 6 5 6 9 1 5 6 9 2 2 1 3 3 1 1 3 4 3 3 6 6 6 3 5 4 3 5 1 7 0 6 7 1 6 1 2 2 1 1 1 1 3 2 2 1 7 0 10 6 2 2 3 8 4 1 4 3 7 1 1 1 2 1 3 3 1 7 0 9 1 5 9 2 7 8 2 9 7 2 3 2 1 3 2 1 2 3 2 1 4 3 5 1 8 0 11 7 9 7 3 9 8 6 5 3 1 3 3 1 1 2 2 1 3 3 1 6 0 6 1 1 5 4 1 1 3 1 1 2 2 1 1 7 0 9 8 3 5 4 6 9 1 6 3 2 3 1 1 2 2 2 5 1 1 2 1 3 6 1 7 0 11 3 1 6 3 3 9 8 7 9 7 3 1 3 3 2 2 3 3 1 9 0 8 1 5 1 4 2 3 3 3 1 2 2 1 1 3 1 1 1 1 6 0 8 3 8 3 1 5 6 3 2 1 1 2 2 3 3 1 3 2 4 4 5 3 5 1 8 0 6 9 6 5 9 9 1 3 2 3 1 3 2 2 3 1 6 0 7 5 5 2 8 1 2 6 1 1 1 3 1 2 1 5 0 6 1 4 1 2 1 4 2 1 1 3 2 4 5 3 1 4 3 6 1 6 0 7 1 9 7 7 5 1 3 2 3 1 1 3 3 1 7 0 10 2 3 2 1 3 9 2 6 4 1 1 1 3 2 1 3 2 1 7 0 7 8 1 1 6 1 5 2 1 2 2 3 2 1 3 2 1 5 2 2 5 2 4 5 4 5 5 3 4 1 5 0 9 5 7 8 1 8 9 1 6 1 3 3 2 2 1 1 9 0 8 3 5 1 5 1 8 9 7 3 1 2 3 1 2 1 3 1 1 8 0 8 1 2 5 5 7 4 5 9 2 1 1 1 2 1 3 1 4 5 1 1 3 5 1 6 0 7 9 5 1 1 6 2 3 1 1 3 1 1 3 1 8 0 9 6 7 4 2 8 1 6 6 7 1 2 2 2 1 2 1 1 1 7 0 8 2 2 5 6 7 5 3 1 2 3 1 2 1 3 2 2 2 2 3 3 3 5 1 5 0 10 3 7 8 3 1 3 7 8 8 7 2 1 2 3 1 1 9 0 8 4 3 1 4 7 3 1 3 3 3 3 1 3 1 3 1 1 1 9 0 11 1 6 6 5 1 8 2 9 1 5 9 3 2 3 2 1 3 2 3 1 2 1 3 5 1 3 5 1 8 0 7 9 4 5 3 1 3 7 1 1 1 2 1 1 3 3 1 9 0 11 6 1 4 8 8 4 9 8 1 9 5 1 3 1 1 1 1 2 3 2 1 7 0 7 9 1 9 1 2 8 4 1 2 1 2 2 3 1 3 4 5 2 1 3 4 1 5 0 10 8 3 8 9 6 5 5 1 2 8 3 1 3 2 1 1 9 0 10 9 9 1 1 4 8 1 6 5 4 2 3 3 2 1 1 3 2 1 1 7 0 9 3 2 2 1 8 1 5 4 2 1 2 3 1 3 1 1 3 1 3 1 5 7 5 5 6 1 3 7 2 4 3 3 6 1 9 0 7 6 8 9 2 1 3 3 2 3 1 3 1 2 3 1 2 1 6 0 8 8 4 3 1 9 9 7 7 3 2 3 1 1 1 1 6 0 9 6 5 1 6 1 5 8 3 3 1 1 1 1 3 1 2 3 2 5 2 2 3 6 1 9 0 9 1 6 7 2 4 1 6 1 9 2 1 2 3 3 2 3 2 2 1 6 0 7 8 9 1 3 8 1 8 3 1 2 2 2 1 1 7 0 10 8 9 3 3 9 2 3 1 8 4 1 3 1 3 3 1 2 3 5 3 1 1 1 3 5 1 9 0 7 2 7 1 8 5 7 9 3 3 3 2 3 1 2 2 1 1 9 0 10 8 4 7 6 1 8 5 9 8 1 2 1 3 3 2 2 3 3 1 1 6 0 11 5 4 3 4 6 1 3 9 6 7 1 3 1 1 1 2 1 5 1 2 2 2 3 5 1 8 0 8 1 5 8 8 2 1 1 8 2 2 1 3 1 1 1 1 1 6 0 7 1 9 8 1 5 4 7 2 3 3 1 3 2 1 9 0 6 6 7 9 7 2 1 3 3 1 2 2 2 2 2 3 3 1 1 3 1 1 5 2 4 3 3 4 1 5 0 11 1 3 6 2 1 8 1 5 2 3 6 3 1 2 1 1 1 8 0 9 1 1 7 9 1 3 8 1 7 2 3 2 2 1 1 3 3 1 7 0 10 4 8 3 9 5 8 1 2 4 5 1 3 1 2 3 2 3 2 5 5 2 3 4 1 5 0 8 7 1 9 8 8 8 3 9 2 2 1 1 3 1 5 0 9 9 4 7 1 8 2 1 1 5 1 2 3 2 3 1 6 0 11 5 8 1 9 8 1 1 5 3 5 2 1 3 1 2 2 2 4 3 4 1 3 6 1 8 0 10 7 1 3 1 5 9 2 5 9 1 2 1 2 1 1 2 3 3 1 9 0 9 5 1 8 5 6 8 9 1 4 1 1 3 3 3 1 3 3 2 1 6 0 9 3 1 8 6 7 1 1 9 9 2 2 2 1 2 1 5 5 5 2 3 5 3 7 1 8 0 6 4 9 4 4 1 3 3 2 2 3 2 3 1 1 1 5 0 6 4 5 1 7 4 7 1 2 3 3 2 1 7 0 8 2 5 7 5 8 6 2 1 1 3 2 1 3 1 3 2 4 4 4 4 3 5 3 2 4 5 5 3 7 1 7 0 10 1 5 3 2 3 6 1 1 1 4 1 1 3 1 1 2 1 1 8 0 6 2 3 3 1 1 9 1 1 2 3 3 3 1 2 1 8 0 6 2 1 8 5 3 2 1 1 3 2 1 2 1 1 5 5 1 2 5 5 4 3 4 1 6 0 6 1 9 7 5 1 4 2 3 3 3 1 1 1 8 0 11 3 3 3 2 2 1 4 9 3 2 4 3 1 3 3 1 1 2 2 1 8 0 7 1 8 3 9 3 4 3 1 3 2 2 1 1 3 2 1 5 3 2 3 6 1 9 0 6 2 1 6 3 3 5 2 1 1 3 2 2 2 2 1 1 8 0 9 2 6 1 5 6 7 4 5 3 3 1 1 1 3 3 3 3 1 5 0 11 7 4 4 4 1 9 9 8 1 2 9 1 1 1 1 2 2 1 3 2 4 3 3 7 1 8 0 9 4 6 7 6 9 1 3 2 9 1 1 1 1 1 3 2 3 1 5 0 6 1 4 7 8 6 2 2 2 1 2 1 1 6 0 11 2 7 2 2 1 5 9 6 9 1 1 1 3 2 3 1 1 3 1 2 3 3 4 4 3 7 1 8 0 6 8 4 8 6 2 1 3 3 1 3 2 3 2 1 1 5 0 9 4 7 9 2 1 2 5 6 1 1 2 1 3 1 1 6 0 6 4 1 9 9 8 2 1 3 3 3 1 1 1 1 5 3 3 1 1 1 1 3 1 1 4 4 3 5 1 7 0 7 4 2 3 1 2 9 8 2 3 3 1 1 3 1 1 7 0 6 1 2 1 5 2 3 1 1 1 3 1 2 2 1 7 0 8 1 9 4 5 1 5 9 4 1 2 2 1 1 3 1 1 1 5 2 1 3 7 1 7 0 8 9 1 7 1 7 3 3 5 1 1 2 3 1 1 1 1 6 0 11 6 1 8 5 3 6 9 7 1 8 5 1 1 1 1 3 3 1 6 0 9 2 3 7 9 7 1 5 3 1 2 2 1 1 3 3 5 4 5 4 1 1 4 3 4 1 7 0 6 3 7 7 5 4 1 1 1 2 3 3 1 2 1 6 0 10 7 1 5 2 3 6 6 5 8 4 1 2 1 2 1 1 1 9 0 10 7 3 8 3 5 5 3 1 1 9 1 1 3 3 3 2 1 1 1 3 1 2 3 3 4 1 8 0 10 7 6 2 8 7 1 6 6 6 4 3 1 2 2 3 3 2 3 1 6 0 7 1 7 2 9 4 4 1 3 1 3 2 1 3 1 7 0 11 2 1 3 5 7 9 1 7 6 7 9 2 3 3 3 1 1 1 3 4 1 2 3 2 3 5 5 3 3 4 1 9 0 7 9 6 8 9 1 4 7 3 3 1 3 1 2 3 1 1 1 9 0 7 8 9 1 1 5 1 8 3 2 2 1 3 1 3 1 2 1 5 0 8 5 8 1 6 5 1 8 1 1 3 1 3 1 1 4 3 4 3 6 1 5 0 6 8 8 5 7 1 1 2 1 2 1 1 1 7 0 9 1 2 2 3 9 2 2 1 3 3 1 1 2 3 1 2 1 5 0 9 6 5 1 1 9 4 4 3 2 1 1 2 3 1 4 5 5 3 3 3 3 4 1 9 0 8 2 5 2 1 5 1 6 6 2 3 1 2 3 2 3 1 2 1 9 0 6 1 5 6 1 1 1 2 1 1 1 1 1 1 1 1 1 9 0 9 2 2 8 5 4 5 7 4 1 3 1 3 1 1 3 2 2 3 2 1 4 1 3 5 1 9 0 11 6 9 5 4 1 8 3 8 3 9 6 1 1 3 3 2 1 1 1 3 1 7 0 10 1 1 2 6 8 1 3 1 6 8 2 1 1 3 1 1 3 1 8 0 11 5 1 9 1 1 1 9 2 5 3 9 2 2 1 1 2 2 1 3 1 1 1 4 5 3 5 1 8 0 8 1 3 2 3 7 1 2 9 3 2 2 2 1 2 1 1 1 6 0 10 2 6 1 1 6 7 1 6 7 2 3 1 1 3 2 1 1 8 0 11 8 7 1 9 2 4 4 6 8 8 2 2 3 1 3 2 3 1 2 1 3 1 5 1 2 5 2 4 4 3 7 1 7 0 8 2 1 8 2 9 5 2 1 1 2 2 2 2 3 1 1 7 0 8 9 7 3 6 5 6 1 4 1 1 1 3 1 2 3 1 7 0 7 3 6 1 9 1 8 7 2 1 1 2 1 2 1 4 4 3 3 1 3 2 3 7 1 8 0 10 5 6 3 1 3 9 1 3 5 4 3 2 2 3 1 1 3 1 1 5 0 6 1 1 5 2 7 2 1 1 2 1 1 1 7 0 8 3 6 1 4 2 8 2 4 1 1 2 1 3 1 1 3 5 2 2 5 1 2 3 4 1 8 0 11 1 6 1 5 7 5 6 1 8 4 5 1 2 2 1 1 1 1 3 1 8 0 8 1 7 9 7 4 3 5 9 2 1 2 3 1 3 1 1 1 8 0 7 4 5 1 8 1 9 4 1 2 3 2 2 1 1 1 4 3 3 1 3 7 1 5 0 7 9 1 1 9 5 1 8 3 3 2 1 2 1 8 0 10 9 8 8 5 7 3 3 1 5 7 2 2 3 3 1 1 1 2 1 8 0 10 4 1 1 4 9 6 9 3 3 9 3 1 3 2 1 1 3 3 1 1 1 1 2 5 1 3 2 5 6 4 3 3 5 1 6 0 6 3 1 6 2 2 1 1 1 3 3 3 3 1 7 0 9 3 8 6 8 8 8 1 6 2 2 3 3 1 2 2 1 1 6 0 9 5 8 4 2 3 4 1 2 3 2 2 2 3 1 1 3 2 2 5 1 3 7 1 7 0 7 9 9 9 5 4 7 1 2 1 2 1 2 2 1 1 5 0 10 3 6 1 1 2 1 2 1 7 6 3 3 1 3 2 1 5 0 8 1 9 7 1 3 3 1 3 1 3 3 1 3 3 1 2 2 3 1 3 3 6 1 6 0 8 4 1 5 4 3 1 8 4 2 3 1 1 3 2 1 7 0 7 3 9 1 9 1 3 2 1 2 3 2 1 1 1 1 8 0 11 8 7 6 1 1 4 6 9 5 9 5 2 2 3 2 3 3 2 1 5 5 1 1 1 5 3 4 1 8 0 7 3 4 1 9 7 3 4 2 3 1 3 2 1 1 2 1 7 0 11 1 1 1 8 8 5 3 4 8 9 5 1 2 1 3 3 2 3 1 9 0 10 7 4 1 1 7 7 9 1 2 2 3 2 1 1 3 3 1 3 1 5 1 5 3 3 2 5 3 4 7 2 5 5 3 7 1 5 0 9 1 1 2 4 3 9 4 1 8 3 1 3 2 3 1 9 0 8 1 4 3 5 3 1 3 7 2 1 1 3 2 3 1 2 2 1 9 0 10 9 6 5 9 7 1 1 3 9 5 3 1 1 2 3 1 2 2 2 1 2 3 2 5 3 4 3 5 1 7 0 9 5 3 9 1 7 7 9 7 1 1 1 2 3 1 2 2 1 6 0 10 8 5 3 4 1 1 1 7 8 6 1 2 2 2 2 3 1 6 0 6 2 1 6 4 8 7 2 2 1 3 1 2 3 5 2 4 3 3 6 1 9 0 11 8 9 1 8 1 4 2 5 3 3 4 2 2 2 3 2 3 2 2 1 1 8 0 8 4 5 6 1 1 9 1 9 3 1 1 1 1 3 2 1 1 7 0 6 1 7 6 5 2 4 2 3 1 3 1 2 1 4 1 4 2 1 4 3 4 1 7 0 6 3 6 6 1 2 1 1 3 1 1 2 2 3 1 7 0 8 3 7 6 3 1 6 1 7 3 1 1 3 1 1 3 1 9 0 9 5 3 3 6 3 3 9 6 1 1 1 1 1 3 2 1 3 1 2 3 1 1 3 6 1 9 0 6 2 7 2 1 9 4 1 1 1 3 1 2 1 1 2 1 9 0 6 1 1 2 8 5 8 1 3 1 1 1 2 1 1 3 1 5 0 9 4 7 7 9 4 7 1 9 2 3 1 2 2 2 1 4 3 5 4 3 5 3 5 1 4 4 4 3 5 1 7 0 8 2 3 1 1 8 5 9 5 1 3 2 1 2 3 1 1 7 0 9 8 5 1 1 7 1 1 5 3 1 1 1 3 3 1 3 1 6 0 7 1 1 1 5 6 5 4 3 3 1 3 3 1 5 2 4 5 1 3 6 1 5 0 11 5 9 1 1 2 2 9 1 7 4 6 1 2 1 1 2 1 6 0 6 9 1 6 5 2 8 2 2 2 3 1 1 1 8 0 7 4 6 4 2 4 3 1 1 1 3 2 3 2 3 1 3 4 2 4 2 1 3 4 1 7 0 10 8 6 6 6 1 1 8 8 5 5 3 1 3 1 3 1 3 1 8 0 8 7 1 7 4 9 2 4 8 2 1 1 1 1 3 1 3 1 7 0 11 1 1 1 8 6 2 3 8 1 8 3 1 1 1 2 3 1 3 2 4 3 3 3 6 1 6 0 6 3 9 5 5 1 5 3 3 1 1 1 1 1 6 0 11 2 1 6 8 5 8 9 8 7 1 8 1 1 1 3 3 3 1 8 0 6 6 9 7 7 1 4 3 1 3 3 2 1 1 1 3 5 3 1 3 2 3 2 1 3 4 5 3 6 1 9 0 6 4 3 7 7 1 2 3 3 1 1 3 3 2 3 3 1 8 0 11 1 4 2 5 9 3 2 1 3 3 5 2 3 1 1 2 2 1 1 1 5 0 9 1 4 9 8 1 7 7 8 5 3 1 2 3 1 4 5 5 2 4 4 3 4 1 8 0 6 6 2 1 9 5 9 3 1 1 1 1 1 3 3 1 5 0 9 2 4 6 8 2 8 1 8 7 1 3 1 3 1 1 9 0 6 7 1 8 7 9 4 1 1 1 3 1 2 1 3 2 1 2 2 1 3 6 1 6 0 11 6 3 8 3 6 9 2 4 6 8 1 1 3 2 1 3 2 1 6 0 7 7 3 4 9 3 1 1 3 2 2 1 3 1 1 7 0 6 2 9 6 1 4 8 2 1 3 1 1 2 2 4 1 1 3 5 3 3 7 1 7 0 6 2 1 1 6 6 4 2 1 1 3 3 2 1 1 9 0 7 5 7 9 1 7 5 1 1 1 2 2 2 1 3 1 2 1 8 0 11 1 3 7 9 2 1 6 4 2 1 4 3 2 3 2 1 2 1 2 4 1 1 4 4 3 4 1 4 2 5 3 4 5 3 4 1 5 0 6 2 8 5 1 9 7 3 1 1 3 2 1 8 0 11 7 8 4 4 3 5 8 8 1 2 7 2 1 1 1 3 1 3 3 1 7 0 6 3 4 2 1 3 5 1 1 3 2 1 3 3 3 3 2 5 3 6 1 5 0 6 1 9 6 3 9 1 1 3 2 1 1 1 7 0 9 9 8 1 8 1 9 8 8 9 2 3 1 3 1 3 3 1 5 0 9 1 8 1 9 1 6 7 6 9 1 1 1 2 2 3 2 2 4 1 5 3 6 1 5 0 7 2 3 7 1 3 1 3 3 3 3 1 3 1 7 0 8 2 9 1 5 6 2 7 6 1 1 2 1 1 3 2 1 6 0 9 1 5 8 4 6 4 6 1 5 3 1 3 2 1 1 3 2 4 3 5 5 3 5 1 7 0 8 6 8 9 4 4 2 1 6 1 1 3 2 3 1 1 1 6 0 7 4 5 5 7 8 1 4 3 2 3 1 3 1 1 9 0 8 3 1 5 6 2 4 9 4 2 3 1 1 2 2 2 1 2 2 1 2 1 3 3 3 4 1 5 4 5 3 6 1 5 0 9 9 2 5 6 1 5 5 7 4 3 2 1 1 2 1 8 0 10 9 9 1 4 2 2 4 2 6 1 1 1 3 3 2 2 3 1 1 9 0 8 5 9 8 6 1 6 6 1 1 3 3 1 1 1 1 2 1 5 4 4 1 3 3 3 4 1 7 0 8 6 8 5 8 3 2 9 1 1 3 1 2 2 1 1 1 6 0 8 1 5 3 4 5 2 1 1 1 1 2 2 1 3 1 5 0 9 1 1 2 9 1 1 4 7 6 1 2 1 1 1 4 1 2 1 3 4 1 9 0 11 4 9 8 4 1 2 3 8 3 8 3 1 1 1 1 2 1 3 1 2 1 6 0 10 3 9 1 7 8 5 1 8 7 6 3 2 1 1 3 1 1 7 0 7 7 1 4 4 7 4 7 2 2 2 3 3 1 2 2 5 1 3 3 4 1 9 0 6 5 1 3 1 9 9 1 3 2 1 3 1 2 3 2 1 6 0 9 6 4 1 5 4 7 5 9 7 3 2 1 3 1 1 1 7 0 10 7 3 3 6 4 1 1 1 7 6 2 1 3 2 1 2 3 5 3 1 3 2 6 2 5 4 5 4 3 4 1 5 0 11 9 9 7 1 5 4 6 5 8 3 4 2 2 1 1 1 1 5 0 11 6 1 9 9 1 3 7 5 4 4 1 2 2 3 1 1 1 9 0 11 9 1 4 6 5 2 1 4 9 2 5 1 2 3 1 1 2 3 2 3 1 2 4 3 3 6 1 9 0 7 6 5 8 5 1 7 4 1 3 3 1 2 3 1 2 1 1 7 0 10 2 8 9 7 3 2 1 2 4 1 3 1 2 3 3 2 3 1 8 0 8 6 2 4 6 1 1 8 5 2 1 3 3 3 1 1 3 3 1 1 5 1 4 3 5 1 6 0 7 2 9 7 1 8 6 8 1 1 1 3 3 1 1 5 0 10 9 4 8 4 4 1 7 8 4 2 1 1 3 2 2 1 8 0 6 5 7 7 3 1 3 2 3 1 3 2 1 1 1 1 3 2 3 5 3 6 1 5 0 9 5 7 2 5 8 2 4 2 1 2 1 1 2 1 1 8 0 8 7 9 9 9 2 1 4 1 1 1 2 3 1 1 1 1 1 5 0 8 1 5 5 2 3 6 1 1 3 2 3 1 1 5 1 5 4 2 4 3 7 1 5 0 11 2 8 6 1 1 8 4 1 3 8 9 3 2 1 2 1 1 8 0 10 4 8 2 7 2 7 8 4 1 9 3 3 3 1 2 2 1 2 1 6 0 8 5 9 9 7 1 1 4 5 1 3 3 1 1 1 1 2 1 4 5 5 3 1 2 2 1 5 5 3 6 1 8 0 11 3 2 7 8 7 6 1 8 8 5 6 1 2 3 1 1 2 3 1 1 9 0 10 3 3 3 2 2 9 2 4 5 1 1 1 3 1 1 1 2 2 3 1 9 0 7 2 3 1 6 8 2 6 1 3 1 3 1 1 2 1 2 1 3 2 3 2 3 3 7 1 8 0 6 3 9 3 9 1 9 1 1 1 3 1 3 2 3 1 9 0 10 4 8 8 8 6 6 9 1 6 3 1 2 3 3 2 3 1 3 3 1 7 0 10 1 2 2 6 3 3 6 5 1 1 2 1 2 3 1 3 1 1 2 5 1 4 3 4 3 4 1 5 0 9 2 8 6 9 2 1 6 6 2 2 2 3 1 2 1 8 0 10 4 1 7 4 6 6 8 7 2 2 1 2 1 3 1 2 2 1 1 9 0 10 1 5 4 5 2 8 6 6 6 4 2 2 1 3 3 3 1 1 1 3 4 3 5 3 6 1 6 0 9 6 4 6 4 1 1 1 5 9 2 1 2 2 3 2 1 6 0 8 2 7 8 1 8 9 2 7 3 1 3 1 3 1 1 6 0 7 3 2 5 3 2 1 1 1 2 1 3 3 3 5 5 3 5 2 2 3 5 1 9 0 6 2 7 7 1 7 4 2 3 2 1 3 1 1 1 1 1 6 0 6 6 5 7 2 5 1 2 3 1 1 1 1 1 5 0 11 2 4 2 5 3 6 1 4 1 2 5 1 3 3 2 1 2 2 5 1 1 5 1 4 5 4 3 5 6 3 5 4 3 4 1 8 0 6 1 7 9 9 6 9 2 3 1 1 3 1 1 3 1 7 0 8 5 7 1 7 3 6 4 7 3 2 1 3 2 3 1 1 5 0 8 1 7 1 4 7 3 9 4 2 1 2 2 2 1 5 4 3 3 6 1 9 0 8 4 8 6 7 2 1 4 8 1 3 3 2 3 3 3 2 1 1 8 0 9 9 1 3 1 1 7 8 8 3 1 1 3 3 2 1 1 3 1 6 0 11 2 5 8 9 4 7 1 4 8 7 1 3 1 3 2 1 1 5 4 5 2 5 3 3 7 1 7 0 6 1 7 8 3 7 7 2 3 1 1 3 1 1 1 7 0 6 6 7 8 1 8 5 2 1 3 2 1 1 3 1 9 0 8 1 5 3 6 1 1 8 1 3 3 3 1 2 2 3 1 1 4 1 3 5 3 1 5 3 6 1 6 0 6 3 4 8 8 1 5 1 1 3 2 3 1 1 8 0 11 6 5 6 1 4 3 5 4 5 4 4 2 1 1 2 3 1 1 3 1 6 0 7 2 9 3 2 3 1 3 1 2 1 1 1 3 4 5 1 1 3 4 3 6 1 9 0 10 8 5 1 1 5 9 7 3 3 7 1 3 2 1 2 1 2 1 3 1 7 0 11 1 9 2 2 8 9 7 2 2 3 4 2 1 1 1 2 2 3 1 8 0 9 1 4 1 4 8 2 8 1 6 3 3 2 1 2 1 3 3 2 3 5 4 1 4 5 1 5 4 4 3 3 4 1 6 0 8 1 9 1 4 4 9 5 3 1 1 1 2 1 3 1 7 0 8 5 1 1 8 5 2 9 4 1 1 3 3 1 3 1 1 5 0 9 1 9 7 3 8 7 8 8 2 1 1 2 2 1 2 5 4 1 3 7 1 8 0 8 8 8 4 5 5 8 5 1 2 3 3 3 2 1 2 3 1 8 0 6 9 1 1 4 8 3 1 2 1 2 3 3 2 3 1 5 0 7 8 1 6 5 8 1 2 2 1 2 1 2 3 1 5 3 2 5 5 3 6 1 9 0 7 3 5 9 4 9 1 1 1 2 3 1 2 1 1 1 3 1 7 0 9 8 1 7 3 3 1 2 5 8 2 3 3 1 3 1 3 1 9 0 6 8 6 1 7 3 4 1 1 2 3 3 2 3 1 3 4 1 4 3 5 3 3 5 1 5 0 11 1 4 8 4 7 2 5 7 1 4 5 1 1 1 3 3 1 7 0 10 5 4 6 5 6 9 1 2 4 1 3 1 1 2 3 3 1 1 7 0 11 7 7 8 1 1 8 3 6 3 2 2 1 3 1 3 3 2 1 3 1 3 1 3 2 4 4 4 3 3 7 1 5 0 8 5 3 8 8 2 1 1 4 3 2 1 1 1 1 9 0 7 6 7 6 1 2 6 4 1 3 2 1 2 1 3 1 3 1 6 0 7 7 6 1 7 4 2 9 2 3 1 2 3 3 5 4 3 3 3 1 1 3 7 1 5 0 10 9 8 9 6 2 2 1 3 1 1 1 1 2 2 1 1 7 0 11 4 7 4 5 4 1 4 1 2 8 7 3 3 2 1 1 2 3 1 7 0 10 1 8 1 1 1 5 1 9 5 4 2 1 1 2 3 1 3 5 1 4 3 5 5 5 3 7 1 9 0 10 7 3 2 1 7 2 3 7 7 1 1 1 2 3 1 2 3 2 1 1 8 0 7 1 1 1 2 2 3 9 2 2 1 1 2 1 3 2 1 6 0 10 2 2 8 1 7 9 6 6 2 8 1 3 1 3 2 1 1 3 1 1 4 1 5 3 5 1 8 0 11 7 9 1 3 9 2 6 1 1 1 3 1 2 1 1 2 1 2 2 1 8 0 9 8 9 2 8 2 5 4 1 7 1 1 2 3 2 2 1 3 1 9 0 7 1 1 6 4 1 4 8 3 2 1 3 1 3 3 3 2 3 2 1 1 4 4 4 4 4 3 3 4 1 9 0 11 9 1 9 3 5 1 5 5 7 5 5 1 2 2 1 3 3 1 2 1 1 9 0 8 6 9 1 7 8 1 9 2 1 2 3 2 1 2 3 3 3 1 9 0 10 8 9 1 4 5 7 1 7 1 7 1 1 3 1 2 1 3 1 2 5 4 1 2 3 5 1 9 0 9 9 7 3 1 1 8 8 6 6 1 2 2 3 2 3 3 1 2 1 6 0 7 7 1 6 5 5 8 6 3 1 1 3 1 2 1 6 0 7 2 2 1 3 6 4 6 1 3 3 3 2 2 1 1 4 1 1 3 5 1 5 0 9 2 9 2 2 3 1 2 9 8 1 1 3 1 1 1 9 0 9 2 5 2 4 7 4 1 5 1 2 1 1 1 1 3 3 1 1 1 5 0 9 9 8 4 4 5 2 6 6 1 1 2 3 3 2 3 1 1 5 3 3 7 1 7 0 11 5 6 7 5 1 4 1 9 2 1 4 1 2 2 2 3 1 1 1 9 0 11 8 6 3 5 4 1 9 8 4 4 6 3 2 2 1 1 2 3 3 3 1 7 0 11 8 5 3 9 8 2 1 4 4 8 2 1 3 3 2 3 1 1 5 2 3 1 1 2 5 4 1 3 5 5 3 5 1 9 0 9 8 5 1 1 2 2 8 1 2 2 1 1 1 2 3 1 2 2 1 8 0 11 3 1 5 8 1 4 6 7 1 2 6 2 1 1 3 1 1 2 1 1 9 0 9 1 5 2 5 5 1 2 8 7 1 3 1 1 3 3 2 3 3 5 4 5 1 1 3 7 1 6 0 7 5 6 1 9 7 1 8 1 1 3 1 3 3 1 5 0 6 4 6 1 8 2 2 1 3 1 3 1 1 5 0 10 9 9 7 7 8 1 1 8 9 4 1 2 3 1 1 5 1 1 4 2 1 3 3 6 1 6 0 8 9 4 2 7 4 5 1 7 1 3 2 3 3 1 1 7 0 8 6 6 1 9 8 7 2 2 3 3 2 3 1 3 1 1 6 0 6 4 6 8 1 6 2 2 2 1 1 1 2 3 4 4 2 2 1 3 4 1 7 0 8 3 2 8 9 1 5 1 5 1 2 3 2 3 3 1 1 8 0 11 4 2 1 3 5 4 5 2 4 1 6 1 2 3 3 3 1 1 1 1 7 0 8 6 8 4 1 9 2 9 5 2 1 3 1 1 1 3 3 2 2 1 3 5 1 5 0 6 8 1 7 9 8 2 1 2 1 1 1 1 9 0 9 2 1 7 8 1 9 2 2 9 3 1 2 1 3 1 2 1 1 1 5 0 9 3 7 5 3 7 1 3 4 5 1 3 3 3 1 5 2 1 1 1 1 7 4 2 4 4 4 3 4 1 5 0 8 1 5 1 2 6 8 2 3 2 1 2 2 1 1 6 0 8 1 4 7 3 7 1 4 7 3 1 1 1 2 1 1 7 0 10 6 4 3 6 5 1 5 9 3 8 1 1 3 2 3 3 1 5 4 2 3 3 4 1 5 0 7 9 1 8 9 2 5 2 1 3 3 3 1 1 9 0 11 9 1 7 2 6 7 9 9 2 4 9 3 1 3 1 3 1 3 2 1 1 5 0 7 1 5 1 5 1 7 3 2 1 1 2 1 1 2 2 5 3 5 1 7 0 10 8 1 7 7 1 7 3 3 7 3 3 3 1 3 1 3 2 1 7 0 7 9 3 4 1 6 4 1 3 1 2 1 3 1 2 1 7 0 8 8 6 1 3 3 4 8 3 3 3 2 2 1 1 1 3 1 3 4 4 3 7 1 9 0 11 1 5 9 5 7 9 2 8 6 1 4 1 3 2 2 3 1 2 1 1 1 5 0 9 5 5 6 8 5 2 3 1 2 1 3 3 1 1 1 7 0 8 1 6 2 5 4 1 2 1 1 2 1 2 1 3 2 5 4 3 3 1 2 4 3 3 1 3 5 4 3 6 2 5 5 3 7 1 6 0 6 7 1 1 5 3 9 1 2 1 2 1 1 1 7 0 7 3 1 1 3 7 3 6 1 3 3 1 3 1 2 1 7 0 11 2 6 2 4 6 8 2 6 6 7 1 1 1 3 3 2 3 1 3 2 3 1 1 3 2 3 4 1 7 0 11 6 5 4 7 7 6 1 8 6 6 9 1 3 2 1 1 1 2 1 5 0 11 4 6 6 3 8 7 9 1 1 2 1 2 1 2 1 2 1 7 0 8 8 1 6 8 1 5 2 1 1 1 1 3 1 2 1 3 5 1 2 3 6 1 8 0 7 6 5 3 1 5 4 3 1 2 1 3 2 3 1 1 1 6 0 7 1 1 5 5 3 2 8 1 2 2 1 3 1 1 8 0 8 1 1 4 8 2 1 9 8 2 3 3 1 1 3 1 3 1 2 5 2 2 2 3 4 1 5 0 9 7 4 5 8 1 2 4 7 4 3 1 3 2 2 1 9 0 6 6 9 1 9 4 6 2 1 2 3 1 2 1 2 3 1 5 0 10 1 6 2 5 6 3 6 5 9 9 1 2 1 3 3 1 1 1 2 3 7 1 5 0 8 9 1 2 5 8 1 1 6 1 1 1 3 3 1 6 0 10 4 6 7 6 9 4 8 1 3 9 3 2 1 3 1 1 1 6 0 6 5 2 6 1 9 8 1 1 1 1 1 3 1 2 1 1 2 3 2 3 6 5 2 4 5 5 3 6 1 7 0 6 1 3 7 5 3 1 3 3 3 2 2 3 1 1 5 0 10 6 1 7 6 9 6 9 4 5 8 2 1 1 2 3 1 7 0 10 2 9 5 9 2 4 7 8 1 5 1 3 1 3 1 3 1 2 2 3 5 3 3 3 4 1 9 0 7 9 9 1 4 9 5 1 1 1 1 1 1 1 2 3 2 1 5 0 8 6 8 4 6 3 7 1 2 1 1 2 3 2 1 7 0 11 5 5 3 7 1 9 5 7 6 4 4 2 3 2 2 2 3 1 5 3 3 2 3 5 1 5 0 10 1 4 1 8 2 2 5 6 4 7 1 3 2 2 3 1 7 0 10 3 4 7 9 1 2 8 2 3 4 1 3 1 2 3 1 3 1 6 0 9 1 3 3 6 7 2 3 3 3 1 1 1 2 2 1 2 3 2 5 3 3 6 1 7 0 6 9 1 6 2 3 1 1 3 1 2 2 3 1 1 5 0 7 5 6 5 5 2 4 1 1 1 1 2 1 1 8 0 8 5 4 3 3 1 4 5 2 1 3 3 1 1 1 1 3 5 5 3 3 2 4 3 6 1 6 0 9 3 9 5 5 1 4 4 8 8 3 3 2 2 3 1 1 9 0 9 2 9 9 1 5 1 1 4 7 1 3 3 3 3 1 2 3 3 1 8 0 6 8 1 1 3 5 7 2 1 1 2 1 1 2 2 1 4 2 2 2 5 6 4 4 5 3 4 5 3 4 1 5 0 9 8 9 7 1 1 9 5 3 8 3 1 1 2 2 1 6 0 11 5 6 1 1 2 1 5 9 8 7 6 3 3 3 3 1 2 1 8 0 9 9 5 4 5 7 4 4 1 8 1 2 3 3 2 2 3 2 2 2 5 2 3 7 1 5 0 6 6 2 3 9 4 1 2 3 3 3 1 1 6 0 8 5 5 7 7 5 1 9 1 2 3 3 1 2 2 1 5 0 10 3 2 8 4 1 7 7 1 6 5 1 2 1 2 1 1 5 2 2 3 1 1 3 4 1 7 0 10 9 5 1 2 5 3 2 9 6 4 1 2 1 1 1 3 1 1 5 0 9 1 1 2 1 1 4 8 8 7 1 2 3 3 1 1 9 0 11 5 7 1 9 2 4 5 3 4 3 8 1 2 2 1 2 1 3 1 1 1 3 3 1 3 7 1 9 0 7 1 6 1 8 8 5 3 3 2 1 1 2 1 2 2 3 1 6 0 8 1 7 4 2 9 1 9 5 1 2 2 3 3 2 1 6 0 11 1 3 3 4 7 4 6 3 6 9 9 3 1 2 3 3 2 3 3 1 2 2 4 1 6 5 1 5 2 4 3 3 7 1 8 0 9 1 1 2 3 3 9 9 7 8 3 1 2 2 3 2 3 1 1 9 0 9 8 9 3 7 2 1 1 5 5 3 3 2 2 1 1 2 3 1 1 7 0 11 8 1 3 6 2 8 1 4 4 2 5 1 3 3 1 2 1 1 3 1 4 2 2 2 2 3 5 1 9 0 9 6 3 7 9 6 1 6 2 6 3 3 2 1 2 1 2 3 1 1 7 0 8 4 1 9 1 9 3 7 1 2 3 2 1 2 1 1 1 7 0 6 8 6 1 8 1 5 3 1 3 2 3 2 1 2 5 1 3 3 3 5 1 7 0 10 6 2 8 6 1 1 8 5 4 9 2 3 1 3 1 1 3 1 9 0 7 3 3 1 8 6 5 1 3 1 2 3 3 1 1 2 2 1 8 0 10 9 7 9 8 4 2 4 1 4 8 1 2 1 1 1 1 2 3 5 1 2 2 1 3 4 1 8 0 10 8 3 1 6 4 5 8 9 8 8 3 1 2 1 3 2 1 2 1 9 0 6 9 1 1 1 1 5 2 3 1 1 3 3 3 2 2 1 8 0 8 1 3 3 9 2 3 3 7 2 1 3 1 3 3 2 3 3 2 1 3 3 4 3 5 5 3 4 1 5 0 11 7 7 5 8 8 1 7 8 4 7 9 3 1 3 3 2 1 6 0 9 8 7 4 9 1 1 1 4 2 3 1 1 1 2 1 1 9 0 6 8 8 2 5 2 1 2 1 1 3 1 2 1 2 1 3 1 4 1 3 4 1 7 0 11 1 1 4 7 3 8 9 7 5 7 5 2 2 3 1 2 3 1 1 7 0 7 5 5 1 6 1 2 1 2 1 3 2 2 1 2 1 5 0 11 1 9 8 6 5 9 4 5 7 5 7 1 1 2 3 1 1 3 4 2 3 5 1 9 0 11 4 5 2 4 1 6 9 7 6 9 1 1 2 1 1 1 1 3 1 1 1 5 0 9 5 2 4 4 9 7 1 9 9 3 3 1 1 2 1 5 0 6 1 9 8 4 1 7 1 3 1 1 2 3 3 3 3 1 3 6 1 8 0 6 5 1 7 4 2 9 3 1 1 3 3 3 3 1 1 9 0 10 1 5 4 2 6 6 7 4 2 1 2 1 1 3 3 3 2 2 1 1 5 0 6 2 9 1 5 5 8 1 2 3 1 1 2 4 1 1 3 4 3 5 1 8 0 7 9 5 1 1 2 1 7 3 2 2 1 2 3 2 3 1 5 0 11 3 1 1 9 5 2 6 5 1 2 7 3 3 3 3 1 1 8 0 6 4 7 7 2 7 1 1 3 2 3 2 2 2 3 1 1 3 4 2 4 1 5 4 3 5 3 3 6 1 6 0 10 1 7 1 6 4 7 9 9 1 4 2 2 1 3 2 2 1 8 0 9 1 3 1 4 5 6 8 6 1 2 1 2 3 2 1 3 2 1 9 0 8 4 2 6 1 8 8 1 2 2 2 2 1 1 2 2 1 1 5 3 3 1 5 2 3 6 1 9 0 10 4 6 2 2 1 7 6 4 8 7 3 1 2 2 3 1 2 1 1 1 5 0 9 1 8 3 4 7 3 8 1 4 1 3 2 1 2 1 8 0 7 9 6 8 1 5 5 1 3 2 3 2 1 2 1 1 4 3 1 1 3 1 3 5 1 6 0 8 9 4 1 9 9 5 4 6 2 2 1 1 2 3 1 6 0 7 4 7 6 6 4 1 1 1 1 2 2 1 2 1 9 0 8 5 6 9 1 8 7 9 2 3 2 2 3 2 2 1 1 1 3 3 5 4 2 3 6 1 7 0 9 1 1 5 6 3 3 4 6 7 3 2 3 2 2 3 1 1 5 0 6 7 7 3 1 5 1 3 2 2 2 1 1 7 0 8 2 6 1 5 4 3 6 4 1 1 1 2 1 3 1 4 4 1 2 2 3 3 7 1 9 0 11 7 5 2 1 1 7 3 6 4 9 6 1 1 1 1 2 1 2 2 2 1 8 0 9 7 2 9 4 1 2 2 4 5 2 3 2 3 3 3 2 1 1 6 0 10 4 1 4 7 7 5 3 3 6 1 1 3 1 1 2 2 1 5 3 3 4 1 3 7 6 2 2 3 6 2 5 5 3 4 1 6 0 9 2 8 5 9 1 6 2 6 5 1 1 3 1 3 1 1 8 0 8 5 7 3 2 1 7 4 5 3 3 1 2 1 3 3 2 1 9 0 6 1 5 3 3 5 6 2 3 1 2 1 2 3 1 1 2 1 2 1 3 7 1 7 0 9 2 1 4 9 1 4 3 1 1 1 3 2 3 1 3 1 1 6 0 7 5 9 1 2 1 2 4 1 1 2 1 1 1 1 8 0 7 1 4 6 9 3 5 9 1 2 2 1 1 3 3 2 3 3 5 5 3 2 2 3 5 1 7 0 10 2 9 4 6 2 4 1 2 5 8 1 1 1 3 1 3 2 1 7 0 7 9 9 1 1 2 5 3 2 1 3 1 2 1 1 1 9 0 6 5 3 1 3 3 2 2 2 2 1 3 1 2 1 3 2 5 2 2 1 3 6 1 6 0 11 6 6 6 4 2 1 5 2 1 4 3 1 1 2 2 1 3 1 5 0 9 7 4 1 1 5 4 5 5 1 1 3 3 1 3 1 5 0 10 3 9 3 3 9 1 5 4 3 8 2 1 2 3 2 1 4 4 1 2 3 3 6 1 8 0 11 7 5 8 2 5 2 1 8 6 2 8 1 3 3 2 3 3 3 2 1 6 0 8 1 2 1 7 8 3 7 3 1 2 1 1 3 1 1 5 0 11 2 1 8 1 4 2 1 5 8 9 6 1 3 1 1 2 2 5 2 5 4 3 2 3 7 7 1 5 4 3 5 1 6 0 10 4 8 2 5 9 6 5 1 4 6 3 1 3 1 3 2 1 5 0 7 3 2 1 6 9 4 1 2 2 1 2 1 1 7 0 8 8 6 8 5 4 1 2 2 1 3 3 1 3 3 2 4 5 2 3 5 3 4 1 5 0 8 8 7 3 1 3 4 4 6 3 3 2 2 1 1 8 0 6 9 1 4 1 8 8 2 1 1 1 3 2 2 1 1 9 0 9 4 4 2 3 1 8 3 8 9 3 1 3 2 2 1 2 1 3 2 2 3 3 3 4 1 9 0 10 8 1 2 9 2 2 5 9 2 1 1 1 1 2 3 1 1 2 2 1 9 0 6 7 1 6 1 3 7 2 1 2 2 1 1 1 2 1 1 5 0 10 6 9 6 9 8 5 1 8 1 4 1 3 1 1 2 2 3 5 3 3 5 1 7 0 8 6 1 7 8 6 8 3 2 2 3 1 1 1 2 1 1 7 0 9 1 7 9 7 4 2 7 8 2 3 3 2 1 3 3 3 1 8 0 7 7 3 1 3 6 7 2 3 1 1 3 1 1 2 1 2 3 4 1 3 3 6 1 9 0 10 4 1 2 9 7 6 9 3 5 1 1 1 3 1 2 1 1 3 3 1 6 0 7 9 9 9 1 6 7 1 1 3 3 3 2 1 1 5 0 11 7 2 9 2 9 2 7 1 9 5 9 1 2 2 1 1 3 4 3 3 5 2 3 4 6 1 5 3 3 4 1 5 0 10 1 2 9 2 8 6 4 4 5 8 2 2 1 1 1 1 5 0 7 1 9 4 2 6 8 5 1 3 3 1 1 1 8 0 10 1 5 5 3 7 7 8 3 1 1 3 2 1 3 2 1 1 1 2 4 5 5 3 6 1 7 0 6 1 4 3 1 2 8 2 3 3 1 1 1 3 1 5 0 8 1 6 9 4 9 3 7 2 2 2 1 3 1 1 9 0 7 5 6 1 4 4 9 3 3 2 1 1 2 1 2 2 1 5 5 2 1 4 4 3 4 1 9 0 7 3 5 1 3 9 8 7 2 1 2 3 2 1 1 3 2 1 7 0 6 1 6 6 5 5 7 2 1 3 3 2 3 1 1 5 0 9 1 9 5 9 7 7 8 9 4 2 3 1 2 3 3 2 1 3 3 5 1 5 0 9 9 4 4 1 9 8 9 5 3 2 2 1 1 1 1 7 0 10 8 8 4 4 3 1 6 3 2 1 1 2 2 1 3 2 2 1 7 0 10 7 5 1 5 3 4 5 3 2 8 1 3 3 3 3 1 1 5 1 1 5 3 3 6 1 7 0 6 1 8 8 1 2 2 3 2 1 2 1 3 2 1 9 0 8 1 2 4 4 5 8 2 4 1 1 1 1 1 3 2 1 2 1 7 0 9 6 7 2 3 4 2 1 5 5 3 1 2 1 3 2 1 5 1 1 1 1 2 2 4 1 5 3 3 7 1 7 0 6 9 1 8 8 3 9 1 1 1 2 1 2 1 1 9 0 10 8 9 3 2 2 1 3 5 1 7 3 1 3 2 2 1 1 1 1 1 6 0 8 2 3 4 4 9 8 1 7 1 1 2 2 1 1 1 5 1 2 2 2 5 3 4 1 7 0 6 3 2 1 7 3 8 3 1 2 1 2 1 2 1 5 0 7 1 3 8 5 1 8 1 3 2 2 1 2 1 9 0 7 1 2 9 9 1 3 1 2 3 1 1 2 1 3 2 2 1 3 2 4 3 4 1 8 0 9 7 9 1 8 7 5 2 7 9 3 1 2 2 1 2 2 1 1 6 0 8 5 7 5 1 1 3 2 8 1 3 1 1 1 3 1 6 0 8 5 1 3 2 1 8 2 9 2 1 3 2 3 3 1 2 5 2 3 7 1 8 0 10 6 6 5 6 1 6 5 1 7 6 1 3 1 1 1 1 3 3 1 7 0 9 4 1 9 1 1 9 4 8 6 2 2 1 2 2 3 1 1 9 0 11 1 9 5 6 5 4 5 2 2 8 6 1 2 2 1 1 3 1 2 1 5 4 2 3 1 4 3 3 4 1 6 0 6 2 4 4 1 3 8 1 3 1 3 3 1 1 9 0 10 1 7 7 1 2 8 7 3 4 4 3 2 2 1 1 2 1 2 1 1 7 0 10 1 3 7 6 6 9 7 5 1 3 3 1 3 3 1 2 3 2 1 1 5 2 7 2 5 5 3 6 1 8 0 9 5 4 5 7 1 7 4 4 8 1 3 2 2 1 1 1 1 1 5 0 10 3 3 6 1 3 8 8 6 8 9 1 3 2 3 1 1 9 0 8 2 6 5 8 7 1 1 1 3 1 2 3 3 1 3 1 2 4 2 1 2 2 3 3 5 1 7 0 8 7 1 2 6 4 9 6 6 1 1 3 1 3 1 1 1 9 0 9 1 9 8 2 8 2 1 9 1 2 2 1 3 3 2 3 2 1 1 6 0 7 2 5 5 1 8 1 1 1 1 1 2 2 2 1 1 2 5 2 3 6 1 8 0 11 2 1 2 8 8 3 6 7 9 4 4 3 3 1 3 2 2 1 1 1 6 0 7 9 5 1 1 3 6 2 1 2 2 2 1 3 1 5 0 8 1 6 6 9 1 7 1 5 1 1 3 2 3 3 2 2 4 3 5 3 7 1 9 0 10 9 9 6 4 3 5 1 9 8 2 3 1 1 2 2 3 1 3 1 1 9 0 8 2 9 1 1 5 7 7 7 1 1 2 1 1 1 1 1 2 1 9 0 9 3 1 3 2 9 8 5 3 8 1 3 3 1 1 1 2 1 2 2 2 3 5 2 5 2 3 5 1 5 0 9 7 7 9 6 1 8 8 4 6 3 2 3 3 1 1 8 0 11 1 7 8 8 4 7 8 8 1 1 1 3 2 1 3 3 2 1 2 1 8 0 9 4 2 1 8 4 7 4 5 1 2 1 3 2 1 1 1 3 1 1 4 5 2 7 5 3 6 2 4 5 3 7 1 5 0 10 1 5 5 8 9 3 9 6 1 5 1 2 1 3 1 1 9 0 10 8 7 6 6 9 5 3 7 4 1 3 1 1 2 3 2 2 1 3 1 6 0 9 9 7 1 7 2 5 6 1 6 1 2 3 3 1 3 3 4 2 5 4 2 5 3 5 1 8 0 8 8 7 2 2 1 7 9 8 3 2 1 2 3 3 3 3 1 7 0 10 1 7 1 7 6 7 8 1 8 5 1 2 1 1 3 3 1 1 6 0 6 7 1 7 1 3 5 2 2 3 1 1 2 1 4 5 2 2 3 6 1 7 0 8 6 1 8 2 3 6 9 6 1 3 3 1 1 1 2 1 9 0 11 4 4 3 3 3 1 6 6 4 1 7 1 3 2 3 2 3 1 1 1 1 6 0 9 4 6 2 9 8 1 1 1 6 1 2 2 3 2 1 3 3 3 1 2 1 3 6 1 9 0 7 9 2 3 5 9 8 1 3 1 1 2 1 1 2 2 1 1 6 0 7 1 2 3 5 4 2 4 1 3 1 2 1 2 1 7 0 6 5 1 5 2 3 9 3 2 3 1 3 3 1 4 5 2 2 3 1 1 2 1 3 5 7 4 8 7 10 1 9 2 7 9 9 11 5\";","export default \"mask = 1001X0X00110011X01X1000110100011000X\\nmem[5228] = 409649\\nmem[64037] = 474625\\nmask = 1X0110X0X110000100X01100000011101111\\nmem[62395] = 48627\\nmem[32253] = 16724249\\nmem[29843] = 241166\\nmask = 100X100X110001111101X0X0010100111X10\\nmem[9042] = 12448\\nmem[36389] = 14915399\\nmem[53378] = 2004566\\nmem[60022] = 121815\\nmem[46937] = 1238\\nmask = X001X0X101X10X10101X0000001110100011\\nmem[55791] = 2998\\nmem[16538] = 4120048\\nmem[36864] = 183554\\nmem[38989] = 7774725\\nmem[43983] = 18397304\\nmem[26551] = 1232\\nmask = 1111X0110110X0010110000010X1X1X10X1X\\nmem[28101] = 14619727\\nmem[35256] = 29030667\\nmem[63194] = 146129065\\nmem[44798] = 189\\nmem[2426] = 16693877\\nmem[695] = 30070848\\nmem[45241] = 4271881\\nmask = 1001X011X1100X01XX101X110001X110X101\\nmem[17482] = 7601\\nmem[35168] = 164940\\nmem[50171] = 1047374131\\nmask = X0010X101X00111X11100111110110X11X01\\nmem[55397] = 6883232\\nmem[36276] = 460553\\nmem[28164] = 6184\\nmem[32800] = 3846\\nmask = 100110X1X1100X110110XXX00X00101X010X\\nmem[34061] = 8335\\nmem[19672] = 806\\nmem[20346] = 45051423\\nmem[36909] = 75717\\nmem[14949] = 12484\\nmask = X00XX1100100111X00X11XX00000110X1010\\nmem[32991] = 13151\\nmem[26489] = 54180147\\nmem[55564] = 5690\\nmem[7187] = 807798\\nmem[4660] = 21323\\nmask = 0001X01001100111101X0111101X1110001X\\nmem[53378] = 33491\\nmem[11625] = 23905844\\nmem[11286] = 226133438\\nmem[59562] = 61\\nmem[39496] = 45492350\\nmem[35168] = 1063\\nmem[35116] = 1135415\\nmask = 1X011X100X1001X1111011011XX000010100\\nmem[14949] = 7088\\nmem[27179] = 249426\\nmem[12840] = 3398667\\nmask = 100110X0X1X0011111011X0001XX00111X1X\\nmem[9310] = 377264021\\nmem[39496] = 5310\\nmask = 1X0111100X0011X10001100X00X0X1X0X01X\\nmem[23624] = 3559669\\nmem[4358] = 25901\\nmask = X0X1111001X0111X11011X00110000000X10\\nmem[41470] = 74601\\nmem[46470] = 28860028\\nmem[28699] = 579\\nmem[50915] = 8018491\\nmem[9582] = 512\\nmem[17809] = 2468\\nmem[19264] = 382929593\\nmask = 1X01X01001X001X1XX100111X0000X110000\\nmem[53852] = 671\\nmem[829] = 14607863\\nmem[59475] = 42176426\\nmem[50352] = 917431806\\nmem[25565] = 2735024\\nmem[31268] = 8203\\nmem[63568] = 18725\\nmask = 1011X01101X0X0X1X1X0X0110X0100001110\\nmem[14581] = 534274885\\nmem[60208] = 23685066\\nmem[59262] = 268487956\\nmem[243] = 75944\\nmask = 1001XX0001X01111001XX1X0X01000X10X11\\nmem[53831] = 4237440\\nmem[24052] = 1451049\\nmem[64125] = 432782904\\nmem[8892] = 15419\\nmask = 10X0101101000X1XX010100X110001XXX11X\\nmem[47441] = 9514\\nmem[24633] = 4407646\\nmem[40184] = 15477\\nmem[1696] = 106342632\\nmem[36011] = 606150\\nmem[14545] = 874\\nmask = 100X1XX11110X001X1X011000X0011010100\\nmem[18822] = 1345\\nmem[31329] = 49781332\\nmem[1256] = 23323\\nmem[47095] = 360\\nmem[28233] = 122942\\nmask = 1X01XX100100X1110X1110X10001X100X00X\\nmem[20346] = 6255\\nmem[2088] = 10531698\\nmem[19802] = 23124041\\nmem[13152] = 64318\\nmask = 1XX110100X100011011000XX10X00XX10X00\\nmem[55530] = 462159\\nmem[53302] = 4050\\nmask = 11X1X01X00X0X011X1101100100X101X100X\\nmem[32170] = 2300\\nmem[60379] = 1946048\\nmem[38974] = 935362865\\nmem[30527] = 38214\\nmem[39317] = 309\\nmask = 0X0XX11011X001X11X101011111X01100101\\nmem[6761] = 3363\\nmem[30072] = 488192925\\nmem[30577] = 5587652\\nmem[36815] = 820921800\\nmem[48185] = 90597685\\nmem[45346] = 14766\\nmask = 10XX000X0100000X011000X1X1X0X1X00101\\nmem[65328] = 277939257\\nmem[32705] = 259305\\nmem[8201] = 1708\\nmask = 100110X101100X01X110X011X001101X1101\\nmem[1321] = 133255266\\nmem[33628] = 464\\nmem[58727] = 673\\nmask = 1001101001X001010XX0X00001X0X0100000\\nmem[19034] = 17040206\\nmem[34637] = 15994570\\nmem[58564] = 7623\\nmask = 1001101101100101011X11110000X1001XX0\\nmem[23305] = 8044\\nmem[64547] = 395\\nmem[37420] = 27907889\\nmem[27608] = 612\\nmem[7901] = 680129\\nmem[2047] = 829469\\nmask = 1X0X0X100100111100011011100111XX1100\\nmem[55530] = 17794\\nmem[35214] = 6843366\\nmem[55948] = 325722\\nmem[50625] = 1010688\\nmem[1409] = 7196\\nmem[61824] = 484817479\\nmem[18803] = 12612636\\nmask = 1001X01XX1X0X1111X1001110X110X011101\\nmem[28127] = 1963295\\nmem[11625] = 1018106\\nmem[30920] = 1636\\nmem[15448] = 10027\\nmem[13104] = 13415208\\nmask = 11011010011101111X100000X0X110XXX101\\nmem[32426] = 26317976\\nmem[33610] = 953396121\\nmem[18997] = 205749058\\nmask = 1001101XX1100XX1011010XXXX00011X1100\\nmem[16512] = 115996365\\nmem[9541] = 816\\nmem[2017] = 47814977\\nmem[48769] = 6960\\nmem[57904] = 17542395\\nmem[31268] = 536187\\nmask = 100X101011X0X1X100100010101000X1100X\\nmem[12315] = 151687693\\nmem[2426] = 585162\\nmem[58101] = 840013\\nmask = X00110000100111100X1001001000XX00XXX\\nmem[61146] = 100666431\\nmem[64619] = 4637046\\nmem[27122] = 237312\\nmem[43315] = 2538822\\nmem[6097] = 889148\\nmask = 101110100X10X0110110111X1X001000X110\\nmem[59937] = 1039821042\\nmem[5228] = 20695323\\nmem[16793] = 1847174\\nmem[58963] = 11095\\nmem[22680] = 5166227\\nmem[44856] = 15083\\nmask = X001X0111X10X0110X10X1X0010110010100\\nmem[60974] = 391897\\nmem[54413] = 376986\\nmem[16685] = 488\\nmask = 1X0X0X00X0000111X00110X10X000110X000\\nmem[16055] = 28402351\\nmem[30402] = 379124674\\nmem[34946] = 13507\\nmem[52357] = 5299\\nmem[64564] = 106012728\\nmem[2719] = 45355693\\nmem[12] = 89762\\nmask = XX011X1111X00011X1X0010000001101X101\\nmem[29208] = 29115\\nmem[18551] = 426909992\\nmem[23699] = 15195667\\nmem[3422] = 11107\\nmem[34134] = 15916\\nmem[18069] = 1238938\\nmem[50734] = 4062867\\nmask = 1001X000XX00011100X100X1100XX11000X0\\nmem[62530] = 18469859\\nmem[54219] = 239365\\nmem[43155] = 3473\\nmem[38944] = 358650\\nmask = 1X01001X11001110X11X1010X0X111X010XX\\nmem[10724] = 2916217\\nmem[44147] = 416\\nmem[4105] = 2413\\nmem[38699] = 1661\\nmem[64725] = 1933034\\nmem[20996] = 13732\\nmem[63194] = 484290\\nmask = 1001X010110X1111X11111110011X0010000\\nmem[56756] = 53912\\nmem[55265] = 2802\\nmem[55521] = 61411987\\nmem[43040] = 1167\\nmask = 1XX1111101001X11001001111110101X1011\\nmem[29769] = 87000096\\nmem[15343] = 480461\\nmem[16428] = 51254247\\nmem[13162] = 53048239\\nmask = 100100100100XX010X1001XX1XXXX0100100\\nmem[13117] = 136\\nmem[63074] = 35112135\\nmask = 1101101001XX01110010111X100XX11X1XX0\\nmem[21012] = 2037\\nmem[54144] = 3133068\\nmem[63961] = 14080353\\nmask = 1001X11X01101111110X10X1010001000X0X\\nmem[62471] = 12508052\\nmem[14338] = 435627\\nmem[318] = 3687092\\nmem[64508] = 2664\\nmem[58433] = 14556\\nmem[8995] = 938\\nmem[32875] = 1012574980\\nmask = 1X01XX100X10011101X01001011X11011X01\\nmem[26989] = 97197022\\nmem[9541] = 150895995\\nmem[36956] = 174431384\\nmem[43247] = 2881\\nmem[6758] = 18074756\\nmem[35444] = 3197755\\nmem[42854] = 28212\\nmask = 100X101X0X00X1110010100011X0X01X1010\\nmem[17239] = 76342363\\nmem[48185] = 30296621\\nmem[26693] = 55049\\nmem[30110] = 28232858\\nmem[40609] = 197705858\\nmem[63074] = 1491954\\nmask = 100X1X1XX100111100XXX01110X00000101X\\nmem[28233] = 16456060\\nmem[37936] = 1485\\nmem[60589] = 1108\\nmem[58201] = 178477087\\nmem[35353] = 5172\\nmem[58317] = 582\\nmem[3707] = 124900\\nmask = 1001X0110XXXX11X1X100101101X000X1011\\nmem[6853] = 53203870\\nmem[10134] = 15607855\\nmem[55789] = 65720\\nmem[40948] = 26255\\nmem[23925] = 247\\nmask = 10XX00X001X0X11101100101100X0XX1X011\\nmem[21991] = 12365\\nmem[60284] = 475281124\\nmem[27156] = 712381\\nmem[40992] = 32030028\\nmem[55639] = 459820\\nmask = XX0110000100011X1X011101111X0X0001X1\\nmem[21777] = 23804\\nmem[18660] = 16096160\\nmem[13001] = 133879324\\nmem[55679] = 16534\\nmem[35334] = 95963075\\nmask = 1111X01X01100X01X1X00101000010101X01\\nmem[42543] = 830\\nmem[35104] = 119069\\nmem[30672] = 237624\\nmem[57513] = 11273\\nmem[24425] = 8038\\nmem[15062] = 880\\nmem[3370] = 1147051\\nmask = 100110X00100X111001X10X100XX0010X0X0\\nmem[34880] = 47552929\\nmem[56463] = 1311038\\nmem[34134] = 48583\\nmem[26841] = 28022630\\nmem[34391] = 238829624\\nmem[61488] = 64163\\nmask = 100110100X000X11001000111000X1X00000\\nmem[64564] = 9373265\\nmem[45253] = 516852473\\nmem[54102] = 7680\\nmem[56373] = 6272\\nmem[32800] = 20520227\\nmask = 100XX0X00100011100110001X00X01X00000\\nmem[11445] = 17299797\\nmem[45739] = 26477\\nmem[35104] = 8020\\nmem[44856] = 5098\\nmask = 100110100XXX0111001010XX0100001100X0\\nmem[31855] = 4562526\\nmem[37196] = 49264053\\nmask = 10011X1011X0011X1X010X00000000100X11\\nmem[51356] = 2533530\\nmem[21991] = 617827134\\nmem[59007] = 146920\\nmask = 10X11010001000110110001010XX101X1110\\nmem[17438] = 724\\nmem[40037] = 26066923\\nmem[62740] = 64849289\\nmem[51356] = 362548959\\nmask = 1001111XX000X1010001X1X1X010X1X00001\\nmem[62654] = 495\\nmem[13661] = 784\\nmem[2201] = 825060967\\nmem[56463] = 25468\\nmem[11152] = 332175\\nmem[11201] = 318547\\nmem[56898] = 19359\\nmask = 10011011111X011X01101010X00101001X11\\nmem[39227] = 183088177\\nmem[11942] = 18427\\nmem[56845] = 74552997\\nmem[9386] = 30899\\nmem[7664] = 28246572\\nmask = 1001101001100X11X11X100010X00X110XX0\\nmem[18885] = 28794\\nmem[1321] = 2616\\nmem[31268] = 1924\\nmem[26938] = 384173\\nmem[12796] = 400542613\\nmem[64037] = 104083\\nmask = 1001X01101X001010110110X0110000011X0\\nmem[47972] = 49309\\nmem[45634] = 85099607\\nmem[34920] = 28977\\nmem[58564] = 2559\\nmem[4311] = 700\\nmem[60974] = 658\\nmem[5228] = 4807\\nmask = XX011X11X1100011011X010X100011000110\\nmem[17753] = 70529\\nmem[17324] = 248339160\\nmem[60589] = 5812\\nmask = 11011110010X0X110X111011X1000X0X10XX\\nmem[35474] = 63093\\nmem[35770] = 170945\\nmem[31209] = 658557270\\nmem[41345] = 3895120\\nmem[28522] = 164751383\\nmask = X0X11XX01100011111X1X0000100XX111000\\nmem[8995] = 18206851\\nmem[21601] = 756\\nmem[64169] = 2372\\nmem[54020] = 40408\\nmask = 000111XX0100XX1100010000000010000110\\nmem[32975] = 11379458\\nmem[35264] = 191\\nmem[48634] = 372213\\nmem[37443] = 12419\\nmem[11441] = 168862967\\nmask = 1X0001100100X1X1XXXX100000X011101X01\\nmem[60955] = 121774\\nmem[33433] = 728\\nmem[34602] = 174\\nmem[41800] = 4552421\\nmask = 10011010X11000X1XXX0111100001X111000\\nmem[6773] = 15578957\\nmem[28044] = 3493208\\nmem[62407] = 169767\\nmem[51334] = 52448434\\nmem[53093] = 4752\\nmem[14545] = 1251\\nmask = 100110X01XX0X11111110110X01100110XXX\\nmem[18935] = 231360\\nmem[19721] = 876\\nmem[63491] = 56496605\\nmask = 10011010X110011X11X10X10101000010000\\nmem[61488] = 115634\\nmem[1321] = 19197\\nmem[33154] = 31600682\\nmask = 10011X1101X00111101X10X101X11010000X\\nmem[31209] = 30697\\nmem[30292] = 56770\\nmem[46372] = 4474\\nmem[22434] = 894\\nmask = X1011X11XXXXX01101X0X100100001100011\\nmem[33610] = 386\\nmem[46743] = 9985\\nmem[18581] = 25393973\\nmask = 1XX100X101X000010X10X011X001101X0101\\nmem[56281] = 2427\\nmem[23013] = 124563907\\nmem[41470] = 6819267\\nmem[58727] = 5142531\\nmem[63093] = 802798807\\nmem[58709] = 88\\nmask = 1001101X11100X011110010001XX010X01X0\\nmem[35264] = 9076212\\nmem[58092] = 3559173\\nmem[48925] = 58523913\\nmem[28101] = 402638054\\nmask = 10011010011001010111100001XX0010X0X1\\nmem[47972] = 128418944\\nmem[62530] = 288\\nmem[17179] = 77713212\\nmask = X0011011X0100X010110100X000100011100\\nmem[24524] = 107898\\nmem[46010] = 82127781\\nmem[45253] = 156159\\nmask = X0011X000100X1110X11100110000XX01010\\nmem[47222] = 15963\\nmem[13206] = 184605823\\nmem[34890] = 92193985\\nmem[64547] = 606039\\nmask = 1X0X101X011X011101101X111X000X1X0001\\nmem[4144] = 85071\\nmem[63340] = 3568335\\nmem[42980] = 2223\\nmem[65165] = 15723492\\nmem[55303] = 228834\\nmem[41409] = 120704\\nmask = X0X11X1011X0XX1111100X0110110111X1X0\\nmem[28969] = 5451626\\nmem[23890] = 202\\nmem[32579] = 893738\\nmem[19768] = 9755\\nmem[46679] = 4469\\nmem[10572] = 2621\\nmask = 1X01X010011X011111X001XX0001101X100X\\nmem[13230] = 4177769\\nmem[6789] = 1570\\nmem[12814] = 6330042\\nmem[19862] = 399947\\nmask = 100X0110X1001111001111X10001X1100000\\nmem[16428] = 62747997\\nmem[57753] = 3812740\\nmem[53818] = 2042073\\nmem[57170] = 65402596\\nmask = 00000110010X1X1X0011010000001X0X1X1X\\nmem[39125] = 231032\\nmem[41182] = 8309392\\nmem[41659] = 69862358\\nmem[2426] = 3954\\nmem[29634] = 1877\\nmask = 10011XX00X00110100X11X01100001X10000\\nmem[3276] = 165739267\\nmem[18985] = 215914582\\nmem[51726] = 2911\\nmem[1198] = 2689\\nmem[25096] = 38217\\nmem[65146] = 750396\\nmask = 100X000X11100111X0111X111X010X0X0100\\nmem[55354] = 71488486\\nmem[26941] = 153429\\nmem[27903] = 1242771\\nmem[20076] = 13658750\\nmask = 1X0X1X111100011110100X11XX0001X01101\\nmem[8106] = 8655\\nmem[13105] = 326089686\\nmask = 11110011011000010110XX0X1X0111X0X1X1\\nmem[47972] = 4628833\\nmem[64742] = 108229\\nmem[20310] = 234311\\nmem[22525] = 1268681\\nmem[57315] = 2293399\\nmem[1415] = 309220\\nmask = 1X01101001100X110X10X01110000X110001\\nmem[63491] = 55284\\nmem[6892] = 1776247\\nmem[22680] = 10087682\\nmask = 100110100X100111XX10X011100100101001\\nmem[32836] = 529\\nmem[60379] = 108710\\nmem[3707] = 119489129\\nmem[41220] = 407759\\nmem[17438] = 4570597\\nmem[18735] = 116991\\nmem[45194] = 632\\nmask = 10X100000X10111100100110001X01X000X0\\nmem[29832] = 17415\\nmem[18326] = 149774707\\nmem[61969] = 27327701\\nmask = 10011X100110X1X1X1X1101X000000X00X10\\nmem[37977] = 32149847\\nmem[10572] = 23418\\nmem[21601] = 46807\\nmem[3432] = 205866675\\nmem[15290] = 52828\\nmask = 1001X0X0010X111100101X100X0X000001X0\\nmem[29496] = 3463669\\nmem[22900] = 14028901\\nmem[59821] = 26258\\nmem[6007] = 3083265\\nmem[26841] = 223727\\nmask = 100110XX010001110001X000100X0X110X11\\nmem[47185] = 37062\\nmem[53497] = 486088\\nmem[20646] = 1031395\\nmem[51185] = 335\\nmem[42320] = 2256917\\nmask = X1011X1X0XX00101011010X10000XX010000\\nmem[24688] = 536538\\nmem[30782] = 45733\\nmask = 100010110X0X00100X10100X01X01011110X\\nmem[3691] = 61776413\\nmem[37654] = 3873\\nmem[32875] = 780114\\nmask = 10011X001X1X011X1111X010X00X1X110001\\nmem[54410] = 836\\nmem[63661] = 970522\\nmem[62471] = 1855\\nmem[16994] = 201\\nmem[27546] = 1249156\\nmem[37773] = 220004102\\nmem[39306] = 22122687\\nmask = 10011011XX10010101101X0100X01X001000\\nmem[16428] = 1095\\nmem[56732] = 121853353\\nmem[58092] = 234\\nmask = X010X01X010011X101X001X11000X0XX1011\\nmem[367] = 74756331\\nmem[55921] = 529419\\nmem[39160] = 278975\\nmem[6758] = 920\\nmem[32922] = 33406\\nmem[59763] = 1563\\nmem[10382] = 886\\nmask = 10011X100XX0010110100011001X10010X01\\nmem[25565] = 26956\\nmem[23146] = 57605\\nmem[28925] = 962\\nmask = 1X11X100X100011X111XX010001110X01011\\nmem[35334] = 92117904\\nmem[34488] = 59287493\\nmem[7861] = 64986498\\nmask = X001X0XXX1X00111X01110111X0101100X00\\nmem[50457] = 17353399\\nmem[62959] = 16719393\\nmem[49674] = 134654\\nmem[55789] = 2243\\nmem[22434] = 99455\\nmem[8288] = 142594569\\nmask = 10011010X11001111111110010X00X1X0001\\nmem[37420] = 41618762\\nmem[11560] = 48435\\nmem[829] = 2389\\nmem[40014] = 70681907\\nmem[36217] = 715125593\\nmem[30774] = 510\\nmem[15212] = 10840\";","export default \"hcl:5d90f0 cid:270 ecl:#66dc9c hgt:62cm byr:1945 pid:63201172 eyr:2026\\n\\necl:amb byr:1943 iyr:2014 eyr:2028\\npid:333051831\\n\\nbyr:1971\\neyr:2021 iyr:2015 pid:158388040 hcl:#18171d ecl:brn hgt:179cm\\n\\nbyr:1936\\npid:707057570 iyr:2014 ecl:amb cid:299 eyr:2030\\nhcl:#c0946f hgt:186cm\\n\\nhgt:163cm iyr:2013 ecl:gry hcl:#86e981 byr:1939\\neyr:2020 pid:241741372 cid:203\\n\\necl:brn hcl:#341e13\\npid:686617364 byr:1929 eyr:2029 hgt:160cm cid:280 iyr:2020\\n\\nbyr:2002 hcl:#623a2f\\npid:253005469 iyr:2011 ecl:hzl hgt:184cm eyr:2027\\n\\necl:#bb984b eyr:2040\\nhgt:188in\\niyr:2005 hcl:c5be8e pid:174cm cid:161 byr:2004\\n\\necl:oth iyr:2010 cid:128 hgt:153cm byr:1991\\npid:24061445 eyr:2025 hcl:#54d43e\\n\\nhcl:z\\niyr:2023 pid:981178503 ecl:gmt eyr:2038 byr:2004\\n\\necl:gry eyr:2022 iyr:1981 pid:566993828\\nbyr:1941 hcl:#341e13 hgt:176cm\\n\\neyr:2027 byr:1976\\npid:350079989 ecl:blu iyr:2013 hgt:180cm hcl:#866857\\n\\neyr:2029 hcl:#ceb3a1\\necl:lzr\\niyr:2011 hgt:152cm byr:1986 pid:162999623\\ncid:240\\n\\necl:gry iyr:2017 hcl:#18171d byr:1926\\neyr:2027 hgt:68in\\ncid:310 pid:560836007\\n\\necl:grn\\ncid:307\\npid:#cdc803\\nbyr:1975 eyr:2039 hgt:75cm\\nhcl:318b11 iyr:2022\\n\\necl:brn hgt:179cm eyr:2020 iyr:2016\\npid:322103252 byr:1940 hcl:#b6652a\\n\\nhcl:#733820 hgt:188cm cid:70 eyr:2021 ecl:amb\\nbyr:1996\\niyr:2013 pid:412419084\\n\\nhgt:164cm iyr:2011 byr:1928 eyr:2020 hcl:#733820 pid:704914380 ecl:blu\\n\\necl:brn cid:267 eyr:2029 byr:2011\\nhcl:z pid:467662306 iyr:2026 hgt:104\\n\\npid:224593036 eyr:2027\\necl:brn hcl:#341e13 iyr:2014\\nbyr:1997\\nhgt:181cm\\n\\neyr:2005 pid:9756449964\\nhcl:#fffffd byr:1999 ecl:dne hgt:152in iyr:2027\\n\\nbyr:1998\\niyr:2017 pid:618350852 hgt:156cm cid:193 ecl:amb\\nhcl:#602927 eyr:2029\\n\\nbyr:2021 pid:3395281192\\nhcl:z hgt:167in ecl:grt eyr:2008 iyr:2025\\n\\ncid:206 pid:735212085 eyr:2020 byr:1950 hgt:153cm\\necl:blu iyr:2019\\nhcl:#733820\\n\\neyr:2021 pid:551149968 iyr:2020 hcl:#6b5442\\nbyr:1948\\necl:grn\\nhgt:152cm\\n\\nhgt:76in cid:113 iyr:2019 eyr:2023 hcl:#888785 pid:131239468 ecl:grn\\nbyr:1994\\n\\necl:oth cid:240 hcl:#bed757 byr:2027 eyr:2021 pid:#ffa971 iyr:2022\\n\\ncid:204 iyr:2011\\necl:blu hgt:169cm byr:1985 eyr:2020 hcl:#18171d\\n\\necl:hzl iyr:2012 cid:344 hcl:#7d3b0c\\nhgt:190cm pid:599490023 byr:1954 eyr:2023\\n\\ncid:333\\neyr:1971 hgt:193cm\\necl:#12421d hcl:#7d3b0c iyr:1991 pid:#7149ad byr:2008\\n\\niyr:2014\\nhgt:151cm pid:190259199 eyr:2021 ecl:blu\\nbyr:1975 hcl:#ceb3a1\\n\\nhgt:164cm ecl:oth hcl:#c0946f pid:427760590 eyr:2023 iyr:2012\\nbyr:1979\\n\\nhgt:193cm iyr:2023 ecl:#213711 hcl:z\\npid:23861701\\nbyr:2020\\neyr:1924\\n\\npid:450691994 cid:191\\neyr:2028\\nbyr:1972 ecl:oth hgt:168cm hcl:#888785\\n\\niyr:2013 hcl:#18171d hgt:170cm ecl:blu\\npid:040253250 eyr:2024\\nbyr:1954 cid:340\\n\\ncid:185 byr:1956 eyr:2029 pid:454637740 ecl:hzl hcl:#efcc98 iyr:2019 hgt:73in\\n\\nhcl:#efcc98\\nhgt:176cm\\necl:hzl cid:113 pid:747653564 iyr:2016\\neyr:2020 byr:1945\\n\\nhgt:69in cid:264 byr:1971 hcl:#733820 ecl:amb pid:086130104\\niyr:2011\\neyr:2022\\n\\niyr:2010\\neyr:2034\\npid:501068596\\nhgt:109 hcl:z byr:2018 cid:326 ecl:lzr\\n\\npid:955229652\\neyr:2027 cid:175\\nbyr:1950 iyr:2010 ecl:gry hcl:#866857 hgt:177cm\\n\\necl:amb hcl:#888785 eyr:2020\\nhgt:172cm byr:1991\\npid:556956304\\n\\nbyr:1930\\neyr:2011\\npid:734176827\\necl:brn hgt:182cm\\nhcl:z\\n\\nhcl:#a97842\\npid:040278061 ecl:brn hgt:168cm cid:194\\nbyr:1973\\niyr:2016 eyr:2027\\n\\nhcl:#623a2f\\neyr:2023\\necl:blu iyr:2016 pid:844348663 byr:1997 hgt:179cm\\n\\nhgt:188cm hcl:#a97842 byr:1972\\necl:hzl pid:912948357 eyr:2026 iyr:2025\\n\\niyr:2011 eyr:2025\\ncid:286\\npid:084736292\\nbyr:1936\\necl:oth hcl:#a97842 hgt:166cm\\n\\niyr:2012 ecl:blu hgt:159cm byr:1980 eyr:2024 pid:811644928 cid:105 hcl:#7d3b0c\\n\\npid:530452683 hcl:#341e13\\niyr:2011\\nhgt:163cm ecl:oth\\ncid:309 byr:1940\\n\\necl:hzl\\npid:144377866\\nhcl:#18171d hgt:193cm\\niyr:2013 eyr:2028\\n\\npid:868386570\\necl:brn\\nhgt:161cm hcl:#18171d\\nbyr:1956\\niyr:2017\\ncid:307\\n\\niyr:2019 eyr:2026 ecl:brn\\nhcl:#866857 byr:1993 cid:299\\npid:603503348 hgt:186cm\\n\\niyr:2014\\npid:852954158 hgt:73in byr:2021\\neyr:2020 hcl:#a97842 cid:260 ecl:oth\\n\\nhgt:164cm eyr:2025 pid:113005290 byr:1955 ecl:blu iyr:2017 hcl:#b6652a\\n\\ncid:179 iyr:2015\\npid:317467924 eyr:2025 ecl:gry byr:1996 hgt:180cm hcl:#a55f97\\n\\nhgt:172cm hcl:#efcc98 cid:53 ecl:grn iyr:2016\\nbyr:1991 pid:337133478\\neyr:2025\\n\\nhgt:150 iyr:2008\\npid:#3e66a7 ecl:#8b3133 eyr:2040 byr:2012 hcl:802d16\\n\\npid:577607614 byr:1924 hgt:173cm hcl:#341e13 eyr:2026 ecl:amb\\niyr:2013\\n\\neyr:2020 iyr:2011 hgt:175cm hcl:316607 pid:738554684\\nbyr:2029 ecl:dne\\n\\nhgt:179cm iyr:2016\\npid:178cm byr:2015\\necl:gry\\nhcl:#341e13\\neyr:1986\\n\\nbyr:2005 iyr:2028 ecl:#7be9b8 eyr:1941 pid:#e7e9cb hgt:177in cid:67 hcl:#602927\\n\\necl:#0d50e6\\npid:192cm iyr:2014 eyr:2027 hgt:73cm cid:162 hcl:93ea2f\\nbyr:1958\\n\\nhcl:z\\ncid:292 hgt:184in eyr:2001 pid:7218132701 byr:2020\\necl:grt iyr:2014\\n\\necl:gry\\nhcl:#fffffd\\neyr:2026 iyr:2013\\npid:117261833\\n\\npid:780384540 ecl:gry cid:52 eyr:2020 hgt:193cm hcl:#4ae223 iyr:2017\\nbyr:1984\\n\\necl:hzl\\npid:218314886 eyr:2030 byr:1948 hcl:#c0946f hgt:185cm iyr:2013\\n\\npid:175cm cid:340 ecl:blu hcl:#cfa07d eyr:2036 iyr:2018 byr:2018 hgt:70cm\\n\\nbyr:1953 hgt:164cm ecl:hzl\\npid:488831953 iyr:2010\\nhcl:#fffffd\\n\\nbyr:1961 hgt:165cm pid:506597451\\ncid:122 eyr:2020 hcl:#cfa07d ecl:gry\\niyr:2016\\n\\niyr:1970\\neyr:2040\\nbyr:2008\\nhgt:188\\necl:#b00a46 hcl:#fffffd\\n\\nhgt:179cm\\nbyr:1972 eyr:2026\\ncid:62 ecl:oth\\npid:996355557 iyr:2013 hcl:#a97842\\n\\necl:amb eyr:2026 byr:1936 pid:812982189 hgt:158cm hcl:#888785 iyr:2010\\n\\niyr:2020\\nhcl:#7d3b0c hgt:160cm\\npid:336806720\\neyr:2024 ecl:#7e0ae0 byr:1992\\n\\neyr:2036 pid:178cm hcl:z\\nhgt:133 byr:2009 ecl:dne cid:127\\n\\nbyr:1938 hcl:#fd309a\\ncid:104 iyr:2015 eyr:2022 pid:201047563\\nhgt:160cm ecl:hzl\\n\\nbyr:2023 pid:25086180 hgt:160cm cid:180 hcl:z ecl:grt eyr:2038 iyr:2022\\n\\necl:grn hgt:167cm\\nbyr:2023 iyr:2026 eyr:1928 hcl:z\\n\\nhcl:#efcc98 hgt:187cm byr:1925\\necl:grn\\npid:753746076 iyr:2017\\neyr:2021\\n\\niyr:2017\\nbyr:1934 ecl:grn eyr:2021 hgt:163cm\\npid:688172460 hcl:#b6652a\\n\\nhcl:#c0946f iyr:2018 ecl:blu pid:676564085\\nhgt:184cm cid:152 byr:1980 eyr:2023\\n\\necl:grt hgt:70cm iyr:2022 hcl:58716b byr:2010\\npid:60834390 eyr:2037\\n\\niyr:2028 pid:270499403\\necl:xry eyr:1947 hgt:152cm byr:2025\\n\\npid:091281559 hcl:#733820\\nhgt:166cm\\neyr:2021 ecl:grn cid:327 byr:1928\\niyr:2014\\n\\neyr:2025 ecl:grn byr:1938 hcl:#ceb3a1\\ncid:234\\npid:549433891\\nhgt:172cm iyr:2016\\n\\nhcl:#c0946f hgt:173cm iyr:2014 eyr:2030 ecl:blu byr:1965\\npid:696577272\\n\\nhgt:154cm eyr:2030\\npid:475642195 byr:1920 iyr:2013 hcl:#866857 ecl:blu\\n\\npid:518398763 iyr:2010\\neyr:2020\\nhgt:183cm\\necl:brn byr:1921 hcl:#18171d\\n\\neyr:2023 pid:614116723 hcl:#7d3b0c ecl:hzl\\niyr:2016 hgt:189cm byr:2000\\n\\necl:oth hgt:178cm hcl:#733820 byr:2001 pid:862420089 eyr:2023\\n\\npid:851985534 eyr:2028 hcl:#18171d ecl:oth cid:238 byr:2001\\niyr:2019 hgt:166cm\\n\\nbyr:1927\\nhgt:170cm\\npid:246933107\\necl:amb iyr:2015\\ncid:166 eyr:2027 hcl:#b6652a\\n\\nbyr:1929\\nhcl:#7d3b0c\\ncid:263 pid:317156081 hgt:165cm eyr:2031 iyr:1980\\n\\nhcl:#866857 eyr:2021 hgt:179cm pid:206504353 cid:84 ecl:gry iyr:2012 byr:1952\\n\\nbyr:1986 ecl:hzl\\nhcl:#a97842\\niyr:2015 hgt:152cm pid:722601936 eyr:2025\\n\\nbyr:1921\\npid:563550743 iyr:2015 ecl:hzl\\neyr:2026 hcl:#fffd7b\\n\\necl:hzl\\nhcl:#888785 cid:268 byr:1926 hgt:176cm pid:321394231 eyr:2021 iyr:2014\\n\\neyr:2021 cid:225\\npid:770796086\\necl:gry byr:1961\\nhgt:154cm\\nhcl:#6b5442\\niyr:2011\\n\\neyr:2028 iyr:1961 byr:2016\\ncid:98 pid:587360691 hgt:70cm ecl:#ceaf1f\\nhcl:#c0b6db\\n\\nbyr:1978\\neyr:2022 hgt:184cm hcl:#7d3b0c\\ncid:271\\necl:amb pid:235352975\\niyr:2010\\n\\neyr:2026 pid:2844744\\niyr:1958 byr:2017 hcl:z\\nhgt:192in\\necl:#971530\\n\\niyr:2020\\nbyr:1960 eyr:2028 cid:162 pid:491912610 hcl:#fffffd hgt:59in\\n\\niyr:2012 pid:365229485 ecl:amb byr:1933 hcl:#18171d eyr:2024\\n\\nhgt:193cm pid:473100400\\nhcl:#efcc98\\ncid:201 eyr:2020 byr:1969 ecl:gry iyr:2016\\n\\neyr:2025 pid:137807160 iyr:2014\\necl:grn byr:1944 hgt:168cm hcl:#ceb3a1\\n\\nbyr:2008 ecl:xry\\niyr:2012 hcl:#efcc98 eyr:2028 pid:272344138\\n\\neyr:2024 pid:959415175 cid:148 hcl:#efcc98\\nbyr:1977 hgt:179cm ecl:amb\\n\\npid:253742161 ecl:hzl hcl:#602927\\neyr:2021 hgt:191cm byr:1925 iyr:2010\\n\\necl:amb hcl:#341e13\\neyr:2024 iyr:2017\\nbyr:1975\\npid:838040028 hgt:172cm\\n\\nhgt:172in\\npid:311113967 iyr:2015 cid:111 eyr:2023 ecl:oth byr:2003 hcl:#866857\\n\\nhcl:#888785 byr:1978 hgt:64in pid:442064310 eyr:2021\\niyr:2011 ecl:hzl\\n\\neyr:2021 byr:1988 hcl:#a97842\\npid:290578586 ecl:hzl hgt:174cm iyr:2020\\n\\nbyr:1998 iyr:2020 hgt:163cm ecl:oth eyr:2025\\nhcl:#6b5442 pid:913461954\\n\\nhgt:173cm hcl:#18171d\\neyr:2029 ecl:brn cid:313 byr:1980\\niyr:2011 pid:810497375\\n\\nbyr:1975 hgt:153cm eyr:2027 hcl:#fffffd pid:857730031\\necl:gry iyr:2020\\n\\nhcl:#18171d ecl:hzl\\npid:185778821 hgt:178 iyr:2014 eyr:2028 byr:1974\\n\\niyr:2015 hgt:163in hcl:#c0946f ecl:#4844a6 byr:1979 pid:124626004\\n\\neyr:2024\\npid:737015681 byr:1952\\necl:hzl iyr:2019\\nhgt:192cm hcl:#cfa07d\\n\\npid:2986469633 byr:2025 hgt:66cm hcl:z eyr:2011 iyr:2027 cid:311\\n\\nbyr:1962\\neyr:2032\\necl:lzr iyr:2014\\nhgt:70cm pid:94309916\\nhcl:#fffffd\\n\\ncid:350 hcl:#602927 iyr:2019 hgt:178cm\\npid:172238204 byr:1949 ecl:hzl\\neyr:2028\\n\\nhgt:153cm\\nhcl:#ceb3a1\\necl:grn\\nbyr:1997\\npid:266747822\\niyr:2011 eyr:2022\\n\\npid:839681159 hgt:150cm eyr:2024 hcl:4d6414\\necl:blu\\niyr:2018 byr:1988\\n\\nbyr:1930 iyr:2011 pid:352711700 hgt:174cm cid:67 eyr:2020 ecl:hzl hcl:#6b5442\\n\\nbyr:1949 iyr:2013 hcl:#623a2f eyr:2030\\nhgt:176cm\\n\\nhgt:164cm eyr:2026 hcl:#866857\\niyr:2018 pid:922679610 byr:1974\\necl:brn\\ncid:114\\n\\neyr:2038 cid:317\\nhgt:166in pid:0384056779 byr:2013 iyr:2021\\necl:xry\\n\\ncid:83 hgt:166cm eyr:2026 iyr:2018 byr:1994 ecl:brn pid:858360477 hcl:#ceb3a1\\n\\nhgt:169cm eyr:2020\\npid:110129489 byr:1958\\necl:oth hcl:#7d3b0c\\niyr:2011\\n\\ncid:279\\niyr:2019 byr:1995 eyr:2026 ecl:hzl\\nhcl:#7d3b0c hgt:185cm pid:085427066\\n\\nhcl:#c0946f\\niyr:2011 eyr:2027\\necl:amb\\nbyr:1943 pid:060674566 hgt:183in\\n\\nhgt:156cm hcl:#c0946f pid:242827141\\ncid:152\\niyr:2018\\neyr:2025 byr:1963\\n\\nbyr:1925 cid:168 eyr:2020 hcl:#cfa07d iyr:2011 ecl:brn hgt:150cm pid:740118192\\n\\necl:oth byr:1951 eyr:2025 cid:213\\niyr:2020\\nhgt:154cm\\n\\neyr:2025 iyr:2018 ecl:grn cid:91 byr:1925\\nhgt:164cm hcl:#18171d\\n\\nbyr:1997\\niyr:2018 eyr:2023 hcl:#602927 pid:251296833 ecl:blu\\nhgt:185cm\\n\\nhgt:168cm pid:556895048\\nhcl:#341e13 ecl:oth eyr:2020 cid:64 byr:1940\\n\\nbyr:1996 pid:821204904 cid:250 ecl:amb eyr:2026 hgt:185cm iyr:2019\\n\\necl:grn hcl:#b6652a iyr:2013\\neyr:2028 hgt:157cm\\nbyr:1925 pid:158cm\\n\\nhgt:190cm iyr:2019 ecl:oth eyr:2028 hcl:#341e13 cid:334 pid:258135663 byr:1972\\n\\nbyr:1936 hgt:76in pid:748344702 cid:335\\neyr:2027 hcl:#a97842 ecl:amb iyr:2015\\n\\nhcl:z hgt:66cm eyr:2029\\npid:#1589e0 iyr:2019 ecl:hzl\\n\\nhcl:#733820 ecl:amb\\niyr:2013\\nhgt:188cm byr:1955 pid:125663066 eyr:2020 cid:179\\n\\niyr:2017\\nhgt:185cm ecl:grn\\ncid:298 eyr:2030 hcl:#5b1c03\\nbyr:1992 pid:092887457\\n\\neyr:2032 ecl:grn hgt:82 iyr:2022\\npid:180cm byr:2003\\ncid:55 hcl:z\\n\\npid:257666411 eyr:2023 byr:1982 hgt:179cm hcl:#18171d ecl:brn iyr:2010\\n\\niyr:2020\\necl:amb hcl:#18171d\\npid:971402454 eyr:2028\\n\\nhcl:#efcc98 byr:1964 pid:577424639 eyr:2030 iyr:2010 ecl:brn hgt:169cm\\ncid:285\\n\\necl:amb byr:1958 hgt:159cm hcl:#efcc98 eyr:2024 iyr:2016\\npid:029502840\\n\\nhcl:ac11eb\\nbyr:2007 pid:0489471320 hgt:69cm iyr:2030 ecl:blu eyr:2033\\n\\npid:3785138563 eyr:2020 iyr:2020\\nhcl:#966583 byr:2008 hgt:186cm ecl:gry\\n\\niyr:2014 pid:868785127 eyr:2029\\ncid:220 hcl:#18171d ecl:blu byr:1948 hgt:171cm\\n\\nbyr:1936\\npid:433437105\\nhcl:#c0946f eyr:2020 iyr:2019 hgt:160cm ecl:brn\\n\\niyr:2015 eyr:2024 hgt:176cm ecl:hzl\\nbyr:1995 pid:101835436 hcl:#ceb3a1\\n\\neyr:1959\\nhcl:#cfa07d iyr:2010 pid:9214728\\necl:#42fda0 hgt:71 byr:2022\\n\\nbyr:1998 iyr:2011 cid:275 ecl:oth\\npid:924517068 eyr:2024 hgt:191cm\\nhcl:#623a2f\\n\\nhgt:157 hcl:z\\nbyr:1923 pid:#f6ce52 iyr:1975 ecl:lzr cid:100\\n\\npid:565022102\\neyr:2021 hcl:#efcc98\\nbyr:1988 ecl:gry iyr:2012\\n\\nhgt:156cm\\nhcl:#b6652a eyr:2021 pid:969724332\\ncid:126 iyr:2016\\necl:hzl byr:1988\\n\\necl:blu hcl:#866857 hgt:153cm\\npid:798083560\\niyr:2015\\nbyr:1981 eyr:2030\\n\\niyr:2013 cid:103 hcl:#efcc98 eyr:2022 byr:1964 ecl:gry\\nhgt:161cm pid:950689613\\n\\npid:4316019547\\necl:gmt\\neyr:2029 byr:2011 iyr:2005 hgt:170cm cid:135\\nhcl:567fd8\\n\\nhcl:#6b5442 pid:843348901 byr:1960\\nhgt:156cm\\neyr:2028 ecl:amb\\n\\neyr:2027\\npid:286247733 byr:2000 hgt:191cm\\niyr:2014\\nhcl:#341e13 ecl:amb\\n\\necl:gmt byr:2005 hgt:182cm pid:376332625 hcl:z iyr:2021\\neyr:1949\\n\\nhgt:184cm\\nbyr:1940\\ncid:260 eyr:2030 ecl:brn\\niyr:2011 pid:792881807\\n\\niyr:1936 eyr:2021 cid:133 hcl:#623a2f byr:2003 pid:197167496\\necl:#8896de\\n\\nhgt:67in cid:110\\nbyr:1951\\npid:389358116 eyr:2028 iyr:2017\\necl:grn\\n\\nhgt:161cm\\ncid:215\\npid:116325531 iyr:2019\\neyr:2025 hcl:#18171d ecl:blu\\nbyr:1951\\n\\npid:787859682 hcl:#a97842 eyr:2020 byr:1948 hgt:190cm ecl:brn iyr:2020\\n\\npid:034440951 hgt:73cm hcl:803e55\\ncid:350 byr:1985\\necl:#a18487 eyr:2031\\niyr:1973\\n\\nhcl:#40ee86 ecl:brn\\niyr:2016 byr:1922 hgt:150cm pid:449374426\\n\\neyr:2040 hcl:260be4 pid:208681353 byr:2029 ecl:gry\\nhgt:178cm\\n\\nhcl:#18171d hgt:162cm byr:1983 eyr:2020 pid:328556776 iyr:2017 ecl:grn\\n\\neyr:2029\\nhcl:#a97842\\npid:#7bd019 iyr:2015\\nhgt:168cm byr:1926\\necl:grn\\n\\necl:grt eyr:2034 pid:640680934 hgt:189in cid:276 byr:1969 hcl:511eed iyr:2023\\n\\neyr:2039 hgt:182in cid:145\\nhcl:4a259b iyr:2026\\nbyr:2004\\necl:xry pid:#a3c9ea\\n\\nhcl:#866857\\npid:615665716 ecl:blu hgt:164cm iyr:2020\\nbyr:1948 eyr:2024 cid:286\\n\\nhcl:#b6652a hgt:59in eyr:2027\\npid:752461325 ecl:oth\\nbyr:1932 iyr:2019\\n\\neyr:2030 byr:1936 ecl:hzl\\niyr:2010 cid:263 pid:186570962 hcl:#888785\\nhgt:163cm\\n\\nbyr:1949 ecl:blu\\npid:407719342\\neyr:2030\\nhcl:#b6652a iyr:2012\\nhgt:186cm\\n\\npid:154cm ecl:amb byr:1944\\neyr:2022\\nhcl:z iyr:2017\\n\\nbyr:1980 hcl:#d2c954 iyr:2013 ecl:brn hgt:72in\\neyr:2030\\npid:017095362\\n\\nhgt:179cm\\nhcl:#ceb3a1 cid:61 eyr:2026\\niyr:2011\\npid:897403026 byr:1984\\necl:amb\\n\\ncid:150 hgt:181cm\\neyr:2028 pid:894689339\\nhcl:#602927 byr:1933 ecl:grn iyr:2018\\n\\npid:125553946 byr:1942 eyr:2026 hgt:193cm\\niyr:2010 ecl:gry\\nhcl:z\\n\\neyr:2013 pid:1213613355\\necl:#b08dca hgt:190in\\nhcl:06adb3 cid:303 iyr:2010\\n\\niyr:2019 pid:255938897\\neyr:2022 hgt:152cm\\nbyr:1956 ecl:grn hcl:#ceb3a1\\n\\neyr:2029\\npid:670713784\\niyr:2020 ecl:grn\\nhgt:155cm hcl:#6b5442 byr:2002\\n\\nbyr:1925 hcl:#866857 pid:323449427 ecl:oth\\neyr:2023 hgt:163cm iyr:2014\\n\\npid:841608722 byr:1955 hgt:150cm ecl:blu eyr:2029\\nhcl:#6b5442\\n\\neyr:2023 hcl:#efcc98\\nhgt:164cm ecl:gry\\niyr:2018\\nbyr:1993 pid:501920795\\n\\neyr:2030\\niyr:2019 hgt:73in hcl:#bf908a\\nbyr:1961 ecl:blu cid:86 pid:436811356\\n\\npid:#02516a hgt:131 iyr:1969 ecl:grt byr:2015\\neyr:2010 hcl:z\\n\\necl:#25fb6c cid:239 pid:167cm iyr:2021\\nbyr:2023 hgt:75cm\\nhcl:z eyr:1931\\n\\npid:279251948\\necl:oth hcl:#6b5442\\nbyr:1943 iyr:2015 hgt:173cm eyr:2039\\n\\nbyr:1935\\niyr:2013 hgt:151cm hcl:#b6652a\\necl:grn\\neyr:2023 pid:741958450\\n\\nhcl:6beab7 byr:1986\\nhgt:85\\niyr:2012 pid:#d98df3 eyr:2035\\necl:dne\\n\\nbyr:1929\\npid:764478810 ecl:grn\\nhcl:#866857 iyr:2019 hgt:155cm eyr:2022 cid:277\\n\\nhgt:155cm pid:450816410 eyr:2030 cid:165 byr:1969 ecl:blu hcl:#866857 iyr:2019\\n\\ncid:330 pid:168777528 eyr:2024 ecl:blu hcl:#341e13\\nhgt:178cm iyr:2013\\nbyr:1921\\n\\neyr:2037 iyr:1973 hcl:a4ebf3\\npid:161cm\\necl:oth hgt:64cm cid:62\\n\\ncid:235\\nhcl:538f8a hgt:70cm\\niyr:1970 pid:177837127\\necl:#95700d byr:2003\\n\\necl:hzl pid:375018246 hgt:161cm\\niyr:2011 eyr:2029 hcl:#c0946f\\nbyr:1956\\n\\nhcl:#888785\\niyr:2016\\npid:161cm byr:1977 ecl:#0188d8 eyr:2029\\ncid:104 hgt:63in\\n\\nbyr:1979 eyr:2020 hcl:#ceb3a1 ecl:amb pid:752141341 hgt:150cm iyr:2010\\n\\ncid:274 byr:1928 iyr:2018 eyr:2023 hcl:#a97842 hgt:173cm pid:186060112 ecl:gry\\n\\nhcl:#341e13\\necl:blu iyr:2011\\nhgt:190cm cid:292 pid:974271891 eyr:2020 byr:1927\\n\\nhcl:#fffffd eyr:2025\\necl:brn byr:1923 iyr:2011\\npid:037981552\\n\\necl:blu pid:412817852 hgt:150cm iyr:2026\\nbyr:2026\\neyr:2020\\n\\necl:brn byr:1988 eyr:2026\\nhgt:178cm pid:008152501\\nhcl:#602927\\niyr:2020\\n\\necl:brn pid:877401308 byr:1923 cid:154\\nhgt:170cm\\nhcl:#fffffd\\niyr:2014\\neyr:2022\\n\\ncid:56 hcl:ee020e pid:590581021 iyr:2018 hgt:72cm byr:2007\\neyr:1964 ecl:oth\\n\\neyr:2029\\niyr:2012 ecl:oth\\nhgt:185cm cid:235\\nbyr:2002\\npid:064901580\\n\\nbyr:1956 hcl:#6c1a8c pid:497814257\\neyr:1964 hgt:155cm ecl:gmt iyr:2030\\n\\nbyr:1935 hgt:171cm cid:253 pid:033393224 hcl:#c0946f iyr:2012\\necl:blu eyr:2025\\n\\nbyr:1977 hcl:#602927 cid:175 iyr:2010\\npid:9391986394 hgt:65in eyr:2026\\necl:amb\\n\\niyr:2011 hgt:158cm ecl:#31cae1 byr:1958 hcl:b94ad1\\neyr:2023 pid:#400a21\\n\\nhcl:e205b0 pid:84195182 byr:2012 eyr:2037 ecl:zzz hgt:75cm iyr:2030\\n\\npid:102379515\\nbyr:1971\\nhgt:169cm\\necl:amb\\neyr:2020 hcl:#cfa07d iyr:2017\\n\\npid:236611157\\neyr:2020 hcl:#b6652a\\niyr:2017 cid:194 byr:2001 hgt:169cm ecl:gry\\n\\niyr:2012 hcl:a256b5 eyr:2040 cid:62 hgt:177in byr:2010\\n\\neyr:2028 byr:2009 iyr:2020 ecl:brn\\npid:12371575 hcl:#866857 hgt:190cm\\n\\nbyr:1965 eyr:2028\\npid:402013776 hcl:#bc4e9e cid:183 hgt:150cm iyr:2015\\n\\npid:0269051559\\nbyr:1936 hcl:z ecl:#ff0ab9\\niyr:2014 eyr:2031\\ncid:346 hgt:153in\\n\\nhcl:#18171d iyr:1929 hgt:157cm\\neyr:2036 byr:1970\\necl:amb\\n\\nhcl:#733820\\neyr:2022\\npid:096076686\\niyr:2010\\nhgt:192cm\\nbyr:1957\\n\\nhcl:#ceb3a1 ecl:brn iyr:2013\\neyr:2025\\nbyr:1953 pid:751516675\\nhgt:175cm\\n\\nbyr:1928\\neyr:2027\\ncid:85\\nhgt:179cm ecl:oth\\npid:169307999 hcl:#3e07af iyr:2010\\n\\nhgt:60cm byr:2008 hcl:z\\neyr:1965 pid:167cm\\ncid:106\\niyr:1930\\n\\nhcl:#1099d9 ecl:amb pid:638820661 iyr:2014\\nbyr:1998 eyr:2025\\nhgt:162cm\\n\\necl:amb\\neyr:2022 hcl:#623a2f byr:1956\\nhgt:154cm\\niyr:2010 pid:717452826\\n\\nhcl:fc9ba5\\niyr:1928\\neyr:2029 pid:54503219\\nbyr:2020\\necl:#d2155a hgt:124\\n\\neyr:2027\\nhcl:#7d3b0c hgt:178 ecl:#63b8e6 iyr:2015 byr:1954\\n\\necl:oth byr:1970\\npid:833178609 hcl:#c0946f iyr:2016 cid:81 eyr:1976\\nhgt:69in\\n\\nhcl:#0cf4b8 pid:499271062 hgt:62in ecl:hzl iyr:2016 byr:1922\\neyr:2022\\n\\nbyr:1994\\neyr:2029 hgt:174cm hcl:#efcc98\\necl:amb\\niyr:2019 pid:297210449\\n\\necl:hzl\\neyr:2026 iyr:2017 hcl:#a97842 hgt:162cm\\nbyr:1950\\n\\npid:091886000 hgt:179cm byr:1975 eyr:2020 cid:326\\necl:oth\\niyr:2015 hcl:#a97842\\n\\nhcl:#efcc98 hgt:176cm byr:1940 iyr:2016 ecl:brn pid:514758507 eyr:2024 cid:313\\n\\neyr:2026 byr:1980\\nhgt:155cm\\niyr:2013 pid:367909831 ecl:oth\\n\\nbyr:1965\\neyr:2021 iyr:2017\\nhgt:185cm\\nhcl:#a97842 ecl:hzl pid:238901177\\n\\nhgt:156cm pid:916654189\\nbyr:1943 eyr:2022 ecl:amb hcl:#341e13 iyr:2016\\n\\ncid:305 iyr:2013\\neyr:2029 hgt:163cm ecl:blu\\nhcl:#fffffd pid:944033881\\nbyr:1952\\n\\npid:638190538\\nhcl:#866857 ecl:brn\\neyr:2030 iyr:2016 cid:78 byr:1943 hgt:186cm\\n\\neyr:2024 iyr:2015\\npid:231006970\\ncid:312 byr:2000 hcl:#623a2f hgt:190cm ecl:brn\\n\\necl:#f89e87\\nhcl:#fffffd hgt:166 cid:215\\niyr:1961\\neyr:2027 pid:314310197 byr:1977\\n\\nhcl:z eyr:1995 pid:951911095 hgt:154cm\\necl:xry\\ncid:154 byr:2023\\n\\nhgt:66in hcl:#866857\\necl:brn\\npid:328148585 byr:1984 eyr:2024\\n\\npid:456453839\\neyr:2024 hcl:#fffffd byr:1990 ecl:amb\\n\\neyr:2030 cid:149 pid:983735096 hgt:179cm iyr:2014 byr:1957 ecl:gry hcl:#341e13\\n\\nbyr:2001 hgt:157cm\\necl:hzl eyr:2021\\nhcl:#ceb3a1\\npid:558527031 iyr:2018\\n\\nhgt:122 ecl:oth hcl:z\\npid:384664729\\niyr:2012 cid:298 eyr:2023\\n\\necl:utc eyr:2024\\nhgt:162in iyr:2018 pid:1722490341 byr:2027\\nhcl:#18171d\\n\\necl:gry iyr:2017 hcl:#602927 cid:303 byr:1950\\npid:509264482 eyr:2030\\nhgt:164cm\\n\\nhgt:192cm pid:967128169 iyr:2019 ecl:blu eyr:2024 hcl:#fffffd byr:1949 cid:301\\n\\necl:blu\\ncid:71 hgt:164cm eyr:2022 hcl:#cfa07d pid:750303088\\nbyr:1949 iyr:2014\\n\\niyr:2014\\npid:401425898 byr:1981\\nhcl:#7d3b0c hgt:167cm eyr:2028\\n\\nhcl:#602927 hgt:160cm iyr:2014\\neyr:2023 byr:1940 pid:748539736 ecl:amb\\n\\neyr:2025\\nhcl:#c0946f pid:325296854 iyr:2020\\nhgt:76cm ecl:amb byr:1921\\n\\nhgt:190cm\\niyr:2011 pid:082777116\\nbyr:1979 cid:73 ecl:oth hcl:#6b5442 eyr:2021\\n\\neyr:2029 ecl:amb hgt:151cm pid:144881592 byr:1964 hcl:#efcc98 iyr:2012\\n\\nhcl:#efcc98\\niyr:2019\\neyr:2023 byr:1999 pid:645291123\\necl:brn\\n\\neyr:2029 pid:922956941 hcl:#623a2f byr:1934\\necl:grn hgt:151cm\\niyr:2019\\n\\nbyr:1992 ecl:brn\\nhcl:#a97842\\npid:269079906 hgt:187cm\\niyr:2016 cid:218\\n\\nbyr:1951 ecl:oth eyr:2026 hgt:185cm\\ncid:82 hcl:#7d3b0c\\niyr:2020 pid:052476816\\n\\neyr:2026\\ncid:319 iyr:2020\\necl:brn hcl:#888785\\nhgt:172cm pid:327064207 byr:1956\\n\\nhgt:178cm\\npid:638854420 byr:1995 eyr:2030 ecl:gry hcl:#7d3b0c iyr:2018\\n\\niyr:2026 hcl:#b6652a\\nbyr:1946\\nhgt:186in pid:622875187 eyr:2028 ecl:gry cid:140\\n\\nbyr:1931 ecl:oth eyr:2030\\npid:437813485\\nhgt:181cm\\nhcl:#efcc98 iyr:2018\\n\\nbyr:1999\\necl:amb\\nhgt:160cm iyr:2013 hcl:#b6652a pid:043039693\\neyr:2022\\n\\nbyr:2025\\npid:#fd7ad7 eyr:2025 hgt:63in\\necl:oth iyr:2010 hcl:#b6652a\\n\\necl:grn\\nbyr:1939 eyr:2025 hgt:171cm cid:134 iyr:2020 pid:090346629\\nhcl:#cfa07d\\n\\nhcl:z\\neyr:2031 cid:74\\npid:50216290 ecl:utc iyr:2030\\nhgt:176in\\n\\nbyr:1971 ecl:brn hgt:190cm pid:791682756 hcl:#fffffd\\niyr:2020 eyr:2027\\n\\niyr:1931 byr:2025 hgt:76cm pid:735796617 eyr:2040 ecl:utc hcl:#c0946f\\n\\nhgt:163cm\\nhcl:#18171d\\necl:hzl\\npid:628854394 cid:311 iyr:2020 eyr:2027\\n\\nhcl:z\\necl:amb pid:#a8f973 hgt:94\\neyr:2027 byr:2020 iyr:2012 cid:202\\n\\npid:086190379 byr:1931 ecl:blu iyr:2010 eyr:2027 hgt:175cm\\n\\necl:#0dafcd byr:2025 iyr:2021 eyr:1970 hgt:63cm cid:260 hcl:75300a pid:208921120\\n\\npid:024722981 iyr:2011 hgt:193cm hcl:#efcc98 ecl:blu byr:2001\\n\\nbyr:2027\\ncid:123\\necl:xry hgt:183cm iyr:2019 eyr:2026\\nhcl:#c0946f\\npid:380513483\\n\\neyr:2028 pid:302044900 iyr:2011 byr:1938 hgt:190cm ecl:amb hcl:#c0946f\\n\\neyr:2024 pid:672033747 byr:1931\\niyr:2020 hcl:#f01aed ecl:brn\\n\\nhgt:184cm hcl:#efcc98 pid:391597648\\niyr:2020 ecl:gry\\nbyr:1961\\n\\niyr:2013 hgt:191cm byr:1935 eyr:2028 hcl:#ceb3a1 cid:195 ecl:brn\\n\\neyr:2025 pid:322775528 hgt:155cm hcl:#efcc98 iyr:2015 byr:1996 ecl:oth\\n\\nbyr:1960\\nhgt:183cm pid:764315947 eyr:2030\\nhcl:#ceb3a1 ecl:brn\\n\\neyr:2029 hgt:168cm byr:1929 pid:800222003 ecl:gry hcl:#8f8aaa\\niyr:2011\\n\\nhcl:#623a2f ecl:hzl hgt:168cm pid:795434985 eyr:2020 iyr:2020 cid:209\\nbyr:1970\\n\\ncid:325\\nbyr:2007 eyr:1933 hgt:188in\\npid:713080083 ecl:#d624ca iyr:2030 hcl:z\\n\\nhcl:#7d3b0c pid:431742871\\necl:hzl hgt:169cm cid:340\\neyr:2023\\niyr:2017 byr:1994\";","export default \"You watch the Elves and their sleigh fade into the distance as they head toward the North Pole.\\n\\nActually, you're the one fading. The falling sensation returns.\\n\\nThe low fuel warning light is illuminated on your wrist-mounted device. Tapping it once causes it to project a hologram of the situation: a **300x300** grid of fuel cells and their current power levels, some negative. You're not sure what negative power means in the context of time travel, but it can't be good.\\n\\nEach fuel cell has a coordinate ranging **from 1 to 300** in both the X (horizontal) and Y (vertical) direction. In `X,Y` notation, the top-left cell is `1,1`, and the top-right cell is `300,1`.\\n\\nThe interface lets you select **any 3x3 square** of fuel cells. To increase your chances of getting to your destination, you decide to choose the 3x3 square with the **largest total power**.\\n\\nThe power level in a given fuel cell can be found through the following process:\\n\\n- Find the fuel cell's **rack ID**, which is its **X coordinate plus 10**.\\n- Begin with a power level of the **rack ID** times the **Y coordinate**.\\n- Increase the power level by the value of the **grid serial number** (your puzzle input).\\n- Set the power level to itself multiplied by the **rack ID**.\\n- Keep only the **hundreds digit** of the power level (so `12`**`3`**`45` becomes `3`; numbers with no hundreds digit become `0`).\\n- **Subtract 5** from the power level.\\n\\nFor example, to find the power level of the fuel cell at `3,5` in a grid with serial number `8`:\\n\\n- The rack ID is `3 + 10 =` **`13`**.\\n- The power level starts at `13 * 5 =` **`65`**.\\n- Adding the serial number produces `65 + 8 =` **`73`**.\\n- Multiplying by the rack ID produces `73 * 13 =` **`949`**.\\n- The hundreds digit of **`9`**`49` is **`9`**.\\n- Subtracting 5 produces `9 - 5 =` **`4`**.\\n\\nSo, the power level of this fuel cell is **`4`**.\\n\\nHere are some more example power levels:\\n\\n- Fuel cell at ` 122,79`, grid serial number `57`: power level `-5`.\\n- Fuel cell at `217,196`, grid serial number `39`: power level ` 0`.\\n- Fuel cell at `101,153`, grid serial number `71`: power level ` 4`.\\n\\nYour goal is to find the 3x3 square which has the largest total power. The square must be entirely within the 300x300 grid. Identify this square using the X,Y coordinate of its **top-left fuel cell**. For example:\\n\\nFor grid serial number 18, the largest total 3x3 square has a top-left corner of **`33,45`** (with a total power of 29); these fuel cells appear in the middle of this 5x5 region:\\n\\n```\\n-2  -4   4   4   4\\n-4   4   4   4  -5\\n 4   3   3   4  -4\\n 1   1   2   4  -3\\n-1   0   2  -5  -2\\n```\\n\\nFor grid serial number `42`, the largest 3x3 square's top-left is **`21,61`** (with a total power of 30); they are in the middle of this region:\\n\\n```\\n-3   4   2   2   2\\n-4   4   3   3   4\\n-5   3   3   4  -4\\n 4   3   3   4  -3\\n 3   3   3  -5  -1\\n```\\n\\n**What is the `X,Y` coordinate of the top-left fuel cell of the 3x3 square with the largest total power?**\\n\\n[comment]: <> (PART 2)\\n\\nYou discover a dial on the side of the device; it seems to let you select a square of **any size**, not just 3x3. Sizes from 1x1 to 300x300 are supported.\\n\\nRealizing this, you now must find the **square of any size with the largest total power**. Identify this square by including its size as a third parameter after the top-left coordinate: a 9x9 square with a top-left corner of `3,5` is identified as `3,5,9`.\\n\\nFor example:\\n\\n- For grid serial number `18`, the largest total square (with a total power of `113`) is `16x16` and has a top-left corner of `90,269`, so its identifier is **`90,269,16`**.\\n- For grid serial number `42`, the largest total square (with a total power of `119`) is `12x12` and has a top-left corner of `232,251`, so its identifier is **`232,251,12`**.\\n\\n**What is the `X,Y,size` identifier of the square with the largest total power?**\";","export default \"You barely reach the safety of the cave when the whale smashes into the cave mouth, collapsing it. Sensors indicate another exit to this cave at a much greater depth, so you have no choice but to press on.\\n\\nAs your submarine slowly makes its way through the cave system, you notice that the four-digit [seven-segment displays](https://en.wikipedia.org/wiki/Seven-segment_display) in your submarine are malfunctioning; they must have been damaged during the escape. You'll be in a lot of trouble without them, so you'd better figure out what's wrong.\\n\\nEach digit of a seven-segment display is rendered by turning on or off any of seven segments named `a` through `g`:\\n\\n```\\n  0:      1:      2:      3:      4:\\n aaaa    ....    aaaa    aaaa    ....\\nb    c  .    c  .    c  .    c  b    c\\nb    c  .    c  .    c  .    c  b    c\\n ....    ....    dddd    dddd    dddd\\ne    f  .    f  e    .  .    f  .    f\\ne    f  .    f  e    .  .    f  .    f\\n gggg    ....    gggg    gggg    ....\\n\\n  5:      6:      7:      8:      9:\\n aaaa    aaaa    aaaa    aaaa    aaaa\\nb    .  b    .  .    c  b    c  b    c\\nb    .  b    .  .    c  b    c  b    c\\n dddd    dddd    ....    dddd    dddd\\n.    f  e    f  .    f  e    f  .    f\\n.    f  e    f  .    f  e    f  .    f\\n gggg    gggg    ....    gggg    gggg\\n```\\n\\nSo, to render a `1`, only segments `c` and `f` would be turned on; the rest would be off. To render a `7`, only segments `a`, `c`, and `f` would be turned on.\\n\\nThe problem is that the signals which control the segments have been mixed up on each display. The submarine is still trying to display numbers by producing output on signal wires `a` through `g`, but those wires are connected to segments **randomly**. Worse, the wire/segment connections are mixed up separately for each four-digit display! (All of the digits **within** a display use the same connections, though.)\\n\\nSo, you might know that only signal wires `b` and `g` are turned on, but that doesn't mean **segments** `b` and `g` are turned on: the only digit that uses two segments is `1`, so it must mean segments `c and `f` are meant to be on. With just that information, you still can't tell which wire (`b`/`g`) goes to which segment (`c`/`f`). For that, you'll need to collect more information.\\n\\nFor each display, you watch the changing signals for a while, make a note of **all ten unique signal patterns** you see, and then write down a single **four digit output value** (your puzzle input). Using the signal patterns, you should be able to work out which pattern corresponds to which digit.\\n\\nFor example, here is what you might see in a single entry in your notes:\\n\\n```\\nacedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab |\\ncdfeb fcadb cdfeb cdbaf\\n```\\n\\n(The entry is wrapped here to two lines so it fits; in your notes, it will all be on a single line.)\\n\\nEach entry consists of ten **unique signal patterns**, a `|` delimiter, and finally the **four digit output value**. Within an entry, the same wire/segment connections are used (but you don't know what the connections actually are). The unique signal patterns correspond to the ten different ways the submarine tries to render a digit using the current wire/segment connections. Because `7` is the only digit that uses three segments, `dab` in the above example means that to render a `7`, signal lines `d`, `a`, and `b` are on. Because `4` is the only digit that uses four segments, `eafb` means that to render a `4`, signal lines `e`, `a`, `f`, and `b` are on.\\n\\nUsing this information, you should be able to work out which combination of signal wires corresponds to each of the ten digits. Then, you can decode the four digit output value. Unfortunately, in the above example, all of the digits in the output value (`cdfeb fcadb cdfeb cdbaf`) use five segments and are more difficult to deduce.\\n\\nFor now, **focus on the easy digits**. Consider this larger example:\\n\\n<pre>\\nbe cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb |\\n<b>fdgacbe</b> cefdb cefbgd <b>gcbe</b>\\nedbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec |\\nfcgedb <b>cgb</b> <b>dgebacf</b> <b>gc</b>\\nfgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef |\\n<b>cg</b> <b>cg</b> fdcagb <b>cbg</b>\\nfbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega |\\nefabcd cedba gadfec <b>cb</b>\\naecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga |\\n<b>gecf</b> <b>egdcabf</b> <b>bgf</b> bfgea\\nfgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf |\\n<b>gebdcfa</b> <b>ecba</b> <b>ca</b> <b>fadegcb</b>\\ndbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf |\\n<b>cefg</b> dcbef <b>fcge</b> <b>gbcadfe</b>\\nbdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd |\\n<b>ed</b> bcgafe cdgba cbgef\\negadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg |\\n<b>gbdfcae</b> <b>bgc</b> <b>cg</b> <b>cgb</b>\\ngcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc |\\n<b>fgae</b> cfgab <b>fg</b> bagce\\n<pre>\\n\\nBecause the digits `1`, `4`, `7`, and `8` each use a unique number of segments, you should be able to tell which combinations of signals correspond to those digits. Counting **only digits in the output values** (the part after `|` on each line), in the above example, there are **`26`** instances of digits that use a unique number of segments (highlighted above).\\n\\n**In the output values, how many times do digits `1`, `4`, `7`, or `8` appear?**\\n\\n[comment]: <> (PART 2)\\n\\nThrough a little deduction, you should now be able to determine the remaining digits. Consider again the first example above:\\n\\n```\\nacedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab |\\ncdfeb fcadb cdfeb cdbaf\\n```\\n\\nAfter some careful analysis, the mapping between signal wires and segments only make sense in the following configuration:\\n\\n```\\n dddd\\ne    a\\ne    a\\n ffff\\ng    b\\ng    b\\n cccc\\n```\\n\\nSo, the unique signal patterns would correspond to the following digits:\\n\\n- `acedgfb`: `8`\\n- `cdfbe`: `5`\\n- `gcdfa`: `2`\\n- `fbcad`: `3`\\n- `dab`: `7`\\n- `cefabd`: `9`\\n- `cdfgeb`: `6`\\n- `eafb`: `4`\\n- `cagedb`: `0`\\n- `ab`: `1`\\n\\nThen, the four digits of the output value can be decoded:\\n\\n- `cdfeb`: **`5`**\\n- `fcadb`: **`3`**\\n- `cdfeb`: **`5`**\\n- `cdbaf`: **`3`**\\n\\nTherefore, the output value for this entry is **`5353`**.\\n\\nFollowing this same process for each entry in the second, larger example above, the output value of each entry can be determined:\\n\\n- `fdgacbe cefdb cefbgd gcbe`: `8394`\\n- `fcgedb cgb dgebacf gc`: `9781`\\n- `cg cg fdcagb cbg`: `1197`\\n- `efabcd cedba gadfec cb`: `9361`\\n- `gecf egdcabf bgf bfgea`: `4873`\\n- `gebdcfa ecba ca fadegcb`: `8418`\\n- `cefg dcbef fcge gbcadfe`: `4548`\\n- `ed bcgafe cdgba cbgef`: `1625`\\n- `gbdfcae bgc cg cgb`: `8717`\\n- `fgae cfgab fg bagce`: `4315`\\n\\nAdding all of the output values in this larger example produces **`61229`**.\\n\\nFor each entry, determine all of the wire/segment connections and decode the four-digit output values. **What do you get if you add up all of the output values?**\";","// a string of all valid unicode whitespaces\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002' +\n  '\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar toString = require('../internals/to-string');\nvar whitespaces = require('../internals/whitespaces');\n\nvar replace = uncurryThis(''.replace);\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = toString(requireObjectCoercible($this));\n    if (TYPE & 1) string = replace(string, ltrim, '');\n    if (TYPE & 2) string = replace(string, rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.es/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","export default \"Suddenly, the GPU contacts you, asking for help. Someone has asked it to simulate **too many particles**, and it won't be able to finish them all in time to render the next frame at this rate.\\n\\nIt transmits to you a buffer (your puzzle input) listing each particle in order (starting with particle `0`, then particle `1`, particle `2`, and so on). For each particle, it provides the `X`, `Y`, and `Z` coordinates for the particle's position (`p`), velocity (`v`), and acceleration (`a`), each in the format `<X,Y,Z>`.\\n\\nEach tick, all particles are updated simultaneously. A particle's properties are updated in the following order:\\n\\n- Increase the `X` velocity by the `X` acceleration.\\n- Increase the `Y` velocity by the `Y` acceleration.\\n- Increase the `Z` velocity by the `Z` acceleration.\\n- Increase the `X` position by the `X` velocity.\\n- Increase the `Y` position by the `Y` velocity.\\n- Increase the `Z` position by the `Z` velocity.\\n\\nBecause of seemingly tenuous rationale involving [z-buffering](https://en.wikipedia.org/wiki/Z-buffering), the GPU would like to know which particle will stay closest to position `<0,0,0>` in the long term. Measure this using the [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry), which in this situation is simply the sum of the absolute values of a particle's `X`, `Y`, and `Z` position.\\n\\nFor example, suppose you are only given two particles, both of which stay entirely on the X-axis (for simplicity). Drawing the current states of particles `0` and `1` (in that order) with an adjacent a number line and diagram of current `X` positions (marked in parentheses), the following would take place:\\n\\n```\\np=< 3,0,0>, v=< 2,0,0>, a=<-1,0,0>    -4 -3 -2 -1  0  1  2  3  4\\np=< 4,0,0>, v=< 0,0,0>, a=<-2,0,0>                         (0)(1)\\n\\np=< 4,0,0>, v=< 1,0,0>, a=<-1,0,0>    -4 -3 -2 -1  0  1  2  3  4\\np=< 2,0,0>, v=<-2,0,0>, a=<-2,0,0>                      (1)   (0)\\n\\np=< 4,0,0>, v=< 0,0,0>, a=<-1,0,0>    -4 -3 -2 -1  0  1  2  3  4\\np=<-2,0,0>, v=<-4,0,0>, a=<-2,0,0>          (1)               (0)\\n\\np=< 3,0,0>, v=<-1,0,0>, a=<-1,0,0>    -4 -3 -2 -1  0  1  2  3  4\\np=<-8,0,0>, v=<-6,0,0>, a=<-2,0,0>                         (0)   \\n```\\n\\nAt this point, particle `1` will never be closer to `<0,0,0>` than particle `0`, and so, in the long run, particle `0` will stay closest.\\n\\n**Which particle will stay closest to position `<0,0,0>`** in the long term?\\n\\n[comment]: <> (PART 2)\\n\\nTo simplify the problem further, the GPU would like to remove any particles that **collide**. Particles collide if their positions ever **exactly match**. Because particles are updated simultaneously, **more than two particles** can collide at the same time and place. Once particles collide, they are removed and cannot collide with anything else after that tick.\\n\\nFor example:\\n\\n```\\np=<-6,0,0>, v=< 3,0,0>, a=< 0,0,0>    \\np=<-4,0,0>, v=< 2,0,0>, a=< 0,0,0>    -6 -5 -4 -3 -2 -1  0  1  2  3\\np=<-2,0,0>, v=< 1,0,0>, a=< 0,0,0>    (0)   (1)   (2)            (3)\\np=< 3,0,0>, v=<-1,0,0>, a=< 0,0,0>\\n\\np=<-3,0,0>, v=< 3,0,0>, a=< 0,0,0>    \\np=<-2,0,0>, v=< 2,0,0>, a=< 0,0,0>    -6 -5 -4 -3 -2 -1  0  1  2  3\\np=<-1,0,0>, v=< 1,0,0>, a=< 0,0,0>             (0)(1)(2)      (3)   \\np=< 2,0,0>, v=<-1,0,0>, a=< 0,0,0>\\n\\np=< 0,0,0>, v=< 3,0,0>, a=< 0,0,0>    \\np=< 0,0,0>, v=< 2,0,0>, a=< 0,0,0>    -6 -5 -4 -3 -2 -1  0  1  2  3\\np=< 0,0,0>, v=< 1,0,0>, a=< 0,0,0>                       X (3)      \\np=< 1,0,0>, v=<-1,0,0>, a=< 0,0,0>\\n\\n------destroyed by collision------    \\n------destroyed by collision------    -6 -5 -4 -3 -2 -1  0  1  2  3\\n------destroyed by collision------                      (3)         \\np=< 0,0,0>, v=<-1,0,0>, a=< 0,0,0>\\n```\\n\\nIn this example, particles `0`, `1`, and `2` are simultaneously destroyed at the time and place marked `X`. On the next tick, particle `3` passes through unharmed.\\n\\n**How many particles are left** after all collisions are resolved?\";","export default \"Before: [1, 0, 1, 3]\\n9 2 1 0\\nAfter:  [2, 0, 1, 3]\\n\\nBefore: [0, 1, 2, 3]\\n13 0 0 1\\nAfter:  [0, 1, 2, 3]\\n\\nBefore: [3, 3, 2, 2]\\n7 0 3 1\\nAfter:  [3, 1, 2, 2]\\n\\nBefore: [1, 3, 2, 1]\\n8 3 2 3\\nAfter:  [1, 3, 2, 1]\\n\\nBefore: [3, 3, 2, 1]\\n14 0 2 1\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [2, 3, 1, 3]\\n9 2 1 3\\nAfter:  [2, 3, 1, 2]\\n\\nBefore: [2, 2, 1, 1]\\n15 3 3 0\\nAfter:  [0, 2, 1, 1]\\n\\nBefore: [1, 1, 2, 2]\\n5 1 2 2\\nAfter:  [1, 1, 0, 2]\\n\\nBefore: [1, 1, 0, 3]\\n10 1 3 2\\nAfter:  [1, 1, 0, 3]\\n\\nBefore: [2, 0, 1, 1]\\n7 0 2 0\\nAfter:  [1, 0, 1, 1]\\n\\nBefore: [1, 1, 3, 1]\\n2 1 0 2\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [2, 1, 2, 0]\\n5 1 2 1\\nAfter:  [2, 0, 2, 0]\\n\\nBefore: [2, 2, 3, 1]\\n0 0 2 3\\nAfter:  [2, 2, 3, 1]\\n\\nBefore: [1, 0, 0, 2]\\n3 0 2 2\\nAfter:  [1, 0, 0, 2]\\n\\nBefore: [3, 1, 0, 2]\\n1 1 3 3\\nAfter:  [3, 1, 0, 0]\\n\\nBefore: [2, 2, 3, 3]\\n10 1 3 1\\nAfter:  [2, 0, 3, 3]\\n\\nBefore: [0, 2, 2, 2]\\n13 2 1 0\\nAfter:  [1, 2, 2, 2]\\n\\nBefore: [2, 3, 3, 1]\\n15 3 3 2\\nAfter:  [2, 3, 0, 1]\\n\\nBefore: [2, 1, 3, 1]\\n0 0 2 1\\nAfter:  [2, 1, 3, 1]\\n\\nBefore: [3, 1, 2, 1]\\n5 1 2 2\\nAfter:  [3, 1, 0, 1]\\n\\nBefore: [1, 0, 2, 3]\\n4 0 2 3\\nAfter:  [1, 0, 2, 0]\\n\\nBefore: [2, 2, 1, 1]\\n15 2 3 2\\nAfter:  [2, 2, 0, 1]\\n\\nBefore: [1, 2, 1, 3]\\n10 2 3 0\\nAfter:  [0, 2, 1, 3]\\n\\nBefore: [3, 1, 0, 3]\\n10 1 3 0\\nAfter:  [0, 1, 0, 3]\\n\\nBefore: [0, 1, 0, 3]\\n6 0 0 1\\nAfter:  [0, 0, 0, 3]\\n\\nBefore: [3, 1, 1, 3]\\n12 2 1 1\\nAfter:  [3, 2, 1, 3]\\n\\nBefore: [2, 1, 2, 2]\\n5 1 2 0\\nAfter:  [0, 1, 2, 2]\\n\\nBefore: [1, 2, 2, 0]\\n4 0 2 0\\nAfter:  [0, 2, 2, 0]\\n\\nBefore: [1, 2, 2, 2]\\n4 0 2 2\\nAfter:  [1, 2, 0, 2]\\n\\nBefore: [3, 1, 1, 1]\\n12 2 1 1\\nAfter:  [3, 2, 1, 1]\\n\\nBefore: [0, 1, 1, 1]\\n12 2 1 3\\nAfter:  [0, 1, 1, 2]\\n\\nBefore: [3, 0, 2, 3]\\n10 2 3 2\\nAfter:  [3, 0, 0, 3]\\n\\nBefore: [1, 1, 0, 1]\\n11 1 3 2\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [3, 2, 2, 2]\\n14 0 2 2\\nAfter:  [3, 2, 1, 2]\\n\\nBefore: [1, 1, 0, 2]\\n2 1 0 3\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [3, 3, 0, 0]\\n0 2 0 1\\nAfter:  [3, 1, 0, 0]\\n\\nBefore: [0, 1, 1, 1]\\n12 2 1 2\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [2, 0, 1, 1]\\n7 0 2 1\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [1, 1, 2, 2]\\n2 1 0 1\\nAfter:  [1, 1, 2, 2]\\n\\nBefore: [3, 0, 1, 1]\\n9 2 1 3\\nAfter:  [3, 0, 1, 2]\\n\\nBefore: [3, 0, 3, 2]\\n7 0 3 1\\nAfter:  [3, 1, 3, 2]\\n\\nBefore: [2, 2, 1, 1]\\n7 0 2 1\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [2, 1, 0, 2]\\n15 3 3 0\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [0, 0, 1, 1]\\n6 0 0 2\\nAfter:  [0, 0, 0, 1]\\n\\nBefore: [1, 2, 0, 3]\\n3 0 2 2\\nAfter:  [1, 2, 0, 3]\\n\\nBefore: [2, 2, 3, 3]\\n10 1 3 0\\nAfter:  [0, 2, 3, 3]\\n\\nBefore: [1, 1, 2, 1]\\n2 1 0 2\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [1, 1, 2, 0]\\n2 1 0 1\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [3, 1, 2, 0]\\n5 1 2 0\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [2, 1, 1, 3]\\n7 0 2 0\\nAfter:  [1, 1, 1, 3]\\n\\nBefore: [2, 1, 1, 2]\\n12 2 1 1\\nAfter:  [2, 2, 1, 2]\\n\\nBefore: [1, 1, 0, 2]\\n3 0 2 2\\nAfter:  [1, 1, 0, 2]\\n\\nBefore: [3, 3, 1, 0]\\n9 2 1 1\\nAfter:  [3, 2, 1, 0]\\n\\nBefore: [2, 1, 1, 1]\\n12 2 1 1\\nAfter:  [2, 2, 1, 1]\\n\\nBefore: [0, 1, 2, 3]\\n5 1 2 3\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [3, 1, 1, 1]\\n12 2 1 3\\nAfter:  [3, 1, 1, 2]\\n\\nBefore: [1, 2, 2, 3]\\n4 0 2 3\\nAfter:  [1, 2, 2, 0]\\n\\nBefore: [2, 1, 2, 1]\\n14 0 1 0\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [2, 1, 1, 3]\\n10 1 3 2\\nAfter:  [2, 1, 0, 3]\\n\\nBefore: [1, 1, 1, 2]\\n2 1 0 0\\nAfter:  [1, 1, 1, 2]\\n\\nBefore: [1, 1, 2, 1]\\n5 1 2 1\\nAfter:  [1, 0, 2, 1]\\n\\nBefore: [0, 1, 2, 2]\\n6 0 0 1\\nAfter:  [0, 0, 2, 2]\\n\\nBefore: [0, 2, 2, 1]\\n8 3 2 3\\nAfter:  [0, 2, 2, 1]\\n\\nBefore: [0, 3, 2, 1]\\n15 3 3 2\\nAfter:  [0, 3, 0, 1]\\n\\nBefore: [1, 1, 1, 3]\\n12 2 1 3\\nAfter:  [1, 1, 1, 2]\\n\\nBefore: [0, 1, 3, 0]\\n6 0 0 3\\nAfter:  [0, 1, 3, 0]\\n\\nBefore: [0, 2, 2, 2]\\n15 3 3 2\\nAfter:  [0, 2, 0, 2]\\n\\nBefore: [2, 1, 0, 1]\\n14 0 1 2\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [2, 2, 3, 2]\\n0 0 2 3\\nAfter:  [2, 2, 3, 1]\\n\\nBefore: [0, 1, 1, 3]\\n10 1 3 0\\nAfter:  [0, 1, 1, 3]\\n\\nBefore: [1, 2, 2, 1]\\n4 0 2 0\\nAfter:  [0, 2, 2, 1]\\n\\nBefore: [1, 1, 0, 0]\\n3 0 2 2\\nAfter:  [1, 1, 0, 0]\\n\\nBefore: [3, 1, 2, 2]\\n5 1 2 1\\nAfter:  [3, 0, 2, 2]\\n\\nBefore: [0, 2, 3, 3]\\n6 0 0 1\\nAfter:  [0, 0, 3, 3]\\n\\nBefore: [2, 2, 3, 2]\\n0 0 2 1\\nAfter:  [2, 1, 3, 2]\\n\\nBefore: [0, 1, 2, 0]\\n5 1 2 0\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [2, 1, 2, 3]\\n5 1 2 1\\nAfter:  [2, 0, 2, 3]\\n\\nBefore: [2, 1, 1, 3]\\n13 3 2 1\\nAfter:  [2, 0, 1, 3]\\n\\nBefore: [3, 1, 2, 3]\\n5 1 2 3\\nAfter:  [3, 1, 2, 0]\\n\\nBefore: [3, 1, 2, 2]\\n14 0 2 1\\nAfter:  [3, 1, 2, 2]\\n\\nBefore: [1, 0, 2, 0]\\n4 0 2 2\\nAfter:  [1, 0, 0, 0]\\n\\nBefore: [0, 3, 0, 3]\\n6 0 0 0\\nAfter:  [0, 3, 0, 3]\\n\\nBefore: [3, 0, 2, 3]\\n14 0 2 0\\nAfter:  [1, 0, 2, 3]\\n\\nBefore: [0, 3, 1, 2]\\n9 2 1 2\\nAfter:  [0, 3, 2, 2]\\n\\nBefore: [0, 2, 2, 2]\\n15 3 3 3\\nAfter:  [0, 2, 2, 0]\\n\\nBefore: [1, 1, 2, 2]\\n1 1 3 1\\nAfter:  [1, 0, 2, 2]\\n\\nBefore: [2, 3, 2, 3]\\n10 2 3 1\\nAfter:  [2, 0, 2, 3]\\n\\nBefore: [2, 3, 3, 3]\\n0 0 2 1\\nAfter:  [2, 1, 3, 3]\\n\\nBefore: [0, 1, 1, 3]\\n10 2 3 1\\nAfter:  [0, 0, 1, 3]\\n\\nBefore: [1, 0, 2, 2]\\n4 0 2 0\\nAfter:  [0, 0, 2, 2]\\n\\nBefore: [2, 3, 3, 3]\\n0 0 2 3\\nAfter:  [2, 3, 3, 1]\\n\\nBefore: [1, 1, 1, 0]\\n12 2 1 1\\nAfter:  [1, 2, 1, 0]\\n\\nBefore: [3, 1, 2, 2]\\n14 0 2 3\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [2, 0, 3, 1]\\n0 0 2 2\\nAfter:  [2, 0, 1, 1]\\n\\nBefore: [0, 2, 1, 0]\\n6 0 0 2\\nAfter:  [0, 2, 0, 0]\\n\\nBefore: [0, 1, 2, 0]\\n6 0 0 2\\nAfter:  [0, 1, 0, 0]\\n\\nBefore: [2, 1, 2, 2]\\n14 0 1 3\\nAfter:  [2, 1, 2, 1]\\n\\nBefore: [3, 1, 1, 1]\\n15 3 3 0\\nAfter:  [0, 1, 1, 1]\\n\\nBefore: [0, 2, 1, 3]\\n10 2 3 2\\nAfter:  [0, 2, 0, 3]\\n\\nBefore: [2, 1, 2, 2]\\n13 2 2 3\\nAfter:  [2, 1, 2, 1]\\n\\nBefore: [1, 1, 2, 1]\\n2 1 0 3\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [1, 0, 1, 2]\\n9 2 1 0\\nAfter:  [2, 0, 1, 2]\\n\\nBefore: [1, 0, 2, 3]\\n13 3 2 2\\nAfter:  [1, 0, 0, 3]\\n\\nBefore: [1, 1, 1, 2]\\n12 2 1 2\\nAfter:  [1, 1, 2, 2]\\n\\nBefore: [2, 0, 1, 3]\\n13 3 3 1\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [2, 2, 2, 0]\\n13 2 2 2\\nAfter:  [2, 2, 1, 0]\\n\\nBefore: [1, 0, 1, 1]\\n9 2 1 2\\nAfter:  [1, 0, 2, 1]\\n\\nBefore: [1, 1, 3, 3]\\n13 3 3 0\\nAfter:  [1, 1, 3, 3]\\n\\nBefore: [2, 1, 1, 3]\\n13 3 3 3\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [3, 1, 2, 1]\\n11 1 3 3\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [3, 1, 1, 0]\\n12 2 1 2\\nAfter:  [3, 1, 2, 0]\\n\\nBefore: [2, 0, 1, 1]\\n9 2 1 1\\nAfter:  [2, 2, 1, 1]\\n\\nBefore: [1, 3, 2, 3]\\n4 0 2 2\\nAfter:  [1, 3, 0, 3]\\n\\nBefore: [0, 3, 0, 0]\\n6 0 0 1\\nAfter:  [0, 0, 0, 0]\\n\\nBefore: [3, 2, 3, 3]\\n13 3 0 3\\nAfter:  [3, 2, 3, 1]\\n\\nBefore: [2, 3, 1, 2]\\n15 3 3 1\\nAfter:  [2, 0, 1, 2]\\n\\nBefore: [1, 1, 0, 1]\\n11 1 3 0\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [2, 3, 1, 3]\\n7 0 2 2\\nAfter:  [2, 3, 1, 3]\\n\\nBefore: [0, 1, 2, 2]\\n6 0 0 0\\nAfter:  [0, 1, 2, 2]\\n\\nBefore: [2, 3, 2, 1]\\n8 3 2 1\\nAfter:  [2, 1, 2, 1]\\n\\nBefore: [3, 1, 2, 1]\\n11 1 3 2\\nAfter:  [3, 1, 1, 1]\\n\\nBefore: [3, 1, 0, 2]\\n15 3 3 0\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [2, 0, 1, 2]\\n7 0 2 1\\nAfter:  [2, 1, 1, 2]\\n\\nBefore: [2, 1, 1, 3]\\n7 0 2 3\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [3, 1, 0, 1]\\n11 1 3 1\\nAfter:  [3, 1, 0, 1]\\n\\nBefore: [2, 0, 3, 3]\\n0 0 2 0\\nAfter:  [1, 0, 3, 3]\\n\\nBefore: [0, 1, 1, 2]\\n1 1 3 3\\nAfter:  [0, 1, 1, 0]\\n\\nBefore: [1, 1, 2, 1]\\n11 1 3 1\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [2, 1, 0, 1]\\n14 0 1 0\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [0, 1, 1, 2]\\n6 0 0 0\\nAfter:  [0, 1, 1, 2]\\n\\nBefore: [3, 0, 0, 2]\\n7 0 3 3\\nAfter:  [3, 0, 0, 1]\\n\\nBefore: [2, 1, 2, 2]\\n1 1 3 2\\nAfter:  [2, 1, 0, 2]\\n\\nBefore: [3, 1, 1, 3]\\n13 3 1 3\\nAfter:  [3, 1, 1, 0]\\n\\nBefore: [3, 1, 2, 0]\\n5 1 2 1\\nAfter:  [3, 0, 2, 0]\\n\\nBefore: [3, 1, 0, 1]\\n11 1 3 2\\nAfter:  [3, 1, 1, 1]\\n\\nBefore: [2, 1, 3, 2]\\n15 3 3 1\\nAfter:  [2, 0, 3, 2]\\n\\nBefore: [1, 1, 2, 3]\\n10 1 3 0\\nAfter:  [0, 1, 2, 3]\\n\\nBefore: [2, 1, 1, 2]\\n12 2 1 0\\nAfter:  [2, 1, 1, 2]\\n\\nBefore: [3, 2, 0, 1]\\n15 3 3 0\\nAfter:  [0, 2, 0, 1]\\n\\nBefore: [1, 1, 2, 3]\\n2 1 0 1\\nAfter:  [1, 1, 2, 3]\\n\\nBefore: [3, 3, 1, 2]\\n7 0 3 1\\nAfter:  [3, 1, 1, 2]\\n\\nBefore: [2, 2, 2, 1]\\n8 3 2 2\\nAfter:  [2, 2, 1, 1]\\n\\nBefore: [0, 0, 2, 3]\\n10 2 3 0\\nAfter:  [0, 0, 2, 3]\\n\\nBefore: [0, 1, 3, 2]\\n6 0 0 0\\nAfter:  [0, 1, 3, 2]\\n\\nBefore: [3, 2, 2, 2]\\n7 0 3 2\\nAfter:  [3, 2, 1, 2]\\n\\nBefore: [0, 1, 1, 2]\\n12 2 1 3\\nAfter:  [0, 1, 1, 2]\\n\\nBefore: [1, 1, 2, 2]\\n2 1 0 0\\nAfter:  [1, 1, 2, 2]\\n\\nBefore: [1, 1, 2, 1]\\n5 1 2 3\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [1, 1, 1, 1]\\n15 3 3 0\\nAfter:  [0, 1, 1, 1]\\n\\nBefore: [1, 3, 2, 1]\\n4 0 2 0\\nAfter:  [0, 3, 2, 1]\\n\\nBefore: [1, 1, 3, 3]\\n2 1 0 2\\nAfter:  [1, 1, 1, 3]\\n\\nBefore: [0, 3, 2, 2]\\n6 0 0 0\\nAfter:  [0, 3, 2, 2]\\n\\nBefore: [2, 3, 1, 2]\\n7 0 2 0\\nAfter:  [1, 3, 1, 2]\\n\\nBefore: [1, 3, 0, 1]\\n3 0 2 0\\nAfter:  [0, 3, 0, 1]\\n\\nBefore: [2, 1, 2, 1]\\n11 1 3 2\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [3, 2, 1, 1]\\n15 3 3 3\\nAfter:  [3, 2, 1, 0]\\n\\nBefore: [3, 1, 2, 3]\\n5 1 2 1\\nAfter:  [3, 0, 2, 3]\\n\\nBefore: [1, 0, 1, 1]\\n9 2 1 1\\nAfter:  [1, 2, 1, 1]\\n\\nBefore: [1, 0, 2, 3]\\n4 0 2 1\\nAfter:  [1, 0, 2, 3]\\n\\nBefore: [1, 3, 2, 0]\\n4 0 2 0\\nAfter:  [0, 3, 2, 0]\\n\\nBefore: [1, 1, 3, 1]\\n15 3 3 3\\nAfter:  [1, 1, 3, 0]\\n\\nBefore: [3, 1, 1, 1]\\n11 1 3 2\\nAfter:  [3, 1, 1, 1]\\n\\nBefore: [1, 1, 1, 1]\\n12 2 1 0\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [1, 3, 2, 2]\\n4 0 2 1\\nAfter:  [1, 0, 2, 2]\\n\\nBefore: [3, 0, 2, 1]\\n14 0 2 0\\nAfter:  [1, 0, 2, 1]\\n\\nBefore: [0, 1, 2, 1]\\n8 3 2 1\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [1, 1, 2, 1]\\n2 1 0 0\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [0, 2, 2, 1]\\n15 3 3 3\\nAfter:  [0, 2, 2, 0]\\n\\nBefore: [0, 0, 2, 2]\\n6 0 0 0\\nAfter:  [0, 0, 2, 2]\\n\\nBefore: [1, 1, 1, 2]\\n12 2 1 3\\nAfter:  [1, 1, 1, 2]\\n\\nBefore: [2, 0, 1, 3]\\n13 3 3 3\\nAfter:  [2, 0, 1, 1]\\n\\nBefore: [2, 0, 2, 1]\\n8 3 2 0\\nAfter:  [1, 0, 2, 1]\\n\\nBefore: [1, 2, 1, 3]\\n10 1 3 3\\nAfter:  [1, 2, 1, 0]\\n\\nBefore: [0, 1, 2, 3]\\n10 2 3 0\\nAfter:  [0, 1, 2, 3]\\n\\nBefore: [1, 1, 1, 3]\\n12 2 1 2\\nAfter:  [1, 1, 2, 3]\\n\\nBefore: [2, 1, 0, 2]\\n14 0 1 3\\nAfter:  [2, 1, 0, 1]\\n\\nBefore: [2, 1, 3, 2]\\n1 1 3 0\\nAfter:  [0, 1, 3, 2]\\n\\nBefore: [3, 2, 0, 3]\\n13 3 3 1\\nAfter:  [3, 1, 0, 3]\\n\\nBefore: [3, 0, 0, 3]\\n0 2 0 0\\nAfter:  [1, 0, 0, 3]\\n\\nBefore: [1, 3, 2, 1]\\n8 3 2 0\\nAfter:  [1, 3, 2, 1]\\n\\nBefore: [0, 3, 0, 2]\\n6 0 0 0\\nAfter:  [0, 3, 0, 2]\\n\\nBefore: [0, 1, 0, 2]\\n1 1 3 1\\nAfter:  [0, 0, 0, 2]\\n\\nBefore: [3, 1, 3, 1]\\n11 1 3 0\\nAfter:  [1, 1, 3, 1]\\n\\nBefore: [2, 0, 3, 3]\\n13 3 2 3\\nAfter:  [2, 0, 3, 1]\\n\\nBefore: [2, 3, 2, 1]\\n8 3 2 0\\nAfter:  [1, 3, 2, 1]\\n\\nBefore: [1, 1, 1, 3]\\n2 1 0 1\\nAfter:  [1, 1, 1, 3]\\n\\nBefore: [3, 2, 0, 3]\\n10 1 3 2\\nAfter:  [3, 2, 0, 3]\\n\\nBefore: [0, 0, 3, 3]\\n6 0 0 2\\nAfter:  [0, 0, 0, 3]\\n\\nBefore: [3, 1, 3, 1]\\n15 3 3 1\\nAfter:  [3, 0, 3, 1]\\n\\nBefore: [2, 1, 3, 1]\\n11 1 3 1\\nAfter:  [2, 1, 3, 1]\\n\\nBefore: [3, 1, 1, 2]\\n12 2 1 2\\nAfter:  [3, 1, 2, 2]\\n\\nBefore: [3, 0, 2, 2]\\n15 3 3 1\\nAfter:  [3, 0, 2, 2]\\n\\nBefore: [1, 1, 2, 2]\\n4 0 2 0\\nAfter:  [0, 1, 2, 2]\\n\\nBefore: [2, 1, 2, 1]\\n8 3 2 1\\nAfter:  [2, 1, 2, 1]\\n\\nBefore: [3, 3, 3, 2]\\n7 0 3 0\\nAfter:  [1, 3, 3, 2]\\n\\nBefore: [2, 1, 1, 0]\\n12 2 1 2\\nAfter:  [2, 1, 2, 0]\\n\\nBefore: [0, 3, 2, 3]\\n6 0 0 0\\nAfter:  [0, 3, 2, 3]\\n\\nBefore: [3, 1, 3, 1]\\n11 1 3 1\\nAfter:  [3, 1, 3, 1]\\n\\nBefore: [0, 0, 2, 1]\\n8 3 2 2\\nAfter:  [0, 0, 1, 1]\\n\\nBefore: [1, 1, 0, 2]\\n3 0 2 1\\nAfter:  [1, 0, 0, 2]\\n\\nBefore: [1, 1, 1, 0]\\n2 1 0 1\\nAfter:  [1, 1, 1, 0]\\n\\nBefore: [3, 2, 0, 3]\\n0 2 0 1\\nAfter:  [3, 1, 0, 3]\\n\\nBefore: [1, 1, 2, 1]\\n8 3 2 3\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [3, 1, 2, 1]\\n11 1 3 1\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [3, 2, 3, 2]\\n7 0 3 0\\nAfter:  [1, 2, 3, 2]\\n\\nBefore: [1, 2, 0, 0]\\n3 0 2 1\\nAfter:  [1, 0, 0, 0]\\n\\nBefore: [1, 1, 2, 1]\\n4 0 2 0\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [2, 2, 2, 1]\\n8 3 2 0\\nAfter:  [1, 2, 2, 1]\\n\\nBefore: [2, 1, 2, 2]\\n5 1 2 1\\nAfter:  [2, 0, 2, 2]\\n\\nBefore: [3, 3, 1, 2]\\n9 2 1 2\\nAfter:  [3, 3, 2, 2]\\n\\nBefore: [1, 1, 0, 3]\\n2 1 0 1\\nAfter:  [1, 1, 0, 3]\\n\\nBefore: [1, 1, 2, 3]\\n4 0 2 3\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [1, 3, 2, 1]\\n4 0 2 2\\nAfter:  [1, 3, 0, 1]\\n\\nBefore: [2, 1, 2, 0]\\n5 1 2 2\\nAfter:  [2, 1, 0, 0]\\n\\nBefore: [1, 3, 0, 0]\\n3 0 2 3\\nAfter:  [1, 3, 0, 0]\\n\\nBefore: [2, 3, 1, 3]\\n7 0 2 3\\nAfter:  [2, 3, 1, 1]\\n\\nBefore: [2, 1, 0, 1]\\n11 1 3 3\\nAfter:  [2, 1, 0, 1]\\n\\nBefore: [1, 1, 0, 0]\\n2 1 0 3\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [1, 0, 1, 2]\\n9 2 1 3\\nAfter:  [1, 0, 1, 2]\\n\\nBefore: [1, 0, 2, 3]\\n4 0 2 2\\nAfter:  [1, 0, 0, 3]\\n\\nBefore: [1, 0, 2, 1]\\n8 3 2 3\\nAfter:  [1, 0, 2, 1]\\n\\nBefore: [3, 3, 0, 2]\\n0 2 0 2\\nAfter:  [3, 3, 1, 2]\\n\\nBefore: [1, 2, 2, 1]\\n8 3 2 1\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [1, 3, 0, 1]\\n3 0 2 1\\nAfter:  [1, 0, 0, 1]\\n\\nBefore: [3, 1, 2, 2]\\n5 1 2 3\\nAfter:  [3, 1, 2, 0]\\n\\nBefore: [1, 1, 1, 0]\\n2 1 0 2\\nAfter:  [1, 1, 1, 0]\\n\\nBefore: [1, 3, 0, 0]\\n3 0 2 2\\nAfter:  [1, 3, 0, 0]\\n\\nBefore: [0, 1, 2, 2]\\n1 1 3 3\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [2, 0, 3, 1]\\n0 0 2 3\\nAfter:  [2, 0, 3, 1]\\n\\nBefore: [2, 1, 1, 0]\\n12 2 1 0\\nAfter:  [2, 1, 1, 0]\\n\\nBefore: [2, 3, 1, 0]\\n9 2 1 0\\nAfter:  [2, 3, 1, 0]\\n\\nBefore: [1, 1, 2, 1]\\n5 1 2 0\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [1, 0, 0, 1]\\n3 0 2 1\\nAfter:  [1, 0, 0, 1]\\n\\nBefore: [1, 3, 2, 2]\\n15 3 3 2\\nAfter:  [1, 3, 0, 2]\\n\\nBefore: [1, 3, 0, 2]\\n3 0 2 3\\nAfter:  [1, 3, 0, 0]\\n\\nBefore: [3, 0, 3, 2]\\n7 0 3 3\\nAfter:  [3, 0, 3, 1]\\n\\nBefore: [0, 1, 2, 2]\\n5 1 2 0\\nAfter:  [0, 1, 2, 2]\\n\\nBefore: [1, 1, 1, 3]\\n2 1 0 3\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [0, 1, 3, 1]\\n11 1 3 3\\nAfter:  [0, 1, 3, 1]\\n\\nBefore: [1, 1, 1, 2]\\n1 1 3 3\\nAfter:  [1, 1, 1, 0]\\n\\nBefore: [1, 2, 2, 2]\\n4 0 2 3\\nAfter:  [1, 2, 2, 0]\\n\\nBefore: [0, 2, 2, 1]\\n13 2 2 0\\nAfter:  [1, 2, 2, 1]\\n\\nBefore: [1, 1, 0, 2]\\n1 1 3 0\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [1, 1, 0, 1]\\n2 1 0 3\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [1, 3, 2, 2]\\n4 0 2 0\\nAfter:  [0, 3, 2, 2]\\n\\nBefore: [3, 0, 1, 0]\\n9 2 1 0\\nAfter:  [2, 0, 1, 0]\\n\\nBefore: [0, 2, 2, 1]\\n8 3 2 2\\nAfter:  [0, 2, 1, 1]\\n\\nBefore: [2, 0, 1, 1]\\n15 2 3 0\\nAfter:  [0, 0, 1, 1]\\n\\nBefore: [2, 0, 1, 3]\\n9 2 1 3\\nAfter:  [2, 0, 1, 2]\\n\\nBefore: [2, 1, 3, 1]\\n11 1 3 2\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [2, 1, 3, 0]\\n0 0 2 2\\nAfter:  [2, 1, 1, 0]\\n\\nBefore: [3, 1, 2, 1]\\n8 3 2 0\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [3, 1, 3, 3]\\n10 1 3 0\\nAfter:  [0, 1, 3, 3]\\n\\nBefore: [1, 1, 3, 1]\\n2 1 0 1\\nAfter:  [1, 1, 3, 1]\\n\\nBefore: [1, 1, 1, 0]\\n12 2 1 2\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [3, 1, 2, 3]\\n10 2 3 1\\nAfter:  [3, 0, 2, 3]\\n\\nBefore: [1, 3, 1, 3]\\n9 2 1 1\\nAfter:  [1, 2, 1, 3]\\n\\nBefore: [1, 0, 0, 2]\\n3 0 2 3\\nAfter:  [1, 0, 0, 0]\\n\\nBefore: [3, 0, 3, 2]\\n7 0 3 0\\nAfter:  [1, 0, 3, 2]\\n\\nBefore: [2, 1, 2, 1]\\n14 0 1 2\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [0, 1, 0, 3]\\n6 0 0 2\\nAfter:  [0, 1, 0, 3]\\n\\nBefore: [2, 0, 0, 1]\\n15 3 3 1\\nAfter:  [2, 0, 0, 1]\\n\\nBefore: [1, 1, 0, 3]\\n2 1 0 3\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [2, 2, 3, 2]\\n15 3 3 3\\nAfter:  [2, 2, 3, 0]\\n\\nBefore: [1, 1, 0, 2]\\n1 1 3 3\\nAfter:  [1, 1, 0, 0]\\n\\nBefore: [1, 2, 0, 1]\\n3 0 2 1\\nAfter:  [1, 0, 0, 1]\\n\\nBefore: [1, 1, 0, 1]\\n11 1 3 1\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [2, 3, 1, 2]\\n7 0 2 2\\nAfter:  [2, 3, 1, 2]\\n\\nBefore: [3, 2, 1, 3]\\n13 3 3 3\\nAfter:  [3, 2, 1, 1]\\n\\nBefore: [2, 1, 1, 1]\\n11 1 3 2\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [3, 2, 0, 2]\\n15 3 3 2\\nAfter:  [3, 2, 0, 2]\\n\\nBefore: [1, 1, 2, 1]\\n8 3 2 0\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [0, 3, 1, 2]\\n6 0 0 0\\nAfter:  [0, 3, 1, 2]\\n\\nBefore: [2, 0, 1, 3]\\n9 2 1 1\\nAfter:  [2, 2, 1, 3]\\n\\nBefore: [0, 0, 1, 1]\\n9 2 1 0\\nAfter:  [2, 0, 1, 1]\\n\\nBefore: [1, 0, 0, 0]\\n3 0 2 0\\nAfter:  [0, 0, 0, 0]\\n\\nBefore: [1, 0, 3, 1]\\n15 3 3 3\\nAfter:  [1, 0, 3, 0]\\n\\nBefore: [3, 0, 3, 2]\\n7 0 3 2\\nAfter:  [3, 0, 1, 2]\\n\\nBefore: [0, 1, 2, 1]\\n11 1 3 1\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [1, 3, 1, 1]\\n9 2 1 1\\nAfter:  [1, 2, 1, 1]\\n\\nBefore: [2, 1, 0, 3]\\n14 0 1 2\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [3, 1, 1, 3]\\n12 2 1 3\\nAfter:  [3, 1, 1, 2]\\n\\nBefore: [0, 1, 2, 2]\\n1 1 3 1\\nAfter:  [0, 0, 2, 2]\\n\\nBefore: [1, 1, 1, 1]\\n11 1 3 1\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [1, 1, 1, 2]\\n2 1 0 3\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [3, 3, 1, 2]\\n9 2 1 3\\nAfter:  [3, 3, 1, 2]\\n\\nBefore: [2, 1, 1, 3]\\n10 2 3 1\\nAfter:  [2, 0, 1, 3]\\n\\nBefore: [2, 3, 3, 1]\\n15 3 3 0\\nAfter:  [0, 3, 3, 1]\\n\\nBefore: [1, 1, 2, 0]\\n2 1 0 0\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [3, 3, 1, 2]\\n7 0 3 2\\nAfter:  [3, 3, 1, 2]\\n\\nBefore: [2, 0, 2, 3]\\n10 2 3 1\\nAfter:  [2, 0, 2, 3]\\n\\nBefore: [1, 0, 0, 0]\\n3 0 2 2\\nAfter:  [1, 0, 0, 0]\\n\\nBefore: [2, 1, 1, 1]\\n11 1 3 0\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [2, 1, 2, 2]\\n14 0 1 0\\nAfter:  [1, 1, 2, 2]\\n\\nBefore: [3, 1, 1, 2]\\n12 2 1 1\\nAfter:  [3, 2, 1, 2]\\n\\nBefore: [1, 2, 1, 2]\\n15 3 3 0\\nAfter:  [0, 2, 1, 2]\\n\\nBefore: [0, 3, 1, 0]\\n9 2 1 1\\nAfter:  [0, 2, 1, 0]\\n\\nBefore: [1, 1, 0, 3]\\n10 1 3 1\\nAfter:  [1, 0, 0, 3]\\n\\nBefore: [3, 0, 0, 2]\\n7 0 3 0\\nAfter:  [1, 0, 0, 2]\\n\\nBefore: [0, 1, 0, 3]\\n13 3 3 2\\nAfter:  [0, 1, 1, 3]\\n\\nBefore: [0, 1, 1, 1]\\n11 1 3 0\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [3, 2, 2, 1]\\n8 3 2 1\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [3, 1, 1, 3]\\n12 2 1 2\\nAfter:  [3, 1, 2, 3]\\n\\nBefore: [1, 3, 2, 1]\\n4 0 2 3\\nAfter:  [1, 3, 2, 0]\\n\\nBefore: [1, 3, 1, 1]\\n9 2 1 3\\nAfter:  [1, 3, 1, 2]\\n\\nBefore: [1, 1, 2, 3]\\n5 1 2 2\\nAfter:  [1, 1, 0, 3]\\n\\nBefore: [3, 3, 2, 3]\\n10 2 3 3\\nAfter:  [3, 3, 2, 0]\\n\\nBefore: [0, 0, 2, 3]\\n13 2 2 1\\nAfter:  [0, 1, 2, 3]\\n\\nBefore: [1, 1, 2, 2]\\n4 0 2 3\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [3, 1, 2, 3]\\n14 0 2 2\\nAfter:  [3, 1, 1, 3]\\n\\nBefore: [1, 3, 2, 3]\\n10 2 3 1\\nAfter:  [1, 0, 2, 3]\\n\\nBefore: [1, 1, 2, 3]\\n2 1 0 3\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [2, 3, 1, 1]\\n7 0 2 0\\nAfter:  [1, 3, 1, 1]\\n\\nBefore: [3, 1, 0, 1]\\n0 2 0 0\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [1, 1, 2, 3]\\n5 1 2 1\\nAfter:  [1, 0, 2, 3]\\n\\nBefore: [0, 3, 0, 3]\\n13 3 3 2\\nAfter:  [0, 3, 1, 3]\\n\\nBefore: [3, 3, 2, 3]\\n14 0 2 3\\nAfter:  [3, 3, 2, 1]\\n\\nBefore: [2, 3, 1, 2]\\n9 2 1 0\\nAfter:  [2, 3, 1, 2]\\n\\nBefore: [1, 1, 2, 2]\\n2 1 0 3\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [0, 3, 3, 1]\\n13 2 3 1\\nAfter:  [0, 0, 3, 1]\\n\\nBefore: [0, 1, 1, 2]\\n12 2 1 1\\nAfter:  [0, 2, 1, 2]\\n\\nBefore: [1, 0, 1, 3]\\n9 2 1 1\\nAfter:  [1, 2, 1, 3]\\n\\nBefore: [1, 1, 3, 0]\\n2 1 0 0\\nAfter:  [1, 1, 3, 0]\\n\\nBefore: [1, 1, 2, 2]\\n15 3 3 3\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [3, 0, 0, 1]\\n15 3 3 2\\nAfter:  [3, 0, 0, 1]\\n\\nBefore: [3, 3, 2, 2]\\n7 0 3 3\\nAfter:  [3, 3, 2, 1]\\n\\nBefore: [1, 1, 3, 2]\\n1 1 3 0\\nAfter:  [0, 1, 3, 2]\\n\\nBefore: [2, 3, 1, 3]\\n9 2 1 0\\nAfter:  [2, 3, 1, 3]\\n\\nBefore: [0, 0, 2, 1]\\n8 3 2 3\\nAfter:  [0, 0, 2, 1]\\n\\nBefore: [3, 3, 0, 0]\\n0 2 0 3\\nAfter:  [3, 3, 0, 1]\\n\\nBefore: [3, 2, 2, 1]\\n15 3 3 2\\nAfter:  [3, 2, 0, 1]\\n\\nBefore: [2, 1, 1, 3]\\n12 2 1 3\\nAfter:  [2, 1, 1, 2]\\n\\nBefore: [2, 1, 1, 2]\\n14 0 1 2\\nAfter:  [2, 1, 1, 2]\\n\\nBefore: [1, 1, 1, 2]\\n2 1 0 1\\nAfter:  [1, 1, 1, 2]\\n\\nBefore: [0, 1, 3, 0]\\n13 0 0 2\\nAfter:  [0, 1, 1, 0]\\n\\nBefore: [3, 0, 1, 2]\\n9 2 1 1\\nAfter:  [3, 2, 1, 2]\\n\\nBefore: [1, 1, 2, 3]\\n4 0 2 0\\nAfter:  [0, 1, 2, 3]\\n\\nBefore: [1, 2, 0, 2]\\n3 0 2 2\\nAfter:  [1, 2, 0, 2]\\n\\nBefore: [3, 1, 2, 3]\\n5 1 2 0\\nAfter:  [0, 1, 2, 3]\\n\\nBefore: [0, 2, 1, 1]\\n15 3 3 0\\nAfter:  [0, 2, 1, 1]\\n\\nBefore: [2, 1, 0, 2]\\n1 1 3 2\\nAfter:  [2, 1, 0, 2]\\n\\nBefore: [0, 0, 1, 1]\\n9 2 1 3\\nAfter:  [0, 0, 1, 2]\\n\\nBefore: [3, 0, 1, 3]\\n9 2 1 3\\nAfter:  [3, 0, 1, 2]\\n\\nBefore: [2, 3, 1, 3]\\n10 2 3 3\\nAfter:  [2, 3, 1, 0]\\n\\nBefore: [0, 1, 1, 0]\\n12 2 1 3\\nAfter:  [0, 1, 1, 2]\\n\\nBefore: [0, 3, 1, 2]\\n6 0 0 2\\nAfter:  [0, 3, 0, 2]\\n\\nBefore: [1, 1, 0, 1]\\n2 1 0 0\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [3, 1, 1, 0]\\n12 2 1 0\\nAfter:  [2, 1, 1, 0]\\n\\nBefore: [1, 3, 1, 2]\\n9 2 1 2\\nAfter:  [1, 3, 2, 2]\\n\\nBefore: [2, 3, 0, 1]\\n15 3 3 0\\nAfter:  [0, 3, 0, 1]\\n\\nBefore: [3, 1, 2, 1]\\n5 1 2 3\\nAfter:  [3, 1, 2, 0]\\n\\nBefore: [1, 1, 3, 1]\\n11 1 3 1\\nAfter:  [1, 1, 3, 1]\\n\\nBefore: [1, 2, 2, 2]\\n4 0 2 1\\nAfter:  [1, 0, 2, 2]\\n\\nBefore: [3, 0, 0, 2]\\n0 2 0 3\\nAfter:  [3, 0, 0, 1]\\n\\nBefore: [0, 2, 0, 3]\\n6 0 0 1\\nAfter:  [0, 0, 0, 3]\\n\\nBefore: [2, 3, 2, 1]\\n15 3 3 0\\nAfter:  [0, 3, 2, 1]\\n\\nBefore: [1, 1, 1, 1]\\n2 1 0 3\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [1, 1, 0, 1]\\n3 0 2 1\\nAfter:  [1, 0, 0, 1]\\n\\nBefore: [0, 0, 0, 3]\\n6 0 0 0\\nAfter:  [0, 0, 0, 3]\\n\\nBefore: [2, 2, 1, 1]\\n15 2 3 1\\nAfter:  [2, 0, 1, 1]\\n\\nBefore: [3, 0, 1, 0]\\n9 2 1 1\\nAfter:  [3, 2, 1, 0]\\n\\nBefore: [3, 0, 2, 2]\\n14 0 2 0\\nAfter:  [1, 0, 2, 2]\\n\\nBefore: [2, 2, 3, 0]\\n0 0 2 1\\nAfter:  [2, 1, 3, 0]\\n\\nBefore: [0, 3, 1, 0]\\n9 2 1 2\\nAfter:  [0, 3, 2, 0]\\n\\nBefore: [1, 2, 2, 3]\\n4 0 2 0\\nAfter:  [0, 2, 2, 3]\\n\\nBefore: [1, 3, 0, 3]\\n3 0 2 2\\nAfter:  [1, 3, 0, 3]\\n\\nBefore: [1, 1, 2, 1]\\n4 0 2 1\\nAfter:  [1, 0, 2, 1]\\n\\nBefore: [1, 0, 0, 0]\\n3 0 2 1\\nAfter:  [1, 0, 0, 0]\\n\\nBefore: [0, 1, 2, 2]\\n5 1 2 2\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [1, 1, 2, 0]\\n5 1 2 1\\nAfter:  [1, 0, 2, 0]\\n\\nBefore: [2, 1, 2, 1]\\n8 3 2 0\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [0, 1, 1, 3]\\n12 2 1 2\\nAfter:  [0, 1, 2, 3]\\n\\nBefore: [1, 0, 2, 1]\\n4 0 2 2\\nAfter:  [1, 0, 0, 1]\\n\\nBefore: [0, 3, 0, 0]\\n6 0 0 2\\nAfter:  [0, 3, 0, 0]\\n\\nBefore: [1, 1, 1, 2]\\n12 2 1 0\\nAfter:  [2, 1, 1, 2]\\n\\nBefore: [0, 1, 0, 1]\\n11 1 3 3\\nAfter:  [0, 1, 0, 1]\\n\\nBefore: [1, 2, 0, 1]\\n3 0 2 2\\nAfter:  [1, 2, 0, 1]\\n\\nBefore: [2, 3, 3, 2]\\n15 3 3 1\\nAfter:  [2, 0, 3, 2]\\n\\nBefore: [2, 1, 1, 1]\\n11 1 3 1\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [1, 1, 2, 1]\\n5 1 2 2\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [2, 1, 1, 3]\\n12 2 1 1\\nAfter:  [2, 2, 1, 3]\\n\\nBefore: [1, 1, 3, 3]\\n2 1 0 0\\nAfter:  [1, 1, 3, 3]\\n\\nBefore: [1, 1, 3, 1]\\n11 1 3 0\\nAfter:  [1, 1, 3, 1]\\n\\nBefore: [1, 0, 2, 1]\\n4 0 2 1\\nAfter:  [1, 0, 2, 1]\\n\\nBefore: [0, 1, 2, 0]\\n5 1 2 3\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [1, 2, 0, 3]\\n3 0 2 0\\nAfter:  [0, 2, 0, 3]\\n\\nBefore: [1, 3, 2, 0]\\n4 0 2 3\\nAfter:  [1, 3, 2, 0]\\n\\nBefore: [1, 1, 3, 2]\\n2 1 0 2\\nAfter:  [1, 1, 1, 2]\\n\\nBefore: [3, 1, 2, 1]\\n14 0 2 1\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [0, 1, 2, 1]\\n15 3 3 3\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [2, 1, 3, 2]\\n1 1 3 2\\nAfter:  [2, 1, 0, 2]\\n\\nBefore: [1, 2, 2, 0]\\n4 0 2 3\\nAfter:  [1, 2, 2, 0]\\n\\nBefore: [0, 2, 2, 2]\\n6 0 0 0\\nAfter:  [0, 2, 2, 2]\\n\\nBefore: [1, 3, 1, 3]\\n9 2 1 0\\nAfter:  [2, 3, 1, 3]\\n\\nBefore: [3, 1, 1, 1]\\n11 1 3 1\\nAfter:  [3, 1, 1, 1]\\n\\nBefore: [1, 0, 2, 1]\\n8 3 2 0\\nAfter:  [1, 0, 2, 1]\\n\\nBefore: [2, 1, 3, 3]\\n0 0 2 2\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [2, 1, 2, 2]\\n1 1 3 1\\nAfter:  [2, 0, 2, 2]\\n\\nBefore: [3, 2, 2, 1]\\n8 3 2 0\\nAfter:  [1, 2, 2, 1]\\n\\nBefore: [2, 0, 1, 1]\\n7 0 2 3\\nAfter:  [2, 0, 1, 1]\\n\\nBefore: [3, 2, 3, 3]\\n10 1 3 0\\nAfter:  [0, 2, 3, 3]\\n\\nBefore: [2, 1, 2, 1]\\n5 1 2 1\\nAfter:  [2, 0, 2, 1]\\n\\nBefore: [2, 1, 1, 0]\\n12 2 1 1\\nAfter:  [2, 2, 1, 0]\\n\\nBefore: [3, 1, 2, 1]\\n5 1 2 0\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [1, 2, 0, 2]\\n3 0 2 3\\nAfter:  [1, 2, 0, 0]\\n\\nBefore: [2, 3, 1, 2]\\n9 2 1 1\\nAfter:  [2, 2, 1, 2]\\n\\nBefore: [0, 1, 3, 2]\\n1 1 3 0\\nAfter:  [0, 1, 3, 2]\\n\\nBefore: [2, 2, 1, 3]\\n10 1 3 0\\nAfter:  [0, 2, 1, 3]\\n\\nBefore: [3, 3, 2, 3]\\n10 2 3 2\\nAfter:  [3, 3, 0, 3]\\n\\nBefore: [1, 2, 0, 2]\\n3 0 2 1\\nAfter:  [1, 0, 0, 2]\\n\\nBefore: [1, 1, 2, 1]\\n8 3 2 2\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [2, 0, 1, 0]\\n9 2 1 3\\nAfter:  [2, 0, 1, 2]\\n\\nBefore: [3, 1, 2, 1]\\n14 0 2 3\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [2, 2, 3, 1]\\n13 2 3 1\\nAfter:  [2, 0, 3, 1]\\n\\nBefore: [1, 1, 0, 2]\\n3 0 2 3\\nAfter:  [1, 1, 0, 0]\\n\\nBefore: [3, 3, 2, 2]\\n7 0 3 0\\nAfter:  [1, 3, 2, 2]\\n\\nBefore: [1, 1, 1, 3]\\n12 2 1 1\\nAfter:  [1, 2, 1, 3]\\n\\nBefore: [3, 1, 1, 1]\\n11 1 3 0\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [3, 3, 0, 2]\\n7 0 3 1\\nAfter:  [3, 1, 0, 2]\\n\\nBefore: [3, 0, 2, 1]\\n14 0 2 3\\nAfter:  [3, 0, 2, 1]\\n\\nBefore: [0, 1, 1, 0]\\n13 0 0 1\\nAfter:  [0, 1, 1, 0]\\n\\nBefore: [1, 3, 1, 0]\\n9 2 1 0\\nAfter:  [2, 3, 1, 0]\\n\\nBefore: [3, 0, 2, 1]\\n13 2 2 1\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [2, 1, 2, 3]\\n5 1 2 3\\nAfter:  [2, 1, 2, 0]\\n\\nBefore: [3, 3, 0, 2]\\n0 2 0 3\\nAfter:  [3, 3, 0, 1]\\n\\nBefore: [1, 0, 0, 1]\\n3 0 2 3\\nAfter:  [1, 0, 0, 0]\\n\\nBefore: [2, 1, 1, 2]\\n12 2 1 2\\nAfter:  [2, 1, 2, 2]\\n\\nBefore: [0, 2, 0, 1]\\n13 0 0 1\\nAfter:  [0, 1, 0, 1]\\n\\nBefore: [3, 1, 1, 1]\\n12 2 1 2\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [0, 0, 1, 3]\\n9 2 1 1\\nAfter:  [0, 2, 1, 3]\\n\\nBefore: [0, 1, 2, 1]\\n5 1 2 1\\nAfter:  [0, 0, 2, 1]\\n\\nBefore: [0, 1, 0, 2]\\n1 1 3 2\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [3, 0, 2, 0]\\n14 0 2 3\\nAfter:  [3, 0, 2, 1]\\n\\nBefore: [3, 1, 2, 0]\\n14 0 2 3\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [3, 2, 0, 2]\\n0 2 0 2\\nAfter:  [3, 2, 1, 2]\\n\\nBefore: [1, 1, 0, 2]\\n3 0 2 0\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [1, 1, 1, 1]\\n11 1 3 2\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [1, 1, 3, 3]\\n10 1 3 0\\nAfter:  [0, 1, 3, 3]\\n\\nBefore: [3, 2, 2, 3]\\n13 2 2 2\\nAfter:  [3, 2, 1, 3]\\n\\nBefore: [2, 1, 3, 3]\\n13 3 2 2\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [2, 2, 0, 3]\\n10 1 3 0\\nAfter:  [0, 2, 0, 3]\\n\\nBefore: [0, 1, 0, 1]\\n6 0 0 2\\nAfter:  [0, 1, 0, 1]\\n\\nBefore: [0, 3, 3, 1]\\n13 2 3 3\\nAfter:  [0, 3, 3, 0]\\n\\nBefore: [1, 3, 2, 1]\\n4 0 2 1\\nAfter:  [1, 0, 2, 1]\\n\\nBefore: [3, 3, 2, 2]\\n14 0 2 0\\nAfter:  [1, 3, 2, 2]\\n\\nBefore: [1, 1, 1, 2]\\n1 1 3 1\\nAfter:  [1, 0, 1, 2]\\n\\nBefore: [1, 1, 3, 1]\\n11 1 3 3\\nAfter:  [1, 1, 3, 1]\\n\\nBefore: [2, 0, 1, 3]\\n7 0 2 2\\nAfter:  [2, 0, 1, 3]\\n\\nBefore: [3, 0, 1, 2]\\n7 0 3 2\\nAfter:  [3, 0, 1, 2]\\n\\nBefore: [2, 1, 2, 1]\\n11 1 3 3\\nAfter:  [2, 1, 2, 1]\\n\\nBefore: [2, 0, 2, 2]\\n15 3 3 0\\nAfter:  [0, 0, 2, 2]\\n\\nBefore: [1, 0, 0, 2]\\n3 0 2 1\\nAfter:  [1, 0, 0, 2]\\n\\nBefore: [1, 1, 1, 2]\\n1 1 3 2\\nAfter:  [1, 1, 0, 2]\\n\\nBefore: [0, 1, 2, 0]\\n5 1 2 1\\nAfter:  [0, 0, 2, 0]\\n\\nBefore: [3, 3, 2, 1]\\n8 3 2 3\\nAfter:  [3, 3, 2, 1]\\n\\nBefore: [0, 1, 0, 2]\\n1 1 3 3\\nAfter:  [0, 1, 0, 0]\\n\\nBefore: [1, 3, 0, 0]\\n3 0 2 0\\nAfter:  [0, 3, 0, 0]\\n\\nBefore: [1, 1, 3, 1]\\n11 1 3 2\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [3, 1, 1, 2]\\n1 1 3 0\\nAfter:  [0, 1, 1, 2]\\n\\nBefore: [1, 0, 1, 1]\\n15 3 3 1\\nAfter:  [1, 0, 1, 1]\\n\\nBefore: [1, 1, 2, 0]\\n5 1 2 3\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [2, 1, 1, 3]\\n12 2 1 0\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [2, 3, 1, 3]\\n7 0 2 1\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [3, 1, 3, 1]\\n11 1 3 2\\nAfter:  [3, 1, 1, 1]\\n\\nBefore: [2, 2, 1, 0]\\n7 0 2 0\\nAfter:  [1, 2, 1, 0]\\n\\nBefore: [2, 0, 2, 1]\\n8 3 2 2\\nAfter:  [2, 0, 1, 1]\\n\\nBefore: [2, 1, 1, 1]\\n14 0 1 0\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [3, 1, 2, 0]\\n14 0 2 0\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [2, 0, 2, 1]\\n8 3 2 3\\nAfter:  [2, 0, 2, 1]\\n\\nBefore: [2, 1, 3, 3]\\n14 0 1 2\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [3, 1, 1, 1]\\n11 1 3 3\\nAfter:  [3, 1, 1, 1]\\n\\nBefore: [0, 1, 2, 3]\\n13 2 2 2\\nAfter:  [0, 1, 1, 3]\\n\\nBefore: [0, 0, 2, 3]\\n10 2 3 2\\nAfter:  [0, 0, 0, 3]\\n\\nBefore: [2, 1, 1, 3]\\n14 0 1 1\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [1, 3, 2, 3]\\n10 2 3 0\\nAfter:  [0, 3, 2, 3]\\n\\nBefore: [3, 2, 0, 0]\\n0 2 0 2\\nAfter:  [3, 2, 1, 0]\\n\\nBefore: [1, 1, 2, 0]\\n4 0 2 3\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [3, 1, 3, 2]\\n1 1 3 2\\nAfter:  [3, 1, 0, 2]\\n\\nBefore: [1, 1, 2, 1]\\n11 1 3 3\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [0, 2, 1, 3]\\n10 1 3 2\\nAfter:  [0, 2, 0, 3]\\n\\nBefore: [3, 3, 0, 0]\\n0 2 0 0\\nAfter:  [1, 3, 0, 0]\\n\\nBefore: [1, 2, 0, 1]\\n3 0 2 3\\nAfter:  [1, 2, 0, 0]\\n\\nBefore: [0, 1, 2, 1]\\n11 1 3 2\\nAfter:  [0, 1, 1, 1]\\n\\nBefore: [1, 2, 2, 2]\\n4 0 2 0\\nAfter:  [0, 2, 2, 2]\\n\\nBefore: [1, 1, 0, 1]\\n3 0 2 0\\nAfter:  [0, 1, 0, 1]\\n\\nBefore: [3, 1, 2, 0]\\n14 0 2 1\\nAfter:  [3, 1, 2, 0]\\n\\nBefore: [3, 3, 1, 0]\\n9 2 1 3\\nAfter:  [3, 3, 1, 2]\\n\\nBefore: [1, 1, 3, 0]\\n2 1 0 1\\nAfter:  [1, 1, 3, 0]\\n\\nBefore: [0, 1, 2, 2]\\n15 3 3 1\\nAfter:  [0, 0, 2, 2]\\n\\nBefore: [0, 1, 1, 2]\\n12 2 1 2\\nAfter:  [0, 1, 2, 2]\\n\\nBefore: [2, 1, 2, 1]\\n5 1 2 2\\nAfter:  [2, 1, 0, 1]\\n\\nBefore: [1, 1, 2, 3]\\n4 0 2 1\\nAfter:  [1, 0, 2, 3]\\n\\nBefore: [1, 1, 2, 3]\\n13 3 3 2\\nAfter:  [1, 1, 1, 3]\\n\\nBefore: [3, 1, 0, 0]\\n0 2 0 1\\nAfter:  [3, 1, 0, 0]\\n\\nBefore: [1, 1, 1, 3]\\n2 1 0 2\\nAfter:  [1, 1, 1, 3]\\n\\nBefore: [2, 1, 3, 3]\\n14 0 1 3\\nAfter:  [2, 1, 3, 1]\\n\\nBefore: [1, 1, 1, 1]\\n12 2 1 2\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [2, 1, 2, 1]\\n8 3 2 3\\nAfter:  [2, 1, 2, 1]\\n\\nBefore: [3, 1, 2, 3]\\n10 1 3 1\\nAfter:  [3, 0, 2, 3]\\n\\nBefore: [3, 0, 2, 3]\\n10 2 3 1\\nAfter:  [3, 0, 2, 3]\\n\\nBefore: [0, 1, 2, 2]\\n1 1 3 2\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [0, 2, 3, 3]\\n10 1 3 2\\nAfter:  [0, 2, 0, 3]\\n\\nBefore: [1, 1, 2, 1]\\n2 1 0 1\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [3, 3, 1, 2]\\n9 2 1 0\\nAfter:  [2, 3, 1, 2]\\n\\nBefore: [3, 1, 1, 0]\\n12 2 1 1\\nAfter:  [3, 2, 1, 0]\\n\\nBefore: [3, 3, 0, 1]\\n0 2 0 2\\nAfter:  [3, 3, 1, 1]\\n\\nBefore: [0, 1, 0, 3]\\n10 1 3 0\\nAfter:  [0, 1, 0, 3]\\n\\nBefore: [0, 1, 3, 1]\\n11 1 3 1\\nAfter:  [0, 1, 3, 1]\\n\\nBefore: [3, 1, 2, 3]\\n5 1 2 2\\nAfter:  [3, 1, 0, 3]\\n\\nBefore: [2, 2, 1, 3]\\n7 0 2 3\\nAfter:  [2, 2, 1, 1]\\n\\nBefore: [3, 2, 1, 3]\\n10 1 3 2\\nAfter:  [3, 2, 0, 3]\\n\\nBefore: [2, 2, 3, 1]\\n15 3 3 2\\nAfter:  [2, 2, 0, 1]\\n\\nBefore: [0, 1, 2, 1]\\n8 3 2 0\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [2, 1, 0, 0]\\n14 0 1 2\\nAfter:  [2, 1, 1, 0]\\n\\nBefore: [1, 1, 1, 3]\\n2 1 0 0\\nAfter:  [1, 1, 1, 3]\\n\\nBefore: [0, 0, 1, 1]\\n9 2 1 1\\nAfter:  [0, 2, 1, 1]\\n\\nBefore: [1, 0, 2, 0]\\n4 0 2 1\\nAfter:  [1, 0, 2, 0]\\n\\nBefore: [1, 1, 2, 2]\\n2 1 0 2\\nAfter:  [1, 1, 1, 2]\\n\\nBefore: [3, 1, 1, 2]\\n12 2 1 0\\nAfter:  [2, 1, 1, 2]\\n\\nBefore: [0, 0, 3, 1]\\n15 3 3 3\\nAfter:  [0, 0, 3, 0]\\n\\nBefore: [1, 2, 2, 3]\\n4 0 2 2\\nAfter:  [1, 2, 0, 3]\\n\\nBefore: [0, 1, 2, 3]\\n5 1 2 2\\nAfter:  [0, 1, 0, 3]\\n\\nBefore: [3, 1, 2, 2]\\n5 1 2 0\\nAfter:  [0, 1, 2, 2]\\n\\nBefore: [3, 1, 2, 1]\\n13 2 2 2\\nAfter:  [3, 1, 1, 1]\\n\\nBefore: [2, 1, 0, 2]\\n14 0 1 1\\nAfter:  [2, 1, 0, 2]\\n\\nBefore: [2, 0, 1, 0]\\n7 0 2 2\\nAfter:  [2, 0, 1, 0]\\n\\nBefore: [0, 0, 1, 3]\\n9 2 1 3\\nAfter:  [0, 0, 1, 2]\\n\\nBefore: [0, 2, 0, 1]\\n6 0 0 3\\nAfter:  [0, 2, 0, 0]\\n\\nBefore: [0, 2, 0, 3]\\n10 1 3 1\\nAfter:  [0, 0, 0, 3]\\n\\nBefore: [3, 2, 2, 2]\\n14 0 2 0\\nAfter:  [1, 2, 2, 2]\\n\\nBefore: [0, 0, 1, 0]\\n9 2 1 2\\nAfter:  [0, 0, 2, 0]\\n\\nBefore: [3, 1, 3, 2]\\n7 0 3 3\\nAfter:  [3, 1, 3, 1]\\n\\nBefore: [2, 2, 1, 2]\\n7 0 2 2\\nAfter:  [2, 2, 1, 2]\\n\\nBefore: [0, 1, 1, 0]\\n6 0 0 1\\nAfter:  [0, 0, 1, 0]\\n\\nBefore: [0, 0, 1, 3]\\n13 3 2 2\\nAfter:  [0, 0, 0, 3]\\n\\nBefore: [2, 1, 3, 2]\\n0 0 2 1\\nAfter:  [2, 1, 3, 2]\\n\\nBefore: [1, 3, 0, 1]\\n15 3 3 3\\nAfter:  [1, 3, 0, 0]\\n\\nBefore: [2, 1, 2, 2]\\n5 1 2 3\\nAfter:  [2, 1, 2, 0]\\n\\nBefore: [2, 0, 1, 3]\\n7 0 2 3\\nAfter:  [2, 0, 1, 1]\\n\\nBefore: [3, 0, 3, 2]\\n15 3 3 3\\nAfter:  [3, 0, 3, 0]\\n\\nBefore: [3, 2, 0, 1]\\n15 3 3 2\\nAfter:  [3, 2, 0, 1]\\n\\nBefore: [2, 2, 2, 3]\\n10 1 3 1\\nAfter:  [2, 0, 2, 3]\\n\\nBefore: [0, 1, 2, 1]\\n8 3 2 3\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [1, 3, 1, 2]\\n9 2 1 0\\nAfter:  [2, 3, 1, 2]\\n\\nBefore: [0, 1, 1, 0]\\n12 2 1 1\\nAfter:  [0, 2, 1, 0]\\n\\nBefore: [3, 1, 1, 3]\\n13 3 3 0\\nAfter:  [1, 1, 1, 3]\\n\\nBefore: [3, 2, 0, 2]\\n0 2 0 1\\nAfter:  [3, 1, 0, 2]\\n\\nBefore: [0, 1, 0, 3]\\n10 1 3 3\\nAfter:  [0, 1, 0, 0]\\n\\nBefore: [3, 0, 2, 1]\\n8 3 2 0\\nAfter:  [1, 0, 2, 1]\\n\\nBefore: [0, 1, 2, 3]\\n5 1 2 1\\nAfter:  [0, 0, 2, 3]\\n\\nBefore: [2, 2, 0, 1]\\n15 3 3 0\\nAfter:  [0, 2, 0, 1]\\n\\nBefore: [1, 0, 0, 2]\\n3 0 2 0\\nAfter:  [0, 0, 0, 2]\\n\\nBefore: [0, 3, 1, 0]\\n6 0 0 0\\nAfter:  [0, 3, 1, 0]\\n\\nBefore: [0, 0, 1, 0]\\n13 0 0 0\\nAfter:  [1, 0, 1, 0]\\n\\nBefore: [1, 1, 2, 0]\\n5 1 2 2\\nAfter:  [1, 1, 0, 0]\\n\\nBefore: [2, 1, 2, 2]\\n1 1 3 3\\nAfter:  [2, 1, 2, 0]\\n\\nBefore: [0, 0, 2, 0]\\n6 0 0 2\\nAfter:  [0, 0, 0, 0]\\n\\nBefore: [3, 1, 0, 2]\\n7 0 3 3\\nAfter:  [3, 1, 0, 1]\\n\\nBefore: [3, 2, 2, 0]\\n14 0 2 3\\nAfter:  [3, 2, 2, 1]\\n\\nBefore: [1, 0, 1, 2]\\n9 2 1 1\\nAfter:  [1, 2, 1, 2]\\n\\nBefore: [2, 1, 1, 2]\\n14 0 1 0\\nAfter:  [1, 1, 1, 2]\\n\\nBefore: [1, 0, 2, 2]\\n4 0 2 2\\nAfter:  [1, 0, 0, 2]\\n\\nBefore: [2, 1, 0, 2]\\n14 0 1 2\\nAfter:  [2, 1, 1, 2]\\n\\nBefore: [3, 1, 0, 2]\\n1 1 3 1\\nAfter:  [3, 0, 0, 2]\\n\\nBefore: [1, 3, 0, 2]\\n3 0 2 2\\nAfter:  [1, 3, 0, 2]\\n\\nBefore: [0, 1, 0, 2]\\n15 3 3 2\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [2, 0, 1, 1]\\n9 2 1 2\\nAfter:  [2, 0, 2, 1]\\n\\nBefore: [1, 1, 0, 0]\\n2 1 0 1\\nAfter:  [1, 1, 0, 0]\\n\\nBefore: [0, 1, 2, 2]\\n5 1 2 1\\nAfter:  [0, 0, 2, 2]\\n\\nBefore: [3, 1, 3, 2]\\n7 0 3 1\\nAfter:  [3, 1, 3, 2]\\n\\nBefore: [2, 1, 2, 1]\\n11 1 3 0\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [3, 2, 1, 2]\\n7 0 3 3\\nAfter:  [3, 2, 1, 1]\\n\\nBefore: [2, 1, 1, 1]\\n12 2 1 3\\nAfter:  [2, 1, 1, 2]\\n\\nBefore: [0, 2, 2, 1]\\n8 3 2 1\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [0, 1, 1, 2]\\n1 1 3 1\\nAfter:  [0, 0, 1, 2]\\n\\nBefore: [1, 0, 2, 1]\\n4 0 2 0\\nAfter:  [0, 0, 2, 1]\\n\\nBefore: [0, 3, 3, 1]\\n15 3 3 3\\nAfter:  [0, 3, 3, 0]\\n\\nBefore: [0, 1, 1, 2]\\n1 1 3 0\\nAfter:  [0, 1, 1, 2]\\n\\nBefore: [2, 0, 1, 0]\\n7 0 2 0\\nAfter:  [1, 0, 1, 0]\\n\\nBefore: [0, 2, 2, 1]\\n8 3 2 0\\nAfter:  [1, 2, 2, 1]\\n\\nBefore: [3, 2, 0, 3]\\n0 2 0 2\\nAfter:  [3, 2, 1, 3]\\n\\nBefore: [3, 2, 3, 3]\\n13 3 2 1\\nAfter:  [3, 1, 3, 3]\\n\\nBefore: [3, 2, 0, 1]\\n15 3 3 1\\nAfter:  [3, 0, 0, 1]\\n\\nBefore: [3, 0, 0, 0]\\n0 2 0 3\\nAfter:  [3, 0, 0, 1]\\n\\nBefore: [3, 2, 1, 2]\\n7 0 3 0\\nAfter:  [1, 2, 1, 2]\\n\\nBefore: [2, 1, 0, 1]\\n11 1 3 0\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [3, 2, 2, 3]\\n10 1 3 2\\nAfter:  [3, 2, 0, 3]\\n\\nBefore: [0, 1, 1, 3]\\n12 2 1 3\\nAfter:  [0, 1, 1, 2]\\n\\nBefore: [1, 2, 0, 0]\\n3 0 2 3\\nAfter:  [1, 2, 0, 0]\\n\\nBefore: [1, 2, 0, 0]\\n3 0 2 0\\nAfter:  [0, 2, 0, 0]\\n\\nBefore: [2, 0, 1, 3]\\n10 2 3 2\\nAfter:  [2, 0, 0, 3]\\n\\nBefore: [1, 2, 2, 3]\\n4 0 2 1\\nAfter:  [1, 0, 2, 3]\\n\\nBefore: [2, 1, 3, 2]\\n14 0 1 3\\nAfter:  [2, 1, 3, 1]\\n\\nBefore: [2, 3, 1, 2]\\n7 0 2 3\\nAfter:  [2, 3, 1, 1]\\n\\nBefore: [2, 2, 2, 2]\\n15 3 3 3\\nAfter:  [2, 2, 2, 0]\\n\\nBefore: [1, 3, 0, 1]\\n3 0 2 3\\nAfter:  [1, 3, 0, 0]\\n\\nBefore: [1, 1, 1, 0]\\n2 1 0 0\\nAfter:  [1, 1, 1, 0]\\n\\nBefore: [0, 1, 2, 1]\\n5 1 2 2\\nAfter:  [0, 1, 0, 1]\\n\\nBefore: [1, 3, 2, 2]\\n4 0 2 2\\nAfter:  [1, 3, 0, 2]\\n\\nBefore: [1, 1, 1, 0]\\n12 2 1 0\\nAfter:  [2, 1, 1, 0]\\n\\nBefore: [3, 1, 0, 2]\\n0 2 0 3\\nAfter:  [3, 1, 0, 1]\\n\\nBefore: [1, 1, 2, 3]\\n2 1 0 0\\nAfter:  [1, 1, 2, 3]\\n\\nBefore: [1, 1, 1, 0]\\n2 1 0 3\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [2, 3, 3, 3]\\n0 0 2 0\\nAfter:  [1, 3, 3, 3]\\n\\nBefore: [3, 2, 3, 1]\\n15 3 3 0\\nAfter:  [0, 2, 3, 1]\\n\\nBefore: [3, 2, 3, 2]\\n7 0 3 1\\nAfter:  [3, 1, 3, 2]\\n\\nBefore: [3, 3, 1, 2]\\n7 0 3 3\\nAfter:  [3, 3, 1, 1]\\n\\nBefore: [3, 1, 1, 3]\\n12 2 1 0\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [0, 2, 3, 0]\\n6 0 0 0\\nAfter:  [0, 2, 3, 0]\\n\\nBefore: [2, 2, 1, 3]\\n7 0 2 0\\nAfter:  [1, 2, 1, 3]\\n\\nBefore: [0, 1, 2, 2]\\n1 1 3 0\\nAfter:  [0, 1, 2, 2]\\n\\nBefore: [2, 0, 1, 2]\\n9 2 1 3\\nAfter:  [2, 0, 1, 2]\\n\\nBefore: [0, 1, 1, 0]\\n12 2 1 2\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [1, 1, 2, 0]\\n4 0 2 0\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [1, 1, 1, 3]\\n12 2 1 0\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [2, 2, 2, 1]\\n8 3 2 3\\nAfter:  [2, 2, 2, 1]\\n\\nBefore: [1, 1, 0, 3]\\n2 1 0 0\\nAfter:  [1, 1, 0, 3]\\n\\nBefore: [0, 1, 1, 1]\\n11 1 3 2\\nAfter:  [0, 1, 1, 1]\\n\\nBefore: [0, 1, 1, 2]\\n1 1 3 2\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [2, 3, 3, 1]\\n0 0 2 0\\nAfter:  [1, 3, 3, 1]\\n\\nBefore: [3, 0, 1, 2]\\n7 0 3 3\\nAfter:  [3, 0, 1, 1]\\n\\nBefore: [0, 3, 0, 1]\\n6 0 0 3\\nAfter:  [0, 3, 0, 0]\\n\\nBefore: [2, 1, 2, 1]\\n5 1 2 3\\nAfter:  [2, 1, 2, 0]\\n\\nBefore: [2, 3, 1, 2]\\n9 2 1 3\\nAfter:  [2, 3, 1, 2]\\n\\nBefore: [2, 0, 1, 1]\\n9 2 1 0\\nAfter:  [2, 0, 1, 1]\\n\\nBefore: [2, 1, 0, 2]\\n1 1 3 1\\nAfter:  [2, 0, 0, 2]\\n\\nBefore: [0, 1, 2, 0]\\n5 1 2 2\\nAfter:  [0, 1, 0, 0]\\n\\nBefore: [0, 1, 1, 3]\\n10 1 3 2\\nAfter:  [0, 1, 0, 3]\\n\\nBefore: [1, 1, 0, 3]\\n3 0 2 0\\nAfter:  [0, 1, 0, 3]\\n\\nBefore: [2, 1, 3, 2]\\n1 1 3 1\\nAfter:  [2, 0, 3, 2]\\n\\nBefore: [3, 1, 2, 0]\\n5 1 2 2\\nAfter:  [3, 1, 0, 0]\\n\\nBefore: [3, 2, 2, 3]\\n13 3 2 3\\nAfter:  [3, 2, 2, 0]\\n\\nBefore: [1, 0, 2, 0]\\n4 0 2 0\\nAfter:  [0, 0, 2, 0]\\n\\nBefore: [1, 1, 1, 1]\\n12 2 1 1\\nAfter:  [1, 2, 1, 1]\\n\\nBefore: [3, 3, 1, 3]\\n10 2 3 0\\nAfter:  [0, 3, 1, 3]\\n\\nBefore: [3, 1, 0, 2]\\n0 2 0 2\\nAfter:  [3, 1, 1, 2]\\n\\nBefore: [2, 2, 2, 3]\\n10 2 3 1\\nAfter:  [2, 0, 2, 3]\\n\\nBefore: [3, 1, 2, 0]\\n5 1 2 3\\nAfter:  [3, 1, 2, 0]\\n\\nBefore: [3, 0, 2, 3]\\n14 0 2 3\\nAfter:  [3, 0, 2, 1]\\n\\nBefore: [3, 0, 1, 1]\\n9 2 1 2\\nAfter:  [3, 0, 2, 1]\\n\\nBefore: [1, 3, 1, 3]\\n10 2 3 0\\nAfter:  [0, 3, 1, 3]\\n\\nBefore: [3, 2, 0, 3]\\n0 2 0 3\\nAfter:  [3, 2, 0, 1]\\n\\nBefore: [3, 3, 2, 1]\\n14 0 2 3\\nAfter:  [3, 3, 2, 1]\\n\\nBefore: [2, 0, 2, 1]\\n8 3 2 1\\nAfter:  [2, 1, 2, 1]\\n\\nBefore: [1, 3, 2, 2]\\n4 0 2 3\\nAfter:  [1, 3, 2, 0]\\n\\nBefore: [2, 0, 3, 2]\\n0 0 2 2\\nAfter:  [2, 0, 1, 2]\\n\\nBefore: [1, 1, 2, 0]\\n2 1 0 3\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [1, 1, 0, 0]\\n2 1 0 0\\nAfter:  [1, 1, 0, 0]\\n\\nBefore: [0, 1, 2, 0]\\n13 0 0 3\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [2, 3, 2, 1]\\n8 3 2 2\\nAfter:  [2, 3, 1, 1]\\n\\nBefore: [3, 1, 1, 2]\\n1 1 3 1\\nAfter:  [3, 0, 1, 2]\\n\\nBefore: [1, 1, 0, 2]\\n15 3 3 0\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [3, 2, 2, 2]\\n14 0 2 3\\nAfter:  [3, 2, 2, 1]\\n\\nBefore: [1, 3, 1, 3]\\n10 2 3 2\\nAfter:  [1, 3, 0, 3]\\n\\nBefore: [1, 0, 0, 1]\\n3 0 2 2\\nAfter:  [1, 0, 0, 1]\\n\\nBefore: [3, 2, 2, 1]\\n14 0 2 2\\nAfter:  [3, 2, 1, 1]\\n\\nBefore: [3, 1, 2, 3]\\n14 0 2 0\\nAfter:  [1, 1, 2, 3]\\n\\nBefore: [0, 1, 1, 1]\\n12 2 1 1\\nAfter:  [0, 2, 1, 1]\\n\\nBefore: [3, 2, 1, 2]\\n7 0 3 2\\nAfter:  [3, 2, 1, 2]\\n\\nBefore: [1, 1, 0, 2]\\n1 1 3 1\\nAfter:  [1, 0, 0, 2]\\n\\nBefore: [0, 1, 1, 3]\\n13 3 3 0\\nAfter:  [1, 1, 1, 3]\\n\\nBefore: [3, 0, 1, 0]\\n9 2 1 3\\nAfter:  [3, 0, 1, 2]\\n\\nBefore: [1, 1, 2, 1]\\n4 0 2 2\\nAfter:  [1, 1, 0, 1]\\n\\nBefore: [1, 1, 1, 1]\\n2 1 0 2\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [0, 3, 0, 3]\\n6 0 0 3\\nAfter:  [0, 3, 0, 0]\\n\\nBefore: [1, 1, 0, 0]\\n3 0 2 1\\nAfter:  [1, 0, 0, 0]\\n\\nBefore: [3, 3, 2, 1]\\n8 3 2 1\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [2, 1, 1, 1]\\n7 0 2 2\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [1, 2, 2, 1]\\n4 0 2 2\\nAfter:  [1, 2, 0, 1]\\n\\nBefore: [2, 2, 1, 1]\\n15 2 3 0\\nAfter:  [0, 2, 1, 1]\\n\\nBefore: [2, 1, 1, 3]\\n7 0 2 2\\nAfter:  [2, 1, 1, 3]\\n\\nBefore: [0, 1, 2, 3]\\n13 0 0 3\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [2, 1, 2, 3]\\n5 1 2 0\\nAfter:  [0, 1, 2, 3]\\n\\nBefore: [1, 3, 3, 3]\\n13 3 3 2\\nAfter:  [1, 3, 1, 3]\\n\\nBefore: [0, 3, 1, 2]\\n9 2 1 0\\nAfter:  [2, 3, 1, 2]\\n\\nBefore: [3, 1, 2, 2]\\n5 1 2 2\\nAfter:  [3, 1, 0, 2]\\n\\nBefore: [1, 1, 3, 2]\\n1 1 3 3\\nAfter:  [1, 1, 3, 0]\\n\\nBefore: [1, 0, 2, 2]\\n15 3 3 0\\nAfter:  [0, 0, 2, 2]\\n\\nBefore: [1, 3, 0, 2]\\n3 0 2 0\\nAfter:  [0, 3, 0, 2]\\n\\nBefore: [2, 3, 3, 1]\\n0 0 2 2\\nAfter:  [2, 3, 1, 1]\\n\\nBefore: [1, 0, 2, 1]\\n8 3 2 2\\nAfter:  [1, 0, 1, 1]\\n\\nBefore: [2, 1, 2, 1]\\n5 1 2 0\\nAfter:  [0, 1, 2, 1]\\n\\nBefore: [0, 3, 3, 0]\\n6 0 0 0\\nAfter:  [0, 3, 3, 0]\\n\\nBefore: [2, 1, 3, 0]\\n14 0 1 1\\nAfter:  [2, 1, 3, 0]\\n\\nBefore: [3, 1, 2, 3]\\n14 0 2 1\\nAfter:  [3, 1, 2, 3]\\n\\nBefore: [2, 2, 1, 3]\\n13 3 1 1\\nAfter:  [2, 0, 1, 3]\\n\\nBefore: [1, 2, 0, 1]\\n3 0 2 0\\nAfter:  [0, 2, 0, 1]\\n\\nBefore: [1, 0, 0, 3]\\n3 0 2 0\\nAfter:  [0, 0, 0, 3]\\n\\nBefore: [2, 3, 2, 0]\\n13 2 2 1\\nAfter:  [2, 1, 2, 0]\\n\\nBefore: [1, 1, 0, 2]\\n2 1 0 2\\nAfter:  [1, 1, 1, 2]\\n\\nBefore: [3, 2, 0, 2]\\n7 0 3 2\\nAfter:  [3, 2, 1, 2]\\n\\nBefore: [2, 3, 1, 3]\\n7 0 2 0\\nAfter:  [1, 3, 1, 3]\\n\\nBefore: [0, 2, 1, 3]\\n13 3 2 0\\nAfter:  [0, 2, 1, 3]\\n\\nBefore: [3, 1, 1, 1]\\n12 2 1 0\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [1, 2, 2, 1]\\n4 0 2 3\\nAfter:  [1, 2, 2, 0]\\n\\nBefore: [3, 2, 2, 0]\\n13 2 2 1\\nAfter:  [3, 1, 2, 0]\\n\\nBefore: [1, 1, 2, 1]\\n4 0 2 3\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [1, 3, 2, 0]\\n4 0 2 1\\nAfter:  [1, 0, 2, 0]\\n\\nBefore: [1, 1, 2, 2]\\n4 0 2 2\\nAfter:  [1, 1, 0, 2]\\n\\nBefore: [2, 1, 2, 3]\\n5 1 2 2\\nAfter:  [2, 1, 0, 3]\\n\\nBefore: [2, 1, 1, 1]\\n7 0 2 0\\nAfter:  [1, 1, 1, 1]\\n\\nBefore: [1, 3, 0, 1]\\n3 0 2 2\\nAfter:  [1, 3, 0, 1]\\n\\nBefore: [1, 1, 2, 3]\\n5 1 2 3\\nAfter:  [1, 1, 2, 0]\\n\\nBefore: [0, 1, 1, 1]\\n11 1 3 1\\nAfter:  [0, 1, 1, 1]\\n\\nBefore: [0, 0, 2, 2]\\n6 0 0 3\\nAfter:  [0, 0, 2, 0]\\n\\nBefore: [2, 1, 2, 2]\\n5 1 2 2\\nAfter:  [2, 1, 0, 2]\\n\\nBefore: [3, 1, 1, 3]\\n10 1 3 2\\nAfter:  [3, 1, 0, 3]\\n\\nBefore: [1, 1, 2, 3]\\n2 1 0 2\\nAfter:  [1, 1, 1, 3]\\n\\nBefore: [3, 1, 0, 1]\\n0 2 0 1\\nAfter:  [3, 1, 0, 1]\\n\\nBefore: [2, 0, 3, 3]\\n0 0 2 2\\nAfter:  [2, 0, 1, 3]\\n\\nBefore: [3, 3, 0, 1]\\n0 2 0 3\\nAfter:  [3, 3, 0, 1]\\n\\nBefore: [1, 1, 2, 2]\\n5 1 2 1\\nAfter:  [1, 0, 2, 2]\\n\\nBefore: [0, 3, 2, 0]\\n6 0 0 1\\nAfter:  [0, 0, 2, 0]\\n\\nBefore: [3, 1, 2, 2]\\n1 1 3 0\\nAfter:  [0, 1, 2, 2]\\n\\nBefore: [1, 1, 3, 2]\\n2 1 0 0\\nAfter:  [1, 1, 3, 2]\\n\\nBefore: [1, 1, 2, 0]\\n5 1 2 0\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [1, 1, 2, 2]\\n1 1 3 0\\nAfter:  [0, 1, 2, 2]\\n\\nBefore: [3, 2, 2, 1]\\n8 3 2 3\\nAfter:  [3, 2, 2, 1]\\n\\nBefore: [1, 3, 0, 3]\\n3 0 2 1\\nAfter:  [1, 0, 0, 3]\\n\\nBefore: [3, 1, 2, 3]\\n10 1 3 3\\nAfter:  [3, 1, 2, 0]\\n\\nBefore: [2, 1, 1, 2]\\n12 2 1 3\\nAfter:  [2, 1, 1, 2]\\n\\nBefore: [3, 0, 2, 1]\\n8 3 2 2\\nAfter:  [3, 0, 1, 1]\\n\\nBefore: [2, 1, 0, 1]\\n14 0 1 1\\nAfter:  [2, 1, 0, 1]\\n\\nBefore: [3, 3, 0, 1]\\n0 2 0 1\\nAfter:  [3, 1, 0, 1]\\n\\nBefore: [0, 2, 2, 2]\\n6 0 0 2\\nAfter:  [0, 2, 0, 2]\\n\\nBefore: [0, 1, 2, 2]\\n5 1 2 3\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [1, 1, 1, 2]\\n12 2 1 1\\nAfter:  [1, 2, 1, 2]\\n\\nBefore: [2, 2, 2, 1]\\n8 3 2 1\\nAfter:  [2, 1, 2, 1]\\n\\nBefore: [3, 1, 0, 2]\\n0 2 0 1\\nAfter:  [3, 1, 0, 2]\\n\\nBefore: [0, 1, 2, 3]\\n5 1 2 0\\nAfter:  [0, 1, 2, 3]\\n\\nBefore: [3, 1, 3, 2]\\n1 1 3 1\\nAfter:  [3, 0, 3, 2]\\n\\nBefore: [1, 1, 2, 2]\\n1 1 3 2\\nAfter:  [1, 1, 0, 2]\\n\\nBefore: [1, 0, 2, 2]\\n4 0 2 3\\nAfter:  [1, 0, 2, 0]\\n\\nBefore: [1, 1, 2, 1]\\n11 1 3 0\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [2, 1, 3, 2]\\n0 0 2 3\\nAfter:  [2, 1, 3, 1]\\n\\nBefore: [1, 1, 2, 0]\\n4 0 2 2\\nAfter:  [1, 1, 0, 0]\\n\\nBefore: [3, 1, 2, 2]\\n1 1 3 3\\nAfter:  [3, 1, 2, 0]\\n\\nBefore: [2, 1, 2, 0]\\n5 1 2 0\\nAfter:  [0, 1, 2, 0]\\n\\nBefore: [3, 1, 0, 0]\\n0 2 0 2\\nAfter:  [3, 1, 1, 0]\\n\\nBefore: [1, 1, 2, 3]\\n5 1 2 0\\nAfter:  [0, 1, 2, 3]\\n\\nBefore: [0, 0, 3, 0]\\n6 0 0 3\\nAfter:  [0, 0, 3, 0]\\n\\nBefore: [1, 3, 0, 3]\\n3 0 2 0\\nAfter:  [0, 3, 0, 3]\\n\\nBefore: [3, 3, 3, 2]\\n7 0 3 2\\nAfter:  [3, 3, 1, 2]\\n\\nBefore: [3, 0, 2, 2]\\n15 3 3 0\\nAfter:  [0, 0, 2, 2]\\n\\nBefore: [1, 1, 2, 3]\\n4 0 2 2\\nAfter:  [1, 1, 0, 3]\\n\\nBefore: [1, 2, 3, 3]\\n10 1 3 0\\nAfter:  [0, 2, 3, 3]\\n\\nBefore: [2, 1, 2, 2]\\n14 0 1 2\\nAfter:  [2, 1, 1, 2]\\n\\nBefore: [0, 2, 3, 2]\\n15 3 3 3\\nAfter:  [0, 2, 3, 0]\\n\\nBefore: [3, 0, 2, 1]\\n8 3 2 1\\nAfter:  [3, 1, 2, 1]\\n\\nBefore: [0, 3, 1, 3]\\n13 3 3 3\\nAfter:  [0, 3, 1, 1]\\n\\nBefore: [0, 0, 3, 1]\\n6 0 0 3\\nAfter:  [0, 0, 3, 0]\\n\\nBefore: [0, 0, 1, 3]\\n10 2 3 3\\nAfter:  [0, 0, 1, 0]\\n\\nBefore: [1, 0, 2, 1]\\n13 2 2 1\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [2, 3, 1, 0]\\n7 0 2 1\\nAfter:  [2, 1, 1, 0]\\n\\nBefore: [0, 3, 3, 3]\\n13 3 2 2\\nAfter:  [0, 3, 1, 3]\\n\\nBefore: [2, 1, 0, 3]\\n10 1 3 3\\nAfter:  [2, 1, 0, 0]\\n\\nBefore: [2, 3, 1, 2]\\n9 2 1 2\\nAfter:  [2, 3, 2, 2]\\n\\nBefore: [2, 3, 1, 0]\\n7 0 2 3\\nAfter:  [2, 3, 1, 1]\\n\\nBefore: [1, 1, 1, 0]\\n12 2 1 3\\nAfter:  [1, 1, 1, 2]\\n\\nBefore: [0, 3, 1, 3]\\n10 2 3 3\\nAfter:  [0, 3, 1, 0]\\n\\nBefore: [1, 0, 0, 1]\\n3 0 2 0\\nAfter:  [0, 0, 0, 1]\\n\\nBefore: [2, 1, 1, 2]\\n7 0 2 3\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [3, 3, 2, 1]\\n8 3 2 0\\nAfter:  [1, 3, 2, 1]\\n\\nBefore: [1, 1, 1, 2]\\n1 1 3 0\\nAfter:  [0, 1, 1, 2]\\n\\nBefore: [3, 2, 0, 2]\\n7 0 3 3\\nAfter:  [3, 2, 0, 1]\\n\\nBefore: [0, 3, 1, 2]\\n6 0 0 3\\nAfter:  [0, 3, 1, 0]\\n\\nBefore: [1, 3, 0, 2]\\n3 0 2 1\\nAfter:  [1, 0, 0, 2]\\n\\nBefore: [0, 0, 2, 1]\\n15 3 3 3\\nAfter:  [0, 0, 2, 0]\\n\\nBefore: [3, 0, 3, 2]\\n15 3 3 1\\nAfter:  [3, 0, 3, 2]\\n\\nBefore: [1, 0, 2, 1]\\n8 3 2 1\\nAfter:  [1, 1, 2, 1]\\n\\nBefore: [2, 1, 1, 1]\\n12 2 1 0\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [2, 3, 2, 0]\\n13 2 0 0\\nAfter:  [1, 3, 2, 0]\\n\\nBefore: [3, 1, 3, 2]\\n7 0 3 2\\nAfter:  [3, 1, 1, 2]\\n\\nBefore: [2, 1, 0, 2]\\n1 1 3 3\\nAfter:  [2, 1, 0, 0]\\n\\nBefore: [2, 1, 3, 2]\\n1 1 3 3\\nAfter:  [2, 1, 3, 0]\\n\\nBefore: [2, 1, 1, 1]\\n11 1 3 3\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [3, 1, 0, 2]\\n1 1 3 0\\nAfter:  [0, 1, 0, 2]\\n\\nBefore: [2, 1, 3, 1]\\n0 0 2 2\\nAfter:  [2, 1, 1, 1]\\n\\nBefore: [1, 1, 0, 2]\\n2 1 0 1\\nAfter:  [1, 1, 0, 2]\\n\\nBefore: [1, 0, 2, 0]\\n4 0 2 3\\nAfter:  [1, 0, 2, 0]\\n\\nBefore: [1, 1, 1, 2]\\n2 1 0 2\\nAfter:  [1, 1, 1, 2]\\n\\nBefore: [3, 1, 1, 1]\\n15 3 3 1\\nAfter:  [3, 0, 1, 1]\\n\\nBefore: [0, 1, 1, 0]\\n12 2 1 0\\nAfter:  [2, 1, 1, 0]\\n\\nBefore: [1, 2, 2, 1]\\n8 3 2 3\\nAfter:  [1, 2, 2, 1]\\n\\nBefore: [0, 1, 3, 2]\\n6 0 0 1\\nAfter:  [0, 0, 3, 2]\\n\\nBefore: [1, 2, 2, 0]\\n4 0 2 2\\nAfter:  [1, 2, 0, 0]\\n\\nBefore: [2, 1, 3, 1]\\n11 1 3 3\\nAfter:  [2, 1, 3, 1]\\n\\nBefore: [2, 2, 3, 1]\\n0 0 2 2\\nAfter:  [2, 2, 1, 1]\\n\\nBefore: [1, 1, 2, 2]\\n5 1 2 0\\nAfter:  [0, 1, 2, 2]\\n\\nBefore: [1, 1, 0, 0]\\n2 1 0 2\\nAfter:  [1, 1, 1, 0]\\n\\nBefore: [3, 3, 2, 1]\\n8 3 2 2\\nAfter:  [3, 3, 1, 1]\\n\\n\\n\\n6 0 0 3\\n9 3 2 3\\n6 1 0 0\\n9 0 3 0\\n4 1 1 2\\n1 0 3 0\\n6 0 3 0\\n12 1 0 1\\n6 0 0 2\\n9 2 2 2\\n4 3 3 0\\n2 2 3 2\\n6 2 2 2\\n12 1 2 1\\n8 1 0 2\\n4 1 1 1\\n4 2 0 0\\n3 1 3 0\\n6 0 1 0\\n12 2 0 2\\n8 2 2 1\\n4 0 0 0\\n4 0 0 3\\n4 2 0 2\\n10 3 2 3\\n6 3 1 3\\n6 3 1 3\\n12 1 3 1\\n8 1 2 0\\n4 1 2 1\\n4 1 3 3\\n4 0 0 2\\n6 3 2 2\\n6 2 1 2\\n12 2 0 0\\n8 0 1 2\\n4 1 3 0\\n6 2 0 1\\n9 1 0 1\\n4 2 3 3\\n4 1 3 3\\n6 3 2 3\\n12 2 3 2\\n8 2 1 0\\n6 1 0 3\\n9 3 2 3\\n4 0 2 2\\n4 1 2 1\\n3 1 3 2\\n6 2 3 2\\n12 2 0 0\\n8 0 3 1\\n6 3 0 2\\n9 2 3 2\\n4 0 0 3\\n4 3 1 0\\n5 0 2 3\\n6 3 2 3\\n12 3 1 1\\n8 1 0 0\\n4 3 3 1\\n4 1 3 3\\n4 0 2 2\\n9 3 1 2\\n6 2 1 2\\n12 0 2 0\\n8 0 0 1\\n4 1 1 0\\n4 0 1 3\\n4 0 1 2\\n6 0 2 2\\n6 2 1 2\\n6 2 2 2\\n12 2 1 1\\n4 2 3 2\\n4 1 2 3\\n8 0 2 3\\n6 3 3 3\\n6 3 1 3\\n12 3 1 1\\n8 1 0 3\\n6 1 0 1\\n9 1 0 1\\n8 0 2 2\\n6 2 1 2\\n12 2 3 3\\n8 3 1 1\\n4 0 2 2\\n6 0 0 0\\n9 0 2 0\\n4 2 2 3\\n15 2 3 2\\n6 2 3 2\\n12 2 1 1\\n8 1 0 0\\n6 3 0 2\\n9 2 3 2\\n6 3 0 1\\n9 1 2 1\\n4 0 3 3\\n15 3 2 3\\n6 3 1 3\\n12 3 0 0\\n8 0 0 2\\n4 3 2 1\\n4 2 3 0\\n4 2 0 3\\n1 1 3 0\\n6 0 2 0\\n12 2 0 2\\n8 2 3 1\\n4 3 1 3\\n4 1 0 2\\n4 1 0 0\\n12 0 0 3\\n6 3 2 3\\n6 3 2 3\\n12 1 3 1\\n8 1 3 3\\n4 0 3 0\\n4 0 0 1\\n6 0 0 2\\n9 2 3 2\\n4 2 0 1\\n6 1 1 1\\n12 1 3 3\\n8 3 0 2\\n4 0 1 3\\n4 3 0 1\\n4 2 1 0\\n14 0 1 0\\n6 0 2 0\\n12 0 2 2\\n8 2 1 1\\n4 3 1 0\\n4 0 3 2\\n0 2 0 2\\n6 2 1 2\\n12 1 2 1\\n4 2 0 0\\n4 1 2 3\\n4 2 0 2\\n7 0 3 3\\n6 3 2 3\\n12 3 1 1\\n4 3 3 0\\n4 1 0 3\\n11 2 0 0\\n6 0 1 0\\n12 0 1 1\\n8 1 3 3\\n6 3 0 1\\n9 1 3 1\\n6 0 0 0\\n9 0 2 0\\n14 0 1 2\\n6 2 2 2\\n12 3 2 3\\n8 3 3 2\\n6 0 0 0\\n9 0 1 0\\n4 2 3 1\\n4 0 1 3\\n2 1 3 1\\n6 1 3 1\\n12 2 1 2\\n6 1 0 3\\n9 3 2 3\\n4 2 1 1\\n12 0 0 1\\n6 1 1 1\\n12 2 1 2\\n4 1 3 3\\n4 0 3 1\\n12 3 3 0\\n6 0 2 0\\n12 0 2 2\\n4 2 3 1\\n4 2 1 3\\n4 3 2 0\\n11 1 0 1\\n6 1 3 1\\n12 1 2 2\\n8 2 1 1\\n4 2 1 0\\n6 1 0 3\\n9 3 1 3\\n6 3 0 2\\n9 2 0 2\\n7 0 3 2\\n6 2 3 2\\n12 1 2 1\\n8 1 1 3\\n4 0 3 0\\n6 1 0 2\\n9 2 3 2\\n4 1 1 1\\n6 1 2 1\\n6 1 2 1\\n12 3 1 3\\n8 3 2 1\\n4 2 2 2\\n6 1 0 3\\n9 3 2 3\\n4 3 2 0\\n11 2 0 3\\n6 3 1 3\\n12 3 1 1\\n8 1 0 3\\n4 1 2 1\\n4 2 3 0\\n3 1 0 1\\n6 1 3 1\\n12 1 3 3\\n8 3 3 2\\n4 1 1 3\\n4 3 1 1\\n7 0 3 0\\n6 0 3 0\\n12 0 2 2\\n8 2 3 1\\n4 2 2 0\\n4 0 0 3\\n4 1 3 2\\n2 0 3 2\\n6 2 3 2\\n6 2 1 2\\n12 2 1 1\\n8 1 1 2\\n4 2 2 1\\n4 3 0 3\\n6 3 0 0\\n9 0 3 0\\n1 0 1 0\\n6 0 1 0\\n6 0 3 0\\n12 0 2 2\\n8 2 1 3\\n4 3 0 2\\n4 1 2 1\\n4 2 1 0\\n11 0 2 0\\n6 0 1 0\\n12 3 0 3\\n8 3 3 1\\n4 0 0 3\\n4 3 3 0\\n4 1 0 2\\n5 0 2 0\\n6 0 2 0\\n12 1 0 1\\n4 2 0 0\\n4 3 3 2\\n0 0 2 3\\n6 3 3 3\\n12 1 3 1\\n6 0 0 3\\n9 3 2 3\\n4 2 2 2\\n13 0 3 2\\n6 2 1 2\\n12 2 1 1\\n8 1 3 3\\n4 2 3 1\\n4 3 3 2\\n0 0 2 2\\n6 2 1 2\\n12 2 3 3\\n8 3 0 1\\n4 3 2 2\\n4 3 2 3\\n1 3 0 3\\n6 3 2 3\\n6 3 2 3\\n12 1 3 1\\n8 1 2 0\\n4 0 3 3\\n4 3 0 1\\n5 1 2 1\\n6 1 2 1\\n6 1 3 1\\n12 1 0 0\\n8 0 1 1\\n4 3 3 0\\n4 0 3 2\\n0 2 0 3\\n6 3 2 3\\n12 1 3 1\\n8 1 2 2\\n4 0 0 1\\n4 1 2 3\\n6 3 0 0\\n9 0 2 0\\n7 0 3 1\\n6 1 1 1\\n6 1 1 1\\n12 1 2 2\\n6 0 0 0\\n9 0 3 0\\n4 3 1 3\\n4 2 3 1\\n11 1 0 0\\n6 0 3 0\\n12 2 0 2\\n6 3 0 1\\n9 1 1 1\\n4 2 2 0\\n4 0 0 3\\n3 1 0 3\\n6 3 2 3\\n6 3 1 3\\n12 2 3 2\\n8 2 3 0\\n4 0 3 3\\n4 0 3 1\\n4 2 1 2\\n10 3 2 1\\n6 1 3 1\\n12 0 1 0\\n8 0 0 1\\n4 3 0 0\\n4 2 1 3\\n1 0 3 0\\n6 0 1 0\\n12 0 1 1\\n4 1 2 0\\n6 2 0 2\\n9 2 3 2\\n6 1 0 3\\n9 3 0 3\\n6 0 2 0\\n6 0 3 0\\n6 0 1 0\\n12 1 0 1\\n8 1 1 2\\n4 3 3 3\\n4 0 2 0\\n6 0 0 1\\n9 1 2 1\\n1 3 1 3\\n6 3 1 3\\n12 3 2 2\\n8 2 0 1\\n6 2 0 0\\n9 0 3 0\\n4 0 1 3\\n4 1 0 2\\n4 3 2 2\\n6 2 2 2\\n12 1 2 1\\n8 1 0 0\\n6 2 0 3\\n9 3 2 3\\n4 2 1 2\\n4 2 2 1\\n4 3 2 1\\n6 1 3 1\\n12 0 1 0\\n6 2 0 1\\n9 1 3 1\\n4 3 0 2\\n4 1 3 3\\n9 3 1 1\\n6 1 2 1\\n6 1 1 1\\n12 0 1 0\\n8 0 3 2\\n4 1 1 1\\n6 0 0 3\\n9 3 2 3\\n6 3 0 0\\n9 0 2 0\\n13 0 3 3\\n6 3 3 3\\n12 3 2 2\\n8 2 0 3\\n4 2 0 2\\n4 3 1 1\\n4 1 2 0\\n8 0 2 2\\n6 2 3 2\\n12 2 3 3\\n8 3 2 1\\n4 2 3 2\\n4 2 0 0\\n4 2 3 3\\n13 0 3 0\\n6 0 3 0\\n6 0 3 0\\n12 0 1 1\\n4 2 0 0\\n4 3 0 2\\n6 2 1 2\\n12 2 1 1\\n8 1 0 3\\n4 1 3 2\\n4 3 2 1\\n5 1 2 0\\n6 0 1 0\\n12 0 3 3\\n4 1 2 0\\n4 1 2 1\\n4 0 2 2\\n6 1 2 2\\n6 2 1 2\\n12 2 3 3\\n4 3 3 2\\n4 2 0 0\\n4 3 1 1\\n11 0 2 0\\n6 0 3 0\\n12 3 0 3\\n8 3 3 1\\n4 2 1 3\\n4 3 0 0\\n4 0 1 2\\n0 2 0 3\\n6 3 3 3\\n12 1 3 1\\n8 1 1 0\\n4 3 0 2\\n6 3 0 1\\n9 1 1 1\\n4 0 1 3\\n15 3 2 2\\n6 2 3 2\\n12 2 0 0\\n8 0 2 1\\n4 0 0 2\\n6 3 0 0\\n9 0 2 0\\n2 0 3 3\\n6 3 3 3\\n12 1 3 1\\n8 1 1 3\\n4 1 2 1\\n4 1 3 2\\n3 1 0 1\\n6 1 2 1\\n6 1 1 1\\n12 1 3 3\\n6 0 0 2\\n9 2 2 2\\n4 3 2 1\\n4 3 2 0\\n11 2 0 1\\n6 1 1 1\\n12 3 1 3\\n8 3 3 1\\n4 2 1 3\\n4 3 0 2\\n6 2 0 0\\n9 0 2 0\\n0 0 2 2\\n6 2 3 2\\n12 2 1 1\\n8 1 1 2\\n4 1 3 0\\n4 2 1 1\\n3 0 3 1\\n6 1 2 1\\n6 1 3 1\\n12 2 1 2\\n8 2 1 1\\n4 2 0 0\\n4 1 1 3\\n4 3 1 2\\n3 3 0 3\\n6 3 2 3\\n12 3 1 1\\n8 1 0 3\\n4 1 2 2\\n4 3 2 1\\n1 1 0 1\\n6 1 1 1\\n6 1 1 1\\n12 1 3 3\\n8 3 0 1\\n4 0 2 3\\n4 2 2 2\\n4 1 3 0\\n10 3 2 2\\n6 2 3 2\\n12 2 1 1\\n4 3 0 0\\n4 0 2 2\\n0 2 0 0\\n6 0 1 0\\n6 0 2 0\\n12 0 1 1\\n6 0 0 2\\n9 2 3 2\\n4 1 1 0\\n4 1 1 3\\n6 3 2 3\\n6 3 1 3\\n12 3 1 1\\n6 2 0 0\\n9 0 2 0\\n4 2 3 3\\n13 0 3 3\\n6 3 3 3\\n12 3 1 1\\n8 1 0 0\\n6 0 0 3\\n9 3 3 3\\n4 2 3 1\\n11 1 2 3\\n6 3 2 3\\n12 0 3 0\\n8 0 0 2\\n4 3 3 1\\n4 2 1 0\\n4 1 3 3\\n3 3 0 0\\n6 0 1 0\\n12 2 0 2\\n8 2 3 1\\n4 3 3 2\\n4 2 0 3\\n4 2 0 0\\n0 0 2 0\\n6 0 3 0\\n12 1 0 1\\n8 1 2 2\\n4 2 2 0\\n6 3 0 1\\n9 1 3 1\\n6 2 0 3\\n9 3 0 3\\n14 0 1 3\\n6 3 3 3\\n12 2 3 2\\n4 2 1 3\\n14 0 1 0\\n6 0 1 0\\n6 0 1 0\\n12 0 2 2\\n8 2 2 1\\n4 2 2 2\\n4 0 1 3\\n4 3 2 0\\n10 3 2 2\\n6 2 3 2\\n12 1 2 1\\n4 3 3 3\\n4 2 3 2\\n4 1 3 0\\n8 0 2 0\\n6 0 2 0\\n12 1 0 1\\n8 1 1 2\\n6 2 0 3\\n9 3 1 3\\n4 3 3 0\\n4 3 2 1\\n9 3 1 1\\n6 1 1 1\\n12 2 1 2\\n8 2 2 3\\n4 2 0 1\\n4 3 0 2\\n4 2 0 0\\n11 1 2 1\\n6 1 1 1\\n6 1 1 1\\n12 1 3 3\\n8 3 0 2\\n4 3 0 1\\n4 3 1 3\\n1 3 0 3\\n6 3 1 3\\n12 3 2 2\\n8 2 2 1\\n6 0 0 2\\n9 2 2 2\\n4 0 1 0\\n4 0 1 3\\n10 3 2 2\\n6 2 2 2\\n12 2 1 1\\n6 3 0 0\\n9 0 1 0\\n4 3 2 2\\n4 3 0 3\\n6 3 2 3\\n12 3 1 1\\n8 1 2 2\\n6 2 0 3\\n9 3 0 3\\n4 0 1 1\\n4 3 1 3\\n6 3 3 3\\n12 2 3 2\\n8 2 1 0\\n4 3 1 1\\n4 0 0 3\\n4 2 2 2\\n14 2 1 3\\n6 3 3 3\\n6 3 2 3\\n12 0 3 0\\n8 0 0 1\\n4 0 0 2\\n4 2 2 0\\n4 0 3 3\\n2 0 3 0\\n6 0 1 0\\n12 1 0 1\\n8 1 3 2\\n4 1 2 1\\n4 1 3 0\\n4 3 1 3\\n12 0 0 1\\n6 1 3 1\\n12 2 1 2\\n8 2 3 3\\n6 3 0 2\\n9 2 0 2\\n4 1 1 1\\n4 0 1 0\\n6 1 2 2\\n6 2 2 2\\n12 2 3 3\\n8 3 1 1\\n4 3 2 2\\n4 2 0 0\\n6 2 0 3\\n9 3 2 3\\n0 0 2 3\\n6 3 1 3\\n12 3 1 1\\n8 1 1 3\\n4 1 0 1\\n0 0 2 0\\n6 0 1 0\\n12 3 0 3\\n8 3 0 0\\n4 0 1 3\\n4 2 0 2\\n10 3 2 1\\n6 1 3 1\\n6 1 2 1\\n12 1 0 0\\n8 0 2 3\\n6 1 0 1\\n9 1 0 1\\n4 1 1 0\\n8 0 2 1\\n6 1 2 1\\n6 1 2 1\\n12 3 1 3\\n6 0 0 2\\n9 2 1 2\\n4 2 3 1\\n6 2 0 0\\n9 0 0 0\\n4 2 0 0\\n6 0 3 0\\n12 0 3 3\\n4 3 0 0\\n1 0 1 1\\n6 1 1 1\\n12 1 3 3\\n8 3 3 0\\n4 3 1 1\\n6 2 0 3\\n9 3 2 3\\n4 0 0 2\\n15 2 3 3\\n6 3 1 3\\n12 3 0 0\\n8 0 0 3\\n4 1 3 0\\n12 0 0 0\\n6 0 3 0\\n12 0 3 3\\n4 2 0 0\\n4 3 3 2\\n1 1 0 0\\n6 0 1 0\\n12 3 0 3\\n8 3 1 2\\n6 1 0 0\\n9 0 1 0\\n4 1 0 3\\n4 3 0 1\\n6 1 2 1\\n12 1 2 2\\n4 1 0 1\\n4 2 1 0\\n4 0 2 3\\n2 0 3 1\\n6 1 3 1\\n12 2 1 2\\n8 2 2 0\\n4 2 1 3\\n6 0 0 1\\n9 1 1 1\\n4 2 2 2\\n2 2 3 1\\n6 1 3 1\\n12 1 0 0\\n8 0 0 3\\n4 3 2 2\\n4 3 3 0\\n4 2 0 1\\n11 1 0 1\\n6 1 2 1\\n12 3 1 3\\n8 3 2 0\\n4 0 2 1\\n4 2 0 3\\n4 0 3 2\\n15 2 3 1\\n6 1 2 1\\n6 1 2 1\\n12 1 0 0\\n4 3 1 2\\n4 1 0 1\\n3 1 3 1\\n6 1 3 1\\n12 1 0 0\\n8 0 1 3\\n4 0 2 1\\n4 3 1 0\\n4 2 0 2\\n14 2 0 0\\n6 0 1 0\\n12 3 0 3\\n8 3 2 0\\n4 1 2 1\\n4 0 0 3\\n10 3 2 3\\n6 3 3 3\\n6 3 1 3\\n12 3 0 0\\n8 0 2 1\\n4 1 3 3\\n4 1 2 2\\n4 2 2 0\\n3 3 0 2\\n6 2 3 2\\n6 2 2 2\\n12 2 1 1\\n8 1 2 3\\n6 0 0 1\\n9 1 0 1\\n4 1 1 2\\n4 1 0 0\\n9 0 1 1\\n6 1 3 1\\n12 1 3 3\\n8 3 0 2\\n4 1 3 1\\n4 2 3 3\\n4 2 3 0\\n2 0 3 0\\n6 0 1 0\\n12 2 0 2\\n8 2 0 1\\n4 1 1 2\\n4 3 3 3\\n6 0 0 0\\n9 0 3 0\\n4 2 0 0\\n6 0 3 0\\n6 0 1 0\\n12 0 1 1\\n6 2 0 2\\n9 2 2 2\\n4 1 0 3\\n4 0 0 0\\n12 3 3 3\\n6 3 2 3\\n6 3 2 3\\n12 1 3 1\\n8 1 0 3\\n4 1 0 0\\n4 2 0 1\\n8 0 2 2\\n6 2 3 2\\n12 2 3 3\\n8 3 0 2\\n4 0 2 1\\n4 3 2 3\\n12 0 0 3\\n6 3 3 3\\n6 3 3 3\\n12 3 2 2\\n8 2 1 1\\n4 1 0 2\\n6 2 0 3\\n9 3 2 3\\n3 0 3 2\\n6 2 2 2\\n6 2 2 2\\n12 2 1 1\\n8 1 2 0\\n4 1 2 1\\n4 2 1 2\\n2 2 3 2\\n6 2 1 2\\n12 0 2 0\\n8 0 0 1\\n4 0 3 0\\n6 3 0 2\\n9 2 3 2\\n4 0 3 3\\n15 3 2 3\\n6 3 3 3\\n6 3 3 3\\n12 3 1 1\\n8 1 1 3\\n6 3 0 0\\n9 0 3 0\\n4 1 3 1\\n4 0 2 2\\n0 2 0 2\\n6 2 1 2\\n6 2 1 2\\n12 3 2 3\\n8 3 3 2\\n4 1 0 3\\n4 2 2 1\\n11 1 0 0\\n6 0 2 0\\n6 0 3 0\\n12 0 2 2\\n8 2 0 0\\n4 3 1 2\\n6 3 2 3\\n6 3 2 3\\n6 3 3 3\\n12 3 0 0\\n8 0 3 1\\n4 1 0 2\\n4 2 1 3\\n6 1 0 0\\n9 0 2 0\\n2 0 3 2\\n6 2 1 2\\n6 2 1 2\\n12 1 2 1\\n8 1 0 2\\n4 0 1 1\\n4 1 3 0\\n9 0 1 3\\n6 3 2 3\\n12 3 2 2\\n8 2 1 1\\n4 2 0 3\\n4 0 3 0\\n4 2 3 2\\n4 3 0 0\\n6 0 3 0\\n6 0 1 0\\n12 0 1 1\\n8 1 3 2\\n4 3 0 3\\n4 2 1 1\\n4 3 3 0\\n1 3 1 3\\n6 3 3 3\\n12 2 3 2\\n4 0 0 3\\n11 1 0 1\\n6 1 3 1\\n12 2 1 2\\n8 2 3 3\\n4 1 2 1\\n4 1 0 2\\n6 3 0 0\\n9 0 1 0\\n12 1 0 1\\n6 1 3 1\\n12 3 1 3\\n8 3 1 1\\n4 2 3 3\\n4 3 2 0\\n6 3 0 2\\n9 2 0 2\\n0 2 0 2\\n6 2 1 2\\n12 2 1 1\\n8 1 2 2\\n4 3 0 1\\n4 1 1 3\\n9 3 1 0\\n6 0 3 0\\n12 2 0 2\\n4 1 0 1\\n4 2 2 3\\n4 1 1 0\\n3 0 3 1\\n6 1 3 1\\n12 2 1 2\\n8 2 3 0\";","export default \"Diagnostics indicate that the local **grid computing cluster** has been contaminated with the **Sporifica Virus**. The grid computing cluster is a seemingly-infinite two-dimensional grid of compute nodes. Each node is either **clean** or **infected** by the virus.\\n\\nTo [prevent overloading](https://en.wikipedia.org/wiki/Morris_worm#The_mistake) the nodes (which would render them useless to the virus) or detection by system administrators, exactly one **virus carrier** moves through the network, infecting or cleaning nodes as it moves. The virus carrier is always located on a single node in the network (the **current node**) and keeps track of the **direction** it is facing.\\n\\nTo avoid detection, the virus carrier works in bursts; in each burst, it **wakes up**, does some **work**, and goes back to **sleep**. The following steps are all executed **in order** one time each burst:\\n\\n- If the **current node** is **infected**, it turns to its **right**. Otherwise, it turns to its **left**. (Turning is done in-place; the **current node** does not change.)\\n- If the **current node** is **clean**, it becomes **infected**. Otherwise, it becomes **cleaned**. (This is done **after** the node is considered for the purposes of changing direction.)\\n- The virus carrier [moves](https://www.youtube.com/watch?v=2vj37yeQQHg) **forward** one node in the direction it is facing.\\n\\nDiagnostics have also provided a **map of the node infection status** (your puzzle input). **Clean** nodes are shown as `.`; **infected** nodes are shown as `#`. This map only shows the center of the grid; there are many more nodes beyond those shown, but none of them are currently infected.\\n\\nThe virus carrier begins in the middle of the map facing **up**.\\n\\nFor example, suppose you are given a map like this:\\n\\n```\\n..#\\n#..\\n...\\n```\\n\\nThen, the middle of the infinite grid looks like this, with the virus carrier's position marked with `[ ]`:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . # . . .\\n. . . #[.]. . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nThe virus carrier is on a **clean** node, so it turns **left**, **infects** the node, and moves left:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . # . . .\\n. . .[#]# . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nThe virus carrier is on an **infected** node, so it turns **right**, **cleans** the node, and moves up:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . .[.]. # . . .\\n. . . . # . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nFour times in a row, the virus carrier finds a **clean**, **infects** it, turns **left**, and moves forward, ending in the same place and still facing up:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . #[#]. # . . .\\n. . # # # . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nNow on the same node as before, it sees an infection, which causes it to turn **right**, **clean** the node, and move forward:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . # .[.]# . . .\\n. . # # # . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nAfter the above actions, a total of `7` bursts of activity had taken place. Of them, `5` bursts of activity caused an infection.\\n\\nAfter a total of `70`, the grid looks like this, with the virus carrier facing up:\\n\\n```\\n. . . . . # # . .\\n. . . . # . . # .\\n. . . # . . . . #\\n. . # . #[.]. . #\\n. . # . # . . # .\\n. . . . . # # . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nBy this time, `41` bursts of activity caused an infection (though most of those nodes have since been cleaned).\\n\\nAfter a total of `10000` bursts of activity, `5587` bursts will have caused an infection.\\n\\nGiven your actual map, after `10000` bursts of activity, **how many bursts cause a node to become infected**? (Do not count nodes that begin infected.)\\n\\n[comment]: <> (PART 2)\\n\\nAs you go to remove the virus from the infected nodes, it **evolves** to resist your attempt.\\n\\nNow, before it infects a clean node, it will **weaken** it to disable your defenses. If it encounters an infected node, it will instead **flag** the node to be cleaned in the future. So:\\n\\n- **Clean** nodes become **weakened**.\\n- **Weakened** nodes become **infected**.\\n- **Infected** nodes become **flagged**.\\n- **Flagged** nodes become **clean**.\\n\\nEvery node is always in exactly one of the above states.\\n\\nThe virus carrier still functions in a similar way, but now uses the following logic during its bursts of action:\\n\\n- Decide which way to turn based on the **current node**:\\n   - If it is **clean**, it turns **left**.\\n   - If it is **weakened**, it does **not** turn, and will continue moving in the same direction.\\n   - If it is **infected**, it turns **right**.\\n   -If it is **flagged**, it **reverses** direction, and will go back the way it came.\\n- Modify the state of the **current node**, as described above.\\n- The virus carrier moves **forward** one node in the direction it is facing.\\n\\nStart with the same map (still using `.` for **clean** and `#` for **infected**) and still with the virus carrier starting in the middle and facing **up**.\\n\\nUsing the same initial state as the previous example, and drawing **weakened** as `W` and **flagged** as `F`, the middle of the infinite grid looks like this, with the virus carrier's position again marked with `[ ]`:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . # . . .\\n. . . #[.]. . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nThis is the same as before, since no initial nodes are **weakened** or **flagged**. The virus carrier is on a clean node, so it still turns left, instead **weakens** the node, and moves left:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . # . . .\\n. . .[#]W . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nThe virus carrier is on an infected node, so it still turns right, instead **flags** the node, and moves up:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . .[.]. # . . .\\n. . . F W . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nThis process repeats three more times, ending on the previously-flagged node and facing right:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . W W . # . . .\\n. . W[F]W . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nFinding a flagged node, it reverses direction and **cleans** the node:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . W W . # . . .\\n. .[W]. W . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nThe **weakened** node becomes infected, and it continues in the same direction:\\n\\n```\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . W W . # . . .\\n.[.]# . W . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n. . . . . . . . .\\n```\\n\\nOf the first `100` bursts, `26` will result in **infection**. Unfortunately, another feature of this evolved virus is **speed**; of the first `10000000` bursts, `2511944` will result in **infection**.\\n\\nGiven your actual map, after `10000000` bursts of activity, **how many bursts cause a node to become infected**? (Do not count nodes that begin infected.)\";","export default \"A new system policy has been put in place that requires all accounts to use a **passphrase** instead of simply a pass**word**. A passphrase consists of a series of words (lowercase letters) separated by spaces.\\n\\nTo ensure security, a valid passphrase must contain no duplicate words.\\n\\nFor example:\\n\\n- `aa bb cc dd ee` is valid.\\n- `aa bb cc dd aa` is not valid - the word `aa` appears more than once.\\n- `aa bb cc dd aaa` is valid - `aa` and `aaa` count as different words.\\n\\nThe system's full passphrase list is available as your puzzle input. **How many passphrases are valid?**\\n\\n[comment]: <> (PART 2)\\n\\nFor added security, yet another system policy has been put in place. Now, a valid passphrase must contain no two words that are anagrams of each other - that is, a passphrase is invalid if any word's letters can be rearranged to form any other word in the passphrase.\\n\\nFor example:\\n\\n- `abcde fghij` is a valid passphrase.\\n- `abcde xyz ecdab` is not valid - the letters from the third word can be rearranged to form the first word.\\n- `a ab abc abd abf abj` is a valid passphrase, because **all** letters need to be used when forming another word.\\n- `iiii oiii ooii oooi oooo` is valid.\\n- `oiii ioii iioi iiio` is not valid - any of these words can be rearranged to form any other word.\\n\\nUnder this new system policy, **how many passphrases are valid?**\";","export default \"252, 125\\n128, 333\\n89, 324\\n141, 171\\n266, 338\\n117, 175\\n160, 236\\n234, 202\\n165, 192\\n204, 232\\n83, 192\\n229, 178\\n333, 57\\n70, 243\\n108, 350\\n161, 63\\n213, 277\\n87, 299\\n163, 68\\n135, 312\\n290, 87\\n73, 246\\n283, 146\\n80, 357\\n66, 312\\n159, 214\\n221, 158\\n175, 54\\n298, 342\\n348, 162\\n249, 90\\n189, 322\\n311, 181\\n194, 244\\n53, 295\\n80, 301\\n262, 332\\n268, 180\\n139, 287\\n115, 53\\n163, 146\\n220, 268\\n79, 85\\n95, 112\\n349, 296\\n179, 274\\n113, 132\\n158, 264\\n316, 175\\n268, 215\";","export default \"                                                                                                                                                                             |                           \\n       +-------+             +---+                                         +-------------+           +-+   +---------+ +---------------------------------------------------------+ +-+     +---+         \\n       |       |             |   |                                         |             |           | |   |         | |                                                     |   | | |     |   |         \\n +-----|-------+     +-------|-----+                                       +-------+ +-+ +-----------|-|---|---------|-----------------+ +---------------------------------------+ | +-----|---|-------+ \\n |     |             |       |   | |                                               | | |             | |   |         | |               | |                                   |     |       |   |       | \\n |     |             |       |   | |       +-----------+                         +---+ |         +---|-|-------------|-|---------------+ +---+                               |     |     +---+ |       | \\n |     |             |       |   | |       |           |                         | |   |         |   | |   |         | |                     |                               |     |     | | | |       | \\n |     |             |       |   | |       +-----------------------+             | |   |         |   | |   |         | |                     |                               |     |     | | | |       | \\n |     |             |       |   | |                   |           |             | |   |         |   | |   |         | |                     |                               |     |     | | | |       | \\n |     |             |       |   | |     +-------+     |   +-------|-----------------------------|---+ | +-|-------+ | |                   +-----+                           |     |     | | | |       | \\n |     |             |       |   | |     |       |     |   |       |             | |   |         |     | | |       | | |                   | |   |                           |     |     | | | |       | \\n |     |             |       |   | |     |       |     |   |       +-------------|-|---|---------|-------|---------|---|---------------------|---|-------+   +---------------|-----------|-+ | |       | \\n |     |             |       |   | |     |       |     |   |                     | |   |         |     | | |       | | |                   | |   |       |   |               |     |     |   | |       | \\n |     |             |       |   | |     |   +---------|-------------------------|-----|---------|---------|---------|-----------------------|---------------|-----------+   |   +-------------|-----+ | \\n |     |             |       |   | |     |   |   |     |   |                     | |   |         |     | | |       | | |                   | |   |       |   |           |   |   | |     |   | |     | | \\n |     |             |       |   +-|-------+ +-----+   |   |           +-----------|---|---------------|-----------|-+ |                   | |   |       |   |           |   |   | |     |   +-----+ | | \\n |     |             |       |     |     | |     | |   |   |           |         | |   |         |     | | |       |   |                   | |   |       |   |           |   |   | |     |     |   | | | \\n +---+ +-------------|-------------------|-+     | |   |   |           |         | |   |         |     | | |   +---|-----------------------|-|-----------------------------------|-----------+ |   | | | \\n     |               |       |     |     |       | |   |   |           |         | |   |         |     | | |   |   |   |                   | |   |       |   |           |   |   | |     |   | |   | | | \\n     +-+             |   +-----+ +-------|R--------|---------+         |         | |   |         +-----|---|---|-------|-----------------------------------------------+ | +-|---|-------|-+ | |   | +-+ \\n       |             |   |   | | | |     |       | |   |   | |         |         | |   |               | | |   |   |   |                   | |   |       |   |         | | | |   | |     | | | |   |     \\n       |             | +-|-+ | | +-|-----|---+   | |   +---+ | +-----------------|-----|-------------------|-------|-------+               | |   |       |   +-------------------|-|-----|-----|-------+ \\n       |             | | | | | |   |     |   |   | |         | |       |         | |   |               | | |   |   |   |   |               | |   |       |             | | | |   | |     | | | |   |   | \\n       |             | | +---|-|---------|-------|-----------|-|-----------------|-|---+               | | |   |   |   |   |               | |   |   +-------+         | | | |   | |   +---|---------+ | \\n       |             | |   | | |   |     |   |   | |         | |       |         | |                   | | |   |   |   |   |               | |   |   |   |   |         | | | |   | |   | | | | |   | | | \\n       |             | |   | | |   |     |   |   | |         | |       |         | |   +---------------|---|-----------|---+               | |   |   |   |   |         | | | |   | |   | | | | |   | | | \\n       |             | |   | | |   |     |   |   | |         | |       |         | |   |               | | |   |   |   |                   | |   |   |   |   |         | | | |   | |   | | | | |   | | | \\n   +-+ | +---+       | |   | | |   |     |   |   | |     +-----|-----------------|-|---|-------+       | | |   |   |   |                   | |   |   |   |   |         | | | |   | |   | | | | |   | | | \\n   | | | |   |       | |   | | |   |     |   |   | |     |   | |       |         | |   |       |       | | |   |   |   |                   | |   |   |   |   |         | | | |   | |   | | | | |   | | | \\n   | | | |   |       | |   | | |   |     |   |   | |   +-|---|---------------------|-------+   |       +-|-|---|-------------------+       | |   |   |   | +-----+ +---+ | | |   | |   | | | | |   | | | \\n   | | | |   |       | |   | | |   |     |   |   | |   | |   | |       |         | |   |   |   |         | |   |   |   |           |       | |   |   |   | | |   | |     | | |   | |   | | | | |   | | | \\n   | +-|-------------------|---|---------|-------+ |   | | +-|---------------+   | |   |   |   |         | |   |   |   |           |       | |   |   |   | | |   | |     | | |   | |   | | | | |   | | | \\n   |   | |   |       | |   | | |   |     |   |     |   | | | | |       |     |   | |   |   |   |         | |   |   |   |           |       | |   |   |   | | |   | |     | | |   | |   | | | | |   | | | \\n   |   | |   |       | |   | | |   |     |   |     |   | | | | +-------|---------|---------+   |         | |   |   |   |           |       | | +-|---|-----------|-|-----|-------+ |   | | | | |   | | | \\n   |   | |   |       | |   | | |   |     |   |     |   | | | |         |     |   | |   |       |         | |   |   |   |           |       | | | |   |   | | |   | |     | | |     |   | | | | |   | | | \\n +-|-+ | |   |       | |   | | |   |     |   |     |   | | | |         |     |   | |   |       |         | |   |   |   |           |       | | | |   | +-|-+ | +-|-|-------------------|---|-+ |   | | | \\n | | | | |   |       | |   | | |   |     |   |     |   | | | |         |     |   | |   |       |         | |   |   |   |           |       | | | |   | | |   | | | |     | | |     |   | | |   |   | | | \\n | | +---|-------------|---|---+   |     |   |     |   | +-+ |         |     |   | |   |       |         | |   |   |   |           |       | | | |   | | |   | | | |     | | |     |   | | |   |   | | | \\n | |   | |   |       | |   | |     |     |   |     |   |     |         |     |   | |   |       |         | |   |   |   |           |       | | | |   | | |   | | | |     | | |     |   | | |   |   | | | \\n | |   | |   |       | |   | |     |     |   |     | +-------|---------|-----|---|-|----I------------------|---+   |   |           |       | | | |   | | |   | | | |     | | |     |   | | |   |   | | | \\n | |   | |   |       | |   | |     |     |   |     | | |     |         |     |   | |   |       |         | |       |   |           |       | | | |   | | |   | | | |     | | |     |   | | |   |   | | | \\n | |   | |   |   +---|-----|-----+ |     +---|---+ | | |     |     +---|-----|---------|-----------------|---------------------------------|-|-|-----|---------|---------|-|---+   |   | | |   |   | | | \\n | |   | |   |   |   | |   | |   | |         |   | | | |     |     |   |     |   | |   |       |         | |       |   |           |       | | | |   | | |   | | | |     | | | |   |   | | |   |   | | | \\n | | +-------|---|-----|---|-----|-----------|---|-|---|---------------|-----|---------|-----------------|-|-----------|---------------------|-+ |   | | |   | | | |     | | | |   |   | | |   |   | | | \\n | | | | |   |   |   | |   | |   | |         |   | | | |     |     |   |     |   | |   |       |         | |       |   |           |       | |   |   | | |   | | | |     | | | |   |   | | |   |   | | | \\n | | | | |   |   |   | |   | |   | |         |   | | | |     |     |   |     |   | |   |       |         | |       |   |           |       | |   |   | | | +---|-|---------|-------|-+ | | |   |   | | | \\n | | | | |   |   |   | |   | |   | |         |   | | | |     |     |   |     |   | |   |       |         | |       |   |           |       | |   |   | | | | | | | |     | | | |   | | | | |   |   | | | \\n | | | | |   |   |   | |   | |   | |         |   | | | |     |     |   |     |   | |   |       |         | |       |   |           |       | |   |   | | | +-|-|-+ |     | | | |   | | | | |   |   | | | \\n | | | | |   |   |   | |   | |   | |         |   | | | |     |     |   |     |   | |   |       |         | |       |   |           |       | |   |   | | |   | |   |     | | | |   | | | | |   |   | | | \\n | | | | |   |   |   | |   | |   | |         |   | | | |     |     |   |     |   | |   |       +-----------|---------------------------------|-------+ | |   | |   |     | | | |   | | | | |   |   | | | \\n | | | | |   |   |   | |   | |   | |         |   | | | |     |     |   |     |   | |   |                 | |       |   |           |       | |   |     | |   | |   |     | | | |   | | | | |   |   | | | \\n | +-|-|---------------|-----|-----|---------|-------|-----------------------|---------|-----------------|-|-------|---------------|-------------------|-+   | |   |     | | | |   | | | | |   |   | | | \\n |   | | |   |   |   | |   | |   | |         |   | | | |     |     |   |     |   | |   |                 | |       |   |           |       | |   |     |     | |   |     | | | |   | | | | |   |   | | | \\n |   | | |   |   | +---------|---+ |         +-----|-|-----------------|-----|---------------------------|-|-----------------------|---------|---|-----|-----|---+ |     | | | |   | | | | |   |   | | | \\n |   | | |   |   | | | |   | |     |             | | | |     |     |   |     |   | |   |                 | |       |   |           |       | |   |     |     | | | |     | | | |   | | | | |   |   | | | \\n |   | | |   |   | | | |   | |     |             | | | |     |     |   |     |   | |   |                 | |       |   |           |       +-|---|-----------|-----------------|-----------|-----+ | | | \\n |   | | |   |   | | | |   | |     |             | | | |     |     |   |     |   | |   |                 | |       |   |           |         |   |     |     | | | |     | | | |   | | | | |   | | | | | \\n |   | | |   |   | | | |   +-|-------+           | | | |     |     |   |     |   | |   |                 | |       |   |           |         |   |     |     | | | |     | | | |   | | | | |   | | | | | \\n |   | | |   |   | | | |     |     | |           | | | |     |     |   |     |   | |   |                 | |       |   |           |         |   |     |     | | | |     | | | |   | | | | |   | | | | | \\n |   +--C----|-------|-------|-----|-|-----------|-|-|-+     |     |   |     |   | |   |         +---------|-------|-----------------------------------|-----|-|-|-|-+   | | | |   | | | | |   | | | | | \\n |     | |   |   | | | |     |     | |           | | |       |     |   |     |   | |   |         |       | |       |   |           |         |   |     |     | | | | |   | | | |   | | | | |   | | | | | \\n |     +-|---|-------|-|-----|-----|-------------|-|---+     |     |   |     |   | |   |         |       | |       |   |           |         |   |   +-|-----|---|-|-|---|---------|-----|-+   | | | | | \\n |       |   |   | | | |     |     | |           | | | |     |     |   |     |   | |   |         |       | |       |   |           |         |   |   | |     | | | | |   | | | |   | | | |     | | | | | \\n |       |   |   | | | |     |     | |         +-|-|---|-----------|-------------|-|---|-----------------|---------|---------------|-----------------|-|---------|-+ |   | | | |   | | | |     | | | | | \\n |       |   |   | | | |     |     | |         | | | | |     |     |   |     |   | |   |         |       | |       |   |           |         |   |   | |     | | |   |   | | | |   | | | |     | | | | | \\n |       |   |   | | | |     |     | |         | | | | |     |     |   |     |   | |   |         |       | |       |   |           | +-----------|-----|-----|-----------+ | | |   | | | |     | | | | | \\n |       |   |   | | | |     |     | |         | | | | |     |     |   |     |   | |   |         |       | |       |   |           | |       |   |   | |     | | |   |     | | |   | | | |     | | | | | \\n |       |   |   | | | |     |     | |         | | | | |     |     |   |     |   | |   |         |       | |       |   |           | |       |   |   | |     | | |   |     | | |   | | | |     | | | | | \\n |       |   |   | | | |     |     | |         | | | | |     |     |   |     |   | |   |         |       | |       |   |           | |       |   |   | |     | | |   |     | | |   | | | |     | | | | | \\n |       |   |   | | | |     |     | |         | | | | |     |     |   |     |   | |   |         |       | |       |   |           | |       |   |   | |     | | |   |     | | |   | | | |     | | | | | \\n |       |   |   | | | |     |     | |         | | | | |     |     |   |     |   | |   |         |       | |       |   |           | |       |   |   | |     | | |   |     | | |   | | | |     | | | | | \\n +-----------|-------|-|-------------|---------|-------------------|---|---------|-----|-----------------------+ +-|-------------------------|---|---|-----------|-+ |     | | |   | | | |     | | | | | \\n         |   |   | | | |     |     | |         | | | | |     |     |   |     |   | |   |         |       | |   | | |   |           | |       |   |   | |     | | | | |     | | |   | | | |     | | | | | \\n +---------------------|-----|-----------------|-|-|-|-------|-----------+   +---------------------------|-+   | | |   |           +---------|---|---|-|-----|-|---+ +---------|---|-|-|-|---+ | | | | | \\n |       |   |   | | | |     |     | |         | | | | |     |     |   | |       | |   |         |       |     | | |   |             |       |   |   | |     | | |         | | |   | | | |   | | | | | | \\n |       |   |   | | | |     |   +---|---------|---|-|-------------|---|-|-------------|-----------------------|-------|-------------|-------|-------------------|---------|-|-+   | | | |   | | | | | | \\n |       |   |   | | | |     |   | | |         | | | | |     |     |   | |       | |   |         |       |     | | |   |             |       |   |   | |     | | |         | |     | | | |   | | | | | | \\n | +-----------+ | | | |     |   | | |         | | | | |     |     |   +---------|-----|-------------------------|-------------------------+ |   |   | |     | | |         | +-+   | | | |   | | | | | | \\n | |     |   | | | | | |     |   | | |         | | | | |     |     |     |       | |   |         |       |     | | |   |             |     | |   |   | |     | | |         |   |   | | | |   | | | | | | \\n | |     |   | | | | | |     |   | +-------------|-|-|-----------------------------|-------------|---------+   | | |   |             |     +-|---|-----|-------------------|---------|-|-----|-----+ | | \\n | |     |   | | | | | |     |   |   |         | | | | |     |     |     |       | |   |         |       | |   | | |   |             |       |   |   | |     | | |         |   |   | | | |   | | |   | | \\n | |     |   | | | | | |     |   +-------------|---|---|-----|-----|-----|-----+ | |   |         |       | | +-+ | |   |             |       |   |   | |     | | |         |   |   | | | |   | | |   | | \\n | |     |   | | | | | |     |       |         | | | | |     |     |     |     | | |   |         |       | | |   | |   |             |       |   |   | |     | | |         |   |   | | | |   | | |   | | \\n | |     |   | | | | | |     |       |         | | | | |     |     |     |     | | |   |         |     +---|-------------------------------------------------|-|-|---------|-------|-+ | |   | | |   | | \\n | |     |   | | | | | |     |       |         | | | | |     |     |     |     | | |   |         |     | | | |   | |   |             |       |   |   | |     | | |         |   |   |   | |   | | |   | | \\n | |   +-------|---|-------------+   |         +-|---+ |     |     |     |     | | |   | +-------------|---------|-----|-------------------------|---|-------|-|-|---+     |   |   |   | |   | | |   | | \\n | |   | |   | | | | | |     |   |   |           | |   |     |     |     |     | | |   | |       |     | | | |   | |   |             |       |   |   | |     | | |   |     |   |   |   | |   | | |   | | \\n | | +---|---|-|-|-|-|-|-----|-------|-------------|---|-----------------|-----|-------|-|-------------|-|-|-----|-|-----------------|-------|---|-----+     +-|-|---------|---|-------|---------|-+ | | \\n | | | | |   | | | | | |     |   |   |           | |   |     |     |     |     | | |   | |       |     | | | |   | |   |             |       |   |   |         | |   |     |   |   |   | |   | | | | | | \\n | | | | |   | | | | | |     |   +---|-----------|-|---------------------------|-|-----|-|---------------|-|-|-----|---+             |       |   |   |         | |   |     |   |   |   | |   | | | | | | \\n | | | | |   | | | | | |     |       |           | |   |     |     |     |     | | |   | |       |     | | | |   | |                 |       |   |   |         | |   |     |   |   |   | |   | | | O | | \\n | | | | | +-|---|-------------------|-----------|-----|-----|-----|---------+ | | |   | |       |     | | | |   | |   +---------+   |       |   |   |         | |   |     |   |   |   | |   | | | | | | \\n | | | | | | | | | | | |     |       |           | |   |     |     |     |   | | | |   | |       |     | | | |   | |   |         |   |       |   |   |         | |   |     |   |   |   | |   | | | | | | \\n +-+ | | | | | | | | | |     |       |           | |   |     |     |     |   | | | |   | |       |     | | +-|---------|---------------------|---|---|---------|-|---|-----|---|-------|------Q--|---+ | \\n     | | | | | | | | | |     |       |           | |   |     |     |     |   | | | |   | |       |     | |   |   | |   |         |   |       |   |   |         | |   |     |   |   |   | |   | | | |   | \\n +-------------|-|---+ |     |       |           | |   |     |     |     |   | | | |   | |       |     | |   |   | |   +-------------|---------------+         | |   |     |   +---|---|-|---|-----|-+ | \\n |   | | | | | | | |   |     |       |           | |   |     |     |     |   | | | |   | |       |     | |   |   | |             |   |       |   |             | |   |     |       |   | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     |     |     |   | | | |   | |       |     | |   |   | |             |   |       |   |         +---|-|-------------+   |   | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     |     |     |   | Y | |   | |       |     | |   |   | |             |   |       P   |         |   | |   |     |   |   |   | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     |     |     |   | | | |   | |       |     | |   |   | |         +-------|-------|---|-------+ |   | |   |     |   +-----+ | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     |     |     |   | | | |   | |       |     | |   |   | |         |   |   |       |   |       | |   | |   |     |       | | | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     |     |     |   | | | |   | |       |     | |   |   | |         |   |   |       |   |       | |   | |   |     |       | | | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     |     |     |   | | | |   | |       |     | |   |   | |         |   |   |       |   |       | |   | |   |     |       | | | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     |     |     |   | | | |   | |       |     | |   |   | |         |   |   |       |   |       | |   | |   |     |       | | | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     |     |     |   | | | |   | |       |     | |   |   | |         |   |   |       |   |       | |   | |   |     |       | | | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     | +---------|---|---------|-----------------|---|-------------------|---|-----------|-------|-+   | |   |     |       | | | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     | |   |     |   | | | |   | |       |     | |   |   | |         |   |   |       |   |       |     | |   |     |       | | | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     | |   |     |   | | | |   | |       |     | |   |   | |         |   |   |       |   |       |     | |   |     |       | | | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | |   |     | |   |     |   | | | |   | |       |     | |   |   | |         |   |   |       |   |       |     | |   |     |       | | | |   | | | | | | \\n |   | | | | | | | |   |     |       |           | +---|-----|-----|-------------|-|-----|-------|-----|-----|---|---------+ |   |   |       |   |       |     | |   |     |       | | | |   | | | | | | \\n |   | | | | | | | |   |     |       |           |     |     | |   |     |   | | | |   | |       |     | |   |   | |       | |   |   |       |   |       |     | |   |     |       | | | |   | | | | | | \\n +---|-|-|-|-|---|-|-+ |     |       |           |     |     | |   |     |   | | | |   | |       |     | |   |   | |   +---|-+   +---|-------|---|-------------------|-------+     | | | |   | | | | | | \\n     | | | | | | | | | |     |       |           |     |     | |   |     |   | | | |   | |       |     | |   |   | |   |   |         |       |   |       |     | |   |     | |     | | | |   | | | | | | \\n +---|-|---|-|-|-|-|---------|-------|-----------------|-----|---------------+ | | |   | |       |     | |   |   +-|---+   |         +-----------|-------|-----|---------+ | +---------|-------|-|-+ | | \\n |   | | | | | | | | | |     |       |           |     |     | |   |     |     | | |   | |       |     | |   |     |       |                 |   |       |     | |   |   | |       | | | |   | | |   | | \\n |   | | | | | | | | | |     |       |           |     |     | |   |     |     | | |   | |       |     | |   |     |       |                 +-----------|-+   | |   |   | |       | | | |   | | |   | | \\n |   | | | | | | | | | |     |       |           |     |     | |   |     |     | | |   | |       |     | |   |     |       |                     |       | |   | |   |   | |       | | | |   | | |   | | \\n |   | | | | | | | | | |     |       |           |     |     | |   |     | +---|-|-------|-------|-----|-+   |     |       |                     |       | |   | |   |   | |       | | | |   | | |   | | \\n |   | | | | | | | | | |     |       |           |     |     | |   |     | |   | | |   | |       |     |     |     |       |                     |       | |   | |   |   | |       | | | |   | | |   | | \\n |   | | | | | | | | | |     |       |           |     |     | |   |     | |   | | |   | |       |     |     |     |       |         +-------------------|-|---------|-----------------|-|-------|-+ | | \\n |   | | | | | | | | | |     |       |           |     |     | |   |     | |   | | |   | |       |     |     |     |       |         |           |       | |   | |   |   | |       | | | |   | | | | | | \\n |   | | | | | | | | | |     |     +-------------------|-----|-------------|-------|-------------|-----|-----|-----------------------|-----------|-------|-|-----|-------|-|-----+ | | | |   | | | | +-+ \\n |   | | | | | | | | | |     |     | |           |     |     | |   |     | |   | | |   | |       |     |     |     |       |         |           |       | |   | |   |   | |     | | | | |   | | | |     \\n |   | | | | | | | | | |     |     | |           |     |     | |   |     | +---+ | |   | |       |     |     |     |       |         |           |       | |   | |   |   | |     | | | | |   | | | |     \\n |   | | | | | | | | | |     |     | |           |     |     | |   |     |       | |   | |       |     |     |     |       |         |           |       | |   | |   |   | |     | | | | |   | | | |     \\n |   | | | | | | | | | |     |     | |           |     |     | |   |     |       | +-----|-------------------|-----------------------------------+       | |   | |   |   | |     | | | | |   | | | |     \\n |   | | | | | | | | | |     |     | |           |     |     | |   |     |       |     | |       |     |     |     |       |         |                   | |   | |   |   | |     | | | | |   | | | |     \\n |   | | | | | | | | | |     |     | |           |     |     | | +-|-------------|---------------|-----------|-----|---------------+ |                   | |   | |   |   | |     | | | | |   | | | |     \\n |   | | | | | | | | | |     |     | |           |     |     | | | |     |       |     | |       |     |     |     |       |       | |                   | |   | |   |   | |     | | | | |   | | | |     \\n |   | | | | | | | | | |     |     | |           |     |     | | | +-----+       |     | |       |     |     |   +-|-----------+   | |               +-----|---|-----+   | |     | | | | |   | | | |     \\n |   | | | | | | | | | |     |     | |           |     |     | | |               |     | |       |     |     |   | |       |   |   | |               |   | |   | |       | |     | | | | |   | | | |     \\n |   | +---------|-----------|-------|-----------------|---+ | | |               |     | |       |     |     |   | |       |   |   | |   +---------------|-|---|---------|-|-+   | +-+ | |   | | | |     \\n |   |   | | | | | | | |     |     | |           |     |   | | | |               |     | |       |     |     |   | |       |   |   | |   |           |   | |   | |       | | |   |     | |   | | | |     \\n |   |   | | | | +-----|-----------|-----------------------|-|---|-------+       |     | |       |     |     |   | |       |   |   | |   |           |   | +---|-|-------|-------------|-----------|-+   \\n |   |   | | | |   | | |     |     | |           |     |   | | | |       |       |     | |       |     |     |   | |       |   |   | |   |           |   |     | |       | | |   |     | |   | | | | |   \\n |   |   | | | |   | | |     |     | |           |     |   | | | |       |       |     | |       |     |     +-----|-----------|---|---------------------------+ |       | | |   |     | |   | | | | |   \\n |   |   | | | |   | | |     |     | |           |     |   | | | |       |       |     | |       |     |         | |       |   |   | |   |           |   |       |       | | |   |     | |   | | | | |   \\n |   |   | | | |   | | |     |     | |           |     |   | | | |       |       |     | |       |     |         | |       |   |   | |   |           |   |       |       | | |   |     | |   | | | | |   \\n |   |   | | | |   | | |     |     | |           |     |   | | | |       |       |     | |       |     |         | |       |   |   | |   |           |   |       |       | | |   |     | |   | | | | |   \\n |   | +---|---|-------------|-----|---------------------------+ |       |       |     | |       |     |         | |       |   |   | |   |           |   |       |       | | |   |     | |   | | | | |   \\n |   | | | | | |   | | |     |     | |           |     |   | |   |       |       |     | |       |     |         | |       |   |   | |   |           |   |       |       | | |   |     | |   | | | | |   \\n |   | | | | | |   | | |     |     | |           |     |   | |   |       |       |     | |       |     |         | |       |   |   | |   |           |   |       |       | | |   |     | |   | | | | |   \\n |   | | | | | |   | | |     |     | |           |     |   | |   |       |       |     | |       |     |         | |       |   |   | |   |           |   |       |       | | |   |     | |   | | | | |   \\n |   | | | | | |   | | |     |     | |           |     |   | |   |     +-|-------|-------|-------------+         | |       |   |   | |   |           |   |       |       | | |   | +---|-|---|---|---+   \\n |   | | | | | |   | | |     |     | |           |     |   | |   |     | |       |     | |       |               | |       |   |   | |   |           |   |       |       | | |   | |   | |   | | | |     \\n |   | | | | | |   | | |     |     | |           |     |   | +---------|---------------|-|-------|---------------|-------------------|---+           |   |       |       | | |   | |   | |   | | | |     \\n |   | | | | | |   | | |     |     | |           |     |   |     |     | |       |     | |       |               | |       |   |   | |               |   |       |       | | |   | |   | |   | | | |     \\n |   | | | | | |   | | |     |   +--------L------------|-----+   |     | +-+     |     | |       |               +---------|---|---------------------------------|---------+ |   | |   | |   | | | |     \\n |   | | | | | |   | | |     |   | | |           |     |   | |   |     |   |     |     | |       |                 |       |   |   | |               |   |       |       |   |   | |   | |   | | | |     \\n | +-|-|-|-|-|-----|---|-----|---|-|-+           +---------|-----|---------------|-----|---------|-----------------|-----------+   | |               |   |       |       |   |   | |   | |   | | | |     \\n | | | | | | | |   | | |     |   | |                   |   | |   |     |   |     |     | |       |                 |       |       | |               |   |       |       |   |   | |   | |   | | | |     \\n | | +-|-----|-----+ | |     |   | | +-------+         |   | |   |     |   |     |     | |       |                 |       |       | |               |   |       |       |   |   | |   | |   | | | |     \\n | |   | | | | |     | |     |   | | |       |         |   | |   |     |   |     |     | |       |                 |       |       | |               |   |       |       |   |   | |   | |   | | | |     \\n | +-----+ | | | +-----|-----|---|---|---------------------|---------------|-----|-------|-------|-----------------|-------|-------+ |               |   |       |       |   |   | |   | |   | | | |     \\n |     |   | | | |   | |     |   | | |       |         |   | |   |     |   |     |     | |       |                 |       |         |               |   |       |       |   |   | |   | |   | | | |     \\n |     |   | | | |   | | +---|-----+ +-------|---------|-----|---------+   |     |     | |       |                 |       |         |               |   |       |       |   |   | |   | |   | | | |     \\n |     |   | | | |   | | |   |   |           |         |   | |   |         |     |     | |       |                 |       |         |               |   |       |       |   |   | |   | |   | | | |     \\n | +-------+ | | |   | | |   |   +-----+     |         |   | |   |     +---|-----------|---------|-----------------------------------|-------------------|-------+       |   |   | |   | |   | | | |     \\n | |   |     | | |   | | |   |         |     |         |   | |   |     |   |     |     | |       |                 |       |         |               |   |               |   |   | |   | |   | | | |     \\n | |   |     | | |   | | |   |         |     |         |   | |   |     |   |     |     | |       |                 |       |         |               |   |               |   |   | |   | |   | | | |     \\n | |   |     | | |   | | |   |         |     |         |   | |   |     |   |     |     | |       |                 |       |         |               |   |               |   |   | |   | |   | | | |     \\n | |   |     | | |   | | |   |         |     |         |   | |   |     |   |     |     | |       |       +-----------------|---------|-------------------|-------------------|-+ | |   | |   | | | |     \\n | |   |     | | |   | | |   |         |     |         |   | |   |     |   |     |     | |       |       |         |       |         |               |   |               |   | | | |   | |   | | | |     \\n | |   |     | | |   | | |   |     +---|---------------|---|-----------|-------+ |     | |       |       |         |       |         |               |   |           +-----+ | | | |   | |   | | | |     \\n | |   |     | | |   | | |   |     |   |     |         |   | |   |     |   |   | |     | |       |       |         |       |         |               |   |           |   | | | | | |   | |   | | | |     \\n +-----------|-|-----|-|-----|---------|-----|-------------------|-----|---|-----------|-|---------------|---------|-------|-----------------------------|---------------+ | | | | |   | |   | +-----+   \\n   |   |     | | |   | | |   |     |   |     |         |   | |   |     |   |   | |     | |       |       |         |       |         |               |   |           |     | | | | |   | |   |   | | |   \\n   |   |     | | |   | | |   |     |   |     |         |   | |   |     |   |   | |     | |       |       |         |       |         |               |   |           |     | | | | |   | |   |   | | |   \\n   |   |     | | |   | | |   |     |   |     |         |   | |   |     |   |   | |     | |       |       |         |       |         |               |   |           |     | | | | |   | |   |   | | |   \\n   |   |     | | |   | | |   |     |   |     |         |   | |   |     |   |   | |     | |       |       |         |       |         |               |   |           |     | | | | |   | |   |   | | |   \\n   |   |     | | |   | | |   |     |   |     |         |   | |   |     |   |   | |     | |       |       |         |       |         |               |   |           |     | | | | |   | |   |   | | |   \\n +-+   |     | +-+   | | |   |     |   |     |         |   | |   |     |   |   | +-----------------------|-----------------|-----------------------------------------------+ | | | |   | |   |   | | |   \\n |     |     |       | | |   |     |   |     |         |   | |   |     |   |   |       | |       |       |         |       |         |               |   |           |       | | | |   | |   |   | | |   \\n | +---+     |       | | |   |     |   |     |         |   | |   |     |   |   |       | |       |       |         |       |         |               |   |           |       | | | |   | |   |   | | |   \\n | |         |       | | |   |     |   |     |         |   | |   |     |   |   |       | |       |       |         |       |         |               |   |           |       | | | |   | |   |   | | |   \\n | +-------+ +---+   +-|-------+   |   |     |         |   | |   |     |   |   |       | |       |       |         |       |         |               |   +-+         |       | | | |   | |   |   | | |   \\n |         |     |     | |   | |   |   |     |         |   | |   |     |   |   |       | |       |       |         |       |         |               |     |         |       | | | |   | |   |   | | |   \\n |         +-----|-------|-------------|-----|-------------|-----|---------|-----------|-|---------------+         +-+     |         +---------------------|---------------------|-+   | |   |   | | |   \\n |               |     | |   | |   |   |     |         |   | |   |     |   |   |       | |       |                   |     |                         |     |         |       | | |     | |   |   | | |   \\n |             +-------+ |   | |   |   |     |         |   +-----|-----|---------------------------------------------|-----|-----------------+   +-------------------+     +-----+     | |   |   | | |   \\n |             | |       |   | |   |   |     |         |     |   |     |   |   |       | |       |                   |     |                 |   |   |     |               | | |       | |   |   | | |   \\n |     +-------+ |   +---|---|-|---|-----+   |         |     |   |     |   |   |       | |       |                   +-----+                 |   |   |     |               | | |       | |   +-+ | | |   \\n |     |         |   |   |   | |   |   | |   |         |     |   |     |   |   |       | |       |                                           |   |   |     |               | | |       | |     | | | |   \\n |     |       +-----+ +-----------------|---|-----------------------------|-----------|-----------------------------------------------------+   |   |     |               | | |       | |     | | | |   \\n |     |       | |     | |   | |   |   | |   |         |     |   |     |   |   |       | |       |                                               |   |     |               | | |       | |     | | | |   \\n |     |       | +-----+ |   | |   |   | |   |         |     |   |     |   |   |       | |       |                                   +-----------+   +---+ |               | | |       | |     | | | |   \\n |     |       |         |   | |   |   | |   |         |     |   |     |   |   |       | |       |                                   |                   | |               | | |       | |     | | | |   \\n +-------------+ +-----U +---------|---+ |   |         |     |   |     |   |   | +---------------------------------------------------|-------------------+ +---------------+ | |       | |     | | | |   \\n       |         |           | |   |     |   |         |     |   |     |   |   | |     | |       |                                   |                                       | |       | |     | | | |   \\n       |   +-----------------+ |   |     |   |         |     |   |     |   |   | |     | | +-----------------------------------------|---------------------------------------+ |       | |     | | | |   \\n       |   |     |             |   |     |   |         |     |   |     |   |   | |     | | |     |                                   |                                         |       | |     | | | |   \\n   +---+   |     +-----------------|-+   +---|---------|-----|---|-------------|-----+ | | +-----|-----------------------------------|---------------------------------------+ +-+     | |     +---+ +-+ \\n   |       |                   |   | |       |         |     |   |     |   |   | |   | | |       |                                   |                                       |   |     | |       |     | \\n +---------+ +-----------------+   | +---+   |   +-----------+   +---------------+ +-+ +-|-+     | +-----------------------------------------------------------------------------------|-|-------|-----+ \\n | |         |                     |     |   |   |     |               |   |   |   |     | |     | |                                 |                                       |   |     | |       |       \\n | +---+   +-|-------------------------------|-----------------------------|-------|-------------+ |                 +-------------------------------------------------------+ +-+     | |       |       \\n |     |   | |                     |     |   |   |     |               |   |   |   |     | |       |                 |               |                                         |       | |       |       \\n +---------+ +---------------------|-+   +---+   +-------------------------+   |   |     +-|-------|-----------------+               +-----------------------------------------+       | |       +-+     \\n       |                           | |                 |               |       |   |       |       |                                                                                   | |         |     \\n       +---------------------------+ +-----------------+               +-------+   +-------+       +-----------------------------------------------------------------------------------+ +---------+     \\n                                                                                                                                                                                                         \";","export default \"0\\t5\\t10\\t0\\t11\\t14\\t13\\t4\\t11\\t8\\t8\\t7\\t1\\t4\\t12\\t11\\n\";","export default \"After saving Christmas [five years in a row](https://adventofcode.com/events), you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.\\n\\nThe tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them *stars*. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.\\n\\nTo save your vacation, you need to get all *fifty stars* by December 25th.\\n\\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants *one star*. Good luck!\\n\\nBefore you leave, the Elves in accounting just need you to fix your **expense report** (your puzzle input); apparently, something isn't quite adding up.\\n\\nSpecifically, they need you to **find the two entries that sum to `2020`** and then multiply those two numbers together.\\n\\nFor example, suppose your expense report contained the following:\\n\\n```\\n1721\\n979\\n366\\n299\\n675\\n1456\\n```\\nIn this list, the two entries that sum to `2020` are `1721` and `299`. Multiplying them together produces `1721 * 299 = 514579`, so the correct answer is `514579`.\\n\\nOf course, your expense report is much larger. **Find the two entries that sum to `2020`; what do you get if you multiply them together?**\\n\\n[comment]: <> (PART 2)\\n\\nThe Elves in accounting are thankful for your help; one of them even offers you a starfish coin they had left over from a past vacation. They offer you a second one if you can find **three** numbers in your expense report that meet the same criteria.\\n\\nUsing the above example again, the three entries that sum to `2020` are `979`, `366`, and `675`. Multiplying them together produces the answer, **`241861950`**.\\n\\nIn your expense report, **what is the product of the three entries that sum to `2020`**?\";","export default \"362981754\";","export default \"kd dec -37 if gm <= 9\\nx dec -715 if kjn == 0\\ney inc 249 if x < 722\\nn dec 970 if t > 3\\nf dec -385 if msg > -3\\nkd dec -456 if ic <= -8\\nzv dec -745 if gub <= 4\\nic inc 705 if yp > -6\\nlyr dec -970 if gm != 0\\nlyr inc 935 if j >= 0\\ngm dec 716 if gm < 9\\nkjn inc -897 if j <= -9\\nj dec -824 if f != 384\\nx dec 741 if e <= -6\\nf dec 617 if msg != 9\\nkjn inc 184 if ic > 697\\nlyr dec 860 if x <= 707\\ney dec -785 if msg < 2\\nlyr inc -226 if x != 720\\nt inc -689 if f != -242\\nriz inc -174 if f != -232\\nj inc 906 if lzd <= 5\\nyp dec 264 if zv >= 748\\nic inc 578 if t != -694\\nucy dec -532 if i < 10\\ngm inc 294 if i < 6\\nomz dec 384 if n < 10\\nic inc 277 if e > -10\\ne inc -707 if j != 1740\\nmsg inc 1 if djq > -2\\ngm dec 625 if ey != 1042\\nbxy inc 484 if e >= -709\\nj dec 130 if kd > 29\\ndjq dec 276 if i == 0\\nic dec -361 if bxy != 490\\nic inc 516 if ey <= 1041\\ngub dec -382 if e == -707\\nkd dec 410 if i > -8\\ntj inc 307 if tj != 5\\nmsg inc -26 if kjn > 186\\nn inc 227 if kjn <= 191\\ny dec -920 if lzd >= -4\\nic inc -43 if i > -5\\ney dec 645 if ic <= 2402\\nlyr dec -821 if x < 722\\nx dec 666 if y > 925\\nn inc 899 if yp < 10\\nf inc -627 if lzd != 6\\nm dec 430 if bxy <= 489\\ngub inc -603 if yp >= 9\\ney dec 601 if ic > 2388\\ne inc 346 if x <= 716\\nt inc 292 if lzd == 0\\nmsg inc -311 if yp <= 8\\nlyr dec -599 if zv < 742\\nn dec 720 if lzd >= -9\\nt dec 815 if n <= 412\\nomz inc 175 if msg > -315\\nic dec -259 if msg == -310\\nx dec 250 if kd == -373\\nn inc 890 if tj < 315\\nj inc 926 if m >= -425\\ngub dec -497 if x == 465\\nf dec -965 if kjn <= 193\\ney dec 126 if lyr != 1530\\nriz dec 95 if ey < -204\\ntj inc 650 if ey > -222\\nriz dec -780 if gm != -1041\\ndjq inc -358 if j != 1600\\ngm inc -506 if gub > 888\\ni inc -195 if ucy != 539\\nucy dec 323 if kjn <= 191\\ne dec 892 if kd < -368\\nlzd dec 465 if kjn <= 191\\nt inc 836 if omz > -216\\ne dec -994 if gm < -1041\\nomz dec 974 if ey != -205\\nkjn inc -844 if f != 99\\nlyr dec -572 if lyr == 1530\\nucy dec 794 if kjn != -669\\nm dec -139 if y >= 916\\nf inc -949 if djq == -276\\ndjq inc -148 if m < -289\\nzv dec 46 if gub == 879\\nzv dec 303 if bxy < 491\\nyp inc 145 if msg != -300\\ngub dec -907 if y >= 924\\ni inc -88 if gub < 888\\ntj inc -801 if kd <= -369\\nn dec -479 if tj == 156\\ni dec 308 if ucy > -586\\ntj inc 232 if gm != -1050\\nbxy dec -845 if f == -843\\nyp inc -33 if y != 919\\nic dec -895 if i == -587\\nyp dec 321 if tj <= 391\\nbxy dec -825 if n < 1779\\nriz inc 497 if t == -376\\ney dec -971 if f > -848\\nm dec -728 if f == -843\\nriz inc 447 if tj < 396\\ntj dec 689 if kjn == -662\\nzv dec 735 if kjn < -656\\ne inc -317 if djq <= -433\\nm dec -313 if gm <= -1053\\nm inc 892 if tj < 394\\nf inc 367 if ucy != -587\\ndjq dec -374 if zv > -344\\nj inc 894 if lyr <= 2093\\nriz inc -802 if gub < 886\\ngub inc -507 if t > -379\\nic dec 894 if riz < 824\\ngub inc 471 if djq != -57\\nlzd inc 370 if j >= 1595\\ngub dec 287 if tj > 386\\nkd dec 860 if n != 1771\\nriz inc -133 if t >= -376\\nmsg inc 548 if msg != -310\\nx inc -941 if ey == 759\\ngm inc 442 if n == 1766\\ney inc 504 if ey == 759\\nkjn dec 821 if f == -476\\nn inc -445 if ucy != -586\\nic dec 779 if ucy != -577\\nkd inc 350 if m > 1320\\ntj inc -525 if msg < -304\\nx dec -621 if lyr <= 2106\\nomz dec 39 if kjn > -1485\\nriz inc -565 if bxy >= 2161\\nm dec -925 if omz <= -1219\\nkjn inc 531 if omz != -1224\\nic inc 979 if kjn > -953\\nlyr dec 167 if ey > 1262\\nx dec 193 if lzd > -90\\nt dec 261 if lzd <= -102\\nyp inc 232 if kjn != -950\\ndjq inc 710 if lzd < -89\\nmsg inc 565 if bxy > 2147\\nyp dec -53 if j <= 1607\\nkjn inc 868 if x >= 143\\nx inc 677 if tj <= -140\\nbxy dec 374 if djq != 651\\nt inc -609 if e < -256\\nlyr inc -903 if lzd != -105\\nlyr dec -87 if omz != -1223\\nlzd dec -253 if y == 920\\nyp dec 839 if kd < -884\\nic inc -339 if kjn > -83\\nj dec 588 if bxy <= 1786\\nn dec -415 if zv >= -336\\nyp inc -439 if x == 145\\nriz dec -159 if ic != 2514\\nlzd inc 61 if f != -476\\ngm inc -498 if ey < 1270\\nmsg dec 942 if m == 2254\\ni inc 161 if ucy >= -590\\nkjn dec 446 if j >= 1006\\nucy dec 609 if y > 917\\nomz inc 558 if ic > 2518\\nmsg dec 675 if ucy < -1185\\nj dec -962 if t >= -992\\nn inc -248 if gub < 558\\ney dec 92 if y == 920\\nomz dec -774 if kjn == -528\\nkd dec -874 if ic <= 2509\\nkjn inc 445 if j == 1974\\nj inc -459 if kd >= -884\\ni dec 605 if lyr < 1129\\ne inc 995 if zv == -339\\nt inc 888 if x != 143\\nkd inc -742 if y == 920\\nkjn dec 692 if tj == -137\\nucy inc 650 if riz > 702\\nzv dec -539 if gub == 556\\nm inc 991 if f < -484\\nlyr dec -260 if riz >= 699\\ney dec -916 if j == 1515\\ntj dec 930 if lyr < 1128\\nriz inc -261 if f > -470\\nlyr dec -392 if f != -472\\nm inc -845 if yp > -602\\nriz inc -217 if i < -1027\\ney inc 35 if riz > 474\\ngub dec -681 if ucy >= -1198\\nriz inc -871 if kd < -1634\\nm dec 793 if y <= 912\\nic dec 990 if i != -1045\\nx inc -178 if kjn > -766\\nkd dec 952 if gub < 1247\\nlyr dec 426 if m >= 1407\\nkd inc -721 if lyr != 1083\\nlzd dec -887 if omz <= -446\\ndjq dec 648 if bxy >= 1775\\nm inc 892 if omz <= -444\\ny inc -757 if yp == -595\\nlyr inc -943 if ucy >= -1194\\nic dec 466 if y < 157\\nlzd inc 720 if msg < -1354\\nf dec -746 if kjn != -774\\nomz inc 234 if yp >= -597\\nt inc 272 if ucy != -1193\\nyp dec -237 if y <= 168\\nkjn dec -360 if lyr != 141\\nmsg inc 246 if n < 1092\\ndjq dec 615 if msg >= -1122\\ne inc 44 if yp > -359\\nyp inc -315 if kd <= -3289\\nkjn inc -987 if ey != 2127\\nkd inc 784 if m > 2304\\nyp dec -262 if gub < 1228\\nriz inc 679 if riz != 485\\ngm dec -619 if msg < -1107\\ngm inc 968 if x < 141\\nzv dec 228 if djq <= -598\\ngub inc 773 if i == -1035\\ney inc -573 if i != -1034\\ndjq inc 791 if gm > -935\\nt inc -241 if f < 277\\nt inc 682 if omz != -211\\ny dec -562 if lzd >= 1760\\nkd dec 774 if j != 1524\\ndjq inc 843 if lyr == 142\\ny dec 339 if msg == -1116\\nkd inc 637 if f > 263\\nf inc 467 if j < 1519\\ni inc 662 if riz > 1147\\nm dec -354 if f == 737\\nf inc -411 if tj == -1067\\nj inc -455 if j <= 1524\\nt dec 7 if j <= 1063\\ne dec 97 if djq <= 1040\\ngm dec 695 if f <= 335\\ngm dec 312 if t >= 614\\nkjn dec -877 if n > 1089\\nj inc 770 if t < 618\\ndjq dec 953 if lyr <= 144\\nucy inc 595 if gm <= -1620\\nyp inc -953 if lzd < 1770\\ni inc -864 if tj <= -1072\\nlzd dec -68 if yp <= -1622\\nmsg dec 713 if ic == 1524\\ni dec -632 if yp < -1628\\nyp inc -779 if omz != -211\\nyp dec -423 if zv == -28\\nzv inc 41 if kjn >= -1406\\ne inc -366 if t != 603\\nf inc 288 if omz > -215\\nkjn dec -1 if lyr < 141\\nyp dec 308 if lyr == 142\\nlyr inc -999 if zv == 13\\nbxy inc 904 if kjn > -1410\\nlzd dec 32 if zv > 8\\nkd inc 930 if lyr == -857\\nbxy dec -635 if m < 2661\\ngub dec 866 if f >= 607\\ngub inc 163 if gm > -1628\\nx inc 200 if msg > -1836\\ne dec 296 if x == 347\\ne dec 667 if ey == 1549\\nriz inc 665 if gub == 1307\\nj inc 37 if zv == 13\\nm inc 822 if ey == 1549\\nic dec 585 if lyr > -849\\ngub dec -194 if i >= -378\\nriz dec 123 if y <= 389\\nyp inc -59 if djq < 84\\ne inc -199 if djq > 68\\nlyr inc -685 if yp != -2352\\nkd inc 573 if j != 1867\\nn inc 659 if djq <= 86\\nyp inc 693 if lzd == 1792\\nic inc 188 if msg < -1822\\nt dec 58 if zv != 19\\nlzd dec 402 if lyr <= -1542\\nucy dec -645 if m == 3477\\nyp inc -47 if msg == -1829\\ngm dec 910 if omz <= -206\\nucy inc 703 if gub >= 1497\\nlyr inc 907 if e <= -554\\ny dec 167 if ey < 1555\\ngm inc -663 if bxy == 3319\\nj dec -981 if lyr == -1542\\nlyr inc 638 if i != -380\\nucy inc 390 if i <= -373\\nn dec 68 if y != 223\\nlyr dec -408 if ic <= 1713\\ntj dec -856 if n == 1673\\nyp inc -767 if ey > 1541\\nomz inc -974 if riz != 1688\\nj dec 411 if j < 2846\\nomz inc -972 if djq < 85\\ne inc -153 if y >= 216\\nn inc -53 if y < 224\\nj dec 287 if zv < 6\\ney inc -144 if kjn <= -1410\\nn inc -84 if kd < -2496\\nbxy dec -788 if kjn != -1408\\nucy dec 765 if e < -693\\nkd inc 846 if ic <= 1716\\nkjn inc -432 if gm <= -3202\\ni dec -290 if e > -704\\ney inc 625 if x == 344\\nx dec -338 if msg < -1830\\ngm dec -621 if y >= 217\\nj dec 765 if f <= 616\\nkd inc -559 if riz < 1707\\ntj dec 498 if j != 2083\\nbxy dec -414 if gm != -2574\\nyp dec 365 if msg != -1823\\nic inc -143 if m == 3477\\nic inc -239 if i >= -88\\ne dec -479 if yp <= -3524\\nmsg dec 15 if ic != 1337\\ngm inc -831 if gm == -2573\\nyp dec -198 if zv >= 12\\nlzd inc 982 if x != 349\\nm dec -80 if msg != -1844\\ne dec 82 if kjn > -1408\\nmsg inc 43 if x > 337\\nyp dec -204 if msg == -1805\\ne inc 351 if yp < -3322\\nomz inc -785 if lyr < -493\\nx inc 511 if djq != 72\\ndjq dec 686 if lzd == 2381\\nzv inc -188 if riz > 1692\\ntj inc 958 if kd == -2211\\nm inc 951 if gub != 1501\\nucy dec 777 if e == 46\\ntj dec 25 if lyr < -495\\nic inc -3 if lyr != -502\\nyp inc 839 if gm > -3412\\ntj dec 464 if ic != 1327\\ngm dec -100 if zv == -175\\nt dec 786 if riz != 1701\\nic inc -727 if gm == -3304\\nomz dec 755 if yp <= -2487\\nzv dec -441 if kjn == -1402\\nyp inc -655 if tj > -240\\nj dec 272 if ucy <= -406\\nic dec -652 if j >= 2088\\nlzd inc -276 if e > 41\\nm dec -93 if t > -237\\nm inc -927 if zv > 264\\nriz dec -977 if y > 218\\nn dec 608 if n != 1534\\nkjn inc 655 if e > 55\\ntj inc -570 if tj > -239\\ni inc -677 if t <= -242\\ntj inc -570 if riz != 2665\\nmsg inc 629 if riz != 2667\\nbxy inc 247 if lzd < 2111\\nucy dec 292 if t <= -226\\ndjq inc -541 if x < 857\\nkjn dec 211 if lyr == -496\\ne dec -59 if kjn != -1610\\nt dec -879 if gm >= -3305\\nm inc 977 if zv == 266\\nt dec -103 if x >= 852\\nriz inc -570 if djq >= -1156\\nt inc -791 if gub <= 1496\\nt dec -68 if lzd != 2099\\ne inc 282 if djq > -1150\\ne inc -49 if e >= 383\\ngub inc 137 if gub <= 1503\\nx inc 627 if j > 2084\\ndjq dec -434 if bxy == 4770\\nlyr inc -772 if lzd <= 2109\\nlzd inc 473 if lzd < 2107\\ngm inc -632 if ey != 1546\\nx dec -342 if omz != -3702\\nkd dec 108 if m > 3619\\ne dec -180 if i <= -76\\nkd dec -69 if e >= 511\\ne inc 286 if n >= 926\\ne dec -507 if t <= 815\\nj dec -718 if ic != 600\\nlzd dec -439 if tj > -1382\\nic dec -876 if tj <= -1370\\ny inc 511 if f > 618\\nf inc -100 if x != 1208\\nt inc 671 if ucy <= -689\\ngm inc 47 if e > 1314\\nf inc 609 if gub <= 1633\\ngm inc 409 if y > 213\\nzv inc -420 if e > 1302\\nic dec -304 if omz < -3696\\nx inc 698 if kd != -2250\\nn inc 805 if zv > -158\\ntj dec 84 if j != 2084\\nucy inc 41 if ic <= 1779\\nj inc 597 if ey == 1549\\ngub inc -483 if msg != -1172\\ney dec -535 if omz > -3710\\nriz dec -877 if gm >= -3529\\nriz dec 117 if f < 518\\nm dec 275 if i <= -79\\nkjn inc 742 if j <= 2680\\nkd inc -472 if omz != -3703\\ne inc -865 if lzd <= 3018\\nx inc 187 if omz != -3710\\nbxy dec -675 if tj >= -1466\\nzv dec -635 if tj >= -1451\\nriz dec 822 if f >= 508\\nm inc -460 if i == -76\\ntj dec 623 if j >= 2677\\nm dec 515 if djq > -1155\\nic dec 392 if ucy != -695\\ntj inc 29 if omz < -3691\\nyp inc -94 if zv != -158\\nbxy inc -237 if ic >= 1778\\nn inc -204 if lzd > 3016\\nbxy dec 320 if x < 2086\\nf dec -545 if y > 216\\nf inc 771 if djq != -1153\\ni dec 94 if msg > -1175\\ndjq inc 681 if m != 2835\\nkjn dec 176 if kd < -2727\\ni dec 559 if msg > -1172\\nkjn inc -475 if omz > -3708\\nriz inc 912 if kd < -2725\\nx inc -636 if tj == -2054\\ne inc -508 if gm >= -3528\\nf dec -7 if ucy != -704\\ney inc -764 if y > 213\\nlzd inc 282 if ucy == -695\\nic inc -146 if gub >= 1645\\nkjn dec 149 if x < 1442\\nbxy dec 638 if lzd >= 3296\\nomz inc -699 if riz >= 2952\\nic dec -638 if kd == -2727\\nucy dec 107 if e <= -55\\nkjn inc -449 if zv == -154\\ny dec -239 if x <= 1455\\ngub inc -778 if n <= 1530\\nomz inc -239 if riz > 2952\\ny dec 465 if x < 1448\\nn inc -916 if msg <= -1165\\nyp dec -10 if lzd >= 3297\\nkjn dec -881 if yp <= -3224\\nj inc -634 if ic <= 1782\\nmsg dec 178 if ic >= 1780\\nic dec 678 if ucy != -795\\nkjn inc -90 if n >= 610\\nlyr inc -396 if n <= 616\\nriz dec -95 if tj >= -2056\\nzv dec 570 if e < -55\\nlzd inc -437 if tj >= -2062\\nzv dec -453 if t <= 1487\\nmsg dec -597 if yp == -3230\\nm inc -467 if kd < -2723\\nomz inc 662 if f < 1839\\nkd inc -956 if lzd > 2861\\nf dec 155 if x == 1443\\ne dec -89 if ey < 1323\\nt dec 694 if ucy >= -806\\ngm dec -345 if j <= 2055\\ny dec -331 if gub == 860\\nm inc -947 if gm < -3175\\nzv dec 381 if f >= 1832\\nmsg inc 545 if yp != -3239\\nucy inc 17 if gub < 862\\ntj inc 906 if ic < 1103\\ny inc 674 if lyr == -1664\\nomz inc 409 if x < 1451\\nomz dec -108 if djq == -466\\nkd dec -554 if gm <= -3180\\nf dec -178 if gm > -3186\\nucy dec 186 if msg >= -208\\nm dec -339 if j != 2040\\ne dec 813 if y <= 991\\nlzd dec 484 if zv < -649\\ngub dec -639 if omz > -3576\\nn dec 527 if ey >= 1313\\nmsg dec 519 if t == 792\\ndjq inc -976 if msg >= -729\\nriz dec 31 if riz == 3050\\nkjn dec -234 if gm != -3177\\nbxy dec 946 if m >= 1755\\nyp dec -652 if x < 1455\\ny inc -685 if t > 788\\nx inc 801 if n <= 86\\ndjq inc 251 if y > 304\\nkd inc 213 if lzd == 2378\\ngm inc 642 if tj >= -1150\\nn dec -560 if yp > -2574\\nkjn dec 380 if ucy < -965\\ne dec 651 if kd > -2926\\nic dec -775 if y >= 306\\nmsg dec 527 if ic <= 1881\\nzv inc -872 if m != 1749\\ntj dec -337 if f != 2022\\ndjq dec -440 if gub <= 1489\\ne inc 231 if lzd != 2386\\nkjn inc -259 if tj <= -819\\ne inc -588 if djq < -1185\\ne inc -970 if kjn > -1327\\ngm inc 904 if n != 83\\ny dec -32 if j <= 2055\\nriz inc 888 if y >= 343\\nucy inc -874 if kd != -2918\\ntj inc -154 if omz == -3567\\ne dec 44 if m >= 1751\\nmsg inc -659 if n >= 87\\nf inc 854 if t <= 794\\nlzd dec 938 if f != 2872\\nkd inc 298 if lyr != -1658\\nyp inc 196 if bxy < 3311\\nlyr dec 328 if zv != -1520\\nzv dec -919 if riz >= 3904\\ney dec 236 if riz >= 3900\\nic dec 998 if tj >= -966\\nucy inc -518 if riz < 3910\\ndjq dec 332 if riz > 3904\\nm dec -853 if ic > 870\\nt dec -173 if tj != -962\\ngub inc 332 if t >= 962\\nt dec 366 if ey == 1084\\nj dec -298 if bxy < 3311\\nn dec 495 if y >= 338\\nlyr inc 283 if djq == -1525\\nyp dec 705 if riz != 3898\\nm dec 632 if zv < -598\\nyp inc -219 if i < -184\\ngub inc -865 if yp < -3080\\nbxy inc -940 if t >= 596\\nyp dec 217 if ey >= 1078\\ny dec -242 if ic > 870\\nriz inc 438 if bxy >= 2358\\nx dec -923 if y == 587\\nlzd dec -832 if kjn > -1327\\ny inc 25 if kjn <= -1319\\nkd dec 573 if m != 1976\\ngub dec 134 if kd == -2624\\nn inc 291 if zv <= -599\\nn dec 226 if msg == -1256\\nmsg inc -646 if omz != -3565\\ni inc 454 if kjn != -1333\\ntj dec -123 if ey <= 1090\\ngub inc -428 if tj == -842\\ngub dec 456 if i > 283\\nt inc 270 if ic >= 875\\nx dec 671 if n != -111\\nlzd dec -137 if e != -2003\\ny dec -868 if lzd < 2414\\ngm inc 935 if e > -1999\\nj inc 981 if gub <= 538\\nm dec -967 if lzd != 2410\\ngm dec -448 if kd > -2629\\nf dec -625 if lzd > 2403\\nt dec 760 if omz >= -3559\\ntj inc 688 if n != -118\\ngm dec 351 if e <= -1994\\nt dec 915 if f <= 3501\\nriz dec 336 if gub < 541\\ne dec 775 if e > -2001\\nj dec -467 if bxy <= 2364\\nbxy inc -66 if riz == 4009\\ngm inc 979 if e == -2770\\ni dec 579 if ey > 1086\\nm inc 349 if x > 2503\\nzv inc -79 if lyr == -1709\\nriz inc -493 if ic < 888\\nlzd inc 308 if i != 273\\ngub dec 527 if yp >= -3297\\nt dec -667 if kd == -2620\\ngm dec 785 if yp > -3308\\nriz inc -465 if kd == -2620\\nkd dec 608 if n > -125\\ne inc -901 if gm > -411\\nucy inc 23 if x > 2493\\nucy dec 246 if tj <= -834\\ntj dec 735 if lzd == 2716\\nt dec 635 if gub >= 538\\nlyr inc 107 if gub != 538\\nlyr inc -624 if djq <= -1521\\nlzd dec -958 if msg < -1892\\nic inc 648 if msg < -1892\\ngm dec 329 if i <= 280\\ny dec -335 if ey <= 1086\\nlyr dec 19 if x != 2504\\ngub dec 220 if f >= 3489\\nkjn dec 449 if msg == -1900\\ney inc 292 if f != 3503\\ney dec -671 if n <= -120\\nkd inc 516 if kjn <= -1780\\ni inc 208 if riz < 3048\\nx dec 737 if f >= 3500\\nucy dec 767 if lyr != -2352\\ney dec -958 if t == -7\\nyp inc 340 if gm == -739\\ney inc 545 if kjn == -1775\\nx inc -678 if omz == -3567\\nn dec 862 if zv > -685\\ney dec 674 if yp > -2970\\ny dec 31 if t > -19\\nic dec 196 if lzd < 3685\\nt dec -470 if lyr >= -2355\\nmsg dec -814 if f > 3492\\nomz inc 638 if f == 3494\\nic dec -297 if bxy == 2299\\ny dec -185 if ey >= 1244\\nyp dec 462 if lyr >= -2357\\nj dec 777 if ucy > -1717\\ni dec 834 if i <= 274\\nkd dec 851 if m <= 2952\\ney dec -738 if bxy != 2289\\ndjq dec -702 if ic > 1328\\nf inc 674 if msg >= -1094\\nmsg inc 290 if kd != -4080\\ngub dec -235 if yp < -3417\\nomz dec -750 if m > 2937\\nkd dec -870 if x != 1823\\ni dec -983 if omz <= -2171\\nkd inc -637 if m != 2942\\nic inc 253 if x >= 1816\\nkd inc -790 if x == 1814\\nlyr dec 369 if yp > -3436\\nj inc 72 if riz < 3058\\nj inc 55 if y == 1967\\nmsg dec 788 if ucy <= -1711\\nriz inc 138 if gm < -730\\nkd dec -953 if n == -981\\ni inc -225 if omz == -2179\\nbxy dec -21 if msg != -1574\\nm dec 737 if f <= 4170\\nucy inc -304 if lzd != 3675\\ngm inc -199 if ey != 1979\\ntj inc -468 if m > 2204\\nucy dec 143 if djq > -833\\ndjq inc -587 if m > 2205\\nf inc -213 if gm <= -929\\nmsg dec -56 if gub >= 555\\ngub dec -662 if msg == -1584\\nomz inc 94 if t != 456\\nkd dec 995 if msg >= -1587\\nic inc 803 if t < 454\\nomz inc 897 if x == 1822\\nj inc 534 if zv > -685\\nic inc -997 if riz < 3186\\nyp inc -903 if gm > -945\\nlzd inc 326 if ucy != -1862\\nm dec 374 if x > 1829\\ntj inc -655 if gm < -932\\nn dec 89 if x > 1812\\ndjq dec -619 if lyr >= -2729\\nj dec -969 if n == -1069\\nlyr dec -218 if i >= 1033\\ngm inc -897 if i > 1031\\nbxy inc -615 if yp >= -4335\\nomz inc -147 if tj == -1964\\ny inc -81 if msg != -1591\\nj dec 569 if yp <= -4325\\nkd inc 715 if ic != 1590\\ndjq inc 661 if ey > 1976\\ntj dec 272 if tj > -1967\\nx inc -72 if zv == -684\\nucy dec 338 if ucy >= -1846\\nmsg inc -542 if lyr != -2495\\nzv dec -535 if ey >= 1978\\nm inc 944 if lzd != 3992\\ne dec -944 if gub >= 1213\\ngm inc -525 if bxy >= 1701\\ne inc 894 if tj != -2239\\nf inc -237 if lzd > 4007\\nx dec -248 if bxy > 1706\\ngm inc -484 if lzd > 4008\\ni inc 332 if f != 3947\\nyp inc 853 if kd > -4125\\nucy inc -743 if gm <= -2351\\ndjq inc -901 if gm <= -2358\\nt inc 76 if m < 3148\\nmsg dec 945 if gub >= 1213\\ntj dec 411 if zv != -149\\nm dec 904 if m > 3141\\nmsg dec -416 if gub <= 1220\\nx inc -354 if ey >= 1994\\ni dec 971 if gub >= 1206\\ney inc -446 if gub >= 1215\\nlyr dec -106 if bxy > 1697\\nt inc -177 if ey <= 1547\\nlzd inc -147 if lzd >= 4003\\ney dec -765 if f == 3953\\ny inc -678 if gm < -2353\\nx inc -7 if ic <= 1591\\nlyr dec 449 if lyr > -2407\\ngub inc -58 if ucy > -2605\\nn dec -512 if zv >= -156\\nlzd inc -847 if n > -560\\ntj dec -136 if djq < -1022\\nt inc 824 if bxy <= 1709\\ndjq dec -358 if msg != -2663\\nzv dec -212 if t != 1106\\nzv dec 6 if ey > 1538\\nmsg dec 302 if n < -554\\nic dec -784 if i == 402\\nm dec 450 if tj == -2101\\nkd inc -559 if j != 4018\\nn inc 611 if riz == 3179\\nn dec -995 if kjn > -1781\\nic inc -411 if ey == 1539\\nkjn inc 140 if t == 1113\\ny inc 247 if t < 1104\\nomz inc -241 if djq >= -675\\nomz inc 463 if kjn <= -1774\\nkd dec -93 if bxy > 1696\\nucy inc 256 if e <= -1828\\nj inc -134 if t > 1096\\ngub dec 900 if tj != -2101\\nic inc 254 if yp >= -4334\\nn dec 416 if n <= 446\\nkjn dec -636 if ic >= 1434\\nriz dec -348 if lzd <= 3147\\ngm inc -604 if n <= 26\\ngub dec -253 if zv != 62\\nm dec -274 if n >= 26\\ntj dec 487 if gm != -2960\\nomz inc -1 if n >= 25\\ngm dec -830 if kjn > -1782\\nkjn inc 617 if ey != 1539\\ne inc 152 if msg != -2957\\nx inc 627 if t >= 1109\\nyp inc 191 if ic >= 1436\\nkjn dec 985 if y > 1448\\nf dec -899 if f > 3951\\nyp inc 92 if gm <= -2127\\ne inc -615 if yp > -4240\\nx inc -443 if x != 1745\\nlzd inc -472 if y <= 1463\\nt inc 421 if djq >= -677\\nn dec 833 if ey == 1539\\ne dec -168 if omz < -1050\\ndjq dec -670 if t >= 1523\\nomz dec -361 if gm > -2138\\ni inc 918 if ucy <= -2333\\ne dec 946 if ey > 1534\\ny inc 150 if tj == -2588\\ny dec 740 if yp <= -4231\\ngub inc -4 if gub <= 1412\\nriz dec 778 if f < 4858\\nmsg inc -733 if e == -3226\\ni dec 377 if omz >= -708\\nmsg dec -710 if x != 1301\\nj dec 380 if zv >= 57\\ney inc -702 if ey > 1529\\ne dec 830 if omz < -699\\ngub inc -104 if riz == 2411\\nj dec -501 if gm < -2130\\nbxy dec -176 if kjn < -2758\\nzv inc 603 if zv >= 57\\nlyr inc 921 if lyr != -2839\\nj inc -337 if kjn < -2755\\ne dec 245 if ey > 836\\nt inc -339 if djq < 0\\nucy dec 65 if yp <= -4237\\nmsg dec 87 if lzd < 2687\\nucy inc 949 if yp < -4227\\nlyr inc -298 if riz < 2416\\nucy dec -52 if n == -811\\ntj inc -776 if bxy <= 1886\\nmsg inc 650 if djq < -6\\ndjq inc 542 if omz > -697\\ny dec 131 if zv != 660\\ntj inc -184 if gub <= 1303\\ndjq dec -223 if ucy != -1401\\ngm inc -746 if gub < 1305\\nm dec 726 if zv != 662\\ndjq dec 134 if kjn != -2754\\nzv inc 693 if tj >= -3538\\nmsg inc 327 if omz == -699\\ngub inc 913 if x != 1294\\nyp dec -183 if gub == 2215\\nbxy inc 558 if tj < -3540\\nmsg dec 278 if m >= 1069\\nj dec -760 if gub < 2212\\ngub inc 720 if n != -820\\nbxy dec 458 if msg == -3018\\ntj inc 630 if ucy <= -1399\\ni inc -489 if bxy == 1978\\nx dec 651 if gub > 2934\\nf dec -23 if lyr < -2216\\ny inc 744 if n == -811\\nucy inc -624 if j == 3661\\nriz inc -947 if m == 1070\\ny dec -103 if ic < 1430\\nm dec -158 if f < 4884\\ny inc 897 if j > 3679\\nkjn inc -307 if bxy == 1978\\ny inc 130 if kd <= -4589\\nmsg inc -597 if bxy > 1972\\ntj inc -575 if t > 1185\\ni inc -325 if msg <= -3624\\ni inc 834 if gm >= -2889\\nucy inc -431 if yp != -4054\\nt inc 499 if j >= 3669\\nmsg dec 39 if ey == 837\\nlzd dec 774 if kd != -4592\\nx inc -468 if j < 3681\\nx inc 223 if gm <= -2872\\nt dec 74 if djq >= 95\\ndjq inc 306 if m > 1221\\ni dec -669 if kjn <= -3065\\nomz inc 92 if bxy == 1978\\ngub inc 762 if tj >= -2911\\ngm dec -810 if kd >= -4590\\ney inc 797 if i >= 1943\\nt inc -20 if tj != -2913\\nyp inc -66 if x < 395\\nomz inc -270 if omz > -617\\nx dec -365 if msg >= -3656\\nmsg inc -443 if t >= 1662\\nmsg inc -334 if lzd > 2674\\nf inc -478 if riz == 1464\\nm dec 551 if lyr <= -2222\\nyp dec 321 if m >= 684\\nyp inc 930 if ucy < -1400\\nj dec -836 if ucy >= -1404\\nlzd inc 941 if tj <= -2916\\ntj inc 890 if j > 3668\\nkjn inc -538 if ic > 1423\\ni inc 79 if ucy > -1401\\nkjn dec -145 if e <= -3464\\ney inc 851 if i > 1948\\nmsg inc 566 if ic >= 1423\\nriz dec 615 if bxy != 1988\\nx inc 929 if msg == -3868\\nucy inc -486 if gub != 2933\\nic dec -842 if t < 1663\\nlzd inc 453 if f < 4405\\nriz dec 591 if ic != 1437\\nlzd dec 457 if e >= -3474\\ngub dec 221 if n <= -802\\ngub inc -707 if riz > 256\\nbxy dec -352 if riz == 266\\nx inc -754 if j >= 3667\\ntj inc 624 if y == 1852\\ney dec 96 if kjn <= -3453\\nj inc -682 if t > 1673\\nj inc -830 if zv != 652\\nzv dec 263 if ic > 1420\\nm dec -636 if ic > 1435\\nlzd inc 806 if yp < -3114\\nyp dec 886 if zv <= 402\\nt dec 758 if ic < 1419\\nriz inc -212 if omz != -876\\ndjq dec 815 if kd == -4589\\nt dec -70 if gm >= -2889\\ney dec 798 if gm <= -2877\\ni dec 879 if zv < 407\\nf dec -946 if i < 1082\\ni dec -419 if y == 1844\\nlyr dec -544 if kjn > -3461\\ngm dec -138 if kd < -4582\\ngub dec 371 if lzd < 4416\\nn dec 455 if kd <= -4583\\ne inc 475 if kjn <= -3457\\nlzd dec 393 if riz >= 45\\nx dec 8 if kjn > -3456\\ngm inc 546 if yp >= -4015\\nriz dec -65 if msg < -3858\\nlyr inc 684 if omz >= -867\\ntj dec 642 if j != 2833\\nriz inc -100 if lzd < 4025\\ny dec -178 if lzd <= 4024\\nf dec 614 if y > 1840\\nkd dec -708 if kd == -4592\\nm dec -324 if x <= 15\\ngub dec -402 if kd > -3893\\nomz inc 27 if zv > 395\\nbxy inc 323 if msg == -3865\\nucy inc -74 if i <= 1499\\nkjn inc 969 if yp >= -4016\\nlyr inc -253 if n == -1266\\nmsg inc -109 if riz == 111\\nmsg dec -216 if m > 995\\nkd dec 767 if t >= 1726\\nlyr inc 689 if omz <= -843\\nyp inc -108 if yp >= -4001\\ni dec -696 if ucy == -1966\\ne inc -230 if gm >= -2197\\nomz inc -695 if msg != -3749\\ny dec -658 if ic >= 1430\\ny dec -933 if ucy == -1972\\nm dec -207 if tj < -2664\\ngub inc -537 if yp >= -4018\\nmsg inc 324 if kjn > -2489\\ney dec 165 if n > -1275\\ndjq inc 738 if zv <= 403\\nm inc -432 if j <= 2848\\nic inc -881 if omz < -1537\\ny inc 159 if gub == 1879\\nkjn inc 236 if djq == 1130\\ni dec -648 if djq > 1122\\nlzd dec -793 if j == 2838\\nbxy dec -33 if j != 2845\\nucy dec 290 if kjn >= -2257\\nmsg inc -81 if djq == 1130\\nt dec -466 if djq < 1129\\ndjq dec 402 if tj == -2670\\ngm inc -693 if lzd != 4022\\nj dec -327 if zv < 403\\nf dec 978 if djq <= 728\\ndjq inc -35 if y >= 1837\\nmsg inc -609 if t == 1734\\ntj inc 64 if n == -1266\\nf dec 465 if t != 1727\\nf dec -48 if omz >= -1553\\nkd dec -533 if y < 1850\\nt inc 959 if y != 1850\\nyp inc 764 if i <= 2837\\nlyr dec 822 if bxy == 2334\\nmsg inc 723 if m > 768\\ndjq dec -846 if ic >= 555\\nn dec 17 if ic < 551\\nm dec -661 if kjn != -2254\\ntj dec -975 if f != 3334\\nbxy inc -920 if i != 2844\\ne inc -222 if x == 15\\nlzd dec -413 if yp > -3241\\ni inc 953 if y <= 1849\\nriz inc -675 if kd != -4112\\nzv dec 433 if e >= -3450\\nbxy inc -302 if gub >= 1870\\nx inc -645 if zv < -37\\nomz inc -471 if kd >= -4115\\nbxy dec 450 if riz >= -573\\nomz dec 274 if e != -3452\\nf dec -92 if i >= 3786\\ney inc -10 if f < 3419\\ndjq inc 120 if lzd > 4027\\nlzd inc 360 if yp >= -3246\\nn inc 175 if djq < 820\\ntj dec -641 if gm <= -2889\\ntj inc -3 if lzd != 4393\\nlzd inc 116 if msg == -3725\\ndjq inc -421 if kd < -4110\\ne inc -509 if gm != -2880\\nomz inc -878 if bxy >= 655\\nkjn dec -877 if djq < 400\\nucy inc -697 if yp < -3237\\nucy inc -656 if gub <= 1874\\ny dec 642 if msg <= -3735\\nkjn dec 679 if djq <= 385\\ney inc -768 if gm != -2898\\nic dec -433 if kjn == -1387\\nx inc -150 if t < 2699\\nic inc 89 if j < 3175\\nm dec -623 if riz != -565\\nmsg dec -165 if omz != -2693\\nomz inc -668 if djq != 390\\ntj dec -812 if riz <= -557\\nzv dec 563 if f <= 3430\\nriz dec -319 if lzd == 4518\\ny dec -58 if i == 3789\\nic dec 166 if riz != -562\\nic inc -587 if zv != -603\\nriz dec -462 if ey != 664\\ngub inc 153 if ucy <= -3604\\nt dec -106 if ey <= 658\\nmsg inc -821 if zv < -593\\ni inc -340 if e <= -3955\\ntj dec -771 if djq < 388\\nic dec -437 if n < -1106\\ne inc -273 if lyr == -2065\\nbxy dec -912 if m > 2055\\nn dec -215 if gm == -2889\\nyp inc 716 if e == -4230\\nj inc 548 if gub > 2024\\nf dec -77 if x <= -126\\nomz dec -487 if kd < -4127\\nmsg inc -384 if ic <= 321\\nj dec 97 if t > 2797\\ni dec -197 if x < -135\\nlzd dec 491 if lzd >= 4503\\nucy inc -338 if f <= 3508\\ntj dec -932 if msg == -4765\\ny dec 273 if omz == -3365\\ny dec 50 if djq > 386\\nlzd inc 958 if m <= 2069\\ney dec 449 if m <= 2067\\nlzd dec 143 if y != 1511\\ngm inc -413 if lzd <= 4837\\nn inc 129 if ucy == -3947\\ntj inc 527 if bxy >= 1571\\nmsg inc 448 if i == 3440\\nx dec 73 if yp == -2530\\nt inc 608 if djq != 393\\ngm dec 937 if omz > -3368\\nkjn inc -435 if msg >= -4766\\nm inc 511 if m < 2067\\nt inc -410 if f >= 3498\\nx inc -137 if ucy == -3947\\nriz dec -965 if ic == 319\\nkjn inc -528 if riz <= 860\\nic dec 582 if tj != 1288\\nmsg inc 859 if m > 2564\\nf inc 573 if bxy != 1573\\nkd inc 970 if yp > -2534\\nf inc 390 if gm > -4248\\nucy dec 0 if bxy < 1582\\nkd inc 814 if zv <= -591\";","export default \"#|#..||.||....|.#..|#.|#......|.#....#..|...|#.#.#\\n#|...#..#.|..#..#...|..##.|....#|....#|.|..#......\\n......|.#.|.##.|.|.#..#.|...#...##..||...|..##|.#.\\n.###..#.#|..#.#.|...#|||.#|..#..|.|..#....#...#..|\\n.#|.|...|.#.##|.##....#..|...|...|.....#..#|...|.#\\n....||.#|.#|#..#.#|.....|.#..#.||#||.#....||#.....\\n#.#.#.|.|.|.|#.#.##|.........#.##.#|..||.##.......\\n.|.#.#...##.#.||..#|..|##...##...#.|..||.#.||....#\\n.||.|.#.#....|#|#..#|#.#..#||#..||.|....#|..|.....\\n##|.||.#...|.||..|..|.|...##.|||...|....#..|.|..|.\\n.##.|...|..|.....|#.|#.|#..|#....##|......|#.##...\\n|.###||...||..##...#.#||#.#.....|#..|#|..|.|.#.#..\\n..|#..#..|..#|||..||#.|#.......|..||......|##.....\\n##||...#.#...........#|###|...|..#|.....|.|..###..\\n.#.#...#|.|.|...|....#|.|#.#..#....##|..||..|.....\\n...#||...|##.#....|||....##|.|#|...|...#.||...|.##\\n...#.||...|.|.#...#.....#.|##|..|..#.|.#...|..|.#.\\n...|.#.###.|.||#|..#.|.#.#.........#...|...#.#|#|.\\n|..|....||.#...|#.#|.#.|.....#.###.|##.|....|.#|..\\n..#..#|.|.|.||##....#..||||...|.......#.#.......#.\\n..|....|.....#....|....#.|.#|#..||##.##......|.|#.\\n#..|.|..#.|||###|..|.#.#|.#...|...||........#..|#.\\n..#|...#..#....#....#.##...#...#.|...|......#..||.\\n#|#|...#...|...|..#|...|..#..|.#||..#.||.....|..#|\\n.||...#.|..|#||||...|..|##..|.#..|#|.##.....|#.||.\\n#|#.#...|...|......##|..#.|#.|.|....|.....|.#....#\\n...|....#..#.#|##..#..#||.....|.#|.#|#.||.||.#..#.\\n........#..##.......#...#..##......#.......#.#..|.\\n.|.|.#.||......#..||..|...##...#..#|..|.#....#|#..\\n##...|##....|||.##||..|....##.....|##||..|....#..#\\n.###.||..|..|..#||#.|#..|..#||#.#.#.##...|....#|#.\\n..##|.|..|.||...##|#||.........##|.....|#.|#..||..\\n....#...#|##.|.|.....#|...|..|....|||..|......#...\\n........|......|.|.....#.|......#......||....#.#.|\\n.....#|#..|#.||.|...#|#.....||#..|.#..|..|.#.||.#.\\n.||..|.##..#|...#....|..|..|.....||#......#|..|...\\n###.|.##..|.|##.|.||..##..#..|..#.#|.|#...##|##...\\n..##|..#..###..#.#......|.......|#.#.......|..||#|\\n#..|..|..#....|#|.......#||..#|........#..#.||.|.#\\n...#.|.#.......#|.....|................|..|#..#.|#\\n..|..#....|....|.|....#|#..#..#.###.#....#|..|.##.\\n#.|....#...|.|..|..||....||.#..#|#..#..###||.|#.#|\\n.|......|#.#|.|..#....|....#.........###..||.#.#|.\\n....###.#|.....#|...|.#.|..#...........#.......#||\\n.#|...|....#.#||..|..##|....|#.||..#.#...#.##||.#.\\n...|.||#.#...||.#|...||#.|||||..|..#..#|...#....#.\\n.##|||##.#|.|.#..#.....#.......|..|.|...|.|....#|.\\n#.#|....#.|..|.|.#..|.......#.....###.#..|......#|\\n.#.......|..#.#.#.|...#|.|...||#.||#.|........#.|.\\n..|.|##||.###.....|.|#.#|.||......#.##...|.#.#.#..\";","export default \"aecgdbf badcg fbcage gdabce be gaedb bced dfeag adbfgc abe | gedbacf be bdfcga bedfgca\\ngbeda bf fbgea dgafce fcgedb fgaec bcfa bfg baefgc dbfgace | fb cfba cbedfg afbc\\ndfegb bcfdae cagbef cedfg cde cadg fcagde dbcefag dc geacf | dc aedcfb ebadgfc cgdef\\nfgecab ebfd ed acgbd bgadfe dge dbage daefcg gfeba ecdbafg | dfbe fbaeg abegd caefdgb\\nedbg gd ebfcg cafed dfgecb gdf agcbfde dgfcab fegdc gfbaec | dbge fbaedcg gd dg\\nfdbagc egbdf dga ebcfad caedgf eadcf dafeg dagfecb gaec ga | fadebc edgaf ga eagc\\ned gefacb dfacge fedb cde ecgdfab cgbfe ecdbg edfbgc dbagc | defb edfb ebgadfc efgcb\\nafgbec adfecg ebfacgd gbfc fb ecdba aebfc debgaf fba gfcea | gadfbe gefdabc dbeac fb\\ndef degfba egfbd ef cabdge gbdfc adbeg eafbdc geaf edacgfb | bfdgae fde fde geadb\\nfbdcg edafcb dgabef cfedb eadbf ced gcbedfa beca acfgde ce | fcaged eacb bgeadf dbacef\\nbgcaf fgabd ebfgc cfa dagfce cgefbad gfcbea ca fdbgce aebc | aebc edgcbaf adfgb gbfad\\nebgad ea dbfeg bceagdf dgcba aebc edgabc cafdeg abfgdc aeg | dgcba ae ceadgf gbedf\\nbcdeg gfedab cf cfg aefc fcbdega ebfag cbgadf gbfec acbfge | fc cgf gcf fc\\ndg adcebg bcdafe dbgf gda bfade adfgbe afedg adefcgb geafc | cgaef dg caegf gfdecab\\ndgace afbegd bcgdeaf cdgfea ca cdegb cfga egdaf eacfbd cea | eca cfga gafde ca\\ncfgeab gdfeabc fcbeg fdegba ae ega gcbea dagbc fcgbed feca | degbfca bdfgeca gcbaef caef\\ncbgfa dfbcg gdb dg fdgbea edcg cfgbde cfdbe cdafbge bdeafc | dg dgb gfdeab bdg\\nfb bedgfc cbf fegadcb dfacbe bfceg fbgd gdfce dfgaec geabc | adbfce gafcdeb bcf bf\\ncegfd edagc fadgebc abfegc cf gdefbc aefbgd gedbf gfc cfdb | dcgbfe cdbf fbdc fc\\nebcag adbefc defgca fdga gefdacb egfcdb afcge fg gcf edcfa | cgfdbe adefbcg bcfadeg beacg\\ncebfa begfca efb fe ecbgad bgaec fgecbd fdcgabe gefa dabfc | ef ecabdg egbfcd cgbea\\ngdae dgebf acgebf dafcgb dg efbgda gfbeacd fdg cbdef efabg | bfcde dg gfdbace dfg\\ngfcdb fbecad abdce fcdbe dgfeab efca dfe bcadeg ef degbfca | dgabce fdgbc fgdcbae bcgdf\\nbecf ecdafb aefgd gbdcaf cdebafg cdf acbed cafed fc debagc | abdfgc gcbfad cagdeb fc\\nfabdc fcegdab be deb defbca fbacdg bfade gfcebd beca gdeaf | ebca be bcagdf gcefbd\\ndacbge cbdae gfaeb gacfbd baged acdebf bdg ecgd gd acfdebg | gd dgb edfbgac dg\\nbdfecg fgeac agdeb fadb bgeaf bgdfae bgcedaf fb cbadeg gbf | bfeag cabefgd baged fb\\necga cef becdfg bgcdeaf fcdage fedac cdabfg dfagc dbefa ec | ce cdgfbe fec cfbadg\\necbf agbcf beagc dagcf cafgeb bfg dgfbcae egbacd bf adgfeb | fgb fgb cbegfa befc\\nbdcaefg fdb bdefa edbca cgaedf gefb adfeg fb fcgbad edbafg | fdb bf ebdaf fbeadcg\\ncba ecgfa bdgc gfabcd bc abfedcg abgfd fabcg bedafc gbfead | cab bc bcgd dgcb\\nfbeadgc fdacbe abde dagfce cfbag efcda gdefbc bec be feabc | dabe be ecb cefagdb\\naf eaf debga bcedf ecgfbda acfegb adcf bfgecd ceafdb badef | dfac af fa bfdeac\\ncdaeg fedcag edfcg fgacedb gadbcf acd egacb dgfceb daef da | begca ad efacgdb cad\\ncefdg adbg ecbfag cbeafdg geafb bgedf dbf ebcadf fgdeba bd | gedbf cgdaefb dfb gdcef\\ncdfeg gecafbd bdfea bgfadc gbfaed fcead cdfbae fca ecab ca | fcbgda bcae ecab acf\\nabdcef gbacdfe fdabc fedac cfbe fde bdagfc eadcg ef edgbaf | efcb adfec fed bcedfa\\nfcadg efbgc bdf afcdegb bd cfdagb cdgbf bcda gdebfa deafcg | fbcgd agcfdb cgfad db\\nefg gbdce cgedaf bdfe acbegd egfcdb gbfec ef fdcgbae fbacg | bcdfeg fcgba egf gebcd\\ncabedf cgfed fdgeb baeg gadfb eb cgafbed edagbf fbe acbgfd | dbfacge edgfabc eb eb\\ngfecad gebdf egb bdcfe gb gadb ecfgbda egdfa defgab cfabeg | cegafd gafcbde adbg egb\\ncefbg ceb ce egbdf cagfb bgfedc gcde bdfgae bfdcae gdbfeca | ce gbcefad edgc ce\\nbacdg cbge ec fdega cafgbd gbecda cea bcdfae fabegdc cedag | eafdcbg cegadb fgdcab eca\\ngfcadb dfbe dfg egadf gbfaed agbed df dgeacb agefc dfgcabe | fd dbfe dgf bedf\\nefabg gbcfe bcaefd gc gec gcdb efdbc gfdcae ecgbfd cedbafg | cgfeb cdbfae fdaegbc ecg\\ndcfgae dcbgfa gfe fgcad afdeg fdbea ge cgdebaf fgcdbe geac | cdgabf dcgabf edfbcg fdebgc\\nefdacg dbgef defcbg be abgcde dbe cfdge gabfd dafbceg cfeb | fdgbace fdbga bgaedcf dcfeg\\ncfedgba agdbc gfdcab fg fgab fagdc dfcea becgfd adcebg fgd | fg eafdc gdbacf cadbgf\\ndgecbf agedfc af dcbae becgfda dbafe bfgdea fbegd gbaf fea | af ebfdg af abefd\\nafebgd ecbafdg bge bg gcdfe bcdg adcfge ebgcf acefb bedgcf | fecdag fcaeb beg bg\\nbfgdec de efgca cedabf agcbdf gedb dec gbdcf afbgdec gecdf | dcgfb cde fegca ed\\nfegcb ecd egda gcbda fadbec edgcafb adgbcf ed gdbec egabcd | cabedfg fgdebac de egad\\nefcbg cafeb dcafbe ebag gbf bg dgefc ebdafgc bfeacg dbcafg | bg fgecd bfg efgcd\\ncfbg aedfcb bg gdb ecbdg dbfec adcge aebgdf agcbdfe edbcgf | gbd cegbdf fegdbc gcedb\\nfcbgae bdacef aedfg gdcafbe fdebc cbda fdaeb ab eab gbdefc | ab dacb agefd gcbefa\\ngdcfb dfgceb eb feb cfaebg faced fcedgab cbedf gbde fbgacd | feb baecgfd eb eb\\nfbdaegc efcb bdgaef fbgcde dfc bfedg cbgfd egacdf abgdc fc | dgcba cgdfb bgacd gcafbed\\naegfbc gfdbac abfec efb fceg dfbcage bcdae fe eafdbg bafcg | gfedab fe bcfdga ef\\nfcdbag ecgfabd dgaecb dgcae ed cebd deg egbfda gefac gbacd | de caedg aegbfdc bdcfaeg\\nadfbc eba bedcga becda efcagdb egad gcdebf cgafbe ea dbegc | efcgdba dage bcgdafe ae\\nfbgace gafdc adge cfdegab bfedcg fgeacd gd dgf eacfg fcbda | dgcaf bdafc gacef dg\\ngdecf dge bdcgf fdbgea ebdgfca gfacde cead gecfab de cegfa | edg ed ceda ed\\ncbedf cbeafg edfagb adec bfade cbgdf ce fdecba ecbdagf fce | cbfed fec aced eacd\\ngebac ebdcagf facbdg abcgfe fbc bfgde ceaf cgbeda fc bcfeg | bcf bcf fc bfc\\nfacgeb cgfade abc abcdf ceagdfb edbcf ab cdagf abdg bgcdfa | afgdc ba gebfcad dbag\\nfbadgc defac ga egafd ebdfgca dfecba aegc adfgec defgb gda | ag gaec gdafcb dga\\nface cag gdafeb dbagce agecbf gbdcf gbcaf fbeadcg egfab ca | cga ca becfga efac\\nbcgdfa bdgca cgebad fcgb fbedac dgafb dfb faged gbadfec fb | dfbag gdfba fbcg dbf\\ndecabg be gdafebc edgfb ecbdfg ecagfd gcedf dbafg geb cebf | fgebcd dcgebaf gcbdea bfec\\ndfaecg gdbea cbd bedcfa gcfbde cbfg dfgaceb gdcfe edgbc bc | bc gcbf edgba bc\\nbgeafc gedfbac dceaf bged fdgbce cgdfb ebc bfecd fcagbd be | cfgbea bec dcgafb adbfgce\\nfde fcea dgefca dfcag abged ef eadfg cdfgeb fgbacd dcefbag | gdacfe cfea fdcbega cagfbd\\ngefdca eb bgdfa adegbc edgcf cfabdeg gfdeb bge befc gedfbc | eb fgdecb dbaegc eb\\nbgadcf aefgb gecdba dcef fgc aegdc cf cafge agdcfe agcfdbe | cf fdcabge fc cgf\\ndfegb fg fadbe gcdefba baefgd cegdaf dcabfe gcedb gef agbf | fabg gabf aefgdb fg\\neadfc defcb fdabcg dabceg gceadf ea eac eagf gbacdfe dgcfa | cae faecbdg ebgdfac eca\\nadcbgf badfce cfd fdega beafdcg cf caegbd bcgda gdcaf gbfc | cf cfgadb efcbda fabdegc\\ngcd ecdfb abfcde fgdab bcgfaed gc afedgc gbdcf egdcbf ebcg | cdfbge bcedfg gceb gc\\neadbgf cfgbe bdagf decgfa bdac ca bfagc afbcdg cag acfegbd | ca cag edcgaf abdfgec\\ngcfbea cbeadgf bdcg cd decbga abdce cabge adbfe adgecf cde | gbfeadc cbgd fcedga cbega\\nfc decf abecgf cdeafg adcfg acdbge agbfd decag cgfeadb cfa | cfa cf bgadf eacgd\\nbgafe ae afecbg gcaedb bae cfae ebfcgd cgabfed gbadf egbfc | acef egfab bae befgdc\\nafcdbg aegbd gdbace baecd gd ecgdfab dgb ecgd aebgf baedfc | efdbcag egcd efdacb gbaef\\nafcgbe gdbc agfde cbdega dc dgbeacf dce afebcd acegd baceg | aecgd cde cdgb dgbc\\nfabed egab cfgdea fae bafdgc cfbde ae bgdfa gbacfed gedafb | efbad dafeb eaf fagdcbe\\ndbca agebd gbdcea ebfcadg fgabe bdgcfe eagcdf da gad bgecd | abdc gfbaced gafedc gbfae\\ncgadb ecfadb agb bdgf dbfac bg dcgea dcgeabf fabegc bfdcga | dgfb gb cbagd gab\\nbcadf efad ef gebcafd ebf bgedc bfcgad becfd ebfagc cdbefa | cbafd ebf faed dcfab\\naegfb gabedcf fbg bf ecfb dbfgca adcgfe afbecg beagd egfac | becf decfga gfb gcafedb\\ngedbc adgcb da adg feabdg gdaefcb fcad bcagef gbafc gbadcf | dgcebfa da bdgce fgabc\\ncdgfeab fdeca bcafde cg dgc abdecg fadcg egcf afdbg ceafdg | dgc gdc ecabdfg fdaceg\\ngdbefa gfacbd dgacfe abcge eacfg dcfe egf gfcad fe gaefbcd | ef edcf egcdfa efgadcb\\ngacd fabed caebg cdbafeg cd ceabd gbdcae edc dgbefc abcgfe | dec cgda dc cde\\nbgae agedcb caged dfcaegb gcb dcbag dfaceg cfdab fecdgb bg | abcgd ageb adgcfbe beag\\ncdbgf dfbagc cfd cegbd bfdag agbefd gcfa fc fbecda fedcabg | gcfdba cfag aegcdbf gfac\\ngedca efab gcdfab bdeca ecdbagf ab befdc bad abecdf efgcdb | faecgdb ab egacd acged\\neaf agebf abfcg edga debfag ae befgd dabfecg dfebca edfgbc | ea aef agde ecdfabg\\ngdceab dcafgeb ecfgda ef fdbag fbdge fge edgcfb edbcg bcef | gef cdbgfe bedcfg ebcf\\ncdgbfa fgbec gbdefc acef ebagd ac acbdegf bca ecgba ecbgfa | bcgafd gafecb ca ca\\nbdaecg cfbg bgdef cfead feabgd gce gc bcdfgea egfcd efcbgd | dceagb befgdc gc cg\\ndfaecb gbfde gefad gbae bfegdc cafgd ae fae gcfaedb bdagfe | ea gfdaeb bfadeg bfecdga\\nefa geadf fa bcgafe cagedf dcaf badge cebgdf fcgde fbdaegc | fea afgedc fa cgfde\\ncebdga de baedgfc cdagfb ecdfg ebgfdc cdgbf dec efbd efcag | egacf bgcdf ed eacfgbd\\nedac gaebdf afdeg agedbcf acdfge ec fce egfac cebdfg afgbc | fbegcad ce gfcab cdfage\\ndfaeb edfgb ebg debcgf fedcg gebacd facgde fbgc cadbgfe gb | bfdge gbcf cdgbef fbgc\\ngc ecgfbd bagfd fgabc gcda gedbfac aefbc bfcagd fadegb gcb | efabc cgda deagfcb gbfedc\\ngbdea cgefadb gacd ged aebdf gd cgeab eacgbf fbecdg dbacge | dfgbeac dgca faebgcd cbdeag\\nfdabc bgecf dgab fbaegcd gadbcf fagced cfdabe gaf ga facbg | fdeabc gfbadc gaf cgdbeaf\\ncbagde cbdefg ad afegb eagdfc fegad dgfce acgebfd dafc agd | fcad eagdbc gda efgda\\negcfa adgbe cdfega cebgadf gebcfd bc begac bafc ecb abgfce | ceb egbdcaf edfbcg bafc\\ndfg gcad dg dcagfbe baefd fdgeac fegac dfbgec cfebag afged | ceafg agcd gadef ecdgbf\\neag ea agedbc gafced bcea abgcdef edagb bacgfd dgbac bfegd | acdbeg fagedc aecb abce\\neacgf defgcb dfc fagdebc ecgabf fd dcgefa edaf dcgaf bdcag | cegaf cgdaf eadf bcgedf\\necbda ebdf bf cfb fgbcad abedfc abegdc gfeca fbaec dbacefg | fcb egdbac badcge dceba\\neagcdfb cfgea cebd cgfdba cbgae eab acbdg eb bceagd gbfeda | abgdce agefdb edfbag fagdbc\\ndecfb gecbafd gefabd gebda efgacd gf egabcd begfd fdg bfga | fg cegabd efbdcga gf\\ngfce fed febcd ef gacfbd debac adcfebg fdabge gcedbf gbcfd | ef cgbfad fed eabcd\\nfda gedbf edgca af ceafdb efgda agedcb acgf bgdceaf acedgf | fda fbdace cgfa debfg\\ngdebca dgcab acgf cf bfdacg fdbegc bfc efbda bgcdafe dafbc | gcebdf cf fcb gebcdf\\necgfdb dbae fagdce fbeag ea afgdceb bfaedg fea bedfg cfbga | eaf dbgef ea bfaegdc\\ndaegfc dfebc cgebf cbaefd dcf ecgdfba dc gadbef aebdf adbc | gedfba gcdabef abedfc dc\\nedfbag cdeabf decafbg acfgb ac fbcaeg acf gaec fegba cbfdg | cega dbfagec ebgafd cgae\\nfgabde ecagf fcdae agfbcd ge abfgc gcbe gea dfegcba ebcagf | cfaegdb gebc acfed ge\\ndgaebc cgb fgbedac debcaf gc dgfc gcbadf afdcb fegab fbacg | gbecda cbfadge gbc fbcdae\\negdbc gbcaedf bcf afbg ebfgc bf bagcfe gecadf cefag dafbec | gbcfe dbaecf decfgab fb\\nbefgd caef fgc fdeagc ecgda dcbfag fc acebdg dfceg cgfebda | fc eagdc cf cafe\\ncgabf acegdf gbadec deaf dcage cfaeg cbgfade egf ef decfgb | cgefdb decabg adceg cgedab\\nbdce gdfce cbgafd cbdfge facdbeg fce bfaegc fgbdc ce gfeda | agdef ebgfcd fbdcg dfegc\\ngca bage ga fcedg fbcedga cagbfe cfbae cfbadg facdeb egacf | agbcdef agc gca ga\\nefgab ce adec ebagcd abdgc abgec bfacgd gbefdc efdacbg ebc | ec egacbdf agfebdc beagf\\nbe fcdeag gcebad adcbe ebcfagd eba ecbg dcfba adegc edgafb | ebgdaf ebgc dgcfea cebadg\\nfebgad geda dagecfb abdfe fbcga dbgaf efgcbd dg dgf cdfabe | gaed adge gdae gaed\\nfe gbcdaf cfdgae begdf agdbf bdgec bfegad fabgdce bfae gef | gfadbe beaf agfdec egf\\ngcbef cegabd cgebdf dbcge abgfe cf cdfb fgc gbcdefa agfdec | gcf fgc bedgac dbcf\\nfcbed dfgeab becdagf egabf fac gafcdb ca cega becfa fceagb | cdbfag cfa bfagcd cfedb\\nefabgd bgfea ebacdfg afb cfebgd ebdfg af agceb dafceb fagd | fa fbdage afb dafgeb\\nagb ba fedbgc geabcd fgead fcab fadgceb afbdg cdbfag cdgbf | abcdge ab ab agedcb\\nbfega feadbg fgbc cgfeabd cfa abcfe afcebg acdeb cf cfaedg | fgbc fac acf dgafce\\negfba fdbeag fda ebdf agbfd fd ecfadg bgcfea bacdg fgeabdc | faebgd gfeba eabgf fadgb\\ndecgbfa dcfbag bgf abdg bg ebgfca gfedc bafcd fabcde gbcfd | gb fgecd dgecf gbf\\ngcbaef cfgead fb acdbfeg acbf gcfea gebcf ebgcd degabf fgb | gaedfbc bf cgefa cbgfead\\ngfc abcfged edgbfc egafcb fc dbgefa acfb gbeaf aefgc ecagd | fc bgeaf gcf cfba\\necadfb cegbf cedbf egb edbagfc gbfdea gb feagc bdgc dgfbec | bcfed efcbg gb bg\\ngbfa fa dcbegf dagce bgdface dcafg bdfcg cfa bdgacf fdecab | fgbcda bedcfg cfa gafebdc\\nafbd gcdeb agecdf dafbeg ebfga cfgaeb fed dbgfe bafgecd fd | df afdb edf gcbed\\nfgcedb cbg bcfgead agdb dbaegc gcaeb aedcg bg ecbfa fgdeac | bg acgbe bg gb\\ndgacf bf fbd afbcd afgb dbafcg ebafdgc fadgec dfegcb cdeba | bdf fgab fbd bfga\\ndaecg dabecgf edfagb fcagd cadbgf dabfec bfgc gbadf dcf fc | bafedcg afgcd cdage dcafg\\ncgafbd beadgc fagbc afb bf gbdca gafce fbdg fgdceba efdbca | cfgbad fab abf bfa\\nfebgd cfdge fcda gbdacfe fc cagde degfac cbedga fabceg fce | ecf befdg cdefg fc\\ndcaf agecdb dgfbcea cgeadf faegb gecda dgafe fd bedcgf dfg | daegc bcdeag cfad fdgea\\ndbgea acdeb ecabdg fadce begafc abc dbgc defagcb cb fabged | agdbcfe cagbef dacgbe deacf\\nfdbge ae caedfg ade agbfcd ebca egadcfb dcabf fedcba daefb | aebc caeb dea bdefg\\nedab cda fedacb da gbdecf dcgefa fbced acfgb cbafd bacgefd | afegbcd cfebdga ad fgaecd\\nafgbd cedga cgabd cb bcdfea fgabdc cfbg gcbdefa fdageb bac | efcdabg bfegda cba abdcfe\\ngfdcab ceg adgbc aefcd gedca cebfga ge ebgd gfaebcd degcab | edfgbca eg gebd gdbe\\neafgcb afcbd egbfa dfge fedabg gd fabgd cgbeda dgb aebcdgf | dbg bafeg cegbdaf fdge\\ncefdg edbfacg cb fabced dgfba bfcgd cdb dcbagf bfadeg acgb | dfeabg abcg bceafgd cbd\\nbac bagcf acge cbdgf cafedb gafecb fbgae agbecfd ca agefdb | cage cfdgbea fgebca bafgc\\nbgeacd cbd dgcfeb db bfeac aefdgc fbcedga cfdeb gbdf efgdc | befca dcfeb gedafbc dbc\\ndbcaefg fadec abfdge gcde ecf ceagbf efadg ec acfdge cfabd | febdag fdage acdefgb cef\\nbadgfc fad eafbc fbdcge fbdge dgae eadbf abedgfc da fbdgea | edbgf gbfcde baecf dfgbce\\nce bgefad fecg bedgac dce badcf degafc deagf baegdfc cedfa | ec egfda dce cfeg\\ngadcbe afebg edgbfc fcad fgcebad fce cf fedcba faceb beacd | cef acegbd dafc adcegb\\ncagfde dbgcaf baecfd gdebcfa dce cbfde de bgefc bcdfa abde | ebdfagc abgcdf adbe cde\\nbcaedgf agecb eadgbc egda gbcfed aebcd cdabf ed fgbeca deb | fadcb edcba gcfedab adbegfc\\nfcgedba cadegb ecdgbf eabcf ga fabdgc cgbed agb dgae abecg | ebdgc abg ceafb cbfae\\nbadcg gdafb dacbgf aegbf fcegadb gcdf afd fd adcbeg defcba | df dacbg cfgd agbedc\\nbfdc cb gbfad agefbd aegfc gbc agcdbe adfcbg bedcfga cgbaf | bcg dgbaf cb egafdb\\nbfea aecdb ebdcaf cfb bf gdcfeba cefdg aedgbc bedcf afcbdg | beagdc fb befa ecdab\\ncabd egfadc cd abdfgec decfb bdgeaf cfd fbdae gcfbe ebfdac | afbcged cd bdafec dc\\ncgbdafe fdabce cbfgda gb befgca dcagb bfgd acdbf agecd gba | aebgfcd bg dbgac dfgb\\ngecdafb fe bfdea gbfda bef fceabg adbec degf agebfd afcdgb | bafedg fged fecgabd bgcafe\\nbecadf decga ca adc cgadfeb gadfeb deagb gcba decgf gabdce | cad acd egdca adc\\ndbaef dagbef cegafb baf gcfbeda fgdb baged efcda bceadg bf | bgdae fb bfcage gdefab\\ndeagbc bedfg gdafcb dcgafeb cg ecdfab cedbg gcea edabc gcd | ecga gabfcde gcea gc\\nbdfacg cbdag ecdga cebdag geab ea eda begcadf ebfadc gcfed | dea dea dabcg fbgadc\\ndcga ceafb facbg fgdacb gc fdgecb adgebfc degbaf cgf dbgaf | fcg aefbc gfc dgac\\nefacgd gabdfe bagd bdfec begacf afgbe da fad ebafd fbgeadc | eafdb agdbef bagd adbgfe\\nacdgbe eb cfbe gfebca fedagbc bge gefab gcdaef agfdb cfgea | bfcagde fgabd befc afebg\\nfgedc cfabged bc ebac acbdeg gcedb eabfgd bgc dgabe badcgf | gcb abec efabdcg beca\\nebcfgd cbdgaf dbcga facbegd da dga fcad ebcga bcfdg bgdefa | bcgae gcadb da agd\\ngdeba gbc gc abgec befdga dagcbe bdcagf cbfae cegd bfgaecd | cg dageb egcba gc\\ncgaeb acgbed cbade abefgcd fdgcba aged edbfc adb da cagfbe | agde aegfbdc da acebd\\ndeb caefgd eb eacb egdca dgcefba dgabfe gdbce cbaegd fgbcd | ecgad egbcda fgbdc ebd\\naegfbd bdeagfc facg cgebf abfecd edgcb cef fc agefb gbcefa | cgadfeb fce gcfa fbdega\\ndegafcb cdgbef efdb cbegd fgadce acfgb cfe begcf cdabeg ef | egfacbd bafcg fe caedgf\\ncbfeadg fceba bcdegf fb ebf eadcf egcab egfcda fedbac fdba | abecg gaceb fgadebc cadefb\\nefacb cb cgbe afdegb agebf abc cdebafg fcbage cafed abfdcg | bc bceg aedcf cdgbeaf\\ndabcefg geafb eadg cfedba dgeabf fdgba adf ad fbdcg eabgcf | fgdcb edag bedfca aegbf\\ngcdbefa bag dbafg aecfbd ag beafgd cfgbd aegf gabedc aedfb | ga deagbc bagfd afedbg\\ngefdba ea gcdbea adgef abef efcbgd gae egdbf cdgfa cdagbfe | gea feba abfe afbe\\nbcfag eafdbcg feagc defbgc bdgeaf gbc gbacfd adcb dgfab cb | bc dfagb ceabgfd bacd\\ncadgfe gefbd bg cdfge ebfdgc bgdafce gdb cgfb fedab gcdeab | bg dgb bedaf dbgfcae\\nafcdb dcbg eacdf agbfec gbacf bd fdb dcbgeaf befdga gabfcd | bcgaf cbfaeg cfdab bcfad\\ncebfdag cgafe cdfbe abfec fegabc fdaecg ab eab aegcdb fbag | egcaf eba gbaedc dbgfcea\\ncbdge gcbdea bdg cbaed defcg ebag gbcdeaf agbdfc bg ecafbd | ageb aebg gb fecbad\\ndgc gbcad bdafgce cedagf dfbg abcefd dg abgcfd abceg afcdb | gfdb eagbc efdbac dgc\\nfgdab egdbcaf dbagfc efbadg ge egcdfb cabfe fbage gead geb | gbe adcfgbe ebg beg\\nbgfd cbafegd dcabe gfcba dagefc gda ecfabg dg bcadfg bcgad | caebd cdgba acgdef gfecbda\";","export default \"Your ferry can make it safely to a nearby port, but it won't get much further. When you call to book another ship, you discover that no ships embark from that port to your vacation island. You'll need to get from the port to the nearest airport.\\n\\nFortunately, a shuttle bus service is available to bring you from the sea port to the airport! Each bus has an ID number that also indicates **how often the bus leaves for the airport.**\\n\\nBus schedules are defined based on a **timestamp** that measures the **number of minutes** since some fixed reference point in the past. At timestamp 0, every bus simultaneously departed from the sea port. After that, each bus travels to the airport, then various other locations, and finally returns to the sea port to repeat its journey forever.\\n\\nThe time this loop takes a particular bus is also its ID number: the bus with ID `5` departs from the sea port at timestamps `0`, `5`, `10`, `15`, and so on. The bus with ID `11` departs at `0`, `11`, `22`, `33`, and so on. If you are there when the bus departs, you can ride that bus to the airport!\\n\\nYour notes (your puzzle input) consist of two lines. The first line is your estimate of the **earliest timestamp you could depart on a bus**. The second line lists the bus IDs that are in service according to the shuttle company; entries that show x must be out of service, so you decide to ignore them.\\n\\nTo save time once you arrive, your goal is to figure out the **earliest bus you can take to the airport**. (There will be exactly one such bus.)\\n\\nFor example, suppose you have the following notes:\\n\\n```\\n939\\n7,13,x,x,59,x,31,19\\n```\\n\\nHere, the earliest timestamp you could depart is `939`, and the bus IDs in service are `7`, `13`, `59`, `31`, and `19`. Near timestamp `939`, these bus IDs depart at the times marked D:\\n\\n```\\ntime   bus 7   bus 13  bus 59  bus 31  bus 19\\n929      .       .       .       .       .\\n930      .       .       .       D       .\\n931      D       .       .       .       D\\n932      .       .       .       .       .\\n933      .       .       .       .       .\\n934      .       .       .       .       .\\n935      .       .       .       .       .\\n936      .       D       .       .       .\\n937      .       .       .       .       .\\n938      D       .       .       .       .\\n939      .       .       .       .       .\\n940      .       .       .       .       .\\n941      .       .       .       .       .\\n942      .       .       .       .       .\\n943      .       .       .       .       .\\n944      .       .       D       .       .\\n945      D       .       .       .       .\\n946      .       .       .       .       .\\n947      .       .       .       .       .\\n948      .       .       .       .       .\\n949      .       D       .       .       .\\n```\\n\\nThe earliest bus you could take is bus ID `59`. It doesn't depart until timestamp `944`, so you would need to wait `944 - 939 = 5` minutes before it departs. Multiplying the bus ID by the number of minutes you'd need to wait gives **`295`**.\\n\\n**What is the ID of the earliest bus you can take to the airport multiplied by the number of minutes you'll need to wait for that bus?**\\n\\n[comment]: <> (PART 2)\\n\\nThe shuttle company is running a contest: one gold coin for anyone that can find the earliest timestamp such that the first bus ID departs at that time and each subsequent listed bus ID departs at that subsequent minute. (The first line in your input is no longer relevant.)\\n\\nFor example, suppose you have the same list of bus IDs as above:\\n```\\n7,13,x,x,59,x,31,19\\n```\\n\\nAn `x` in the schedule means there are no constraints on what bus IDs must depart at that time.\\n\\nThis means you are looking for the earliest timestamp (called `t`) such that:\\n\\n- Bus ID `7` departs at timestamp `t`.\\n- Bus ID `13` departs one minute after timestamp `t`.\\n- There are no requirements or restrictions on departures at two or three minutes after timestamp `t`.\\n- Bus ID `59` departs four minutes after timestamp `t`.\\n- There are no requirements or restrictions on departures at five minutes after timestamp t.\\n- Bus ID `31` departs six minutes after timestamp `t`.\\n- Bus ID `19` departs seven minutes after timestamp `t`.\\n\\nThe only bus departures that matter are the listed bus IDs at their specific offsets from `t`. Those bus IDs can depart at other times, and other bus IDs can depart at those times. For example, in the list above, because bus ID `19` must depart seven minutes after the timestamp at which bus ID `7` departs, bus ID `7` will always **also** be departing with bus ID `19` at seven minutes after timestamp `t`.\\n\\nIn this example, the earliest timestamp at which this occurs is **`1068781`**:\\n\\n```\\ntime     bus 7   bus 13  bus 59  bus 31  bus 19\\n1068773    .       .       .       .       .\\n1068774    D       .       .       .       .\\n1068775    .       .       .       .       .\\n1068776    .       .       .       .       .\\n1068777    .       .       .       .       .\\n1068778    .       .       .       .       .\\n1068779    .       .       .       .       .\\n1068780    .       .       .       .       .\\n1068781    D       .       .       .       .\\n1068782    .       D       .       .       .\\n1068783    .       .       .       .       .\\n1068784    .       .       .       .       .\\n1068785    .       .       D       .       .\\n1068786    .       .       .       .       .\\n1068787    .       .       .       D       .\\n1068788    D       .       .       .       D\\n1068789    .       .       .       .       .\\n1068790    .       .       .       .       .\\n1068791    .       .       .       .       .\\n1068792    .       .       .       .       .\\n1068793    .       .       .       .       .\\n1068794    .       .       .       .       .\\n1068795    D       D       .       .       .\\n1068796    .       .       .       .       .\\n1068797    .       .       .       .       .\\n```\\n\\nIn the above example, bus ID `7` departs at timestamp `1068788` (seven minutes after `t`). This is fine; the only requirement on that minute is that bus ID `19` departs then, and it does.\\n\\nHere are some other examples:\\n\\n- The earliest timestamp that matches the list `17,x,13,19` is **`3417`**.\\n- `67,7,59,61` first occurs at timestamp **`754018`**.\\n- `67,x,7,59,61` first occurs at timestamp **`779210`**.\\n- `67,7,x,59,61` first occurs at timestamp **`1261476`**.\\n- `1789,37,47,1889` first occurs at timestamp **`1202161486`**.\\n\\nHowever, with so many bus IDs in your list, surely the actual earliest timestamp will be larger than `100000000000000`!\\n\\n**What is the earliest timestamp such that all of the listed bus IDs depart at offsets matching their positions in the list?**\";","export default \"You receive a signal directly from the CPU. Because of your recent assistance with [jump instructions](https://adventofcode.com/2017/day/5), it would like you to compute the result of a series of unusual register instructions.\\n\\nEach instruction consists of several parts: the register to modify, whether to increase or decrease that register's value, the amount by which to increase or decrease it, and a condition. If the condition fails, skip the instruction without modifying the register. The registers all start at `0`. The instructions look like this:\\n\\n```\\nb inc 5 if a > 1\\na inc 1 if b < 5\\nc dec -10 if a >= 1\\nc inc -20 if c == 10\\n```\\n\\nThese instructions would be processed as follows:\\n\\n- Because `a` starts at `0`, it is not greater than `1`, and so `b` is not modified.\\n- `a` is increased by `1` (to `1`) because `b` is less than `5` (it is `0`).\\n- `c` is decreased by `-10` (to `10`) because `a` is now greater than or equal to `1` (it is `1`).\\n- `c` is increased by `-20` (to `-10`) because `c` is equal to `10`.\\n\\nAfter this process, the largest value in any register is `1`.\\n\\nYou might also encounter `<=` (less than or equal to) or `!=` (not equal to). However, the CPU doesn't have the bandwidth to tell you what all the registers are named, and leaves that to you to determine.\\n\\n**What is the largest value in any register** after completing the instructions in your puzzle input?\\n\\n[comment]: <> (PART 2)\\n\\nTo be safe, the CPU also needs to know the **highest value held in any register during this process** so that it can decide how much memory to allocate to these operations. For example, in the above instructions, the highest value ever held was `10` (in register `c` after the third instruction was evaluated).\";","export default \"The small crab challenges you to a game! The crab is going to mix up some cups, and you have to predict where they'll end up.\\n\\nThe cups will be arranged in a circle and labeled **clockwise** (your puzzle input). For example, if your labeling were `32415`, there would be five cups in the circle; going clockwise around the circle from the first cup, the cups would be labeled `3`, `2`, `4`, `1`, `5`, and then back to 3 again.\\n\\nBefore the crab starts, it will designate the first cup in your list as the **current cup**. The crab is then going to do **100 moves**.\\n\\nEach move, the crab does the following actions:\\n\\n- The crab picks up the **three cups** that are immediately **clockwise** of the **current cup**. They are removed from the circle; cup spacing is adjusted as necessary to maintain the circle.\\n- The crab selects a **destination cup**: the cup with a **label** equal to the **current cup's** label minus one. If this would select one of the cups that was just picked up, the crab will keep subtracting one until it finds a cup that wasn't just picked up. If at any point in this process the value goes below the lowest value on any cup's label, it **wraps around** to the highest value on any cup's label instead.\\n- The crab places the cups it just picked up so that they are **immediately clockwise** of the destination cup. They keep the same order as when they were picked up.\\n- The crab selects a new current cup: the cup which is immediately clockwise of the current cup.\\n\\nFor example, suppose your cup labeling were `389125467`. If the crab were to do merely 10 moves, the following changes would occur:\\n\\n```\\n-- move 1 --\\ncups: (3) 8  9  1  2  5  4  6  7 \\npick up: 8, 9, 1\\ndestination: 2\\n\\n-- move 2 --\\ncups:  3 (2) 8  9  1  5  4  6  7 \\npick up: 8, 9, 1\\ndestination: 7\\n\\n-- move 3 --\\ncups:  3  2 (5) 4  6  7  8  9  1 \\npick up: 4, 6, 7\\ndestination: 3\\n\\n-- move 4 --\\ncups:  7  2  5 (8) 9  1  3  4  6 \\npick up: 9, 1, 3\\ndestination: 7\\n\\n-- move 5 --\\ncups:  3  2  5  8 (4) 6  7  9  1 \\npick up: 6, 7, 9\\ndestination: 3\\n\\n-- move 6 --\\ncups:  9  2  5  8  4 (1) 3  6  7 \\npick up: 3, 6, 7\\ndestination: 9\\n\\n-- move 7 --\\ncups:  7  2  5  8  4  1 (9) 3  6 \\npick up: 3, 6, 7\\ndestination: 8\\n\\n-- move 8 --\\ncups:  8  3  6  7  4  1  9 (2) 5 \\npick up: 5, 8, 3\\ndestination: 1\\n\\n-- move 9 --\\ncups:  7  4  1  5  8  3  9  2 (6)\\npick up: 7, 4, 1\\ndestination: 5\\n\\n-- move 10 --\\ncups: (5) 7  4  1  8  3  9  2  6 \\npick up: 7, 4, 1\\ndestination: 3\\n\\n-- final --\\ncups:  5 (8) 3  7  4  1  9  2  6 \\n```\\n\\nIn the above example, the cups' values are the labels as they appear moving clockwise around the circle; the **current cup** is marked with `( )`.\\n\\nAfter the crab is done, what order will the cups be in? Starting **after the cup labeled `1`**, collect the other cups' labels clockwise into a single string with no extra characters; each number except 1 should appear exactly once. In the above example, after 10 moves, the cups clockwise from `1` are labeled `9`, `2`, `6`, `5`, and so on, producing `92658374`. If the crab were to complete all 100 moves, the order after cup 1 would be 67384529.\\n\\nUsing your labeling, simulate 100 moves. **What are the labels on the cups after cup 1?**\\n\\n[comment]: <> (PART 2)\\n\\nDue to what you can only assume is a mistranslation (you're not exactly fluent in Crab), you are quite surprised when the crab starts arranging **many** cups in a circle on your raft - **one million** (`1000000`) in total.\\n\\nYour labeling is still correct for the first few cups; after that, the remaining cups are just numbered in an increasing fashion starting from the number after the highest number in your list and proceeding one by one until one million is reached. (For example, if your labeling were `54321`, the cups would be numbered `5`, `4`, `3`, `2`, `1`, and then start counting up from `6` until one million is reached.) In this way, every number from one through one million is used exactly once.\\n\\nAfter discovering where you made the mistake in translating Crab Numbers, you realize the small crab isn't going to do merely 100 moves; the crab is going to do **ten million** (`10000000`) moves!\\n\\nThe crab is going to hide your *stars* - one each - under the **two cups that will end up immediately clockwise of cup `1`**. You can have them if you predict what the labels on those cups will be when the crab is finished.\\n\\nIn the above example (`389125467`), this would be `934001` and then `159792`; multiplying these together produces **`149245887792`**.\\n\\nDetermine which two cups will end up immediately clockwise of cup `1`. **What do you get if you multiply their labels together?**\";","export default \"4,1,1,4,1,2,1,4,1,3,4,4,1,5,5,1,3,1,1,1,4,4,3,1,5,3,1,2,5,1,1,5,1,1,4,1,1,1,1,2,1,5,3,4,4,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,5,1,1,1,4,1,2,3,5,1,2,2,4,1,4,4,4,1,2,5,1,2,1,1,1,1,1,1,4,1,1,4,3,4,2,1,3,1,1,1,3,5,5,4,3,4,1,5,1,1,1,2,2,1,3,1,2,4,1,1,3,3,1,3,3,1,1,3,1,5,1,1,3,1,1,1,5,4,1,1,1,1,4,1,1,3,5,4,3,1,1,5,4,1,1,2,5,4,2,1,4,1,1,1,1,3,1,1,1,1,4,1,1,1,1,2,4,1,1,1,1,3,1,1,5,1,1,1,1,1,1,4,2,1,3,1,1,1,2,4,2,3,1,4,1,2,1,4,2,1,4,4,1,5,1,1,4,4,1,2,2,1,1,1,1,1,1,1,1,1,1,1,4,5,4,1,3,1,3,1,1,1,5,3,5,5,2,2,1,4,1,4,2,1,4,1,2,1,1,2,1,1,5,4,2,1,1,1,2,4,1,1,1,1,2,1,1,5,1,1,2,2,5,1,1,1,1,1,2,4,2,3,1,2,1,5,4,5,1,4\";","var isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    isCallable(NewTarget = dummy.constructor) &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n","export default \"y=187, x=403..431\\ny=1625, x=486..493\\nx=554, y=59..61\\nx=491, y=423..430\\ny=1308, x=436..455\\ny=283, x=467..477\\nx=383, y=833..848\\nx=420, y=1080..1081\\nx=546, y=1095..1099\\nx=479, y=520..534\\ny=1262, x=429..446\\nx=472, y=1563..1577\\nx=560, y=663..676\\ny=1496, x=410..427\\ny=67, x=504..506\\ny=1164, x=555..563\\nx=506, y=1420..1422\\ny=354, x=441..456\\nx=504, y=246..258\\nx=556, y=1531..1547\\ny=965, x=512..515\\ny=648, x=478..504\\nx=594, y=763..773\\nx=585, y=696..707\\nx=565, y=1256..1264\\nx=585, y=1804..1817\\nx=549, y=1347..1357\\nx=435, y=555..580\\ny=715, x=494..498\\ny=1577, x=452..472\\nx=488, y=228..250\\nx=592, y=821..841\\ny=1023, x=503..507\\nx=468, y=1631..1641\\nx=409, y=443..455\\nx=402, y=1479..1489\\nx=387, y=666..685\\nx=476, y=329..342\\nx=479, y=1499..1511\\nx=380, y=1364..1380\\nx=447, y=1005..1032\\nx=526, y=1069..1081\\nx=388, y=553..580\\ny=430, x=487..491\\nx=442, y=264..269\\nx=406, y=1242..1249\\nx=441, y=1114..1137\\nx=381, y=93..95\\ny=535, x=434..453\\nx=368, y=1209..1236\\ny=465, x=508..513\\nx=438, y=1613..1615\\ny=1042, x=388..406\\ny=1177, x=471..495\\nx=414, y=738..757\\nx=382, y=858..860\\nx=501, y=1538..1540\\ny=747, x=527..545\\nx=430, y=1609..1620\\ny=1385, x=561..582\\ny=1523, x=518..524\\nx=501, y=124..135\\nx=446, y=926..950\\nx=361, y=1809..1821\\nx=400, y=350..352\\nx=375, y=1790..1801\\nx=398, y=1730..1740\\nx=508, y=322..326\\nx=404, y=169..171\\nx=553, y=826..830\\nx=471, y=1296..1304\\nx=567, y=1297..1299\\nx=532, y=1423..1427\\ny=1167, x=515..535\\ny=93, x=571..588\\nx=495, y=283..296\\nx=436, y=1078..1094\\nx=578, y=833..851\\ny=293, x=539..544\\nx=453, y=1174..1177\\ny=598, x=431..433\\nx=390, y=960..964\\nx=566, y=163..167\\nx=583, y=1704..1713\\nx=394, y=1312..1322\\ny=1124, x=526..552\\nx=411, y=1226..1237\\nx=448, y=1529..1531\\nx=478, y=1541..1550\\nx=515, y=863..875\\ny=1224, x=420..445\\nx=367, y=788..803\\ny=1357, x=549..552\\nx=564, y=1786..1795\\nx=491, y=352..359\\ny=167, x=566..587\\ny=982, x=466..486\\nx=433, y=1711..1721\\ny=246, x=384..393\\nx=508, y=628..640\\nx=437, y=373..382\\nx=574, y=1776..1798\\nx=582, y=461..481\\nx=410, y=862..864\\ny=321, x=383..395\\ny=1553, x=465..484\\ny=1426, x=443..515\\ny=580, x=388..398\\nx=468, y=136..162\\ny=379, x=383..385\\nx=491, y=265..276\\nx=549, y=646..658\\nx=476, y=905..929\\nx=406, y=1037..1042\\nx=536, y=1423..1427\\nx=405, y=71..75\\nx=574, y=491..503\\ny=1110, x=402..405\\ny=769, x=366..374\\ny=1247, x=521..523\\nx=446, y=1174..1177\\nx=505, y=429..434\\nx=575, y=400..404\\nx=470, y=16..19\\ny=1032, x=428..447\\ny=618, x=466..492\\nx=470, y=56..84\\ny=928, x=451..454\\nx=434, y=1667..1681\\nx=474, y=1654..1656\\ny=1177, x=564..571\\ny=258, x=504..522\\nx=472, y=476..478\\ny=387, x=474..488\\nx=449, y=265..269\\ny=1638, x=474..476\\nx=444, y=451..479\\ny=1236, x=368..370\\nx=516, y=686..707\\nx=527, y=604..614\\nx=534, y=883..897\\ny=1487, x=439..466\\nx=496, y=1452..1455\\nx=400, y=195..209\\ny=1599, x=539..542\\nx=569, y=756..767\\nx=486, y=525..531\\ny=342, x=476..547\\nx=374, y=750..769\\nx=549, y=357..362\\nx=403, y=180..187\\ny=676, x=557..560\\ny=171, x=404..413\\ny=1353, x=564..568\\nx=512, y=962..965\\nx=545, y=1367..1380\\nx=576, y=474..478\\nx=430, y=118..132\\nx=526, y=1294..1304\\nx=527, y=1568..1582\\ny=382, x=411..437\\nx=385, y=515..526\\nx=383, y=983..985\\ny=1641, x=468..487\\nx=522, y=1705..1715\\ny=30, x=530..553\\nx=562, y=1289..1297\\nx=397, y=162..174\\ny=722, x=397..399\\ny=1324, x=458..460\\nx=532, y=1785..1800\\ny=1094, x=400..424\\nx=476, y=1541..1550\\nx=563, y=1063..1080\\nx=532, y=1309..1318\\nx=398, y=1748..1760\\nx=579, y=1244..1246\\ny=1023, x=513..530\\nx=561, y=779..792\\nx=530, y=1729..1740\\ny=318, x=479..482\\nx=480, y=214..217\\nx=410, y=1484..1496\\nx=403, y=518..523\\ny=1092, x=497..501\\nx=548, y=1594..1609\\ny=1249, x=464..472\\nx=526, y=1311..1321\\ny=1048, x=577..583\\nx=414, y=820..825\\nx=425, y=731..739\\nx=471, y=799..816\\nx=528, y=567..577\\nx=470, y=1124..1142\\ny=524, x=436..456\\ny=1796, x=406..417\\nx=389, y=444..455\\nx=523, y=36..50\\nx=521, y=1785..1800\\nx=568, y=1627..1638\\nx=441, y=1018..1023\\nx=532, y=1337..1339\\nx=438, y=70..88\\ny=1729, x=549..552\\ny=1547, x=556..567\\nx=535, y=1679..1685\\nx=526, y=588..592\\ny=1230, x=541..552\\ny=25, x=493..513\\ny=518, x=459..462\\ny=892, x=543..547\\ny=1388, x=585..589\\nx=527, y=733..747\\ny=1143, x=569..580\\nx=498, y=1096..1112\\ny=572, x=535..538\\ny=1821, x=361..383\\ny=1217, x=384..386\\nx=534, y=949..956\\nx=489, y=680..689\\ny=64, x=425..443\\ny=132, x=428..430\\nx=464, y=472..483\\nx=414, y=701..717\\nx=441, y=326..354\\ny=296, x=495..500\\nx=522, y=377..388\\nx=502, y=501..515\\nx=531, y=529..531\\nx=409, y=514..526\\nx=383, y=379..382\\nx=376, y=919..938\\nx=506, y=67..69\\ny=358, x=566..569\\ny=919, x=560..581\\nx=374, y=1167..1175\\nx=406, y=1505..1518\\ny=26, x=538..543\\ny=217, x=480..487\\nx=375, y=1348..1350\\nx=406, y=1796..1798\\nx=586, y=310..314\\nx=413, y=152..154\\nx=445, y=1210..1224\\nx=474, y=1635..1638\\nx=446, y=1243..1262\\ny=1174, x=420..424\\nx=582, y=778..792\\ny=648, x=552..573\\nx=552, y=1213..1230\\nx=376, y=585..592\\ny=1505, x=482..502\\nx=569, y=338..358\\nx=398, y=552..580\\nx=582, y=686..691\\nx=533, y=140..156\\nx=398, y=959..964\\ny=1139, x=482..486\\nx=466, y=1616..1618\\nx=474, y=1296..1304\\nx=458, y=1322..1324\\nx=494, y=1756..1784\\nx=398, y=700..702\\ny=190, x=513..517\\nx=535, y=569..572\\ny=209, x=435..441\\nx=404, y=1307..1328\\nx=411, y=1733..1737\\ny=703, x=540..560\\ny=269, x=442..449\\nx=538, y=1028..1038\\nx=407, y=692..708\\nx=503, y=1350..1360\\nx=425, y=495..496\\ny=398, x=494..515\\ny=409, x=549..561\\nx=513, y=465..468\\nx=587, y=1227..1251\\nx=482, y=174..179\\ny=1343, x=441..443\\nx=462, y=869..871\\nx=508, y=875..896\\ny=1250, x=515..531\\ny=1677, x=459..485\\nx=557, y=663..676\\nx=526, y=100..114\\ny=304, x=365..369\\ny=420, x=492..513\\nx=577, y=51..62\\ny=567, x=446..448\\ny=1342, x=511..538\\nx=449, y=137..162\\nx=522, y=1008..1018\\nx=443, y=1552..1576\\nx=448, y=925..950\\ny=1731, x=549..552\\ny=1264, x=565..579\\nx=389, y=750..758\\ny=1237, x=405..411\\nx=443, y=956..972\\ny=518, x=400..403\\nx=520, y=1048..1062\\ny=1041, x=530..547\\nx=416, y=1465..1474\\ny=1402, x=451..506\\nx=452, y=1563..1577\\nx=574, y=1020..1036\\nx=439, y=1018..1023\\ny=1798, x=574..593\\nx=566, y=614..618\\ny=236, x=511..525\\nx=422, y=452..473\\nx=520, y=268..273\\nx=535, y=1018..1020\\ny=295, x=563..578\\nx=431, y=542..548\\ny=109, x=515..518\\nx=376, y=1208..1224\\ny=1226, x=492..515\\ny=792, x=561..582\\nx=499, y=352..359\\ny=414, x=462..472\\nx=567, y=1531..1547\\ny=798, x=526..530\\nx=542, y=1717..1740\\nx=487, y=214..217\\nx=540, y=140..156\\ny=534, x=479..502\\nx=535, y=1629..1633\\ny=471, x=502..528\\nx=559, y=285..297\\ny=389, x=507..509\\ny=326, x=508..519\\nx=447, y=1301..1305\\nx=461, y=1359..1372\\nx=465, y=1544..1553\\nx=385, y=379..382\\nx=453, y=1528..1531\\ny=851, x=488..498\\nx=587, y=395..408\\nx=476, y=1195..1203\\nx=538, y=86..98\\ny=1620, x=430..447\\nx=402, y=1772..1775\\nx=386, y=1647..1671\\nx=572, y=1686..1697\\nx=384, y=427..450\\ny=408, x=567..587\\nx=591, y=311..314\\ny=50, x=506..523\\ny=781, x=459..478\\nx=524, y=1275..1287\\ny=328, x=423..431\\nx=559, y=378..380\\nx=399, y=1059..1068\\ny=710, x=494..498\\nx=540, y=689..703\\nx=376, y=501..508\\ny=1802, x=469..484\\ny=920, x=532..551\\nx=451, y=836..860\\ny=841, x=585..592\\nx=389, y=977..984\\nx=554, y=1630..1633\\ny=258, x=462..479\\nx=434, y=1461..1465\\ny=446, x=400..402\\nx=517, y=584..597\\nx=428, y=1005..1032\\ny=1062, x=520..537\\ny=927, x=408..428\\ny=637, x=419..422\\nx=569, y=1227..1251\\nx=473, y=689..696\\ny=350, x=400..408\\ny=1778, x=387..412\\nx=551, y=63..65\\nx=513, y=171..190\\nx=458, y=1611..1621\\nx=477, y=833..857\\ny=119, x=472..493\\ny=1329, x=452..466\\ny=250, x=413..415\\nx=515, y=1153..1167\\nx=558, y=1476..1499\\ny=473, x=422..435\\nx=414, y=339..355\\nx=466, y=975..982\\nx=448, y=567..570\\ny=1427, x=532..536\\nx=551, y=87..98\\ny=708, x=391..407\\nx=440, y=1613..1615\\nx=385, y=1428..1435\\ny=385, x=544..573\\nx=387, y=1768..1778\\ny=1076, x=538..543\\nx=557, y=420..423\\nx=559, y=821..833\\nx=386, y=1411..1424\\nx=419, y=875..893\\ny=588, x=403..417\\nx=421, y=1591..1601\\nx=499, y=157..163\\nx=515, y=1292..1299\\nx=388, y=659..663\\ny=717, x=412..414\\nx=521, y=557..567\\nx=417, y=1796..1798\\ny=1697, x=489..505\\ny=1501, x=382..391\\ny=250, x=488..491\\nx=579, y=1256..1264\\nx=443, y=1413..1426\\nx=489, y=285..299\\nx=535, y=201..206\\nx=434, y=648..671\\ny=234, x=511..525\\nx=401, y=494..496\\ny=1460, x=549..555\\nx=405, y=47..65\\ny=934, x=406..421\\nx=585, y=1361..1388\\nx=436, y=70..88\\nx=477, y=261..283\\ny=1776, x=439..452\\nx=581, y=518..526\\nx=425, y=118..138\\nx=493, y=452..476\\nx=569, y=833..851\\nx=399, y=721..722\\nx=412, y=701..717\\nx=509, y=81..95\\nx=437, y=1272..1290\\ny=688, x=410..414\\nx=555, y=1149..1164\\nx=433, y=1337..1348\\nx=415, y=242..250\\nx=489, y=309..321\\nx=454, y=923..928\\ny=978, x=547..550\\ny=1374, x=502..507\\ny=1659, x=450..452\\ny=1328, x=386..404\\nx=452, y=1476..1478\\ny=928, x=495..506\\nx=416, y=874..893\\nx=394, y=338..355\\nx=487, y=1631..1641\\nx=451, y=1434..1446\\nx=512, y=781..798\\ny=1350, x=375..377\\ny=416, x=505..507\\nx=428, y=541..548\\ny=394, x=507..509\\ny=321, x=469..489\\ny=1540, x=501..504\\ny=893, x=416..419\\nx=464, y=211..221\\nx=403, y=1060..1068\\nx=538, y=1252..1254\\nx=585, y=820..841\\nx=528, y=1652..1663\\nx=462, y=1275..1287\\nx=508, y=1238..1249\\ny=8, x=455..478\\nx=367, y=1307..1313\\ny=539, x=513..539\\nx=530, y=1010..1023\\nx=390, y=209..229\\nx=550, y=544..554\\nx=412, y=1410..1424\\ny=1601, x=438..464\\ny=127, x=575..591\\nx=369, y=157..182\\ny=1304, x=471..474\\nx=378, y=788..803\\nx=564, y=212..226\\ny=1443, x=573..583\\nx=372, y=1271..1288\\nx=373, y=431..444\\nx=392, y=1282..1284\\nx=564, y=1175..1177\\ny=752, x=519..522\\ny=333, x=372..391\\ny=1137, x=450..464\\nx=517, y=1130..1141\\ny=131, x=417..419\\nx=544, y=265..276\\ny=448, x=479..482\\nx=524, y=1705..1715\\nx=550, y=614..618\\ny=1550, x=476..478\\nx=421, y=1659..1674\\nx=478, y=626..648\\ny=1127, x=374..397\\nx=412, y=1374..1390\\nx=544, y=289..293\\nx=423, y=730..739\\nx=499, y=1605..1626\\nx=508, y=1133..1146\\nx=558, y=1717..1740\\ny=289, x=539..544\\ny=1193, x=416..432\\ny=157, x=484..486\\nx=405, y=1226..1237\\ny=449, x=400..402\\ny=483, x=464..484\\nx=495, y=1150..1177\\ny=722, x=362..379\\nx=484, y=1543..1553\\ny=1615, x=438..440\\nx=402, y=658..663\\ny=820, x=429..431\\nx=448, y=516..520\\ny=1795, x=554..564\\ny=1249, x=490..508\\ny=635, x=515..518\\nx=469, y=590..594\\nx=549, y=38..46\\ny=529, x=529..531\\nx=464, y=1588..1601\\nx=589, y=189..206\\nx=475, y=946..953\\nx=366, y=484..504\\nx=362, y=1649..1665\\nx=421, y=1457..1468\\nx=439, y=1759..1776\\ny=846, x=443..445\\nx=450, y=1643..1659\\ny=1007, x=390..417\\ny=570, x=446..448\\nx=493, y=11..25\\ny=478, x=472..474\\nx=486, y=1134..1139\\ny=1146, x=508..526\\nx=450, y=1129..1137\\ny=955, x=582..591\\ny=1080, x=563..588\\nx=555, y=156..178\\ny=62, x=577..591\\ny=254, x=511..516\\nx=482, y=1038..1042\\ny=450, x=516..596\\ny=378, x=559..561\\nx=534, y=864..875\\ny=917, x=543..545\\nx=366, y=1582..1587\\nx=446, y=1648..1651\\nx=458, y=555..580\\nx=563, y=288..295\\nx=463, y=333..346\\nx=432, y=1522..1541\\nx=492, y=410..420\\nx=570, y=189..206\\nx=405, y=976..984\\ny=34, x=427..447\\nx=441, y=1335..1343\\ny=1715, x=480..504\\nx=472, y=1233..1249\\nx=369, y=286..304\\nx=515, y=1236..1250\\ny=1798, x=406..417\\nx=469, y=1616..1618\\nx=418, y=649..671\\nx=391, y=1492..1501\\nx=414, y=1466..1474\\nx=439, y=1358..1372\\nx=462, y=250..258\\nx=488, y=1261..1264\\nx=541, y=353..367\\nx=476, y=1635..1638\\nx=428, y=835..860\\ny=975, x=371..383\\nx=377, y=604..606\\nx=549, y=398..409\\nx=459, y=779..781\\nx=570, y=148..153\\nx=442, y=1301..1305\\nx=522, y=1595..1609\\nx=502, y=1479..1505\\nx=467, y=1521..1534\\ny=1424, x=386..412\\nx=430, y=1434..1446\\nx=570, y=37..46\\nx=508, y=602..614\\ny=803, x=367..378\\nx=542, y=1599..1605\\nx=540, y=1017..1020\\nx=428, y=117..132\\nx=537, y=314..322\\nx=420, y=1688..1700\\nx=452, y=1338..1348\\nx=405, y=1772..1775\\nx=506, y=1389..1402\\ny=1478, x=452..460\\nx=574, y=1628..1638\\ny=1408, x=510..533\\nx=436, y=511..524\\nx=543, y=24..26\\nx=569, y=939..941\\nx=435, y=451..473\\nx=457, y=1650..1662\\nx=427, y=28..34\\nx=582, y=1366..1385\\nx=502, y=1370..1374\\ny=1609, x=522..548\\nx=410, y=737..757\\ny=897, x=534..554\\nx=547, y=881..892\\ny=359, x=491..499\\ny=84, x=470..475\\nx=517, y=605..617\\ny=1177, x=404..430\\ny=1714, x=419..427\\ny=256, x=407..427\\nx=535, y=1153..1167\\nx=496, y=58..72\\nx=468, y=1173..1199\\ny=1321, x=526..542\\nx=511, y=1332..1342\\nx=550, y=1521..1532\\nx=508, y=1779..1781\\nx=371, y=838..842\\nx=485, y=1674..1677\\nx=403, y=572..588\\ny=69, x=504..506\\nx=383, y=279..293\\ny=531, x=486..494\\nx=513, y=1011..1023\\nx=408, y=350..352\\ny=163, x=499..502\\nx=407, y=1283..1284\\nx=484, y=736..751\\ny=95, x=487..509\\nx=487, y=423..430\\nx=572, y=239..249\\nx=424, y=1172..1174\\nx=461, y=171..183\\ny=1715, x=522..524\\ny=1309, x=422..430\\nx=470, y=1210..1226\\ny=1487, x=527..540\\nx=527, y=1157..1160\\nx=519, y=323..326\\nx=571, y=1555..1564\\nx=505, y=1779..1781\\nx=377, y=1270..1288\\ny=153, x=566..570\\ny=11, x=405..412\\ny=65, x=405..411\\nx=374, y=1120..1127\\nx=493, y=1491..1496\\nx=537, y=1180..1182\\nx=575, y=117..127\\ny=1312, x=394..396\\nx=500, y=1452..1455\\ny=95, x=425..433\\nx=378, y=1547..1555\\ny=641, x=411..430\\nx=568, y=1335..1353\\nx=425, y=54..64\\ny=771, x=378..391\\nx=506, y=904..918\\ny=209, x=396..400\\nx=372, y=208..229\\ny=203, x=451..470\\nx=530, y=1754..1766\\ny=1297, x=545..562\\ny=1775, x=402..405\\nx=391, y=766..771\\nx=549, y=1755..1766\\ny=489, x=504..507\\ny=1020, x=535..540\\ny=1160, x=527..529\\nx=465, y=332..346\\nx=553, y=513..518\\nx=513, y=127..138\\nx=505, y=414..416\\nx=413, y=169..171\\nx=543, y=881..892\\ny=1476, x=452..460\\nx=406, y=933..934\\nx=376, y=838..842\\ny=160, x=475..493\\nx=576, y=1684..1696\\nx=507, y=414..416\\nx=422, y=144..157\\nx=437, y=686..708\\nx=468, y=1654..1656\\nx=537, y=1049..1062\\nx=414, y=1658..1674\\nx=377, y=431..444\\nx=545, y=1289..1297\\nx=464, y=1233..1249\\nx=524, y=1569..1582\\nx=406, y=1546..1555\\nx=403, y=901..908\\nx=590, y=337..357\\nx=390, y=1166..1175\\nx=494, y=525..531\\ny=109, x=390..392\\nx=386, y=1212..1217\\nx=547, y=330..342\\nx=372, y=331..333\\nx=543, y=906..917\\ny=75, x=379..405\\ny=773, x=585..594\\ny=658, x=531..549\\ny=767, x=537..569\\nx=493, y=1368..1380\\nx=389, y=1746..1757\\nx=515, y=1412..1426\\ny=1203, x=476..478\\nx=366, y=1254..1261\\ny=195, x=457..460\\ny=631, x=385..394\\nx=545, y=239..249\\nx=417, y=123..131\\ny=178, x=543..555\\nx=497, y=800..816\\ny=1685, x=535..562\\ny=1549, x=580..590\\nx=583, y=1429..1443\\ny=474, x=574..576\\nx=581, y=1589..1591\\nx=376, y=366..387\\nx=503, y=90..92\\ny=314, x=586..591\\nx=589, y=1360..1388\\nx=492, y=614..618\\nx=545, y=544..554\\ny=1446, x=430..451\\nx=519, y=1130..1141\\ny=938, x=364..376\\ny=1142, x=470..498\\nx=436, y=1293..1308\\nx=515, y=635..637\\nx=434, y=530..535\\nx=371, y=960..975\\nx=563, y=492..503\\nx=422, y=1285..1309\\ny=1036, x=558..574\\nx=451, y=923..928\\nx=430, y=1168..1177\\ny=1555, x=378..406\\ny=1246, x=577..579\\nx=517, y=1688..1700\\nx=396, y=1312..1322\\nx=542, y=842..855\\ny=1305, x=442..447\\ny=1360, x=538..558\\ny=654, x=536..538\\nx=436, y=1523..1541\\nx=507, y=1370..1374\\ny=1288, x=372..377\\nx=379, y=809..813\\ny=1654, x=468..474\\ny=1001, x=377..381\\nx=479, y=425..448\\nx=470, y=737..751\\ny=72, x=496..512\\nx=515, y=107..109\\nx=488, y=371..387\\nx=518, y=314..319\\ny=924, x=420..422\\nx=469, y=308..321\\nx=540, y=970..981\\ny=299, x=489..508\\ny=1700, x=420..517\\nx=498, y=840..851\\nx=522, y=1349..1360\\ny=1582, x=524..527\\nx=478, y=6..8\\nx=452, y=1643..1659\\ny=614, x=527..547\\nx=513, y=480..494\\nx=443, y=54..64\\ny=1313, x=362..367\\ny=739, x=423..425\\nx=518, y=556..567\\ny=434, x=497..505\\nx=591, y=117..127\\nx=385, y=618..631\\ny=428, x=528..577\\nx=580, y=1130..1143\\nx=494, y=710..715\\ny=1576, x=396..411\\nx=491, y=452..476\\ny=1217, x=569..584\\nx=593, y=518..526\\ny=663, x=388..402\\nx=520, y=929..942\\nx=498, y=710..715\\nx=549, y=1476..1499\\ny=179, x=478..482\\nx=455, y=1335..1338\\ny=1360, x=503..522\\nx=536, y=1708..1718\\nx=406, y=1601..1629\\nx=470, y=1097..1112\\nx=495, y=1491..1496\\nx=538, y=1072..1076\\ny=1326, x=436..440\\nx=462, y=13..24\\nx=439, y=1473..1487\\nx=578, y=1704..1713\\nx=412, y=1712..1721\\nx=515, y=386..398\\nx=511, y=234..236\\nx=514, y=1355..1357\\nx=417, y=988..1007\\nx=400, y=1207..1224\\ny=148, x=573..578\\nx=488, y=905..929\\nx=447, y=656..674\\nx=547, y=357..362\\nx=582, y=954..955\\ny=1224, x=376..400\\nx=583, y=731..739\\ny=696, x=458..473\\nx=394, y=367..387\\ny=297, x=534..559\\ny=1251, x=569..587\\ny=1737, x=411..425\\nx=445, y=842..846\\nx=374, y=858..860\\ny=1301, x=442..447\\ny=385, x=533..535\\nx=500, y=283..296\\nx=516, y=348..366\\ny=61, x=554..569\\nx=407, y=237..256\\nx=392, y=799..826\\nx=448, y=700..721\\nx=487, y=1520..1534\\ny=1633, x=535..554\\nx=470, y=191..203\\nx=541, y=376..388\\nx=423, y=309..328\\nx=579, y=1167..1192\\ny=671, x=418..434\\ny=450, x=368..384\\ny=908, x=403..424\\nx=534, y=1309..1318\\nx=493, y=1617..1625\\ny=1372, x=439..461\\ny=1507, x=565..569\\nx=383, y=1809..1821\\nx=526, y=1132..1146\\ny=721, x=448..466\\nx=484, y=471..483\\nx=374, y=1479..1489\\ny=1042, x=459..482\\ny=1459, x=487..508\\nx=523, y=686..707\\ny=875, x=515..534\\nx=459, y=493..518\\ny=1499, x=549..558\\ny=1347, x=397..416\\ny=24, x=538..543\\ny=1370, x=502..507\\nx=478, y=174..179\\nx=379, y=1062..1068\\nx=425, y=1789..1801\\ny=518, x=553..568\\nx=538, y=1349..1360\\nx=405, y=1107..1110\\nx=561, y=1366..1385\\nx=489, y=1692..1697\\ny=1287, x=462..524\\ny=1740, x=542..558\\nx=386, y=1746..1757\\nx=488, y=839..851\\nx=498, y=1587..1589\\nx=511, y=244..254\\nx=530, y=1030..1041\\nx=370, y=1209..1236\\nx=413, y=242..250\\nx=572, y=1296..1299\\ny=1357, x=368..383\\nx=563, y=1149..1164\\ny=1380, x=378..380\\nx=395, y=1079..1081\\nx=439, y=497..502\\nx=420, y=1172..1174\\ny=1261, x=366..373\\ny=1001, x=530..551\\nx=573, y=138..148\\ny=929, x=476..488\\ny=293, x=383..408\\ny=606, x=374..377\\nx=483, y=875..896\\nx=388, y=1038..1042\\ny=758, x=382..389\\nx=459, y=946..953\\nx=591, y=1700..1723\\nx=540, y=1479..1487\\nx=402, y=446..449\\ny=848, x=365..383\\ny=504, x=366..370\\ny=617, x=569..592\\nx=479, y=1750..1762\\nx=528, y=457..471\\ny=1018, x=522..524\\nx=420, y=1211..1224\\ny=1435, x=361..385\\nx=512, y=268..273\\nx=518, y=107..109\\ny=1094, x=436..462\\nx=569, y=1494..1507\\ny=525, x=486..494\\ny=1766, x=530..549\\nx=573, y=375..385\\ny=1182, x=534..537\\nx=566, y=666..679\\ny=679, x=549..566\\nx=425, y=1733..1737\\nx=592, y=591..617\\nx=513, y=1292..1299\\ny=972, x=428..443\\ny=702, x=398..400\\nx=521, y=1234..1247\\ny=614, x=508..510\\nx=567, y=395..408\\ny=1386, x=396..400\\nx=526, y=780..798\\ny=1635, x=474..476\\ny=404, x=575..580\\nx=427, y=1483..1496\\nx=366, y=750..769\\nx=487, y=1448..1459\\ny=1175, x=374..390\\nx=456, y=1258..1267\\nx=467, y=261..283\\ny=276, x=565..588\\nx=362, y=1306..1313\\nx=368, y=983..985\\ny=1718, x=517..536\\ny=798, x=507..512\\nx=433, y=598..600\\nx=460, y=1476..1478\\ny=617, x=501..517\\nx=444, y=398..420\\ny=46, x=549..570\\nx=379, y=1010..1024\\ny=855, x=526..542\\nx=431, y=598..600\\nx=368, y=1343..1357\\nx=382, y=750..758\\nx=530, y=1443..1467\\nx=386, y=1308..1328\\ny=1177, x=446..453\\nx=472, y=390..414\\nx=454, y=1498..1511\\ny=1153, x=389..406\\ny=1137, x=441..447\\ny=592, x=526..530\\nx=588, y=1063..1080\\ny=156, x=533..540\\nx=404, y=787..796\\nx=560, y=1804..1817\\ny=719, x=547..549\\nx=383, y=297..321\\nx=493, y=126..138\\nx=418, y=60..79\\nx=534, y=1180..1182\\nx=568, y=696..707\\ny=388, x=522..541\\nx=529, y=629..640\\ny=183, x=461..503\\nx=425, y=658..661\\nx=586, y=685..691\\nx=453, y=531..535\\nx=591, y=953..955\\nx=404, y=1242..1249\\ny=577, x=528..549\\nx=443, y=1335..1343\\nx=587, y=164..167\\ny=1496, x=493..495\\nx=560, y=689..703\\nx=401, y=819..825\\ny=1249, x=404..406\\ny=1784, x=494..514\\nx=492, y=480..494\\nx=577, y=1027..1048\\ny=1264, x=488..493\\ny=1141, x=517..519\\nx=518, y=212..221\\ny=382, x=383..385\\nx=554, y=884..897\\ny=523, x=400..403\\nx=375, y=1816..1818\\ny=22, x=369..395\\nx=507, y=483..489\\ny=1226, x=464..470\\nx=458, y=451..479\\ny=1587, x=366..371\\nx=578, y=288..295\\nx=504, y=1710..1715\\nx=574, y=337..357\\nx=482, y=306..318\\nx=567, y=1701..1723\\nx=585, y=762..773\\nx=516, y=244..254\\ny=1818, x=375..377\\nx=463, y=1780..1804\\nx=366, y=666..685\\nx=484, y=146..157\\nx=474, y=371..387\\ny=387, x=376..394\\nx=552, y=642..648\\ny=860, x=374..382\\nx=440, y=586..605\\ny=1541, x=432..436\\ny=1081, x=395..420\\ny=1651, x=442..446\\nx=454, y=890..905\\ny=468, x=508..513\\ny=941, x=569..574\\ny=1268, x=477..499\\nx=558, y=314..322\\ny=152, x=413..416\\nx=535, y=849..851\\nx=549, y=1729..1731\\ny=503, x=563..574\\nx=431, y=798..820\\nx=540, y=951..962\\nx=438, y=1588..1601\\ny=984, x=389..405\\nx=552, y=1113..1124\\ny=1589, x=481..498\\nx=574, y=803..814\\ny=1318, x=532..534\\nx=377, y=809..813\\ny=618, x=550..566\\ny=1452, x=496..500\\ny=1024, x=366..379\\nx=377, y=998..1001\\nx=538, y=1332..1342\\ny=851, x=533..535\\nx=549, y=710..719\\nx=506, y=1295..1304\\ny=226, x=564..573\\ny=221, x=464..518\\nx=439, y=656..674\\nx=584, y=1204..1217\\nx=378, y=767..771\\nx=511, y=1528..1543\\nx=532, y=909..920\\nx=552, y=1347..1357\\nx=536, y=643..654\\nx=504, y=626..648\\nx=464, y=1130..1137\\ny=1531, x=448..453\\ny=953, x=459..475\\ny=1338, x=455..477\\ny=206, x=570..589\\nx=460, y=195..200\\ny=154, x=413..416\\nx=571, y=67..93\\ny=1801, x=375..425\\nx=538, y=24..26\\nx=492, y=1527..1543\\ny=950, x=446..448\\nx=512, y=58..72\\nx=478, y=779..781\\nx=492, y=1212..1226\\nx=535, y=1520..1532\\nx=569, y=1129..1143\\nx=480, y=1649..1662\\nx=408, y=918..927\\ny=476, x=472..474\\nx=565, y=1494..1507\\nx=530, y=780..798\\nx=442, y=1649..1651\\nx=525, y=949..956\\ny=273, x=512..520\\nx=512, y=1585..1599\\nx=455, y=1293..1308\\nx=435, y=884..886\\ny=352, x=400..408\\ny=531, x=529..531\\nx=563, y=1192..1204\\nx=384, y=239..246\\ny=600, x=431..433\\nx=541, y=1214..1230\\nx=384, y=799..826\\ny=526, x=385..409\\nx=447, y=1610..1620\\ny=478, x=574..576\\ny=833, x=536..559\\ny=239, x=506..531\\ny=1068, x=379..394\\nx=465, y=833..857\\nx=477, y=1336..1338\\nx=493, y=148..160\\ny=1187, x=529..543\\nx=556, y=546..558\\nx=411, y=631..641\\nx=536, y=822..833\\ny=98, x=538..551\\ny=1671, x=386..396\\nx=510, y=602..614\\nx=397, y=1119..1127\\nx=522, y=247..258\\nx=441, y=1458..1468\\nx=459, y=1037..1042\\ny=1112, x=470..498\\nx=508, y=286..299\\nx=457, y=195..200\\nx=465, y=1259..1267\\nx=543, y=157..178\\nx=466, y=614..618\\nx=383, y=133..149\\nx=569, y=1205..1217\\nx=377, y=1816..1818\\ny=65, x=546..551\\ny=548, x=428..431\\nx=513, y=411..420\\ny=597, x=517..537\\nx=475, y=149..160\\nx=580, y=1521..1549\\nx=420, y=922..924\\ny=24, x=462..488\\ny=346, x=463..465\\nx=537, y=584..597\\nx=502, y=157..163\\nx=503, y=171..183\\nx=381, y=101..123\\nx=419, y=1714..1717\\nx=566, y=149..153\\nx=577, y=1244..1246\\nx=517, y=1585..1599\\ny=1199, x=465..468\\nx=506, y=124..135\\nx=557, y=969..981\\ny=1804, x=457..463\\nx=379, y=705..722\\ny=857, x=465..477\\ny=1422, x=466..506\\nx=424, y=1086..1094\\nx=446, y=516..520\\ny=1663, x=521..528\\nx=443, y=842..846\\ny=707, x=516..523\\ny=1601, x=421..432\\ny=814, x=546..574\\nx=561, y=397..409\\nx=504, y=1193..1204\\ny=219, x=576..583\\ny=905, x=454..469\\ny=691, x=582..586\\nx=403, y=414..417\\nx=441, y=198..209\\nx=580, y=400..404\\nx=432, y=1191..1193\\ny=826, x=384..392\\nx=533, y=849..851\\ny=149, x=366..383\\ny=1337, x=524..532\\ny=985, x=368..383\\nx=430, y=631..641\\nx=395, y=298..321\\nx=377, y=1348..1350\\ny=1180, x=534..537\\nx=466, y=1474..1487\\nx=508, y=465..468\\nx=546, y=804..814\\nx=547, y=605..614\\ny=1681, x=434..502\\nx=565, y=1589..1591\\nx=525, y=502..515\\nx=526, y=843..855\\nx=493, y=106..119\\ny=114, x=505..526\\ny=508, x=376..400\\ny=366, x=512..516\\nx=466, y=699..721\\nx=449, y=1551..1576\\nx=419, y=123..131\\nx=506, y=228..239\\ny=638, x=484..492\\nx=564, y=1335..1353\\nx=427, y=238..256\\ny=1740, x=398..530\\ny=685, x=366..387\\ny=455, x=389..409\\nx=464, y=1211..1226\\ny=964, x=390..398\\nx=549, y=1433..1460\\nx=416, y=1345..1347\\nx=503, y=1013..1023\\ny=757, x=410..414\\nx=583, y=1028..1048\\nx=583, y=217..219\\nx=462, y=1077..1094\\ny=1267, x=456..465\\ny=860, x=428..451\\nx=568, y=514..518\\ny=1348, x=375..377\\ny=1638, x=568..574\\ny=825, x=401..414\\nx=411, y=1561..1576\\nx=547, y=1031..1041\\ny=476, x=491..493\\nx=487, y=82..95\\ny=1723, x=567..591\\nx=451, y=190..203\\nx=533, y=374..385\\nx=396, y=1384..1386\\nx=461, y=91..102\\nx=512, y=982..1005\\nx=513, y=526..539\\ny=851, x=569..578\\nx=501, y=1065..1092\\nx=369, y=11..22\\ny=16, x=470..473\\nx=364, y=919..938\\nx=551, y=908..920\\ny=496, x=401..425\\ny=1717, x=419..427\\ny=554, x=545..550\\nx=462, y=883..886\\nx=381, y=1749..1760\\nx=411, y=48..65\\nx=492, y=630..638\\nx=427, y=658..661\\nx=559, y=460..481\\nx=431, y=1461..1465\\nx=455, y=7..8\\ny=723, x=488..506\\ny=79, x=414..418\\nx=433, y=687..708\\nx=569, y=59..61\\nx=563, y=202..206\\nx=425, y=587..605\\nx=414, y=668..688\\ny=1817, x=560..585\\nx=384, y=1212..1217\\ny=1760, x=381..398\\nx=392, y=900..917\\nx=427, y=1714..1717\\nx=458, y=91..102\\nx=446, y=567..570\\nx=394, y=1063..1068\\nx=433, y=93..95\\nx=462, y=390..414\\nx=546, y=63..65\\nx=530, y=990..1001\\ny=322, x=537..558\\nx=539, y=1599..1605\\nx=486, y=146..157\\nx=482, y=424..448\\nx=400, y=502..508\\ny=1072, x=457..471\\nx=525, y=234..236\\nx=406, y=1138..1153\\nx=398, y=101..123\\ny=1081, x=526..550\\nx=370, y=483..504\\nx=471, y=1151..1177\\ny=838, x=371..376\\ny=1721, x=412..433\\nx=488, y=14..24\\nx=507, y=1012..1023\\nx=514, y=1757..1784\\nx=435, y=197..209\\ny=1172, x=420..424\\ny=414, x=505..507\\ny=558, x=539..556\\ny=417, x=403..417\\ny=182, x=369..384\\nx=408, y=278..293\\nx=482, y=1479..1505\\ny=367, x=541..555\\nx=473, y=16..19\\nx=472, y=106..119\\ny=1472, x=373..385\\nx=400, y=637..653\\nx=507, y=781..798\\nx=538, y=569..572\\nx=507, y=389..394\\nx=540, y=1769..1774\\nx=391, y=693..708\\ny=826, x=447..462\\nx=392, y=104..109\\nx=400, y=446..449\\ny=592, x=376..393\\nx=428, y=917..927\\ny=707, x=568..585\\nx=531, y=1237..1250\\nx=550, y=1070..1081\\nx=564, y=1598..1599\\nx=406, y=145..157\\ny=722, x=538..556\\nx=496, y=1235..1246\\ny=917, x=385..392\\nx=538, y=713..722\\nx=447, y=1114..1137\\nx=517, y=171..190\\nx=538, y=643..654\\nx=390, y=104..109\\ny=1564, x=569..571\\nx=412, y=5..11\\ny=229, x=372..390\\nx=391, y=331..333\\ny=1357, x=514..516\\ny=1543, x=492..511\\ny=1468, x=421..441\\nx=517, y=1707..1718\\nx=515, y=1212..1226\\nx=574, y=940..941\\nx=549, y=566..577\\nx=493, y=1261..1264\\ny=981, x=540..557\\ny=942, x=520..538\\ny=630, x=484..492\\nx=471, y=1057..1072\\ny=200, x=457..460\\nx=573, y=211..226\\nx=444, y=496..502\\ny=569, x=535..538\\nx=501, y=604..617\\nx=539, y=547..558\\nx=495, y=925..928\\ny=1605, x=539..542\\ny=357, x=574..590\\nx=535, y=374..385\\ny=1322, x=394..396\\nx=409, y=1506..1518\\nx=520, y=952..962\\nx=516, y=1355..1357\\nx=529, y=1157..1160\\nx=383, y=961..975\\nx=508, y=1449..1459\\nx=560, y=1090..1102\\ny=1068, x=399..403\\ny=653, x=395..400\\nx=396, y=1562..1576\\nx=577, y=416..428\\nx=552, y=1729..1731\\nx=558, y=1019..1036\\nx=469, y=889..905\\nx=366, y=132..149\\nx=551, y=989..1001\\nx=596, y=439..450\\nx=457, y=1058..1072\\nx=384, y=156..182\\nx=562, y=1679..1685\\nx=400, y=700..702\\ny=380, x=559..561\\ny=896, x=483..508\\ny=123, x=381..398\\ny=444, x=373..377\\nx=466, y=1420..1422\\ny=494, x=492..513\\nx=438, y=869..871\\ny=594, x=443..469\\nx=504, y=67..69\\nx=539, y=289..293\\nx=374, y=603..606\\ny=661, x=425..427\\nx=429, y=798..820\\nx=512, y=348..366\\nx=523, y=1234..1247\\nx=409, y=118..138\\nx=368, y=426..450\\nx=428, y=957..972\\ny=481, x=559..582\\nx=527, y=981..1005\\nx=491, y=228..250\\nx=404, y=1167..1177\\nx=550, y=1095..1099\\nx=502, y=458..471\\nx=421, y=932..934\\nx=581, y=1684..1696\\nx=566, y=339..358\\nx=505, y=1692..1697\\ny=1348, x=433..452\\nx=509, y=389..394\\ny=1674, x=459..485\\ny=918, x=506..520\\nx=414, y=61..79\\nx=539, y=527..539\\nx=543, y=1072..1076\\nx=540, y=1091..1102\\nx=545, y=734..747\\nx=590, y=1521..1549\\ny=1591, x=565..581\\nx=513, y=12..25\\nx=396, y=196..209\\nx=361, y=1428..1435\\ny=842, x=371..376\\nx=416, y=152..154\\ny=1511, x=454..479\\nx=520, y=904..918\\nx=429, y=1244..1262\\nx=480, y=1299..1310\\ny=1254, x=538..554\\nx=581, y=914..919\\nx=440, y=1319..1326\\nx=362, y=705..722\\nx=504, y=1538..1540\\nx=373, y=1254..1261\\nx=365, y=286..304\\nx=422, y=634..637\\nx=432, y=1591..1601\\nx=383, y=1344..1357\\nx=498, y=1125..1142\\nx=569, y=1554..1564\\nx=477, y=1750..1762\\ny=1290, x=437..439\\nx=390, y=989..1007\\ny=1390, x=391..412\\nx=588, y=261..276\\nx=462, y=494..518\\ny=355, x=394..414\\ny=515, x=502..525\\nx=553, y=17..30\\nx=531, y=645..658\\ny=605, x=425..440\\nx=457, y=1781..1804\\nx=506, y=697..723\\nx=501, y=1235..1246\\nx=373, y=1444..1472\\ny=92, x=497..503\\nx=571, y=1175..1177\\nx=530, y=18..30\\nx=458, y=690..696\\nx=518, y=1520..1523\\nx=519, y=741..752\\nx=544, y=374..385\\nx=456, y=326..354\\ny=19, x=470..473\\ny=319, x=510..518\\nx=497, y=90..92\\ny=1696, x=576..581\\ny=1339, x=524..532\\nx=540, y=1028..1038\\nx=397, y=720..722\\nx=393, y=240..246\\ny=162, x=449..468\\nx=561, y=378..380\\ny=796, x=397..404\\nx=537, y=755..767\\nx=424, y=163..174\\nx=518, y=635..637\\ny=423, x=546..557\\nx=506, y=37..50\\nx=397, y=1344..1347\\nx=447, y=27..34\\nx=488, y=697..723\\nx=550, y=967..978\\nx=451, y=1389..1402\\nx=381, y=998..1001\\nx=417, y=415..417\\ny=157, x=406..422\\nx=443, y=590..594\\nx=533, y=1397..1408\\nx=452, y=1320..1329\\ny=249, x=545..572\\nx=481, y=1586..1589\\ny=520, x=446..448\\ny=1455, x=496..500\\ny=1534, x=467..487\\ny=1102, x=540..560\\ny=1310, x=460..480\\ny=138, x=493..513\\ny=1489, x=374..402\\nx=566, y=1686..1697\\ny=1465, x=431..434\\nx=365, y=834..848\\ny=102, x=458..461\\nx=569, y=591..617\\ny=1662, x=457..480\\nx=371, y=1582..1587\\ny=431, x=373..377\\nx=411, y=373..382\\nx=510, y=1397..1408\\nx=549, y=665..679\\ny=739, x=576..583\\nx=547, y=967..978\\ny=1774, x=540..547\\nx=430, y=1286..1309\\nx=462, y=821..826\\ny=1626, x=499..514\\ny=1023, x=439..441\\nx=560, y=913..919\\nx=436, y=1320..1326\\nx=573, y=642..648\\nx=574, y=474..478\\nx=417, y=572..588\\ny=1656, x=468..474\\ny=871, x=438..462\\nx=486, y=1617..1625\\nx=385, y=900..917\\nx=394, y=1602..1629\\nx=497, y=429..434\\ny=674, x=439..447\\nx=475, y=56..84\\ny=956, x=525..534\\ny=1665, x=362..371\\ny=1380, x=493..545\\nx=591, y=50..62\\nx=402, y=1108..1110\\ny=138, x=409..425\\ny=1204, x=504..563\\nx=574, y=1166..1192\\nx=499, y=1257..1268\\ny=174, x=397..424\\ny=1038, x=538..540\\nx=478, y=1194..1203\\nx=565, y=262..276\\ny=206, x=535..563\\ny=1697, x=566..572\\nx=558, y=1350..1360\\nx=480, y=1710..1715\\ny=420, x=432..444\\ny=88, x=436..438\\ny=580, x=435..458\\nx=447, y=821..826\\ny=637, x=515..518\\nx=419, y=634..637\\nx=504, y=483..489\\ny=864, x=410..417\\nx=554, y=1253..1254\\nx=573, y=1430..1443\\nx=389, y=1137..1153\\nx=479, y=306..318\\nx=452, y=1758..1776\\nx=397, y=787..796\\nx=410, y=669..688\\ny=526, x=581..593\\ny=886, x=435..462\\nx=524, y=1519..1523\\nx=543, y=1176..1187\\nx=416, y=1192..1193\\nx=555, y=1433..1460\\nx=391, y=1375..1390\\ny=479, x=444..458\\ny=1518, x=406..409\\ny=816, x=471..497\\nx=547, y=710..719\\nx=469, y=1780..1802\\nx=486, y=976..982\\ny=1384, x=396..400\\ny=135, x=501..506\\ny=1800, x=521..532\\nx=531, y=228..239\\nx=494, y=386..398\\ny=567, x=518..521\\ny=1099, x=546..550\\nx=394, y=618..631\\ny=276, x=491..544\\ny=708, x=433..437\\nx=460, y=1298..1310\\nx=502, y=1667..1681\\nx=576, y=732..739\\ny=1621, x=458..475\\nx=497, y=1066..1092\\nx=538, y=930..942\\nx=396, y=1647..1671\\nx=529, y=529..531\\nx=576, y=216..219\\ny=1467, x=515..530\\ny=751, x=470..484\\nx=474, y=476..478\\nx=484, y=1779..1802\\ny=1304, x=506..526\\nx=466, y=1319..1329\\nx=395, y=11..22\\nx=547, y=1770..1774\\ny=1762, x=477..479\\nx=431, y=309..328\\nx=412, y=1768..1778\\nx=432, y=398..420\\nx=556, y=712..722\\nx=542, y=1312..1321\\nx=515, y=962..965\\ny=1618, x=466..469\\ny=1781, x=505..508\\nx=534, y=285..297\\ny=1599, x=512..517\\ny=1192, x=574..579\\ny=1713, x=578..583\\nx=402, y=93..95\\ny=1576, x=443..449\\nx=545, y=906..917\\nx=431, y=180..187\\nx=512, y=680..689\\nx=528, y=417..428\\nx=477, y=1257..1268\\ny=1284, x=392..407\\ny=1299, x=567..572\\nx=524, y=1008..1018\\nx=546, y=420..423\\nx=371, y=1648..1665\\nx=479, y=251..258\\nx=405, y=6..11\\nx=510, y=315..319\\nx=506, y=926..928\\nx=378, y=1363..1380\\ny=689, x=489..512\\ny=362, x=547..549\\nx=524, y=1337..1339\\nx=475, y=1612..1621\\nx=425, y=92..95\\ny=1474, x=414..416\\nx=366, y=1009..1024\\nx=400, y=1384..1386\\ny=962, x=520..540\\ny=1757, x=386..389\\ny=640, x=508..529\\ny=1629, x=394..406\\ny=1005, x=512..527\\nx=505, y=101..114\\nx=529, y=1177..1187\\nx=385, y=1444..1472\\ny=1532, x=535..550\\ny=1246, x=496..501\\nx=393, y=585..592\\nx=522, y=742..752\\nx=400, y=518..523\\nx=502, y=521..534\\ny=1299, x=513..515\\nx=490, y=1237..1249\\nx=554, y=1786..1795\\ny=830, x=551..553\\nx=527, y=1479..1487\\ny=1674, x=414..421\\nx=459, y=1674..1677\\nx=460, y=1322..1324\\nx=422, y=922..924\\nx=526, y=1113..1124\\nx=417, y=862..864\\nx=551, y=826..830\\nx=484, y=630..638\\nx=465, y=1173..1199\\nx=555, y=353..367\\nx=379, y=71..75\\nx=439, y=1272..1290\\ny=502, x=439..444\\nx=558, y=1597..1599\\nx=516, y=440..450\\nx=395, y=638..653\\nx=530, y=588..592\\ny=1599, x=558..564\\nx=514, y=1605..1626\\nx=515, y=1442..1467\\ny=90, x=497..503\\nx=588, y=68..93\\nx=521, y=1652..1663\\ny=95, x=381..402\\nx=456, y=510..524\\nx=578, y=139..148\\nx=382, y=1492..1501\\nx=482, y=1134..1139\\nx=593, y=1777..1798\\ny=813, x=377..379\\nx=400, y=1086..1094\\nx=424, y=902..908\";","export default \"s11,x10/2,s5,x1/3,pl/d,x2/5,s9,x9/14,pa/i,x10/2,s12,x6/4,pk/m,x1/10,pb/o,x13/2,pn/f,x8/9,pl/k,x10/2,s15,x1/5,pd/a,x0/4,pi/m,x1/6,pp/k,x8/12,pf/e,x9/1,pg/b,x10/3,s7,x0/4,s7,x3/1,s4,x5/10,pe/a,x8/2,s8,x15/9,pc/f,x8/7,s14,pd/e,s5,x15/1,s9,x0/7,pm/p,x14/11,pi/g,x9/4,s9,x12/2,s11,pa/h,x9/11,pd/k,x5/1,s7,x9/10,s4,x15/11,pl/g,x12/8,s6,x11/7,s15,x15/13,s11,x1/4,s10,x13/3,ph/k,x5/1,pi/b,x4/11,po/g,x6/3,s13,pp/f,s7,x10/8,s13,x7/4,s13,pe/l,x9/11,pb/j,x2/0,pi/h,s4,x1/11,s7,x7/2,s11,x13/14,pn/e,x8/3,s12,x7/4,s6,x9/12,pb/g,x15/8,pm/p,x14/3,s7,x15/6,pb/e,x12/3,s12,x4/1,s13,pk/d,x14/5,pf/p,x13/4,pb/k,x9/12,s6,x4/2,s14,x13/0,s12,x14/12,pl/j,x9/3,s6,pd/a,x11/4,s11,po/b,x6/7,s1,x9/15,pj/i,x12/4,s8,x6/2,pm/n,x14/10,s5,x4/13,s11,x0/14,ph/f,x8/5,s1,x7/9,pp/b,x1/10,s6,x12/4,s1,x14/6,pa/h,x15/10,s6,x0/4,s3,x6/9,pj/n,x12/1,s13,x10/3,pa/k,x11/6,pc/p,x3/4,s11,x12/6,pf/h,s5,x13/0,s7,x7/4,s7,x11/0,s7,x2/9,s3,x5/15,s12,x7/10,pb/l,s15,x3/14,s13,pn/p,x12/0,s9,x1/15,pi/a,x5/3,pf/h,x0/15,po/l,x13/11,s10,x1/12,s3,x8/14,pf/i,x13/0,pl/k,s8,x12/4,s1,x13/0,pj/e,x3/15,s5,ph/l,x12/4,s11,x14/2,pf/e,s9,x10/9,s14,x2/8,s7,x4/10,s12,x13/5,pb/n,x4/3,pm/g,s11,x5/6,pa/k,x9/1,s8,x12/10,pp/b,x3/15,pf/n,x11/14,pk/h,x10/9,s15,x1/7,pc/e,x11/9,s5,x1/0,s14,x12/7,pk/f,x14/4,s2,x1/7,pc/a,x8/5,pl/d,x13/14,po/f,x11/0,ph/l,x5/4,s2,x11/12,s15,x7/14,s7,x4/5,s8,x3/11,pf/o,x2/10,s10,x5/13,s10,x0/15,s4,x13/2,s1,x10/1,s9,x6/3,s2,x9/12,s12,x6/11,s15,pd/e,x5/4,s10,x14/0,pi/f,s12,x1/5,s9,x0/3,s11,x11/2,pj/c,x8/9,s5,pp/n,x7/11,s1,x0/4,pg/m,s10,x5/1,s2,x12/3,s9,x10/5,pj/c,x4/7,s10,x11/14,pa/e,x8/15,s15,x14/5,pc/k,x7/3,s6,x2/15,s4,pm/d,x4/10,pa/o,s8,x2/12,s10,x4/13,pb/c,x5/3,po/f,x1/4,s14,x6/14,s6,x5/8,s8,x6/4,pb/j,x9/1,s9,x2/7,s6,x3/11,pk/d,x10/12,s2,x4/14,s8,x13/11,pe/i,x15/9,pd/b,x13/2,s1,x9/0,s10,x13/15,pn/k,x1/0,s13,x12/9,s13,x7/13,s2,x3/2,s2,x1/7,s11,x2/8,pf/e,x13/7,pa/g,x3/0,s15,x15/9,s6,x8/1,s11,pk/o,x15/6,s12,x2/9,pn/d,x10/13,pa/b,x1/8,s8,pj/e,x9/14,pk/l,x3/4,pn/m,x6/2,s11,x11/8,pg/e,x10/15,s1,x9/1,s7,x3/0,s3,x2/5,s4,pi/a,x4/8,pj/k,x0/7,s6,x4/5,pp/l,s5,ph/m,x15/9,pd/f,x13/5,s13,x15/6,pl/m,x12/9,pf/j,s3,x15/10,pg/h,x5/7,pi/f,x10/12,s2,x1/7,s12,x6/9,s15,po/m,x10/1,s15,pl/e,x7/13,s15,x6/12,pd/i,x0/7,pb/o,x12/11,pn/g,x2/14,s9,x1/13,s14,x11/12,pp/f,x2/14,s8,x13/1,pm/k,x5/3,s2,x14/6,ph/n,x9/13,s10,x7/14,pb/o,x15/12,s11,x8/10,pd/j,s13,x0/7,s3,x2/9,pl/b,x7/12,s10,pc/e,s9,x6/4,pj/a,s4,x2/8,s4,x4/14,pp/c,x8/13,s5,x12/14,s13,x8/15,pn/f,x9/11,s11,x2/10,ph/m,x4/3,pc/l,x12/8,s11,x11/3,s8,x15/12,s7,x6/8,s12,x3/2,ph/f,s15,x4/12,s5,x8/0,pb/g,x2/13,pa/l,x0/4,s11,x12/11,s2,x6/13,s13,x12/11,s3,x13/0,s5,x14/1,pn/b,x9/15,s1,x2/11,pd/m,x5/4,s5,x10/0,s13,x13/6,s1,x8/14,s2,x6/5,s9,x8/14,s2,x10/0,s9,x15/14,s7,x4/2,s4,x8/0,pn/g,x5/14,s11,x6/13,s11,x1/0,s6,pk/a,x15/5,pe/b,x9/1,s10,x2/13,s8,x12/6,s6,x9/5,s9,pk/j,x15/12,s6,x6/1,ph/c,x9/3,pp/f,s3,x8/14,ph/k,x13/10,s8,x14/15,s1,x4/5,pl/g,x3/8,s12,x11/4,s14,x3/8,s2,x9/10,s4,x6/15,po/b,x1/0,s2,x6/9,ph/i,x10/1,s5,x2/9,pb/l,x12/4,pp/d,s5,x7/10,pi/e,x2/3,s9,x4/15,s11,x6/9,s5,x12/0,s11,x4/5,s10,x12/8,pa/f,x2/6,s5,x13/11,pm/o,s7,x5/4,pl/e,x9/14,s11,x7/3,s6,x1/8,pj/a,x11/15,s15,x9/10,pc/d,x4/0,pn/i,x3/10,pg/e,s9,x7/1,s2,x11/5,pi/d,x4/10,s9,x7/15,pn/l,s1,x3/8,pk/d,x6/5,s13,pn/e,x2/12,pj/i,x8/11,s3,x2/14,s11,x12/1,pe/k,x14/15,s15,x5/6,pn/j,x15/3,po/d,x13/10,s5,x12/0,s10,x10/8,s12,ph/j,s14,x12/14,pn/b,s14,x11/13,pl/i,x5/14,s9,x9/0,pg/h,x1/2,pj/i,x6/5,s8,x11/0,s8,x6/7,s5,x13/1,pe/d,s11,pj/a,s13,x9/6,s13,x1/4,pg/f,x3/13,pi/l,x8/1,pp/e,x11/5,s14,x9/12,pg/l,x0/14,s13,x1/5,s7,x6/7,s8,x8/10,s2,x5/11,po/d,x6/8,s1,x7/5,s7,x13/0,pc/k,x2/14,s12,x8/9,s3,x10/1,s1,x8/9,pn/j,x13/11,s10,x7/12,pf/p,x8/9,s15,x14/2,s4,x6/3,s12,x13/5,s8,x10/12,s1,x11/6,pl/c,x12/4,pi/g,s2,x2/6,pn/a,x9/7,s6,x15/12,pl/f,x0/2,s6,x1/12,s2,pd/e,x0/8,pc/p,x3/9,pb/d,x0/4,s1,x13/5,s12,x9/3,s10,x10/1,pp/j,x15/7,po/n,x10/4,s10,x7/14,s1,x5/12,s9,x11/7,s14,x4/5,pc/f,x0/12,s15,x11/2,pi/k,x13/10,s4,x8/14,pa/p,s12,x6/1,s11,x3/15,s11,x4/13,s1,x7/3,s14,x2/5,s11,x1/12,pb/e,x2/6,s14,x7/12,s2,x8/14,pd/o,x11/13,pb/a,x12/8,po/j,x4/9,s4,x0/13,pl/c,x10/11,s7,x8/3,pb/d,x9/14,pf/a,x10/0,pk/i,x3/8,s7,x5/9,s6,x8/7,pe/o,s12,x9/13,s15,x6/4,pg/a,s12,x11/3,s12,x7/6,s14,x8/5,pe/i,x14/15,s3,x9/4,s12,x10/6,pj/d,x4/11,s14,x5/9,po/k,x10/1,ph/a,x7/15,s2,x0/1,s1,x14/12,po/c,x7/0,pa/g,x9/4,s4,x8/14,s9,x7/1,pd/k,x9/4,pn/f,s11,x13/15,s5,x3/5,s12,x15/13,pj/a,x7/11,s14,x0/6,s14,x5/7,s3,x0/14,pb/d,x2/1,s5,x15/13,pi/c,x2/5,pn/j,x13/0,s14,x4/10,ph/e,x13/15,s15,x5/0,s10,x8/9,po/a,x1/4,s14,x6/13,s1,pf/p,x0/4,pg/o,s12,x3/6,s13,x7/5,s11,x15/2,s8,x14/3,s9,x11/1,pl/m,x12/10,s9,x3/4,s7,x15/8,s13,x7/12,s7,x11/10,s14,pb/f,x1/13,s6,x11/4,pk/e,x13/10,s7,x14/11,s12,x12/15,pb/c,x11/2,ph/k,x7/0,s1,pn/d,s10,x2/8,s3,x12/3,pg/a,x2/5,s3,x12/14,s3,x7/5,s5,x4/0,s4,x8/7,pk/b,x5/10,s3,x9/0,s3,x3/12,s1,x1/4,pd/l,x13/10,pa/c,x9/2,pg/i,x13/1,s14,x11/4,s12,x7/13,s3,x15/6,pk/l,x10/3,pg/n,x6/14,ph/i,x15/4,s13,x11/14,pb/m,x15/8,s7,x3/14,s8,x6/7,pf/j,x14/3,s3,x7/8,s3,x11/10,s12,x2/1,s5,x4/8,s14,x11/12,s10,x3/14,pl/k,s9,x5/11,pg/e,x13/7,s3,x11/3,s8,x2/7,s11,x10/3,pa/i,x9/13,pe/h,x15/4,pk/b,x0/5,pf/o,s6,x6/1,s15,x12/15,pm/n,x3/8,pj/d,x1/9,s13,x6/13,s13,x7/12,ph/n,x6/2,s3,x5/10,s7,x15/12,s1,x4/2,pd/o,x11/0,s8,x4/10,s4,x8/6,pb/m,s1,x7/0,s7,x8/6,s6,x11/12,pf/e,x3/7,s9,x15/12,ph/o,x14/8,s1,pj/g,x12/9,s8,x4/6,s1,x8/1,po/a,x7/15,pm/e,x11/10,po/f,x5/12,pe/p,s11,x8/14,s12,x7/10,pm/h,x2/12,s3,x3/7,s14,pa/b,x13/6,pc/g,x2/9,pe/p,x10/4,s15,pk/n,x2/11,s8,x12/1,pd/b,x5/10,pi/m,x2/13,s3,x8/9,pf/j,x15/10,s8,x7/11,s8,x6/9,s1,x11/5,s4,x6/9,pn/l,x0/7,pp/j,x4/15,s2,x3/14,s5,x15/9,ph/d,x0/13,s14,x12/8,pk/n,x13/15,s11,x10/4,pi/j,x3/0,pn/k,x7/12,s7,x2/13,s13,x4/15,pj/a,x11/7,ph/i,x5/15,s12,x4/0,pa/m,x5/7,s2,x10/11,s8,pk/b,s10,x6/12,pc/g,x15/14,s1,x9/11,pj/b,x8/6,pa/m,x12/2,s15,x11/8,s6,x3/0,s9,x15/1,s6,pb/n,x14/13,s11,x8/4,s11,x12/1,s5,x4/6,s12,x12/7,s10,x9/10,s3,x13/1,s8,pj/i,x8/9,pd/l,x1/15,po/k,x9/2,s8,x8/4,ph/l,x3/11,s10,x8/1,s2,x7/2,s3,x15/3,s1,x7/5,s14,x9/6,s2,x13/7,s12,x2/8,pg/a,x11/13,s2,x9/1,pl/e,x4/6,s12,x7/3,s10,x9/10,s10,x4/7,s13,x0/6,pj/c,x12/3,s15,x6/11,s4,x15/2,pk/e,x8/10,pf/m,s14,x7/6,s3,x0/1,s7,x6/7,pb/k,s7,x9/0,ph/n,s5,x5/4,s11,x12/14,s1,x4/10,pf/l,x3/9,pd/j,x15/8,s8,x5/14,pl/n,x3/7,s7,x10/14,pp/m,x3/9,pg/c,x0/13,pl/h,x11/4,s10,x7/1,s1,x11/12,pn/o,s9,x14/1,pg/m,x11/8,ph/d,x3/6,s8,x12/0,pl/m,x9/3,pc/b,x4/14,s4,x8/7,s15,x9/4,s9,x0/12,s6,x10/5,s13,x1/14,s2,x5/8,pa/k,x4/13,pm/c,x5/8,pd/i,x15/4,s1,x9/14,s11,x6/3,pe/h,x1/4,pj/c,s12,pp/h,x8/9,s5,x10/12,s5,x2/11,pb/n,x5/10,s8,x8/12,s11,pk/c,x4/5,pn/f,x0/12,s2,x14/3,s2,x15/12,s5,x1/0,s6,pj/m,x2/4,s4,x0/6,s14,x3/14,s15,x0/10,pl/i,x5/4,s14,x6/2,s9,x15/0,s15,x14/7,po/j,x9/3,s3,x15/4,pc/l,x14/7,pk/j,x2/4,s3,x14/8,s1,x13/10,s10,x14/5,pm/d,x10/1,pb/g,x15/9,s14,x4/1,s11,x6/12,s9,x1/2,pk/p,x11/8,s3,x4/12,s4,pc/d,x3/15,pf/j,x5/2,s6,x9/0,s4,x5/13,pa/i,x3/9,s5,x5/12,s2,x9/2,s13,x5/15,s12,x8/3,s5,x12/1,ph/o,x8/11,s3,pa/e,x7/9,pf/b,x13/1,s10,x15/5,s12,pl/d,x10/6,pc/m,x14/1,s11,x3/15,pe/i,x13/14,s10,x4/9,ph/j,x0/8,s5,x7/6,pk/e,x1/9,pf/o,x15/11,s12,x3/5,s11,x4/11,s12,pi/l,x12/9,s12,x0/6,pp/j,x13/1,pe/m,x8/7,pb/f,x11/13,po/m,x5/2,pa/j,x10/15,s11,pn/f,x11/12,pj/p,x14/1,pf/a,x2/4,s10,x3/0,pb/n,x5/11,pd/j,s14,x6/15,pg/o,s1,x7/2,pi/m,x4/10,s1,x2/9,s7,x10/7,pf/k,x0/3,pm/l,x12/14,pn/e,s6,x15/6,s12,x8/10,s9,x4/6,s3,x11/14,s3,x13/3,s11,x10/14,ph/j,x3/5,s14,x6/0,s3,x9/7,pc/b,x1/4,s14,pi/h,x15/14,s12,x13/12,s10,x0/1,s13,x13/4,s15,x0/9,s14,x4/10,s1,x7/14,s4,x11/1,s14,x13/12,s7,x8/11,s14,x4/13,s8,x6/7,s12,x13/9,s3,x12/3,s5,x5/0,pl/f,s11,x14/15,s10,x11/13,pi/e,x0/8,s5,x10/4,pd/n,x12/3,pa/g,x6/4,s11,x5/8,s14,x9/7,pf/l,x8/11,s15,x14/10,s14,x13/12,s6,x14/3,pa/e,x7/11,s6,x4/1,pk/d,x2/0,pj/l,x9/8,s10,x3/11,ph/b,x6/2,s12,x5/8,pe/k,x15/7,pg/f,s11,x8/4,pk/e,x3/14,s15,x1/8,s4,x5/14,pd/a,x1/15,s8,x3/5,s3,x11/0,pj/i,x4/7,po/b,s6,x13/6,pe/g,x4/5,pl/n,x7/2,s10,x5/13,pp/g,x4/8,pi/k,x7/14,s7,x6/9,s13,x1/15,pg/a,x12/2,pl/j,x3/7,pe/h,x6/13,s9,x9/12,s12,x4/1,pa/n,x8/10,s2,x1/3,s14,x8/4,s7,x5/14,s14,x4/6,s11,x13/14,pk/p,x10/12,s3,x15/7,pg/m,x11/10,s12,x5/1,s12,x10/2,s13,x3/12,pf/a,x0/8,s9,x1/10,pe/g,x2/4,s13,x14/9,pj/c,x3/15,ph/o,x14/10,s10,x7/12,s3,x14/3,s4,x7/0,s14,x4/10,s10,x13/0,s5,x6/11,pc/g,x12/13,s3,x4/5,pe/k,x11/2,s3,x4/14,pg/c,x8/2,s7,x6/14,s6,po/p,x4/3,s7,x13/15,s12,x1/3,s5,x12/11,s5,x1/13,pi/f,x8/10,s4,x15/13,s5,x5/1,ph/n,x2/3,s15,x13/7,pf/b,x6/15,pe/k,x5/10,pl/h,x2/11,s15,x14/12,s4,x2/11,s4,pk/d,x10/12,s8,x5/2,s14,x9/10,pf/n,x11/3,pp/h,x7/4,s7,x11/13,pc/j,x15/10,pm/a,x7/1,po/j,x11/13,s4,x14/6,pk/i,x13/2,pc/p,x1/6,s5,pg/h,x12/3,pk/e,x7/1,s10,pc/l,x3/12,pj/e,x0/1,pk/p,x14/2,s10,x7/3,s2,x13/8,s13,x14/15,pc/d,s12,x7/8,s3,x13/1,s12,x9/4,pi/a,x12/1,pd/k,x5/9,s4,x14/3,pj/n,x10/0,s7,x1/13,s9,x14/6,s1,x4/7,s15,x0/6,s12,x9/5,s9,x11/10,s3,x3/4,pp/k,x12/2,s13,x13/6,pn/d,x7/1,s12,x2/10,s3,pa/l,x14/15,s11,x7/5,s9,pi/m,s1,x0/4,s14,x2/3,s7,x4/7,s12,x1/3,s14,x13/12,s15,x9/3,s10,x11/1,s2,x3/14,s11,x13/10,s6,pc/g,x8/7,pj/b,x1/13,s5,x7/4,s14,x12/8,s13,x6/1,pd/k,x4/15,s10,x14/11,s7,x1/12,s2,pe/p,x7/0,s2,pc/h,x11/6,s13,x1/0,s7,x9/4,pe/j,x12/13,s13,x11/14,s14,x2/0,s13,x15/6,s14,x3/10,s11,x9/15,s7,x0/6,s2,x13/11,pi/f,s15,x3/8,s7,x6/4,s4,x5/8,ph/o,x9/13,pf/m,x0/5,s3,x3/7,s9,pd/j,x14/11,s8,x4/2,pi/h,x6/14,pa/n,x3/13,ph/p,s2,x6/11,s13,x0/9,pa/i,x10/3,s13,x7/6,s2,x12/3,s10,x15/4,s14,x11/1,s2,x14/7,pb/p,s9,x11/5,s4,x13/8,pl/k,x5/0,pb/f,s13,x1/10,s12,x6/13,pd/o,x8/4,pf/p,s10,x15/9,s4,x3/1,pj/k,x5/13,s6,x8/9,s4,x1/12,s13,x4/11,po/n,x8/2,pa/i,x13/12,pn/f,s5,x6/0,s6,pk/l,x8/5,s14,x2/14,pd/m,x12/3,pc/j,x1/6,s13,x2/4,pl/f,x11/8,pk/h,x5/13,pb/l,s11,pg/c,x1/6,pn/e,x13/11,pf/g,x5/6,s11,x11/0,s7,x4/9,s10,ph/c,x10/12,s3,x8/2,pp/j,x10/11,s4,x15/7,pk/g,x6/11,s14,x7/13,s13,x11/2,s13,x0/3,s10,x6/10,s4,x11/9,pc/l,s11,x4/6,pe/o,x14/1,s12,x3/13,s15,x15/0,s10,x4/8,pc/d,x9/6,pb/h,x7/12,s9,x6/9,s14,x7/13,pl/d,x12/5,pg/b,x1/6,s3,x5/9,s3,x11/0,pi/o,s13,x4/9,s9,pm/c,x7/8,pe/a,x14/4,s4,x15/2,ph/d,x8/14,s3,x1/10,pg/k,s13,x6/11,s15,x10/13,pf/o,x7/6,pk/a,x4/13,pg/m,x5/8,s5,pa/o,x1/3,pp/m,x13/14,s12,x9/8,s12,x2/1,pk/c,x8/11,pj/f,x0/4,s14,x6/14,pp/e,x2/13,s10,x14/9,pb/k,x2/6,s15,x10/15,s11,x12/6,pj/g,s9,pd/c,x3/10,pl/j,x13/5,pi/p,x1/2,po/g,x3/10,pk/b,s7,x7/4,s8,x5/11,s15,x15/7,s11,x12/14,pi/l,x3/2,pc/e,x1/0,po/l,x8/5,s5,x13/9,s8,x0/14,s4,x5/12,s12,x13/4,s6,x12/14,s6,x8/13,ph/m,s9,x15/6,po/a,x10/1,s13,x12/7,pd/n,x9/10,s7,pm/f,x5/12,s5,x9/10,pa/p,x0/2,s11,x9/10,pg/o,x12/8,pb/l,x10/2,pd/c,x6/14,pn/a,x4/0,pp/j,x3/14,ph/f,x15/9,s6,x1/2,s6,pn/l,x5/7,s1,x0/14,pe/d,x4/13,s8,x11/3,s10,pb/a,x0/6,s11,x12/8,s8,x0/1,pn/m,x2/14,s2,x0/4,s4,x3/15,pj/e,x5/8,s4,x1/14,s15,x13/0,pn/g,x5/1,s4,pe/c,x8/11,pg/i,x5/1,s3,x2/4,s10,x1/12,pn/e,x2/5,s9,x3/4,s7,x2/13,pi/l,x12/1,s5,x11/10,pc/a,x2/15,s6,x13/0,s4,x14/7,s10,x2/9,s7,x7/11,pm/b,x8/12,s6,x10/0,s15,x4/13,s4,x11/9,pd/o,x4/13,pp/h,x7/10,s7,x5/6,s13,x8/3,s6,x11/2,s7,x10/3,s1,x7/6,s15,x5/13,s12,x11/8,s9,x2/4,pm/i,x14/15,s9,x0/13,pf/j,x5/10,pd/l,x12/4,s15,x11/15,s2,x1/9,s11,x10/4,s11,x1/12,pm/b,x7/15,s2,x5/4,s1,x14/15,s11,x4/2,pn/d,x5/14,pg/o,x2/6,s15,x7/5,s5,x13/9,s14,x1/8,pk/h,x11/0,s15,x15/2,pf/l,x11/12,s13,x4/15,s10,x8/0,pj/g,x11/6,pd/k,x2/3,s1,x13/9,s15,x6/8,pp/o,s6,x9/4,pm/i,x5/7,s5,x13/11,s4,x3/14,pc/g,x11/10,s6,x6/1,pl/m,x8/2,pi/p,x1/11,s11,x5/9,pa/g,s10,x4/14,s11,pl/k,x7/11,s2,x3/4,pm/j,s5,x2/0,pb/g,x4/6,s4,x15/11,pl/i,x12/2,pb/g,x6/14,s6,x4/8,s15,x0/10,pc/m,s10,x4/5,s3,x7/12,s2,x9/6,s13,x11/14,s4,pf/b,x6/15,s2,x12/1,pj/d,x6/3,pm/l,x0/13,s15,x9/10,s2,x12/15,pe/i,x14/8,pb/j,x15/11,s10,x8/9,pf/i,x3/2,s10,x10/5,s10,x4/6,s4,pk/a,x9/7,pp/d,s10,x5/10,s11,x12/14,pf/m,x9/7,pb/j,x14/13,s11,x10/5,pp/m,x15/11,pl/c,x9/13,s15,x4/3,s9,x9/2,ph/m,s4,x10/5,s5,x15/11,s6,x1/4,pl/f,s1,x14/8,pj/c,x12/9,pf/o,x6/1,pm/d,x7/15,pa/j,x14/11,s3,x0/6,po/n,x15/3,s5,x5/13,pp/l,x9/7,pn/o,x5/15,ph/j,x14/4,pk/c,x12/1,pm/p,x2/14,s6,x4/9,s14,x11/10,s8,x3/5,pg/b,x15/10,pp/a,x5/3,s15,x6/2,s10,x5/8,s12,x4/15,s13,x0/11,po/i,x14/3,s11,pb/d,x2/9,s11,x3/13,s15,po/l,x0/15,pp/n,s4,x1/11,s6,x5/15,pi/g,x0/14,s3,x12/8,s4,x7/15,s13,x1/3,pp/f,x15/12,s14,x11/3,s15,x4/10,s10,x14/9,pa/g,x7/1,pm/e,x0/14,pi/l,s3,pp/d,x9/12,s9,x4/13,s2,x11/5,s10,x1/13,pa/o,x0/12,s14,pd/l,x10/14,po/g,x6/4,pf/c,x1/9,pn/g,x0/14,pe/c,x7/4,s10,x1/12,s2,pf/m,x9/10,s13,x0/13,pd/b,x11/6,pl/i,s12,x14/7,s10,x3/13,pd/j,x1/8,s12,pf/b,x4/11,s4,pa/l,x7/10,s6,x0/6,pp/b,x1/13,pg/n,x0/9,s1,x15/6,pj/p,x7/8,s10,x6/0,pn/b,x2/1,ph/l,x4/5,pg/p,x1/14,s3,po/f,x2/9,s14,x14/4,s13,x15/0,ph/j,x1/5,po/k,x6/2,s8,x1/13,s3,x11/5,s12,x12/3,pn/m,x10/8,s15,x0/4,pj/b,x2/11,pm/f,s5,x7/0,pp/d,x4/3,s1,x10/6,s4,x11/8,s2,x15/4,s15,x1/7,s4,x2/5,s3,x6/1,s9,x5/12,s13,x2/9,pc/l,x14/4,s3,x9/8,s7,x11/6,s5,x10/0,pm/h,x2/12,s2,x11/7,s15,x4/14,s9,x5/1,s7,x6/0,pl/k,x1/10,pg/j,x15/11,s9,x1/7,s15,x3/11,pi/h,x12/0,s3,x5/2,pf/a,x4/10,pi/e,s4,x8/7,s12,x4/11,s3,x13/5,s1,x0/1,ph/j,s14,x10/11,s9,x2/6,pd/i,x12/4,s1,ph/o,x6/2,s8,pb/m,x9/10,s10,x1/14,pg/n,x9/2,pf/h,x7/14,s13,x0/2,s3,x6/7,pm/n,x1/13,s11,x10/5,po/h,x9/13,s11,x5/14,pp/b,x6/13,s2,pj/n,x12/10,s7,x5/0,pa/k,x3/15,pj/e,x11/14,pk/m,x10/4,s4,x0/15,pb/p,x11/7,s7,x8/14,s5,x11/7,pa/n,x9/12,pl/f,x11/0,pi/h,x15/14,pd/e,x2/0,pl/k,x15/1,s4,x4/14,s2,x3/0,s15,x8/10,s5,x14/15,s6,x4/3,pf/o,x10/5,s6,x9/7,s8,x3/11,s11,pp/a,x6/10,s6,x0/12,s5,x2/11,s3,x15/3,pg/i,s7,x5/12,s9,x11/13,pl/b,x4/2,s8,x15/7,s11,pd/f,x9/11,s2,x7/10,s14,x9/14,s14,x4/8,s9,x6/5,po/m,x0/12,s4,x7/9,pc/a,x13/2,s11,x3/6,pb/g,s11,x13/1,po/c,x4/7,s8,x9/2,s13,x10/14,s5,pn/i,x2/7,s1,x15/3,s11,x7/0,s11,x9/5,pe/l,x6/1,s7,x3/8,pk/m,x0/12,s8,x9/15,s15,x11/5,s15,x9/2,pn/j,x5/3,pi/o,x11/2,pc/m,s12,x12/9,po/h,x7/8,pl/a,x11/1,s7,x7/15,pe/p,s13,x12/3,pf/i,s4,x0/7,pk/c,x5/11,s5,x1/9,s1,x12/0,pm/n,x15/11,ph/i,x4/12,pe/d,s8,x0/5,s5,ph/n,x4/11,pk/i,x13/0,s6,x8/15,s2,x9/14,s7,pn/d,s12,x3/13,pf/m,x11/0,pa/o,x12/5,s9,x3/14,s14,x10/15,pg/k,x8/2,s1,x4/9,pp/d,x12/3,s9,pn/b,x10/0,pd/k,x11/14,s5,x3/9,s10,x2/1,s5,pj/c,x14/4,s13,x0/12,s5,x4/6,s13,x3/14,s3,x2/12,s2,x0/4,s5,x8/2,s14,x15/10,pe/n,x13/14,po/g,x3/10,s8,x4/7,s12,x9/13,s7,x2/11,pe/j,x15/5,s10,x8/4,s10,x1/9,po/d,s5,x8/6,s8,x10/4,s12,pi/h,x9/6,s12,x8/12,po/e,x1/9,pp/a,s2,x12/5,po/l,x8/7,pk/i,x12/6,s13,x10/15,pa/l,x11/6,s5,x15/8,s13,x1/13,pm/c,x15/12,s15,x11/4,s2,x13/6,pg/a,s10,x15/5,s10,pd/o,x3/13,s1,x2/14,s10,pc/p,x6/15,s1,pi/g,x5/10,pm/d,x9/13,s2,x2/14,s12,x10/12,s2,x14/11,s5,x1/12,s13,x5/4,s13,x9/10,pk/b,x7/14,s15,x15/11,s3,x8/14,s4,x11/6,s8,x3/2,pl/p,x11/12,s13,x10/7,s9,x15/9,po/h,s3,x8/12,pd/e,x13/11,s10,pk/f,x15/6,s14,x13/7,po/b,x15/1,s13,x10/5,s4,x8/12,pl/c,x9/1,s8,x2/11,pn/k,x13/4,s15,x0/6,s2,x5/7,s14,x13/6,pf/g,x14/5,po/m,x6/0,pb/n,s4,x12/8,pg/d,x15/4,pe/l,x1/8,s2,x7/12,pf/m,x5/6,s13,x0/9,s15,pg/l,x7/5,pk/o,x2/6,s8,x0/12,pg/j,x3/1,pl/h,x5/12,s14,x0/11,s2,x4/12,s15,x10/9,pd/o,x3/8,s3,pp/k,x9/10,s10,x1/6,s10,x9/12,s4,x8/7,pd/l,x9/15,pg/a,x11/13,pj/e,x2/15,pl/d,s2,x0/7,s2,x12/8,s13,x5/11,ph/a,x2/6,pn/e,x5/4,s2,x13/9,s2,x14/15,s12,x5/4,pa/k,s2,x15/1,pj/d,x3/8,s6,x12/10,pl/g,x8/3,s5,x0/14,s12,x3/1,pp/m,x8/6,pj/k,s9,x11/4,s10,x6/0,s11,x4/3,s6,x5/12,s8,x8/10,pl/g,s1,x9/15,s12,x7/8,pc/f,x2/14,pb/p,x11/1,pj/m,x6/14,pe/f,s8,po/i,x1/9,pe/j,x14/3,s9,x15/7,s12,x10/8,s6,x3/6,s14,x8/1,pp/a,x6/0,po/j,s6,x14/1,s13,x9/7,s4,x1/5,s5,x13/2,s15,x8/11,s7,x3/15,s12,x11/6,s14,x3/14,s11,x9/15,s4,x13/0,pc/d,x9/3,s7,x14/15,s7,x4/10,s6,x5/9,s13,x4/6,pa/o,x5/15,pn/g,x9/1,s2,x4/8,s5,x6/10,pb/f,x1/2,pm/l,x13/12,s12,x6/8,s6,x14/11,po/i,x13/9,pl/k,x11/4,s7,x0/2,s3,x6/13,ph/o,x2/1,pd/c,x13/0,pm/n,x9/8,pc/h,x1/2,s2,x3/10,pf/m,x13/12,s9,pa/c,x11/10,pf/n,x8/9,s7,x15/1,s15,x6/9,pp/j,x3/4,s2,pf/i,x9/13,s9,x7/0,pe/c,x11/3,s10,pj/g,x14/10,s12,x7/2,pc/p,x9/0,s15,x1/10,pd/g,x6/15,s6,x3/5,s12,x7/4,s9,x5/9,pi/f,x11/10,pe/d,x4/14,s9,x0/6,pp/l,x9/15,s6,x10/14,pm/o,x3/4,pd/g,x13/14,pp/o,x3/9,s4,x12/7,pe/k,x5/4,s14,x13/12,s12,pi/n,x8/11,s1,x0/13,pl/c,x14/8,s6,x6/3,s10,x10/8,s4,x2/7,pk/d,x0/4,s7,x10/3,pf/l,x4/13,s14,x7/0,s15,x2/4,s8,x9/0,s9,x5/2,s13,pa/n,x4/12,pg/p,s6,x7/10,pb/k,x13/4,pm/e,x3/11,s12,x2/5,pc/k,x7/9,s9,x12/0,s3,pm/p,x4/13,pd/j,x5/12,s8,x3/8,s12,x2/5,s3,pc/p,x15/8,s12,x5/4,s9,pn/d,x6/12,s3,x4/9,pe/g,s5,pn/m,s15,x5/0,s9,pd/o,x12/7,s12,pp/a,x4/13,s1,x11/7,s7,x5/15,pf/l,x8/6,s15,x7/5,pb/p,x2/1,pd/n,s5,x15/4,s13,x1/6,pj/a,x10/14,s8,x8/7,pk/o,x9/14,s3,x13/6,pn/d,x15/9,s8,x2/12,s10,x6/7,s4,x9/8,pf/b,x2/13,s9,x0/9,s9,x1/15,pc/e,x14/3,po/j,s14,x5/0,pf/k,s14,x9/12,ph/n,x1/14,s1,x0/4,pm/e,x9/5,s8,x8/10,s15,x2/12,s15,x13/11,s13,x14/3,pj/o,x12/8,pl/k,x9/11,s1,x13/15,s7,x2/10,s1,x14/12,pg/j,x15/3,pc/l,x2/5,s11,x9/11,pn/a,x4/0,pp/m,x12/7,s5,x4/15,pk/i,s15,x14/5,s6,x6/2,pe/o,x15/14,pc/m,x8/13,s5,x2/6,s14,x3/0,s10,x10/1,s9,x15/13,s1,x10/8,pe/p,x15/1,s13,x4/0,s11,x3/13,ph/n,x8/15,s8,po/j,x11/10,pi/c,x15/9,s10,x11/4,pn/o,x1/9,pj/f,x5/3,s1,x8/12,s13,x2/15,s14,pp/g,x3/6,pj/h,x0/14,s1,x2/3,s9,x6/0,s6,x15/12,pk/l,s12,x13/10,s7,x15/11,pc/m,x2/4,pe/g,x9/5,s1,x8/4,po/j,x5/3,pf/k,x2/4,s11,pp/o,x11/15,pk/j,x7/14,s3,x13/6,pa/c,x3/2,pe/i,x9/10,s4,x4/2,pc/g,x5/8,s1,x1/13,pi/m,x9/15,s7,x0/4,s13,x6/9,s4,x4/3,s12,x1/9,s15,x6/7,s12,x3/14,s3,x0/7,pc/f,x14/1,pa/m,x5/11,s2,x13/7,s7,x2/12,pj/c,x8/11,s6,x12/7,s6,x15/8,pf/n,x3/11,s7,po/g,x5/6,pk/a,x9/3,s1,x7/2,s13,x4/1,pe/c,x12/9,s2,x7/2,s2,x1/5,s2,x15/10,pd/b,x9/4,pe/g,x10/14,pk/i,x4/1,pa/m,x15/2,pj/e,x3/0,s2,x9/6,pl/n,x5/2,s1,x9/14,s6,x5/2,s9,x12/9,s4,x8/11,pj/m,x7/15,s6,x9/6,ph/n,x10/0,s14,x14/12,pk/f,x15/5,ph/i,s1,x1/14,s7,x6/5,s5,x14/0,s9,x2/11,s8,x0/13,s15,x2/14,s4,x1/8,s12,x5/13,s7,x15/0,s8,x4/9,s1,pg/d,s7,x8/15,pk/o,x0/11,s2,pn/e,x7/9,pl/a,x0/15,s7,po/b,x13/4,pi/m,x8/0,pk/l,x12/11,pj/f,x1/0,pc/g,x12/7,pa/p,x2/4,po/f,x9/13,pg/i,x15/8,s14,x2/0,ph/l,x5/8,pj/b,x15/12,s4,x0/1,pc/f,x13/5,s6,x11/6,pp/a,x3/8,s14,x0/13,pj/i,x7/4,s15,x14/1,s14,pf/o,x4/12,s10,x5/1,pd/i,x13/8,s4,x7/11,s8,x13/10,s5,x7/6,ph/p,x4/10,pj/o,x9/1,s10,x5/13,pb/f,x0/4,s12,x14/1,s2,x2/12,s13,x9/10,pl/i,x15/0,s1,x7/14,s2,x1/9,s7,x14/7,s6,x8/6,s11,x1/11,s14,x6/13,s3,x14/5,pf/g,s4,x15/10,s14,x9/4,pj/d,x7/11,pp/a,s15,x5/12,s3,x15/2,s9,pm/f,s1,x3/0,pj/n,x10/8,pc/b,s9,x15/5,s14,x12/0,pj/n,x3/1,pd/h,x14/10,s7,x7/1,s15,x13/8,s2,x1/3,s5,x13/9,s8,x12/2,s13,x1/3,pf/i,s9,x4/15,pa/e,x8/9,pn/c,x2/6,s15,x8/7,s5,x6/12,s7,po/b,x13/10,pl/p,x2/14,ph/j,x3/13,s4,x4/8,pb/a,x13/14,s3,x0/2,pk/e,x6/1,s11,x15/5,pb/l,x14/12,s6,x3/1,s9,x13/8,s6,x12/4,pj/e,x14/8,pn/k,x0/11,pi/o,x5/4,pe/f,x2/9,pk/j,x12/13,po/c,s10,x1/2,ph/m,x15/14,s7,pg/k,x5/11,pd/i,s7,pl/k,x7/4,s9,x12/9,s4,x5/14,pb/h,s3,pc/o,x4/15,pe/g,x10/13,s1,x14/3,s14,pf/p,x5/10,pa/e,x8/12,pm/j,x7/1,s2,x0/3,s8,x2/5,pi/h,x10/11,s1,x8/9,s2,x14/3,pp/o,s14,x12/9,s5,x3/14,s2,x5/4,pe/g,x11/10,s9,x14/6,pb/o,x9/2,s8,x3/7,pe/a,x15/4,s8,x14/11,s6,x4/15,pc/h,x0/7,pb/k,x14/9,pg/m,x5/4,pf/l,x7/9,s1,pe/d,s3,x11/8,s3,x2/7,s5,x11/14,pf/o,x10/7,s10,x1/8,s11,x2/11,pa/p,s12,ph/k,x5/14,pn/b,x8/15,pj/d,x11/7,s1,x2/5,s12,x4/15,s5,x6/5,pb/i,s11,x7/15,s12,x1/0,pj/h,x11/14,s6,x6/12,s13,x14/13,s7,x7/1,s3,x6/4,s7,x2/9,po/g,x8/6,pn/c,x15/9,s14,x1/0,pb/h,x2/10,s13,x0/9,s13,x8/11,s4,x6/15,s10,pg/m,x7/12,s6,x4/2,pd/j,x15/0,pf/m,x5/4,s2,x12/15,s13,x1/6,s15,x2/12,pa/e,x4/1,pp/j,x3/12,pg/f,x6/1,s1,x9/0,pl/p,x4/1,s3,x11/9,s14,x8/14,s6,pf/e,x15/0,s2,pj/m,x11/7,s11,x10/3,s13,pd/a,s7,pm/e,x1/5,s2,x7/4,s6,x9/15,pa/n,x12/7,s9,x13/11,pe/c,x7/9,s7,pd/b,s4,pl/h,s5,x6/15,s3,x8/3,pj/e,x1/4,s2,pc/n,x11/13,s13,x14/10,s14,x2/11,s4,x7/3,pf/k,s14,x13/0,s9,x9/7,s9,x6/13,s4,x4/3,pp/l,x13/0,s14,x1/11,pj/b,x8/12,pn/k,x13/4,pl/a,x12/5,s1,x1/3,s4,pb/i,x2/0,s8,x13/15,s7,pc/m,x8/9,pf/d,x0/2,s3,x3/10,pg/c,s8,x0/13,s7,x6/15,pn/f,x2/12,s8,x0/11,s7,x1/7,pa/l,x8/11,s4,x2/10,s14,x5/7,s9,x6/1,s9,x7/11,pf/p,x1/13,s14,x6/4,pi/j,x3/14,pg/p,x5/12,s5,pi/d,x11/1,ph/g,x13/12,s14,x8/4,pd/m,x0/2,s11,x6/4,s15,ph/i,x10/0,s13,x2/11,s15,x13/9,s2,x14/6,pc/b,x13/11,pj/i,x10/15,s15,x5/4,s5,x1/15,s11,x2/5,s2,x13/15,s15,x2/12,pl/a,x9/8,pe/c,s8,x14/10,s6,x7/13,po/p,x6/1,s4,x7/10,pb/e,x0/14,pa/l,x3/4,s4,x8/9,po/p,x3/14,s7,pl/b,x7/8,s6,pg/n,x0/12,s15,x14/15,s6,x11/6,s14,x0/13,pc/m,x8/7,s4,x14/4,pl/p,x11/10,s4,x4/9,s14,x5/10,pf/i,x6/13,s4,x15/11,pa/k,s13,x8/10,pj/l,x7/4,s1,x1/2,pm/c,x12/4,s6,x14/2,ph/d,x4/11,pe/p,x0/12,s7,x14/13,s9,x9/2,s1,x11/12,pc/j,x9/3,s13,x12/8,pk/m,x2/4,s1,x11/1,pg/i,x0/3,s8,x14/2,s7,x6/10,s15,x14/5,s1,ph/b,x10/1,po/m,x12/3,s6,pp/h,x9/8,s4,x4/2,pk/g,x8/14,s11,x13/0,s4,x5/10,pp/f,x8/11,s7,x12/4,s9,x7/9,s6,x4/14,ph/b,x8/11,s5,x3/13,pm/j,x4/9,pg/l,x0/15,s4,x3/7,pk/c,s7,x13/4,pi/h,x12/8,s9,x5/3,pa/b,x6/7,pj/o,x11/9,pg/b,x0/14,s8,x9/11,pf/p,s6,x7/1,s12,x6/10,pd/l,x7/13,s4,x11/8,s14,x13/14,s12,x0/5,s9,x3/15,s13,x5/7,pe/p,x3/6,pd/c,x7/4,s5,x2/3,pg/b,s2,x10/1,pl/h,x4/5,pp/b,x7/11,pk/m,x5/4,pl/p,s3,x11/12,s3,x14/9,s3,x0/10,po/f,x1/3,s11,x7/10,pb/p,x0/5,pj/n,x9/14,s11,x6/3,pp/o,x15/5,pc/i,x9/12,pl/a,x1/10,pe/g,x7/9,s2,x4/13,pf/m,x10/11,pa/h,x15/1,pe/j,x14/5,s15,x1/12,pa/g,x14/9,pl/m,x5/10,s6,po/h,s3,x6/9,s9,x0/11,s3,x4/7,pf/d,x14/8,pa/m,x0/7,s14,x5/14,pl/k,x11/2,s11,pg/d,x5/9,s1,x3/13,s3,x7/8,pl/f,x14/1,ph/p,x4/8,s1,x9/6,pa/o,x14/3,pn/p,s9,x6/13,s13,x0/2,s10,x13/15,pe/f,x11/1,s4,x7/14,s12,x6/5,pb/c,x14/9,pp/e,x1/12,ph/b,x14/10,pi/a,x12/7,ph/f,x10/15,pg/i,x0/2,pa/l,x8/7,pb/e,x15/11,pp/m,x10/14,s6,x13/15,s1,ph/b,x7/0,pc/d,x13/1,s2,pi/e,x11/4,s11,x15/10,s6,pj/h,x1/7,s13,x15/13,s7,x6/7,s1,x12/11,s14,pd/p,x8/4,pf/n,x0/14,s11,x6/7,pj/c,x0/14,s2,x1/4,s3,x5/3,s14,x10/8,s9,x0/4,s12,x15/3,pa/l,s11,x9/0,s6,x14/1,pc/b,x12/9,s3,po/m,x6/14,pc/k,x0/9,pm/d,s8,x4/3,s15,x7/2,s8,x12/10,po/a,s15,x14/4,s3,x13/0,pe/g,x1/3,s11,x7/12,pd/k,x1/15,pe/j,x8/13,s11,x4/1,s4,x12/7,pn/l,x10/5,s7,x14/4,s11,x10/9,s11,x7/8,pk/c,x11/14,s2,x9/12,pg/o,s7,x13/6,pe/n,s5,pl/b,x14/15,pg/i,s15,pc/n,x2/4,s8,x7/1,s1,x6/13,s14,x0/7,s1,pf/g,x1/11,po/n,x5/15,s14,x10/3,s8,x14/13,s7,x12/3,pe/k,x11/10,po/m,x15/4,s13,x12/0,s12,x13/10,s1,x0/6,pp/i,x4/13,s1,x6/12,s11,x14/2,pf/m,x10/4,s3,pi/b,x9/8,s1,x14/3,pd/g,x8/15,s2,x12/4,s11,x2/15,pb/k,x1/5,s14,x12/15,po/p,x3/11,s8,x2/6,s12,x14/10,s2,x1/11,s5,pi/d,s6,x8/0,pj/k,x6/9,pg/i,x2/15,s5,x7/3,s5,x10/1,pk/a,x11/5,pf/l,x12/1,s1,x3/8,pa/b,x15/1,s9,x4/12,po/p,x9/10,s14,x6/5,pj/h,s9,x0/10,s3,x1/15,s4,pb/n,x12/5,s9,x2/0,s4,x4/5,pk/g,x11/9,s5,x3/8,s7,x5/6,s3,x0/15,pe/m,x2/8,s7,x9/6,pa/d,x1/7,s10,x14/5,s12,x12/1,s8,x4/3,s1,x6/7,s9,x10/9,s11,x6/14,s13,x11/9,s6,x14/4,s12,x5/9,s1,x13/11,pc/e,x7/8,s5,po/j,s15,x14/4,pb/n,x5/8,s14,x1/15,ph/i,x14/5,s14,pa/b,s13,x4/9,s6,x0/3,s1,x12/4,s11,x8/13,s12,x12/0,s13,ph/g,x10/3,pd/b,x13/7,s14,pa/o,x10/11,s9,x13/5,s10,x0/10,pp/b,x2/15,s3,x6/1,s5,x2/0,s14,x5/9,s9,x7/1,pn/d,x12/13,s8,x2/7,s1,x5/10,s11,x12/9,pf/c,x10/11,s10,x15/9,s6,x11/14,pe/j,x6/7,s2,pn/p,x1/9,po/d,x4/13,pg/m,x10/0,s3,pk/a,x9/2,pm/c,x7/8,pg/k,x14/13,pb/o,x7/10,s11,x4/11,s5,x3/6,s9,x4/2,pd/e,x3/12,ph/i,x11/9,pb/o,x7/6,pa/i,x0/1,pc/m,x3/6,s6,x5/1,s8,x8/15,pn/e,x1/6,pp/o,x15/4,s12,x11/6,pe/a,x0/7,s10,x10/11,pi/n,x0/3,s3,x15/2,s5,x11/14,pg/o,s6,pp/j,s10,x3/1,pi/n,x14/10,pc/e,x5/13,s7,x15/10,s2,x3/6,s8,x10/8,s14,x9/11,s9,x7/6,s9,x14/9,s9,x12/1,s2,x13/0,s15,x3/7,s15,x13/14,s6,x9/8,pi/k,s14,x3/1,s5,x8/11,pm/b,x0/12,pf/e,x5/9,s5,x10/1,pd/o,x13/0,s15,x2/1,s7,x13/8,s4,x2/1,s2,pe/p,x12/6,pj/g,x10/14,s13,x13/7,s11,x3/1,s15,x12/2,po/n,x0/11,s2,x2/15,pk/c,x0/8,s14,x14/10,s2,x4/12,pb/h,x10/6,pa/l,x4/0,s14,x3/8,s1,x15/7,s5,x2/3,s2,x14/12,pn/e,x13/15,s11,x6/9,s6,x1/3,s15,x13/8,pc/g,x5/14,s6,x15/0,pl/a,x14/3,s14,x1/8,pp/b,x12/14,po/n,x2/1,s3,x6/8,s11,x7/1,ph/p,x9/13,pj/f,s2,x5/15,s3,x12/1,s13,x5/6,s1,x15/4,s4,x14/2,s1,x4/15,pb/m,x10/2,s7,x11/7,s13,pf/h,x6/13,s7,x3/8,s3,x2/15,s2,x12/14,pd/i,x13/3,pe/k,x8/14,pc/o,x10/9,s4,pk/e,x11/5,s6,x12/7,s7,x10/1,s12,x7/14,s14,x2/5,s5,x7/3,s4,x15/9,s15,x2/5,s11,pb/j,x15/8,s12,x12/2,ph/o,x0/3,s3,pb/d,x4/1,pk/i,x12/11,pj/f,x15/13,s10,x6/10,pp/a,x14/9,s4,x6/2,ph/m,x14/5,s8,x6/2,s1,x11/1,po/d,x8/0,s6,x4/2,s12,pb/k,x14/10,pi/g,x6/8,pc/d,x2/9,s7,x6/11,s9,x9/4,s5,x2/8,s12,x10/7,s8,x4/8,s5,x10/1,pi/a,x0/8,s12,x9/15,pg/n,s15,x6/7,pi/c,x3/4,pf/h,x2/15,s8,x0/4,pi/m,x6/11,pc/g,x5/12,s11,pn/h,x6/1,pd/g,x8/5,pj/l,x6/7,pc/h,x12/0,s5,x11/6,pa/b,x7/10,pg/n,x13/15,pi/l,x3/5,pp/m,x12/8,s7,x2/1,s9,pg/b,x3/8,s10,x9/13,pd/k,x12/10,pi/f,s4,x5/13,s4,x11/7,s4,pj/k,x4/14,s12,x8/11,pl/d,x1/2,s5,x15/9,s2,pg/m,x13/11,s6,pn/c,x9/5,s9,x3/15,s12,x13/8,s13,pm/j,x9/14,s5,x4/5,po/b,x7/13,s15,x3/8,s13,x13/7,s2,x14/10,pd/k,x6/13,s14,x8/11,pm/j,s10,x1/7,s1,x9/12,pn/o,x10/0,pj/c,x15/2,s2,x5/14,pl/p,x3/7,s6,x13/9,s6,x10/1,pj/o,x12/0,s13,x13/2,pn/g,x6/3,s15,x10/2,s2,x8/15,s4,x6/5,s11,x13/15,pf/m,x1/8,s2,x12/9,s1,x15/5,s13,x7/9,s8,x2/12,pk/l,x4/0,s5,x8/15,po/p,x1/6,s5,x13/15,s2,x3/6,pg/j,x2/9,pb/c,s2,x8/4,s12,x1/7,pk/j,x4/12,pn/m,x8/13,s1,x0/12,s11,x10/14,pi/l,x8/7,s5,x3/10,s13,x0/14,s9,pf/n,x10/12,s8,x3/2,ph/o,x15/11,pb/j,x1/12,s3,x6/10,pa/m,x9/3,pf/d,s12,x12/14,s4,x4/5,pb/p,x9/13,s1,x0/3,s15,x15/13,s8,x8/10,s6,x2/14,pi/n,x8/12,pj/b,x15/2,s12,x6/3,ph/o,x1/0,s9,x15/13,s4,x11/3,s3,x4/9,pm/c,x12/13,s3,x15/1,s10,x13/6,pn/b,x10/0,pg/l,x4/5,s4,pi/k,x15/14,s5,x0/2,s5,x13/6,pc/g,x12/7,s15,x13/14,ph/f,x7/2,s11,x8/0,pb/i,x9/1,pm/n,x13/4,pd/k,x5/15,s5,x13/2,s14,pn/e,x11/3,s1,x5/0,s13,x14/11,pi/b,x8/13,po/l,x15/10,pg/c,x2/6,pm/k,x7/3,s4,x5/15,s4,x6/12,pd/l,x9/7,pf/m,x0/6,ph/c,x5/13,s7,x10/2,pm/g,x8/11,ph/e,x13/2,pf/a,x7/6,s12,x9/0,s8,x7/11,ph/c,x15/10,pa/d,x12/9,s9,x1/6,s15,x5/0,s1,pn/m,x10/14,s2,x4/11,pp/o,x14/15,pc/m,x9/3,pa/e,x7/2,s5,x14/11,pc/m,x8/3,s11,x10/5,pf/h,x4/7,pb/g,x11/2,pn/l,x1/0,pf/c,x8/6,s4,ph/a,s1,x3/9,s2,x6/5,s13,x10/14,s5,x11/12,pb/m,x14/13,s4,x1/12,pk/a,x13/5,s12,x0/7,s4,x11/12,pj/h,x14/13,pn/g,x15/12,pk/e,x6/8,pc/l,s9,x1/15,s15,x8/13,s11,x2/10,s9,x13/0,s11,x2/3,s9,x13/10,pg/f,x0/11,s15,pe/a,x8/5,pl/m,x4/14,s2,x9/5,s2,x14/13,pp/c,x12/1,pe/i,x6/0,s7,x2/5,pb/k,s12,x15/10,s7,x12/13,s6,pd/m,x5/6,pb/f,x11/2,po/m,x7/0,pn/l,x13/2,s15,x14/4,pm/b,x15/5,s1,pf/l,x7/11,s5,x9/1,pj/g,x12/8,pp/k,x15/1,pj/d,x7/11,s15,pn/g,x3/8,s1,x14/4,pe/d,x11/7,s1,x2/1,s8,x9/4,pp/l,x8/5,s11,pn/a,x12/1,pp/h,x6/2,pk/a,x4/11,s4,x15/14,s10,x8/7,s15,x15/13,pn/o,x3/9,s1,pd/f,x2/15,pg/m,x9/3,s5,x7/5,pe/c,x14/3,s7,x10/15,pi/d,s11,x4/6,s9,x1/7,s10,x4/13,pb/o,x1/2,s1,x11/13,s2,ph/m,x2/4,s10,x15/11,s5,x1/4,s11,x8/7,s9,x14/1,pf/e,x8/6,pk/c,s6,x7/2,s6,x5/0,s5,x12/10,pp/j,x15/5,s14,x3/13,ph/o,x15/14,s1,x4/10,s8,x8/1,s10,x3/2,s6,x12/9,s12,x3/4,pa/e,x13/11,pd/g,x5/15,s14,x7/4,ph/m,x14/3,s2,x8/4,s14,x3/14,s1,x1/9,s8,x15/0,pl/g,x1/11,pb/f,x6/9,s2,x4/8,s2,x3/14,pl/m,s9,pk/f,x2/0,pi/b,x4/12,s10,x15/11,s1,x13/6,pa/f,x2/0,po/g,x5/8,s15,x2/14,s4,x3/5,s13,x6/2,s7,x8/13,s7,x12/0,s9,x6/5,s11,x1/7,s10,x10/13,pp/f,s5,pb/o,x12/2,pf/i,x13/14,s10,x10/6,pg/n,x1/14,s8,x7/13,s14,x2/9,s8,x0/14,pd/b,x5/15,s6,x13/10,s8,x9/4,s9,x8/15,s6,x5/7,s5,x9/14,s8,ph/m,x7/13,s3,pa/k,s13,x11/0,s11,x6/1,s14,x11/5,s9,x6/2,s5,x8/9,pg/d,x5/0,s1,x9/12,s5,x11/10,s6,x14/3,s8,x10/13,s5,x15/2,pn/b,x11/7,po/f,s4,x12/4,pj/e,s14,x11/13,pd/h,x0/7,s4,x13/5,pb/n,s11,x7/8,s14,x15/6,ph/k,x4/10,s4,x15/9,po/g,x8/1,pl/c,x7/9,pi/o,s7,x4/5,s5,x14/15,pf/n,x12/10,s10,x1/5,s13,x3/10,s15,x0/13,pl/c,x11/9,pg/i,x8/1,pc/m,x7/15,s5,x2/12,pb/l,x8/14,pe/a,x3/10,ph/b,x2/5,s10,x7/10,pm/a,x8/13,s10,x6/0,pf/l,x14/2,pb/i,x8/4,pj/n,x0/2,s14,x1/15,s6,x11/7,pd/a,x3/1,s15,x0/11,s8,x5/12,s13,x2/4,s14,x5/11,s9,pc/o,s3,pg/i,x2/9,s15,x3/10,pd/l,x13/8,s4,pm/p,x11/7,pf/n,x4/13,s15,x9/14,pl/p,x10/11,s11,x7/8,s3,x0/5,s13,pb/a,x8/7,pp/f,x10/9,s4,x14/8,s10,x11/2,s7,x7/0,s8,x5/15,pc/d,x11/3,s15,x4/12,po/j,x8/5,pc/l,x11/14,ph/m,x7/3,pj/c,x1/9,pk/p,x6/13,pb/o,x3/10,s3,x2/6,s10,x7/10,pj/a,x11/9,s7,x15/6,s12,x12/10,s8,x7/8,s13,x4/1,pl/k,x7/9,s4,x3/11,pe/a,x0/5,pi/n,x11/13,s13,x4/15,s10,pb/g,x9/8,s12,x0/12,pe/o,x7/14,s10,pb/l,x12/6,pk/f,x13/9,s10,x0/1,s8,x4/6,s1,x8/9,s8,x6/12,s1,x1/8,s11,x11/6,po/a,x14/13,s15,x1/0,pe/f,x2/10,s4,x11/3,s3,x0/8,s12,x9/7,s5,x3/2,pa/j,x15/0,s15,x5/2,s4,x4/0,s5,x6/9,s9,x15/12,s7,x6/13,s2,x7/9,s6,x3/15,s11,x4/11,pk/c,x14/2,s3,x5/7,pi/d,x9/2,s14,x6/8,pe/f,x3/9,s10,pc/n,x1/10,pe/d,x11/13,s7,x4/5,s14,x6/7,pb/m,x3/11,s11,pg/a,x2/6,pb/p,s2,x12/11,s4,x15/3,s12,x7/2,s5,x10/11,s15,x12/8,s14,x4/9,pe/l,x12/2,s13,x4/11,pd/p,x8/10,pk/l,x14/5,s1,x9/2,s3,x4/1,s8,x15/2,s10,x5/10,s12,x11/3,s9,x7/14,s10,x0/4,pc/m,x11/5,s12,x15/13,s3,x6/7,pi/b,x5/2,s2,x6/1,s10,pm/k,x5/8,pj/a,x4/13,po/l,x7/12,pf/g,s12,x15/5,pk/b,x0/6,pe/l,x9/8,s12,x6/4,s12,x13/14,s1,x8/1,pf/m,s11,pe/h,x5/6,s9,po/d,x0/12,s8,x9/4,s6,x10/8,s1,x0/15,pi/a,x14/2,po/h,x3/9,s3,x5/12,s11,x15/13,pp/e,x5/2,s11,x10/6,s7,x11/1,s5,pb/l,x12/15,ph/c,x3/11,pb/i,x12/2,s7,x8/14,s3,x6/0,pk/l,x10/14,s9,x4/11,s1,x10/3,pa/h,x9/15,pp/l,x0/7,pi/d,x15/12,s9,x9/7,s12,x11/15,s5,pp/n,x8/3,s11,x6/11,s9,x5/7,s15,x8/12,s6,x4/5,s14,x14/9,s4,x8/10,pb/g,x15/13,s8,pk/a,x10/0,s3,x4/1,pe/o,s11,x12/13,s5,x3/2,s12,pa/b,x6/14,s1,x4/8,s2,pm/l,x13/10,s6,x6/0,s11,x1/15,pk/i,x3/7,pl/a,x1/9,s15,x3/2,s15,x1/12,po/e,x0/5,s15,x13/8,s15,x15/2,pk/p,x12/5,s10,x6/8,s13,x0/10,pl/o,x5/3,pn/e,x7/13,pg/a,x3/9,s4,x8/2,s11,pb/i,x10/4,pe/l,x1/15,s14,x4/13,pi/g,s7,x15/9,s8,x13/5,s15,x6/4,pp/l,x12/9,s13,pc/m,x3/4,s14,x11/13,s5,x1/3,pg/p,x15/8,s3,x1/12,pl/i,s15,x7/9,s15,x12/14,pk/g,s12,x2/10,pb/a,x15/4,s5,x8/3,pg/k,x0/13,s7,x2/12,po/i,x14/8,pm/g,x15/4,pj/b,s4,x7/1,s9,x8/3,pl/h,x13/6,s8,x14/1,pp/b,x2/5,s11,x15/1,s9,x4/3,s8,x8/5,s11,x6/7,s15,x2/12,pg/f,x8/15,pe/n,x7/13,pp/f,x15/9,s9,x0/1,s4,x2/7,s10,pb/a,x6/13,s7,x11/4,s12,pi/m,x1/3,pp/f,x15/14,s8,pm/e,s2,x13/11,pd/l,x10/2,s10,x13/15,s12,x11/6,s5,x14/8,pg/i,x1/11,s12,x14/5,s2,x15/10,pf/p,x14/13,pl/j,x2/10,pd/c,x6/1,s9,x5/4,pi/j,x10/11,pl/f,s9,x14/4,s9,x1/12,s13,x4/10,pe/o,x8/12,s2,x13/2,s7,x9/7,s1,x6/3,s14,x4/0,s3,x8/12,s10,x10/1,s6,x11/0,pm/l,x3/14,pf/j,x5/8,pn/d,x3/10,s13,x7/14,s10,x0/12,s9,x11/7,ph/b,x3/4,s12,x13/6,s13,x9/15,s5,x2/12,s6,x11/1,s5,x14/12,s6,x10/6,s8,x5/1,po/j,x3/15,s13,x11/13,s11,x4/5,s5,x1/2,pa/g,x12/4,pj/i,x15/13,s13,pn/g,x12/1,pk/d,x3/7,s6,x13/5,s8,x14/12,pl/g,x2/3,s5,pi/d,x15/14,pj/n,x2/13,pd/h,x14/11,pp/b,x1/2,s11,x10/13,s9,x3/4,pf/i,x6/2,s6,x8/14,s12,x1/7,ph/a,x3/2,pe/d,s8,x7/1,pp/j,x13/11,s1,x9/2,pk/g,x8/3,pb/m,x10/0,s10,x11/3,s7,x9/5,pp/n,x1/0,pd/o,x4/7,s13,x3/9,s15,x4/0,s6,x11/5,s12,x15/4,s10,x8/14,s9,x6/1,s5,x2/11,s13,x9/15,s10,x6/12,s8,x10/8,pb/h,x1/3,s11,x15/7,s12,x9/12,s15,x15/14,s6,x10/5,s13,pl/e,s4,x6/0,pa/h,s4,x8/3,s4,x7/15,s9,x4/5,pm/f,x8/15,po/c,x9/2,pd/l,x4/5,s11,x8/10,s4,x14/6,s8,x8/15,pk/e,x1/11,po/p,x7/0,s7,x9/6,s10,x10/4,s8,pe/m,s12,x1/15,s6,x10/4,s6,x8/15,pj/g,x7/9,s10,x12/1,pe/m,x14/9,pi/o,x0/13,s14,pk/e,x15/3,ph/l,s8,x8/7,s2,x4/11,s2,x1/15,pe/a,x2/12,pn/k,x7/13,s7,x6/1,s2,x4/0,s9,x13/7,s3,x6/15,s3,x1/8,pj/l,x0/5,ph/i,x8/7,s6,x12/13,pe/a,s8,x7/6,s2,x0/11,pd/g,x6/15,pb/o,x9/5,s3,x14/13,s9,x6/3,s3,x11/0,ph/f,x5/15,s13,x6/10,s11,pc/n,x11/2,po/h,x12/0,s11,x4/5,s7,x11/9,pm/j,x15/14,pi/e,x8/13,s5,x7/15,s6,x12/11,s5,x9/3,pg/m,x0/1,s10,ph/l,x2/15,s2,x11/13,pd/k,x2/8,s11,x10/6,pa/b,x7/3,s13,x12/9,pn/l,x0/11,pa/f,x12/14,s1,x8/5,s4,x4/10,pp/g,x12/14,s9,pd/b,x5/1,s13,x12/13,s15,x0/9,s4,x4/1,s2,x15/8,s11,x6/13,s3,x0/12,pi/k,x10/9,s13,x15/13,s6,x14/5,s5,x9/6,s5,x13/15,pb/e,x2/7,ph/m,x6/0,pl/i,x13/12,pj/k,x8/6,pf/o,s14,x9/0,pj/d,s10,x4/1,s6,pl/h,s13,x3/8,s12,x9/13,pg/i,x6/14,pn/b,x2/8,pj/c,x11/6,ph/k,x12/15,s4,x3/2,s1,x8/6,s3,x13/4,s15,x6/7,s12,x1/2,s9,x6/4,s4,x3/15,pf/j,x14/11,s3,x7/8,s8,x3/1,s11,x7/13,pi/b,x2/11,pg/f,s7,x13/1,pi/o,x10/15,s3,x14/12,pf/b,x3/11,s13,x13/9,s9,pj/n,x3/2,po/g,x7/12,pn/k,x13/1,ph/o,x11/4,s4,x6/13,s15,pm/i,x15/12,pe/j,x3/7,pb/g,x10/14,s3,x5/9,ph/c,x6/3,s1,pg/n,x9/12,pb/f,x6/5,s7,x13/4,pe/o,s14,x11/5,s3,x6/10,s12,x7/13,pm/g,s8,x0/1,pc/n,x9/7,s5,x4/11,pg/h,x14/0,pi/o,x1/2,pc/l,x10/3,s2,x12/5,s14,x15/4,s1,x3/7,s5,x14/1,s8,x7/12,pd/p,x3/14,s4,x8/15,pk/j,x5/1,s8,x6/15,s12,x3/0,s4,x12/4,s10,x3/9,s7,x6/1,pi/b,x14/3,s12,x1/4,s5,x11/8,s12,x9/10,s5,x1/2,s8,x14/12,pm/n,x15/10,pk/g,x7/4,s11,x11/14,po/p,x3/5,s7,x14/0,s12,x5/7,pd/f,x12/0,s10,x6/5,s8,x3/1,s4,x6/11,s4,x0/2,s6,x4/15,pl/k,x7/3,s4,x1/11,pa/n,x4/5,po/l,x12/1,s9,pg/p,x9/3,s15,x10/6,s2,x15/11,ph/k,x6/13,po/b,s3,x14/10,s1,x4/1,s14,x14/10,pj/m,s11,x4/11,s9,x14/8,s12,x2/1,pg/d,x9/12,pm/c,x6/15,po/i,x5/3,pk/d,x12/9,s2,x6/15,pb/h,s10,x10/7,pg/d,s14,x1/11,s5,x0/4,s9,x15/14,pk/e,x0/3,s3,x5/14,pf/l,x15/7,pk/g,x13/0,pd/f,x5/8,s3,x14/0,pl/c,s9,x9/5,s14,x3/1,s8,x10/11,ph/e,x8/14,s6,x2/9,s10,x15/5,s13,x10/8,s14,pc/f,x3/4,pb/a,x13/11,pf/d,x0/9,pe/h,x14/15,s15,x12/6,pc/k,s5,x15/13,s8,x2/7,pp/g,x0/1,po/d,x9/14,pi/m,x13/3,s2,x15/2,s15,x9/0,pl/e,s8,x5/15,s15,x3/7,pi/m,s6,x8/13,pl/k,x0/3,s11,x1/10,s4,x13/14,s15,x8/11,s10,x6/2,s8,pa/e,x12/0,pm/o,x15/8,pd/e,x3/10,pp/k,x12/7,s3,x14/13,pb/j,x15/8,s5,x11/1,s1,x5/8,s2,x14/4,s13,x5/9,s8,x2/10,s13,x8/15,s15,x3/13,s7,x0/15,s1,x7/3,s1,x10/13,pd/g,x1/3,s8,pf/b,x2/13,s5,x15/10,s1,x5/9,pj/p,x4/2,s3,x14/0,s6,x9/10,s6,x2/1,s3,x8/6,ph/a,x10/13,s7,x1/5,s3,x4/2,pi/n,x5/0,s5,x13/12,pc/l,x10/15,s11,x5/8,pk/p,x2/10,pg/o,x8/1,s1,x10/7,pn/m,s1,pd/b,x0/2,ph/f,x12/6,pc/m,x5/9,pk/i,x10/6,s14,x5/13,pp/n,x6/8,s12,x1/10,s12,x0/15,s1,pm/i,x8/13,s10,x14/15,pl/c,x11/7,ph/a,x14/4,pl/c,x12/0,s7,x15/3,s10,x7/5,pk/g,x8/10,po/b,x2/7,s8,x14/5,pp/h,x4/12,pk/b,x3/0,s7,x9/1,po/n,s12,x0/7,s3,pb/d,x12/6,pa/h,s6,x9/3,s2,x14/2,s6,pf/k,s10,x7/4,s5,x14/12,pc/m,x7/3,s7,x15/0,ph/p,x10/12,s2,x0/14,pl/k,x8/7,ph/d,s6,pe/k,x13/4,pj/g,x0/1,s14,x7/13,s6,x9/0,s13,x11/12,pf/p,x13/9,pb/e,x15/12,s14,x9/0,pf/h,x12/3,pe/b,s5,pc/g,x4/2,pj/l,s7,x10/11,po/b,x12/13,pi/m,x15/7,pp/k,x2/4,pd/n,x6/11,pp/a,x5/7,s6,x9/15,s13,x10/7,pl/i,x1/3,s1,x4/0,po/c,x5/14,pf/h,s12,x2/11,pg/i,x5/12,s10,x9/6,s8,x12/15,pa/d,x3/1,pc/h,x8/9,s15,x13/11,s8,x12/6,s3,x9/7,s9,x5/3,s8,x4/12,pi/f,x13/0,s12,x9/1,s1,x8/14,ph/n,x10/6,s2,x8/12,s10,x4/1,s9,x13/6,pd/o,x1/8,s9,x4/6,s4,x3/0,pl/h,x13/12,s7,x3/8,pk/a,x14/5,s1,x7/15,s6,x1/5,s3,x10/0,pg/c,x13/2,pd/h,x14/6,pe/m,x15/9,s2,pj/p,x0/5,pn/i,x10/7,pc/h,s11,x11/15,pd/l,x12/3,pc/o,s15,x0/1,pl/k,x2/12,s9,x1/6,pp/g,x5/12,pn/j,x2/1,pc/k,x0/3,pi/p,x1/10,s11,x9/3,s4,x13/14,s11,x10/2,s7,x4/9,s13,pm/k,x8/15,s8,x11/1,s11,x8/7,pj/b,s4,x1/10,pl/e,x14/0,s15,x6/5,pg/i,x1/0,pf/l,x10/8,s12,x9/14,s8,x15/5,s12,x3/8,s15,x11/10,s14,x14/13,s14,x5/10,s8,x8/6,pg/k,x10/14,pn/j,x15/11,s11,x9/14,pg/f,x11/15,s1,x4/0,s2,x5/11,s13,x6/4,s3,x9/15,s2,x7/1,s12,x0/4,s12,x10/7,s11,x4/12,s1,x6/14,s9,x1/7,pm/b,x12/2,s15,x3/14,pl/o,x0/4,s5,x12/2,s2,x11/7,s6,x9/1,pj/g,s11,x13/10,s9,x6/12,s3,x3/4,s4,pl/e,x11/1,pk/c,x6/7,pg/e,x10/14,s6,x5/7,s2,x14/15,s15,x8/12,pb/d,x3/7,s10,x6/11,pj/e,x2/13,po/n,x10/8,s7,pa/k,x7/9,po/e,x0/3,s13,x6/2,pi/b,s7,x0/14,pc/f,x15/13,pe/o,x3/4,s6,x9/10,pd/j,x14/0,pk/f,x2/6,po/l,x12/7,pp/b,x3/6,s12,x5/13,s5,pk/l,x1/10,s10,x3/7,s5,x9/0,s3,x7/12,pd/n,x11/6,s15,x8/5,s13,x13/6,s15,pg/m,s6,x3/14,s2,x6/9,s5,x11/2,pf/p,x10/3,pe/a,s3,x0/8,s8,x10/5,pn/g,x14/3,pd/e,x11/5,s2,x0/9,pa/g,s15,x12/11,s9,x14/7,pp/k,x2/11,s11,x14/4,pc/b,x0/6,po/d,x10/13,s5,x11/9,pf/k,x10/6,s6,x8/4,pa/p,x10/14,s1,x1/12,s8,x2/6,po/g,s7,x9/13,s13,x3/10,s3,x14/8,s10,x10/1,s7,x5/9,pa/j,x7/10,s13,x5/11,s4,x3/12,s10,x7/0,s7,pe/n,s11,x8/1,pl/f,x12/6,pi/m,x3/13,s3,x11/5,s13,x8/7,pp/b,s6,pd/i,x13/15,pp/h,x4/12,s12,x8/6,pb/f,x1/12,pp/e,s13,x2/15,pi/j,x1/4,pe/h,x10/3,pa/c,x6/5,pm/f,s8,pc/e,x10/13,pm/g,s4,x2/6,pd/i,x7/10,s5,x12/13,pp/m,x3/4,s7,x7/1,pg/b,x8/3,s3,x5/11,pm/p,x4/12,s2,x14/10,ph/e,x15/7,pm/a,s3,x6/1,s15,pp/o,x7/10,pk/f,s3,x13/1,pc/p,x2/11,s4,pl/i,x3/1,s14,x4/12,pb/c,x13/7,pf/g,x5/8,s7,x9/2,s10,x0/13,pi/h,x4/15,s8,x12/6,s5,x8/0,s5,x15/5,s4,x2/0,pn/g,x4/6,po/l,x0/3,s10,pj/k,x2/1,pf/a,x15/5,s15,x1/7,s7,pb/m,x3/13,s4,x2/5,s1,x11/15,s12,x10/2,pn/f,x13/7,s5,x6/5,pa/d,x3/8,pc/k,x12/9,s1,x5/14,pm/j,x15/4,pd/f,x12/5,pg/e,x4/9,s1,x10/1,po/l,x0/13,pa/c,x6/11,pj/o,x12/13,s2,x0/6,pn/k,x11/9,s9,x14/6,pb/g,x11/12,s1,x2/13,s15,x7/0,s2,pk/l,x3/1,pc/m,x8/5,s3,x12/13,s6,x15/9,pe/g,x2/11,pf/j,x12/8,s4,x6/15,s14,x12/3,s7,x2/7,pb/l,x9/14,s13,x1/15,s14,x11/14,s6,x2/15,s15,x7/10,s14,x13/0,pg/k,x4/1,pa/f,s1,x12/8,ph/b,x14/0,s3,x3/10,s15,x11/14,s15,x9/1,s1,x11/10,s1,x5/7,s3,pj/e,x0/10,pl/a,x4/13,s12,x6/12,pj/n,x1/4,pg/l,x7/13,s14,x12/10,s2,x3/4,s13,x11/5,s7,x6/0,s11,x8/7,s1,x10/0,pb/j,x14/11,pm/e,x3/12,s10,x4/14,s6,pp/o,x6/15,s8,pe/n,x2/3,s4,x11/8,pk/o,x6/2,s7,x8/1,s6,x7/5,pa/g,x9/12,s3,x14/2,s2,x5/11,s7,x1/9,pb/k,x10/15,ph/j,x2/9,s1,pl/a,x10/1,pd/n,x7/6,s12,x13/2,s15,x9/1,s11,x12/0,s9,x13/9,s2,x8/10,pg/o,x13/4,s8,x9/14,pk/f,x3/15,pm/d,x2/6,s3,x4/13,pp/o,x0/6,s10,x5/12,s10,x1/7,s10,x0/8,s12,x14/3,pi/h,x4/5,s6,x12/13,pj/c,x15/9,s2,x10/3,pp/h,x1/2,s12,x7/10,pn/g,x5/14,s5,x1/13,s12,x7/4,s10,x6/14,ph/i,x13/5,s7,x1/3,s11,x0/8,s7,x15/10,s12,x7/12,s7,x4/13,s8,pd/c,x3/1,s12,x8/11,pb/n,x2/0,s8,pd/e,s8,x13/11,s5,x9/3,pb/g,x0/10,pj/n,x13/15,pl/a,x10/14,s2,x4/6,pf/c,x7/8,pb/l,x9/4,s3,x15/8,pc/e,x12/6,s8,x13/4,s15,x12/6,s9,x4/14,s1,x6/10,s14,x0/15,pg/o,x3/7,pl/a,x8/14,s1,x10/2,s8,x7/15,s8,x1/10,ph/p,x5/9,pb/l,s7,x14/6,s7,x5/11,pn/h,x14/0,pc/g,x15/8,pj/b,x5/14,s10,x10/0,pc/p,x8/12,po/h,x5/15,s14,x10/13,pk/g,x4/8,s15,x1/10,ph/n,x12/13,pd/o,s12,x3/1,s6,x5/0,pe/i,x15/6,s1,x11/13,ph/n,x2/4,pd/f,x13/6,pi/m,x2/14,s3,x15/10,s5,x14/13,s11,x11/5,pd/k,s1,x7/3,pa/g,x2/9,s11,x4/12,pe/h,x14/5,s5,x1/13,pm/i,x2/7,s12,x3/0,s7,x5/11,pa/d,x14/13,s6,x9/3,s7,x7/11,pp/c,x8/0,s8,x2/11,s2,x6/15,pl/b,x4/14,s10,x12/5,s8,x11/15,s15,x13/12,s11,x10/15,s10,x7/6,pi/j,x5/12,pe/d,x0/3,s6,x5/6,s4,x7/11,ph/i,x13/10,s12,x9/0,s12,x11/8,s2,x4/10,s4,x8/0,pj/n,x6/7,pc/e,x8/14,pa/h,x6/3,pl/k,s13,x12/8,s11,x7/13,pg/b,x5/2,s11,x4/15,s13,x13/3,pa/p,x14/0,s13,x5/8,pi/h,x11/4,pe/p,x2/12,pi/o,x15/0,s11,x7/3,s7,pk/c,x11/4,po/p,x9/15,s5,x13/3,s15,x15/12,pj/l,x14/8,pp/g,x2/12,s13,x1/4,pc/i,x6/15,s15,x10/11,pe/m,x9/13,s1,pg/p,x15/4,pb/c,x8/9,pi/n,x12/11,po/g,x8/14,s7,x5/1,pm/b,x12/9,s14,x5/0,pf/k,x4/8,pi/j,x6/7,s6,x15/3,s5,x0/5,s7,x12/1,s5,x13/6,s4,x10/3,s1,x6/14,pd/p,x4/1,s12,x9/12,s5,x6/2,po/b,x11/3,pn/i,x5/15,s10,x7/1,pc/e,s15,pb/j,x3/4,pf/h,x11/0,pn/m,s3,x2/9,s5,x1/5,pg/c,s14,x10/13,pl/k,x4/2,pb/i,x11/8,s15,x4/2,pj/l,x10/5,s2,x8/14,pf/p,s3,x11/0,s4,x15/13,pm/l,x7/11,s7,x6/10,s12,pn/h,x7/15,s6,x3/5,pp/k,x4/1,s9,x15/9,s8,x13/6,s7,x5/14,s8,x4/0,s14,x10/12,s7,x0/7,s6,x8/2,s3,x4/13,pi/c,x0/7,s1,x3/9,s1,x13/5,s7,x7/10,pa/h,x4/12,pe/p,x15/7,s1,x3/13,s10,x15/7,s2,x4/0,pn/f,x3/5,s11,x4/12,s7,x9/10,pg/e,x4/15,s2,x6/12,s1,pl/d,s15,x5/8,pa/g,x2/3,pf/j,x5/14,s3,x3/9,s11,pk/a,s3,x5/15,s5,x13/2,s12,x12/3,s7,x13/6,s1,x15/12,pm/j,x7/4,pd/i,x1/15,s1,x3/12,s3,x10/14,pb/j,x11/15,s9,x1/4,s3,x9/5,pl/d,x15/11,pa/h,s12,x4/6,s6,x5/1,s4,x12/9,po/e,x3/8,pn/m,x2/9,po/l,x6/14,s4,x2/13,pm/j,x3/5,po/i,x8/7,s9,x4/3,s4,x2/7,s10,x4/12,pj/b,x11/13,s4,x5/4,s8,x12/6,pi/d,x5/2,s2,x7/15,pa/b,x10/5,pc/h,x9/11,s4,x12/1,pd/n,x2/7,pc/h,s15,x6/14,s4,x9/7,pg/j,x8/15,pb/i,x3/7,s13,x13/8,s8,x6/14,pl/h,x1/9,po/a,x14/5,s5,x7/6,s14,x15/1,pk/f,x6/9,s2,x5/8,s11,pc/d,x1/2,s5,pf/e,x10/9,pl/g,x6/14,s4,x11/13,pm/o,x5/9,s6,x6/11,pl/a,x10/0,s2,x9/5,po/k,s7,x0/14,s3,x1/12,pj/f,x11/6,s4,x8/7,pm/h,x0/10,s1,pd/k,x3/4,s2,x7/15,s1,x13/3,s7,pj/l,x1/12,s12,pa/c,x6/9,pe/o,x12/4,s5,x9/5,pd/j,s3,x4/10,s2,x9/7,s5,x5/11,pa/f,x8/0,pk/n,x3/5,po/b,x13/0,s13,x12/11,s3,x6/8,pj/l,x4/13,s8,x2/11,s13,x9/13,s1,x5/12,s5,x2/14,s4,x8/13,s8,x14/1,pi/k,x12/5,s15,pp/l,x10/8,s14,pk/c,x1/14,s1,x2/5,s3,pg/l,x4/7,pp/d,x14/3,pb/h,x10/11,s2,x3/2,s4,x11/0,s1,pd/p,s2,x10/14,s4,x1/9,pc/e,x11/8,s11,x4/1,s8,x10/12,ph/o,x0/9,s15,pl/k,s15,x7/10,pb/c,x2/6,pl/n,x10/8,s11,x11/13,s3,x15/6,s4,x11/13,pj/d,x3/10,s11,x15/11,s10,x5/4,s8,x9/3,s12,x15/7,pf/e,x6/4,s3,x2/10,pd/b,x8/1,pf/e,x2/13,s12,x11/6,pk/a,x4/10,s2,x3/15,s4,x12/2,s7,x4/6,s8,x10/0,s14,x7/6,s2,x5/4,pc/n,x13/12,s3,x3/9,ph/l,s10,pn/j,x6/11,s13,x9/8,pi/o,x10/11,s14,x13/15,s5,x7/12,s13,x1/11,s11,x9/8,pg/d,x12/5,po/b,x4/9,s4,x6/1,pj/n,x14/11,pf/c,x1/8,pk/a,x11/5,pc/l,x12/8,s3,x4/15,pn/j,x12/14,s13,x3/0,s15,x8/13,s10,x1/14,s10,x8/15,s12,x6/10,s7,x11/7,s12,x12/9,s7,x11/14,s11,x12/15,s7,x9/8,s8,x15/3,pe/d,s7,x11/2,s15,x7/10,s10,x2/6,s4,x11/0,pm/f,x15/8,po/h,x14/5,s10,pg/d,x7/8,s4,x3/10,s4,x7/5,s6,x14/3,s10,x6/5,pn/a,s10,x8/3,s10,x13/7,pd/k,x5/9,s10,x11/2,po/p,s11,pi/h,x1/10,pl/o,x7/15,s3,x2/3,s1,x7/10,s14,x3/12,pn/k,s14,x14/13,pg/b,x4/6,s7,x7/13,pj/l,x5/6,s13,x3/2,pb/m,x0/6,pg/h,x14/2,s13,x13/10,s4,x2/15,s13,x5/12,s3,x9/11,pp/a,x5/7,pe/c,x8/6,s7,x3/9,po/b,x11/7,pk/n,s8,x4/13,pi/b,x15/2,s4,pf/h,x9/14,s14,x7/2,s2,x1/8,s9,x10/12,pd/o,x2/15,s14,x3/5,s4,x10/15,pl/j,x3/9,s15,x13/4,pd/h,x0/10,pb/o,x11/1,s11,x10/0,s1,x4/8,pd/m,x2/14,pe/f,x11/9,s10,x8/14,s3,x11/3,pi/m,x2/14,s12,x1/13,pa/g,s10,x0/7,pd/o,s9,x9/4,s6,x3/11,pm/b,x5/13,s7,pc/d,x6/4,s15,x11/5,s6,x6/14,s1,x10/4,s2,x13/5,pn/f,s15,x15/10,s15,x3/1,s2,x12/8,s1,x3/9,pl/d,x6/4,pi/b,x5/3,pc/f,x13/9,pg/n,s6,x8/4,s1,x6/3,s6,x15/5,s4,x4/6,pk/l,x2/14,s10,x11/0,s12,x13/12,s3,x10/8,s10,x13/11,s6,pd/i,x15/10,s1,x4/14,s7,x1/8,s11,x15/12,pc/k,x9/11,pj/p,x15/1,pd/o,x0/9,s2,x15/10,pm/a,s9,x14/11,pf/l,x9/1,s4,x13/14,pm/e,x9/0,s10,x8/7,s12,x13/9,s15,x15/2,s4,pa/c,s10,x3/10,s7,x13/12,s15,x3/8,po/j,x15/4,s8,x12/6,s5,pm/h,x2/4,po/n,x1/6,s7,x8/12,s4,x6/5,s9,x11/3,s8,x0/6,s11,x14/10,pk/i,x9/1,s5,x5/2,s4,x9/10,pj/f,x1/8,pc/k,x4/7,ph/o,x9/2,s10,x6/1,s2,x2/7,s14,pm/k,x9/0,pg/n,x7/15,pj/p,x0/10,pd/g,x7/13,pm/l,x10/5,s11,x14/13,pj/p,s9,x12/2,pd/k,x10/3,pn/m,x7/6,pf/h,x9/5,pk/g,s15,x12/7,s9,x3/11,ph/c,x10/5,pf/j,x0/3,s9,x2/14,s10,x3/6,pb/l,x10/5,s1,x3/8,s3,x13/9,s9,x14/0,s6,x3/13,pf/p,x6/0,s3,x13/12,pj/m,s5,x10/15,s4,x7/12,pd/c,x5/2,pa/k,x0/15,s15,x2/8,pd/p,x11/6,pn/i,s11,x4/15,s15,x6/1,pk/f,x15/14,s11,x3/2,s12,x12/8,pm/b,s14,x6/0,ph/n,x7/5,s11,x0/1,pk/b,x7/8,pg/c,s12,x6/0,s3,pa/i,x3/14,pg/m,x15/4,pn/a,x7/14,pl/p,x1/0,s3,x4/2,pf/o,x11/14,pm/b,s13,x2/6,pd/k,x11/13,s2,x3/1,pp/g,x10/6,s14,x4/9,s12,x5/7,pk/e,x4/12,s5,x8/14,s14,x10/0,pi/l,x5/11,pg/n,x6/2,s13,x14/7,s6,x13/12,s9,x11/5,pa/m,x6/9,s4,pk/l,x4/7,s8,x1/0,s11,x7/14,pf/e,s1,x9/15,s4,x0/1,s3,x14/5,s10,x8/9,pn/k,s15,x3/0,ph/l,x4/11,pa/e,x15/9,pl/f,x14/0,pc/g,x9/2,s14,x5/0,s4,pe/b,x11/4,s15,x13/5,s11,x8/14,pn/o,x6/11,s7,x12/1,pf/j,x14/8,s2,x10/13,pp/i,x8/12,s6,x5/1,s2,x8/15,pm/b,x10/9,s5,x15/11,pj/a,x14/1,s4,x6/2,pc/n,x9/8,po/d,x12/13,pg/i,x11/1,s6,x8/3,pp/f,x14/13,s6,x10/5,s4,x3/6,s7,x15/11,s5,x3/10,s2,x6/1,pk/j,s7,x11/5,s13,x6/12,pe/d,x1/15,s5,x0/6,s9,x3/7,s2,x5/1,s4,x0/6,s4,x9/5,s11,x6/10,s15,x1/13,pb/l,x15/9,s2,x3/8,pc/n,x5/15,s2,x4/12,pm/o,x1/5,s9,x0/11,s8,x15/5,s10,x13/9,pb/g,s9,x0/8,s8,x1/15,s11,x0/8,pj/a,x13/11,s3,x14/6,s2,x7/10,s5,x12/4,s1,pm/o,s14,x6/7,s3,pi/e,x11/2,pm/c,x4/5,pi/e,s6,x1/3,s12,x7/2,s7,x11/0,s8,x13/14,ph/f,x5/12,pk/p,x3/7,s13,x10/8,s14,x11/1,pa/b,x4/6,po/n,x1/0,s8,x8/3,pl/f,x2/4,po/b,x5/15,s7,x7/4,s8,x0/2,pg/c,x5/10,s15,x15/11,pm/a,x5/9,s15,x15/0,s1,x3/5,pl/n,x1/8,s9,x10/0,pp/c,s7,x4/14,s15,x13/6,pn/b,x3/0,s2,x11/2,s4,x14/7,pd/j,x13/5,s15,x6/0,s11,x10/1,ph/b,x15/9,pm/a,x13/14,s2,x9/1,s6,x2/12,s4,x13/3,s4,x0/11,s14,x7/8,s8,x11/6,s2,x14/1,pf/h,x0/10,s10,x11/3,s4,x2/8,s7,x12/1,pi/p,x9/8,pj/o,x1/3,pa/b,x8/15,s4,x9/0,s6,x3/2,s8,x4/13,s3,x7/15,pl/o,x6/5,pj/c,s6,x12/10,s5,x7/15,s7,x13/0,s6,x5/9,s4,x15/4,pk/b,s15,x12/7,s7,x4/11,s1,x9/10,pg/f,x4/5,s9,x14/1,pn/a,x9/4,s6,pd/m,x13/14,s10,x5/3,s11,x12/11,pk/f,x14/6,pe/g,x5/9,pm/o,x7/0,pf/p,x9/12,s8,pe/h,x15/6,s11,x11/14,s15,x7/0,s5,x9/2,pd/k,x1/0,s6,x10/5,pi/o,x14/11,s5,x15/8,pm/e,x5/3,ph/k,x1/12,pc/f,x0/15,pe/i,x7/2,s9,x10/9,pl/j,x0/14,s14,x7/8,pg/h,x10/4,s13,x0/14,s6,x3/11,s4,x6/4,s4,x8/3,s8,x9/1,po/f,x2/13,pb/c,x0/3,s10,x9/7,pp/d,s6,x13/14,s1,x2/11,s2,x6/1,pc/i,x8/15,pe/o,x10/0,s12,x5/1,pp/l,x15/2,s1,x12/0,s12,x8/15,pb/n,x3/2,pk/a,x15/10,s4,x4/2,s5,x12/9,s9,x10/7,po/j,x6/8,s1,x13/3,s13,x15/5,pa/e,x12/13,s13,pc/h,x8/10,s2,x1/12,s9,x7/6,pe/m,x5/14,s1,x8/0,s1,x1/4,pc/n,x12/10,pe/p,x4/13,po/i,x3/7,pb/n,x5/2,s11,x13/10,s8,pa/p,s3,x3/4,s14,x14/5,s7,x3/8,s14,x15/2,s8,x10/13,pb/j,x2/12,s7,x10/4,s15,pi/p,x1/5,s1,x6/3,pm/g,x4/2,s12,x0/15,pk/h,x5/1,s14,x11/2,s15,x7/0,pi/j,x5/15,pp/f,x11/7,s8,x3/2,po/i,x8/15,pl/e,x14/10,s13,x7/8,pf/i,x15/13,s7,x2/6,s13,x10/4,pg/p,x14/5,s1,x1/7,pm/b,x2/0,pi/h,x6/12,pp/e,x10/7,s12,x4/3,s4,x11/0,s1,x7/10,s4,x0/9,pd/n,s2,x10/11,s14,x13/8,pp/h,x9/10,pm/i,x2/12,pb/j,s14,x15/3,pk/n,x10/1,s4,pj/b,x7/15,pm/o,x12/9,s8,x10/1,ph/d,x14/7,s8,x2/12,s7,pp/a,x11/1,s6,x15/10,pb/m,s8,x1/7,pd/h,x4/5,s9,x15/14,s4,x3/0,pa/e,x6/14,s9,x13/11,s13,pn/o,x9/10,s13,x7/13,s12,x5/12,s13,x11/4,pm/j,x13/15,pe/n,s13,x2/8,s10,x5/10,s6,x11/8,pg/h,x1/15,s6,x2/5,s4,x4/12,s11,x5/11,pc/i,x1/7,po/h,x12/13,s11,x7/2,s14,x5/4,s13,x13/14,s10,pn/a,x10/4,s14,x11/9,pe/k,x2/4,s6,x3/13,ph/n,x10/0,s7,x7/13,s7,x2/0,pa/i,x15/9,s2,x1/12,s4,x8/10,s9,x7/14,pf/h,x6/11,pe/g,x12/10,s3,x14/4,s11,x9/0,ph/b,x13/10,pj/p,x6/8,s9,x15/4,pa/f,x0/8,pm/h,x3/7,s8,x6/8,pf/g,x4/13,s9,x12/3,s14,x1/4,pk/i,x7/6,pf/g,x5/11,pc/d,x14/7,s12,x8/12,s6,x14/10,pb/m,s15,x0/11,s7,x12/10,s10,pk/p,x13/6,pm/b,x2/8,s13,x13/5,s13,x7/11,pj/g,x4/0,s8,x13/12,pn/o,x8/1,s10,x9/2,s15,x6/10,s6,x4/11,s1,x9/8,s8,ph/e,x15/6,pk/d,x1/13,s1,x12/0,s14,x10/11,s2,x8/13,ph/l,x9/0,pf/j,x11/3,s13,x4/13,s10,x11/9,pc/e,x12/13,s12,x7/6,s10,x12/9,pm/h,x3/4,s6,x10/14,s11,x12/13,s14,x2/14,s2,x11/15,s14,x4/12,pp/n,x9/2,s1,x3/5,pk/j,x0/13,s13,x4/2,s13,x3/5,s2,x7/14,pc/f,x13/5,s14,x7/12,pp/k,x2/6,s12,x0/5,s15,x6/1,s6,x14/2,s13,x3/6,s2,x8/0,s5,x12/9,ph/g,x8/14,s4,x1/15,pk/o,x8/7,pl/f,x9/3,pp/i,x13/8,s8,x15/9,s4,pm/o,s1,x6/11,s12,x1/5,pe/i,x0/9,s13,x12/11,pp/f,x8/1,s5,x12/14,pd/i,x13/0,s5,x14/12,s7,pc/h,s5,x10/5,s12,x7/1,s14,x12/13,s5,pe/d,s1,x3/1,s5,x9/13,s9,x5/1,s2,x10/15,s1,x12/0,s12,x11/8,s4,x1/13,pj/f,x9/15,pa/l,s13,x2/4,s2,x1/5,s6,x8/0,s1,x10/13,s1,x12/5,s6,pk/c,x1/4,pj/p,x0/5,ph/e,s5,pf/c,s3,x15/9,s11,x5/13,s15,x7/4,pe/l,x10/5,pc/j,x9/4,pn/m,x13/7,po/b,x3/10,s4,x14/5,s8,x1/8,s14,x11/10,pf/k,x5/13,pp/g,x9/6,s3,x4/11,s15,x6/5,s13,x12/2,s6,x5/14,po/a,x4/8,s11,pn/k,x0/9,s3,x12/1,s3,x11/0,pg/l,s14,x8/5,pe/m,x15/4,s9,x2/10,s12,x1/5,pd/l,x2/4,po/k,x8/11,s3,x9/15,s13,x7/0,s8,x11/12,pe/d,x4/5,pf/h,x0/12,pk/e,x6/14,pa/n,x10/12,pd/p,x9/11,s9,x2/6,s11,x7/13,s12,x6/0,pa/k,x10/5,s1,x3/14,pe/o,x12/4,s12,pb/l,x0/3,s1,x12/14,ph/f,x5/7,pl/i,x12/0,pf/d,x9/8,pl/e,x3/13,s12,x1/14,s8,x13/3,pa/j,x11/12,s12,x13/2,s13,x11/5,pe/b,x8/6,pc/f,x9/14,pm/n,x2/8,s1,x11/15,s1,x0/3,ph/j,x15/4,s1,x9/3,s6,x0/15,pg/p,x8/9,s5,x4/6,ph/c,s7,pf/k,x5/1,s13,x7/15,pd/n,s11,x10/2,s11,x0/8,s9,x14/15,pk/b,x11/7,pf/m,x9/2,pc/d,x3/8,pi/e,s15,x15/7,s10,x12/8,s5,x4/14,pf/j,x10/15,po/a,x1/5,s10,pg/n,x8/4,s10,x11/10,s8,x0/9,pa/f,x8/3,s7,x14/2,po/n,s11,pk/h,x8/9,s11,x6/15,pg/d,x0/2,pn/j,x9/13,pa/h,x11/3,s7,x6/5,s1,x0/3,s5,x8/14,s2,x0/2,s11,x12/14,s9,x7/13,pi/b,x14/9,pk/c,x15/7,s11,x4/5,pd/l,x10/7,pp/k,x11/4,s5,x7/3,pm/l,x13/4,pb/f,x3/14,s6,x8/11,s9,x7/14,s10,x11/12,s9,x1/8,s4,x7/6,s6,x11/8,ph/e,x1/5,s14,pc/m,s5,x15/6,pa/n,x11/5,s3,x6/8,pg/l,s15,x14/5,s12,x0/12,s4,x9/14,s9,x10/7,pj/b,x6/9,s3,x5/1,s9,ph/n,x2/14,s10,pf/k,x9/11,s8,x15/6,s2,x11/10,pp/b,x12/3,pl/h,x11/10,pd/j,x14/15,pm/g,x4/3,s10,x6/0,pb/p,s14,x7/10,s14,x14/12,s7,x11/6,s10,x3/14,pa/h,x8/10,pk/o,x13/11,s2,x8/5,s15,x3/6,s5,x14/10,s6,x6/11,pf/h,x13/3,pd/n,x1/11,s2,x2/4,po/e,s6,pn/k,x11/1,s2,x5/3,s5,x13/12,s5,x2/10,pj/e,x0/4,s15,x11/9,s13,x1/6,s13,pc/f,s11,x2/9,pp/h,x3/7,pc/k,x2/8,s9,x4/5,s13,x6/10,s7,pa/b,x13/12,pj/d,s3,x14/8,pb/e,x0/12,pm/j,s9,x13/10,s1,x2/3,pg/a,x7/14,s1,x2/5,s12,x9/12,s1,x10/6,s5,x3/9,po/k,x11/10,s1,x8/7,pp/l,x4/0,s9,x6/10,s8,x9/8,pg/j,x4/13,pc/a,x5/3,pk/n,x7/8,s12,pc/a,x15/3,s12,x1/13,pl/p,x15/7,s5,pc/k,x1/8,s10,x0/6,pp/i,x7/8,s11,pn/j,x9/1,pb/g,s12,x11/10,pc/k,x3/15,pd/j,x4/14,s11,x9/7,pa/n,x8/1,po/f,x7/13,s11,x1/14,pd/i,x6/7,s1,ph/e,s1,x0/9,s14,x12/11,s8,x10/0,s4,x8/1,s2,x13/11,s4,x6/10,s3,x2/9,pd/p,x7/10,pj/i,x11/12,po/f,s4,x2/1,s4,x10/8,pc/b,x7/9,s8,x11/10,pa/o,s3,pd/j,x6/5,s12,x4/14,s2,x13/12,s5,x2/15,s11,x9/11,s2,x4/15,s7,x3/9,s14,x8/2,s4,x3/4,pm/h,x2/14,s2,x13/5,s9,x7/12,s15,x6/0,pc/k,s13,x15/1,s11,x7/14,s13,x1/5,s10,x11/0,pm/n,x13/10,pf/i,x11/0,s1,x15/7,s7,pd/e,x10/9,s1,x12/11,s3,pc/h,s9,x6/13,s4,x12/15,pm/n,x9/11,pc/i,x13/10,po/k,x4/0,s6,x2/15,pf/b,x7/12,s3,x10/6,s10,x13/3,pc/a,s13,x15/1,s5,x4/9,s8,pd/n,x2/10,pp/m,x8/5,s10,x2/7,s1,x11/12,s3,x9/4,ph/o,x1/0,pl/a,s15,x5/4,pg/e,x13/15,s15,x2/14,s13,x9/10,s7,x0/14,s10,x10/8,s2,x5/6,s7,x2/13,s4,x10/12,s9,x11/2,s4,x1/13,po/d,x10/3,pe/p,x11/9,s11,x6/7,s8,x0/9,s5,x14/15,s13,x6/3,s15,x5/9,s13,x2/10,s12,x5/7,s1,x2/13,s5,x1/4,s9,x10/8,pd/h,x9/5,s11,x0/6,s11,x15/9,pc/p,x5/2,s14,x12/9,pi/b,s8,x7/11,pd/l,x3/6,po/j,x11/5,ph/n,x0/7,s12,x12/5,s10,x11/6,s4,x7/2,pe/b,x15/3,s13,x1/14,pa/m,x6/7,s8,x14/12,s11,x6/8,pp/e,x13/11,s10,x6/7,s7,x13/10,s15,x12/1,pm/k,x5/9,pg/a,s15,x6/0,pi/p,x7/10,s11,x15/13,s9,x11/2,s14,x5/6,pc/h,x11/14,s13,x6/1,s5,pe/j,s15,x14/11,s6,x9/4,s5,x14/10,s10,x3/15,s11,x0/4,s9,x10/8,s10,x7/13,pl/f,s13,x3/12,s1,x7/14,ph/m,x8/4,s7,x11/9,pc/g,x12/7,s10,x4/15,pd/i,x8/13,pp/n,x15/1,s15,x7/8,ph/a,x10/11,pl/m,x8/15,pe/b,x4/2,pc/d,x3/1,pj/e,x9/14,s4,x12/5,s12,x14/10,s13,x5/3,pp/a,x14/12,s7,x4/6,s15,x13/8,s15,x5/4,s5,x15/13,s9,x2/6,s12,x10/12,s7,x11/7,s11,x4/0,s13,x9/1,s12,x10/0,s9,x11/12,s1,x7/6,s1,x1/8,pk/n,x4/10,pm/j,x7/13,s8,x14/3,pd/p,x1/7,pn/h,x15/5,pi/j,x13/2,s15,x10/5,s4,pl/c,x14/1,s15,x0/12,s14,x4/9,po/e,x10/12,pm/h,s3,x7/6,s14,x8/1,s8,x13/2,po/j,x7/10,s13,x1/2,s2,x15/8,ph/i,s9,x12/2,s12,x15/13,pp/m,x6/7,s12,x5/3,pn/f,x4/1,pp/g,x15/14,s1,x5/11,s8,x9/12,pi/j,x13/2,s10,x15/3,s8,x1/0,pc/f,x5/6,s12,x13/8,s5,x12/10,po/i,x9/3,s2,x6/11,pl/p,x3/1,s3,x11/2,pj/a,x9/14,s15,x7/5,s5,x10/11,s4,x14/2,s7,x11/3,s12,x7/9,pm/p,x14/1,s12,x9/11,s7,x4/8,po/j,x14/2,s4,x9/0,pf/g,x2/12,s14,x15/7,s12,x3/5,s10,x14/10,s4,x8/1,s8,x0/15,s12,x10/5,s15,pn/b,x7/14,pm/g,x1/15,s1,x4/7,s1,x13/2,s2,x4/11,s7,x8/15,s14,x13/9,s11,x0/12,s1,x1/13,s13,pd/f,s2,x7/8,pj/p,x10/4,pn/b,x9/14,pg/k,s1,pe/i,x4/13,s1,x15/3,s3,x1/9,pk/b,x5/12,s13,x9/4,s15,x5/10,pa/o,x2/3,s2,x15/9,pn/f,x3/12,pc/j,x2/7,s15,po/a,x13/4,s15,x12/7\";","export default \"Player 1:\\n41\\n26\\n29\\n11\\n50\\n38\\n42\\n20\\n13\\n9\\n40\\n43\\n10\\n24\\n35\\n30\\n23\\n15\\n31\\n48\\n27\\n44\\n16\\n12\\n14\\n\\nPlayer 2:\\n18\\n6\\n32\\n37\\n25\\n21\\n33\\n28\\n7\\n8\\n45\\n46\\n49\\n5\\n19\\n2\\n39\\n4\\n17\\n3\\n22\\n1\\n34\\n36\\n47\";","export default \"You come across some programs that are trying to implement a software emulation of a hash based on knot-tying. The hash these programs are implementing isn't very strong, but you decide to help them anyway. You make a mental note to remind the Elves later not to invent their own cryptographic functions.\\n\\nThis hash function simulates tying a knot in a circle of string with 256 marks on it. Based on the input to be hashed, the function repeatedly selects a span of string, brings the ends together, and gives the span a half-twist to reverse the order of the marks within it. After doing this many times, the order of the marks is used to build the resulting hash.\\n\\n```\\n  4--5   pinch   4  5           4   1\\n /    \\\\  5,0,1  / \\\\/ \\\\  twist  / \\\\ / \\\\\\n3      0  -->  3      0  -->  3   X   0\\n \\\\    /         \\\\ /\\\\ /         \\\\ / \\\\ /\\n  2--1           2  1           2   5\\n```\\n\\nTo achieve this, begin with a **list** of numbers from `0` to `255`, a **current position** which begins at `0` (the first element in the list), a **skip size** (which starts at `0`), and a sequence of **lengths** (your puzzle input). Then, for each length:\\n\\n- **Reverse** the order of that **length** of elements in the **list**, starting with the element at the **current position**.\\n- **Move** the **current position** forward by that **length** plus the **skip size**.\\n- **Increase** the **skip size** by one.\\n\\nThe **list** is circular; if the **current position** and the **length** try to reverse elements beyond the end of the list, the operation reverses using as many extra elements as it needs from the front of the list. If the **current position** moves past the end of the list, it wraps around to the front. **Lengths** larger than the size of the **list** are invalid.\\n\\nHere's an example using a smaller list:\\n\\nSuppose we instead only had a circular list containing five elements, `0, 1, 2, 3, 4`, and were given input lengths of `3, 4, 1, 5`.\\n\\n- The list begins as `[0] 1 2 3 4` (where square brackets indicate the **current position**).\\n- The first length, `3`, selects `([0] 1 2) 3 4` (where parentheses indicate the sublist to be reversed).\\n- After reversing that section (`0 1 2` into `2 1 0`), we get `([2] 1 0) 3 4`.\\n- Then, the **current position** moves forward by the **length**, `3`, plus the **skip size**, `0`: `2 1 0 [3] 4`. Finally, the **skip size** increases to `1`.\\n- The second length, `4`, selects a section which wraps: `2 1) 0 ([3] 4`.\\n- The sublist `3 4 2 1` is reversed to form `1 2 4 3`: `4 3) 0 ([1] 2`.\\n- The **current position** moves forward by the **length** plus the **skip size**, a total of `5`, causing it not to move because it wraps around: `4 3 0 [1] 2`. The **skip size** increases to `2`.\\n- The third length, `1`, selects a sublist of a single element, and so reversing it has no effect.\\n- The **current position** moves forward by the **length** (`1`) plus the **skip size** (`2`): `4 [3] 0 1 2`. The **skip size** increases to `3`.\\n- The fourth length, `5`, selects every element starting with the second: `4) ([3] 0 1 2`. Reversing this sublist (`3 0 1 2 4` into `4 2 1 0 3`) produces: `3) ([4] 2 1 0`.\\n- Finally, the **current position** moves forward by `8`: `3 4 2 1 [0]`. The **skip size** increases to `4`.\\n\\nIn this example, the first two numbers in the list end up being `3` and `4`; to check the process, you can multiply them together to produce `12`.\\n\\nHowever, you should instead use the standard list size of `256` (with values `0` to `255`) and the sequence of **lengths** in your puzzle input. Once this process is complete, **what is the result of multiplying the first two numbers in the list**?\\n\\n[comment]: <> (PART 2)\\n\\nThe logic you've constructed forms a single **round** of the **Knot Hash** algorithm; running the full thing requires many of these rounds. Some input and output processing is also required.\\n\\nFirst, from now on, your input should be taken not as a list of numbers, but as a string of bytes instead. Unless otherwise specified, convert characters to bytes using their [ASCII codes](https://en.wikipedia.org/wiki/ASCII#Printable_characters). This will allow you to handle arbitrary ASCII strings, and it also ensures that your input lengths are never larger than `255`. For example, if you are given `1,2,3`, you should convert it to the ASCII codes for each character: `49,44,50,44,51`.\\n\\nOnce you have determined the sequence of lengths to use, add the following lengths to the end of the sequence: `17, 31, 73, 47, 23`. For example, if you are given `1,2,3`, your final sequence of lengths should be `49,44,50,44,51,17,31,73,47,23` (the ASCII codes from the input string combined with the standard length suffix values).\\n\\nSecond, instead of merely running one **round** like you did above, run a total of `64` rounds, using the same **length** sequence in each round. The **current position** and **skip size** should be preserved between rounds. For example, if the previous example was your first round, you would start your second round with the same **length** sequence (`3, 4, 1, 5, 17, 31, 73, 47, 23`, now assuming they came from ASCII codes and include the suffix), but start with the previous round's **current position** (`4`) and **skip size** (`4`).\\n\\nOnce the rounds are complete, you will be left with the numbers from `0` to `255` in some order, called the **sparse hash**. Your next task is to reduce these to a list of only `16` numbers called the **dense hash**. To do this, use numeric bitwise [XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) to combine each consecutive block of `16` numbers in the sparse hash (there are `16` such blocks in a list of `256` numbers). So, the first element in the dense hash is the first sixteen elements of the sparse hash XOR'd together, the second element in the dense hash is the second sixteen elements of the sparse hash XOR'd together, etc.\\n\\nFor example, if the first sixteen elements of your sparse hash are as shown below, and the XOR operator is `^`, you would calculate the first output number like this:\\n```\\n65 ^ 27 ^ 9 ^ 1 ^ 4 ^ 3 ^ 40 ^ 50 ^ 91 ^ 7 ^ 6 ^ 0 ^ 2 ^ 5 ^ 68 ^ 22 = 64\\n```\\n\\nPerform this operation on each of the sixteen blocks of sixteen numbers in your sparse hash to determine the sixteen numbers in your dense hash.\\n\\nFinally, the standard way to represent a Knot Hash is as a single [hexadecimal string](https://en.wikipedia.org/wiki/Hexadecimal); the final output is the dense hash in hexadecimal notation. Because each number in your dense hash will be between `0` and `255` (inclusive), always represent each number as two hexadecimal digits (including a leading zero as necessary). So, if your first three numbers are `64, 7, 255`, they correspond to the hexadecimal numbers `40, 07, ff`, and so the first six characters of the hash would be `4007ff`. Because every Knot Hash is sixteen such numbers, the hexadecimal representation is always `32` hexadecimal digits (`0`-`f`) long.\\n\\nHere are some example hashes:\\n\\n- The empty string becomes `a2582a3a0e66e6e86e3812dcb672a272`.\\n- `AoC 2017` becomes `33efeb34ea91902bb2f59c9920caa6cd`.\\n- `1,2,3` becomes `3efbe78a8d82f29979031a4aa0b16a9d`.\\n- `1,2,4` becomes `63960835bcdc130f0b66d7ff4f6a5a8e`.\\n\\nTreating your puzzle input as a string of ASCII characters, **what is the Knot Hash of your puzzle input**? Ignore any leading or trailing whitespace you might encounter.\";","export default \"This is it, your final stop: the year -483. It's snowing and dark outside; the only light you can see is coming from a small cottage in the distance. You make your way there and knock on the door.\\n\\nA portly man with a large, white beard answers the door and invites you inside. For someone living near the North Pole in -483, he must not get many visitors, but he doesn't act surprised to see you. Instead, he offers you some milk and cookies.\\n\\nAfter talking for a while, he asks a favor of you. His friend hasn't come back in a few hours, and he's not sure where he is. Scanning the region briefly, you discover one life signal in a cave system nearby; his friend must have taken shelter there. The man asks if you can go there to retrieve his friend.\\n\\nThe cave is divided into square **regions** which are either dominantly **rocky**, **narrow**, or **wet** (called its **type**). Each region occupies exactly one **coordinate** in `X,Y` format where `X` and `Y` are integers and zero or greater. (Adjacent regions can be the same type.)\\n\\nThe scan (your puzzle input) is not very detailed: it only reveals the **depth** of the cave system and the **coordinates of the target**. However, it does not reveal the type of each region. The mouth of the cave is at `0,0`.\\n\\nThe man explains that due to the unusual geology in the area, there is a method to determine any region's type based on its **erosion level**. The erosion level of a region can be determined from its **geologic index**. The geologic index can be determined using the first rule that applies from the list below:\\n\\n- The region at `0,0` (the mouth of the cave) has a geologic index of `0`.\\n- The region at the coordinates of the target has a geologic index of `0`.\\n- If the region's `Y` coordinate is `0`, the geologic index is its `X` coordinate times `16807`.\\n- If the region's `X` coordinate is `0`, the geologic index is its `Y` coordinate times `48271`.\\n- Otherwise, the region's geologic index is the result of multiplying the erosion **levels** of the regions at `X-1,Y` and `X,Y-1`.\\n\\nA region's **erosion level** is its **geologic index** plus the cave system's **depth**, all [modulo](https://en.wikipedia.org/wiki/Modulo_operation) `20183`. Then:\\n\\n- If the **erosion level modulo `3`** is `0`, the region's type is **rocky**.\\n- If the **erosion level modulo `3`** is `1`, the region's type is **wet**.\\n- If the **erosion level modulo `3`** is `2`, the region's type is **narrow**.\\n\\nFor example, suppose the cave system's depth is `510` and the target's coordinates are `10,10`. Using `%` to represent the modulo operator, the cavern would look as follows:\\n\\n- At `0,0`, the geologic index is `0`. The erosion level is `(0 + 510) % 20183 = 510`. The type is `510 % 3 = 0`, **rocky**.\\n- At `1,0`, because the `Y` coordinate is `0`, the geologic index is `1 * 16807 = 16807`. The erosion level is `(16807 + 510) % 20183 = 17317`. The type is `17317 % 3 = 1`, **wet**.\\n- At `0,1`, because the `X` coordinate is `0`, the geologic index is `1 * 48271 = 48271`. The erosion level is `(48271 + 510) % 20183 = 8415`. The type is `8415 % 3 = 0`, **rocky**.\\n- At `1,1`, neither coordinate is `0` and it is not the coordinate of the target, so the geologic index is the erosion level of `0,1` (`8415`) times the erosion level of `1,0` (`17317`), `8415 * 17317 = 145722555`. The erosion level is `(145722555 + 510) % 20183 = 1805`. The type is `1805 % 3 = 2`, **narrow**.\\n- At `10,10`, because they are the target's coordinates, the geologic index is `0`. The erosion level is `(0 + 510) % 20183 = 510`. The type is `510 % 3 = 0`, **rocky**.\\n\\nDrawing this same cave system with rocky as `.`, wet as `=`, narrow as `|`, the mouth as `M`, the target as `T`, with `0,0` in the top-left corner, `X` increasing to the right, and `Y` increasing downward, the top-left corner of the map looks like this:\\n\\n```\\nM=.|=.|.|=.|=|=.\\n.|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n```\\n\\nBefore you go in, you should determine the **risk level** of the area. For the rectangle that has a top-left corner of region `0,0` and a bottom-right corner of the region containing the target, add up the risk level of each individual region: `0` for rocky regions, `1` for wet regions, and `2` for narrow regions.\\n\\nIn the cave system above, because the mouth is at `0,0` and the target is at `10,10`, adding up the risk level of all regions with an `X` coordinate from `0` to `10` and a `Y` coordinate from `0` to `10`, this total is **`114`**.\\n\\n**What is the total risk level for the smallest rectangle that includes `0,0` and the target's coordinates?**\\n\\n[comment]: <> (PART 2)\\n\\nOkay, it's time to go rescue the man's friend.\\n\\nAs you leave, he hands you some tools: a **torch** and some **climbing gear**. You can't equip both tools at once, but you can choose to use **neither**.\\n\\nTools can only be used in certain regions:\\n\\n- In **rocky** regions, you can use the **climbing gear** or the **torch**. You cannot use **neither** (you'll likely slip and fall).\\n- In **wet** regions, you can use the **climbing gear** or **neither** tool. You cannot use the **torch** (if it gets wet, you won't have a light source).\\n- In **narrow** regions, you can use the **torch** or **neither** tool. You cannot use the **climbing gear** (it's too bulky to fit).\\n\\nYou start at `0,0` (the mouth of the cave) with **the torch equipped** and must reach the target coordinates as quickly as possible. The regions with negative `X` or `Y` are solid rock and cannot be traversed. The fastest route might involve entering regions beyond the `X` or `Y` coordinate of the target.\\n\\nYou can **move to an adjacent region** (up, down, left, or right; never diagonally) if your currently equipped tool allows you to enter that region. Moving to an adjacent region takes **one minute**. (For example, if you have the **torch** equipped, you can move between **rocky** and **narrow** regions, but cannot enter **wet** regions.)\\n\\nYou can **change your currently equipped tool or put both away** if your new equipment would be valid for your current region. Switching to using the **climbing gear**, **torch**, or **neither** always takes **seven minutes**, regardless of which tools you start with. (For example, if you are in a **rocky** region, you can switch from the torch to the **climbing gear**, but you cannot switch to **neither**.)\\n\\nFinally, once you reach the target, you need the **torch** equipped before you can find him in the dark. The target is always in a **rocky** region, so if you arrive there with **climbing gear** equipped, you will need to spend seven minutes switching to your torch.\\n\\nFor example, using the same cave system as above, starting in the top left corner (`0,0`) and moving to the bottom right corner (the target, `10,10`) as quickly as possible, one possible route is as follows, with your current position marked `X`:\\n\\n```\\nInitially:\\nX=.|=.|.|=.|=|=.\\n.|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nDown:\\nM=.|=.|.|=.|=|=.\\nX|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nRight:\\nM=.|=.|.|=.|=|=.\\n.X=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nSwitch from using the torch to neither tool:\\nM=.|=.|.|=.|=|=.\\n.X=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nRight 3:\\nM=.|=.|.|=.|=|=.\\n.|=|X|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nSwitch from using neither tool to the climbing gear:\\nM=.|=.|.|=.|=|=.\\n.|=|X|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nDown 7:\\nM=.|=.|.|=.|=|=.\\n.|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..X==..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nRight:\\nM=.|=.|.|=.|=|=.\\n.|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..=X=..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nDown 3:\\nM=.|=.|.|=.|=|=.\\n.|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||.X.|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nRight:\\nM=.|=.|.|=.|=|=.\\n.|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||..X|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nDown:\\nM=.|=.|.|=.|=|=.\\n.|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.X..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nRight 4:\\nM=.|=.|.|=.|=|=.\\n.|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===T===||\\n=|||...|==..|=.|\\n=.=|=.=..=X||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nUp 2:\\nM=.|=.|.|=.|=|=.\\n.|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===X===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n\\nSwitch from using the climbing gear to the torch:\\nM=.|=.|.|=.|=|=.\\n.|=|=|||..|.=...\\n.==|....||=..|==\\n=.|....|.==.|==.\\n=|..==...=.|==..\\n=||.=.=||=|=..|=\\n|.=.===|||..=..|\\n|..==||=.|==|===\\n.=..===..=|.|||.\\n.======|||=|=.|=\\n.===|=|===X===||\\n=|||...|==..|=.|\\n=.=|=.=..=.||==|\\n||=|=...|==.=|==\\n|=.=||===.|||===\\n||.|==.|.|.||=||\\n```\\n\\nThis is tied with other routes as the **fastest way to reach the target**: **`45`** minutes. In it, `21` minutes are spent switching tools (three times, seven minutes each) and the remaining `24` minutes are spent moving.\\n\\n**What is the fewest number of minutes you can take to reach the target?**\";","export default \"As your flight approaches the regional airport where you'll switch to a much larger plane, [customs declaration forms](https://en.wikipedia.org/wiki/Customs_declaration) are distributed to the passengers.\\n\\nThe form asks a series of 26 yes-or-no questions marked `a` through `z`. All you need to do is identify the questions for which **anyone in your group** answers \\\"yes\\\". Since your group is just you, this doesn't take very long.\\n\\nHowever, the person sitting next to you seems to be experiencing a language barrier and asks if you can help. For each of the people in their group, you write down the questions for which they answer \\\"yes\\\", one per line. For example:\\n\\n```\\nabcx\\nabcy\\nabcz\\n```\\n\\nIn this group, there are `6` questions to which anyone answered \\\"yes\\\": `a`, `b`, `c`, `x`, `y`, and `z`. (Duplicate answers to the same question don't count extra; each question counts at most once.)\\n\\nAnother group asks for your help, then another, and eventually you've collected answers from every group on the plane (your puzzle input). Each group's answers are separated by a blank line, and within each group, each person's answers are on a single line. For example:\\n\\n```\\nabc\\n\\na\\nb\\nc\\n\\nab\\nac\\n\\na\\na\\na\\na\\n\\nb\\n```\\n\\nThis list represents answers from five groups:\\n\\n- The first group contains one person who answered \\\"yes\\\" to `3` questions: `a`, `b`, and `c`.\\n- The second group contains three people; combined, they answered \\\"yes\\\" to `3` questions: `a`, `b`, and `c`.\\n- The third group contains two people; combined, they answered \\\"yes\\\" to `3` questions: `a`, `b`, and `c`.\\n- The fourth group contains four people; combined, they answered \\\"yes\\\" to only `1` question, `a`.\\n- The last group contains one person who answered \\\"yes\\\" to only `1` question, `b`.\\n\\nIn this example, the sum of these counts is `3 + 3 + 3 + 1 + 1` = `11`.\\n\\nFor each group, count the number of questions to which anyone answered \\\"yes\\\". **What is the sum of those counts?**\\n\\n[comment]: <> (PART 2)\\n\\nAs you finish the last group's customs declaration, you notice that you misread one word in the instructions:\\n\\nYou don't need to identify the questions to which **anyone** answered \\\"yes\\\"; you need to identify the questions to which **everyone** answered \\\"yes\\\"!\\n\\nUsing the same example as above:\\n\\n```\\nabc\\n\\na\\nb\\nc\\n\\nab\\nac\\n\\na\\na\\na\\na\\n\\nb\\n```\\n\\nThis list represents answers from five groups:\\n\\n- In the first group, everyone (all 1 person) answered \\\"yes\\\" to `3` questions: `a`, `b`, and `c`.\\n- In the second group, there is **no** question to which everyone answered \\\"yes\\\".\\n- In the third group, everyone answered yes to only `1` question, `a`. Since some people did not answer \\\"yes\\\" to `b` or `c`, they don't count.\\n- In the fourth group, everyone answered yes to only `1` question, `a`.\\n- In the fifth group, everyone (all 1 person) answered \\\"yes\\\" to `1` question, `b`.\\n\\nIn this example, the sum of these counts is `3 + 0 + 1 + 1 + 1` = `6`.\\n\\nFor each group, count the number of questions to which **everyone** answered \\\"yes\\\". **What is the sum of those counts?**\";","export default \"As you walk through the door, a glowing humanoid shape yells in your direction. \\\"You there! Your state appears to be idle. Come help us repair the corruption in this spreadsheet - if we take another millisecond, we'll have to display an hourglass cursor!\\\"\\n\\nThe spreadsheet consists of rows of apparently-random numbers. To make sure the recovery process is on the right track, they need you to calculate the spreadsheet's **checksum**. For each row, determine the difference between the largest value and the smallest value; the checksum is the sum of all of these differences.\\n\\nFor example, given the following spreadsheet:\\n\\n```\\n5 1 9 5\\n7 5 3\\n2 4 6 8\\n```\\n\\n- The first row's largest and smallest values are `9` and `1`, and their difference is `8`.\\n- The second row's largest and smallest values are `7` and `3`, and their difference is `4`.\\n- The third row's difference is `6`.\\n\\nIn this example, the spreadsheet's checksum would be `8 + 4 + 6 = 18`.\\n\\n**What is the checksum** for the spreadsheet in your puzzle input?\\n\\n[comment]: <> (PART 2)\\n\\n\\\"Great work; looks like we're on the right track after all. Here's a *star* for your effort.\\\" However, the program seems a little worried. Can programs **be** worried?\\n\\n\\\"Based on what we're seeing, it looks like all the User wanted is some information about the **evenly divisible values** in the spreadsheet. Unfortunately, none of us are equipped for that kind of calculation - most of us specialize in bitwise operations.\\\"\\n\\nIt sounds like the goal is to find the only two numbers in each row where one evenly divides the other - that is, where the result of the division operation is a whole number. They would like you to find those numbers on each line, divide them, and add up each line's result.\\n\\nFor example, given the following spreadsheet:\\n\\n```\\n5 9 2 8\\n9 4 7 3\\n3 8 6 5\\n```\\n\\n- In the first row, the only two numbers that evenly divide are `8` and `2`; the result of this division is `4`.\\n- In the second row, the two numbers are `9` and `3`; the result is `3`.\\n- In the third row, the result is `2`.\\n\\nIn this example, the sum of the results would be `4 + 3 + 2 = 9`.\\n\\nWhat is the **sum of each row's result** in your puzzle input?\";","export default \"The high-speed train leaves the forest and quickly carries you south. You can even see a desert in the distance! Since you have some spare time, you might as well see if there was anything interesting in the image the Mythical Information Bureau satellite captured.\\n\\nAfter decoding the satellite messages, you discover that the data actually contains many small images created by the satellite's **camera array**. The camera array consists of many cameras; rather than produce a single square image, they produce many smaller square image **tiles** that need to be **reassembled back into a single image**.\\n\\nEach camera in the camera array returns a single monochrome **image tile** with a random unique **ID number**. The tiles (your puzzle input) arrived in a random order.\\n\\nWorse yet, the camera array appears to be malfunctioning: each image tile has been **rotated and flipped to a random orientation**. Your first task is to reassemble the original image by orienting the tiles so they fit together.\\n\\nTo show how the tiles should be reassembled, each tile's image data includes a border that should line up exactly with its adjacent tiles. All tiles have this border, and the border lines up exactly when the tiles are both oriented correctly. Tiles at the edge of the image also have this border, but the outermost edges won't line up with any other tiles.\\n\\nFor example, suppose you have the following nine tiles:\\n\\n```\\nTile 2311:\\n..##.#..#.\\n##..#.....\\n#...##..#.\\n####.#...#\\n##.##.###.\\n##...#.###\\n.#.#.#..##\\n..#....#..\\n###...#.#.\\n..###..###\\n\\nTile 1951:\\n#.##...##.\\n#.####...#\\n.....#..##\\n#...######\\n.##.#....#\\n.###.#####\\n###.##.##.\\n.###....#.\\n..#.#..#.#\\n#...##.#..\\n\\nTile 1171:\\n####...##.\\n#..##.#..#\\n##.#..#.#.\\n.###.####.\\n..###.####\\n.##....##.\\n.#...####.\\n#.##.####.\\n####..#...\\n.....##...\\n\\nTile 1427:\\n###.##.#..\\n.#..#.##..\\n.#.##.#..#\\n#.#.#.##.#\\n....#...##\\n...##..##.\\n...#.#####\\n.#.####.#.\\n..#..###.#\\n..##.#..#.\\n\\nTile 1489:\\n##.#.#....\\n..##...#..\\n.##..##...\\n..#...#...\\n#####...#.\\n#..#.#.#.#\\n...#.#.#..\\n##.#...##.\\n..##.##.##\\n###.##.#..\\n\\nTile 2473:\\n#....####.\\n#..#.##...\\n#.##..#...\\n######.#.#\\n.#...#.#.#\\n.#########\\n.###.#..#.\\n########.#\\n##...##.#.\\n..###.#.#.\\n\\nTile 2971:\\n..#.#....#\\n#...###...\\n#.#.###...\\n##.##..#..\\n.#####..##\\n.#..####.#\\n#..#.#..#.\\n..####.###\\n..#.#.###.\\n...#.#.#.#\\n\\nTile 2729:\\n...#.#.#.#\\n####.#....\\n..#.#.....\\n....#..#.#\\n.##..##.#.\\n.#.####...\\n####.#.#..\\n##.####...\\n##..#.##..\\n#.##...##.\\n\\nTile 3079:\\n#.#.#####.\\n.#..######\\n..#.......\\n######....\\n####.#..#.\\n.#...#.##.\\n#.#####.##\\n..#.###...\\n..#.......\\n..#.###...\\n```\\n\\nBy rotating, flipping, and rearranging them, you can find a square arrangement that causes all adjacent borders to line up:\\n\\n```\\n#...##.#.. ..###..### #.#.#####.\\n..#.#..#.# ###...#.#. .#..######\\n.###....#. ..#....#.. ..#.......\\n###.##.##. .#.#.#..## ######....\\n.###.##### ##...#.### ####.#..#.\\n.##.#....# ##.##.###. .#...#.##.\\n#...###### ####.#...# #.#####.##\\n.....#..## #...##..#. ..#.###...\\n#.####...# ##..#..... ..#.......\\n#.##...##. ..##.#..#. ..#.###...\\n\\n#.##...##. ..##.#..#. ..#.###...\\n##..#.##.. ..#..###.# ##.##....#\\n##.####... .#.####.#. ..#.###..#\\n####.#.#.. ...#.##### ###.#..###\\n.#.####... ...##..##. .######.##\\n.##..##.#. ....#...## #.#.#.#...\\n....#..#.# #.#.#.##.# #.###.###.\\n..#.#..... .#.##.#..# #.###.##..\\n####.#.... .#..#.##.. .######...\\n...#.#.#.# ###.##.#.. .##...####\\n\\n...#.#.#.# ###.##.#.. .##...####\\n..#.#.###. ..##.##.## #..#.##..#\\n..####.### ##.#...##. .#.#..#.##\\n#..#.#..#. ...#.#.#.. .####.###.\\n.#..####.# #..#.#.#.# ####.###..\\n.#####..## #####...#. .##....##.\\n##.##..#.. ..#...#... .####...#.\\n#.#.###... .##..##... .####.##.#\\n#...###... ..##...#.. ...#..####\\n..#.#....# ##.#.#.... ...##.....\\n```\\n\\nFor reference, the IDs of the above tiles are:\\n\\n```\\n1951    2311    3079\\n2729    1427    2473\\n2971    1489    1171\\n```\\n\\nTo check that you've assembled the image correctly, multiply the IDs of the four corner tiles together. If you do this with the assembled tiles from the example above, you get `1951 * 3079 * 2971 * 1171` = **`20899048083289`**.\\n\\nAssemble the tiles into an image. **What do you get if you multiply together the IDs of the four corner tiles?**\\n\\n[comment]: <> (PART 2)\\n\\nNow, you're ready to **check the image for sea monsters**.\\n\\nThe borders of each tile are not part of the actual image; start by removing them.\\n\\nIn the example above, the tiles become:\\n\\n```\\n.#.#..#. ##...#.# #..#####\\n###....# .#....#. .#......\\n##.##.## #.#.#..# #####...\\n###.#### #...#.## ###.#..#\\n##.#.... #.##.### #...#.##\\n...##### ###.#... .#####.#\\n....#..# ...##..# .#.###..\\n.####... #..#.... .#......\\n\\n#..#.##. .#..###. #.##....\\n#.####.. #.####.# .#.###..\\n###.#.#. ..#.#### ##.#..##\\n#.####.. ..##..## ######.#\\n##..##.# ...#...# .#.#.#..\\n...#..#. .#.#.##. .###.###\\n.#.#.... #.##.#.. .###.##.\\n###.#... #..#.##. ######..\\n\\n.#.#.### .##.##.# ..#.##..\\n.####.## #.#...## #.#..#.#\\n..#.#..# ..#.#.#. ####.###\\n#..####. ..#.#.#. ###.###.\\n#####..# ####...# ##....##\\n#.##..#. .#...#.. ####...#\\n.#.###.. ##..##.. ####.##.\\n...###.. .##...#. ..#..###\\n```\\n\\nRemove the gaps to form the actual image:\\n\\n```\\n.#.#..#.##...#.##..#####\\n###....#.#....#..#......\\n##.##.###.#.#..######...\\n###.#####...#.#####.#..#\\n##.#....#.##.####...#.##\\n...########.#....#####.#\\n....#..#...##..#.#.###..\\n.####...#..#.....#......\\n#..#.##..#..###.#.##....\\n#.####..#.####.#.#.###..\\n###.#.#...#.######.#..##\\n#.####....##..########.#\\n##..##.#...#...#.#.#.#..\\n...#..#..#.#.##..###.###\\n.#.#....#.##.#...###.##.\\n###.#...#..#.##.######..\\n.#.#.###.##.##.#..#.##..\\n.####.###.#...###.#..#.#\\n..#.#..#..#.#.#.####.###\\n#..####...#.#.#.###.###.\\n#####..#####...###....##\\n#.##..#..#...#..####...#\\n.#.###..##..##..####.##.\\n...###...##...#...#..###\\n```\\n\\nNow, you're ready to search for sea monsters! Because your image is monochrome, a sea monster will look like this:\\n\\n```\\n                  # \\n#    ##    ##    ###\\n #  #  #  #  #  #   \\n```\\n\\nWhen looking for this pattern in the image, **the spaces can be anything**; only the # need to match. Also, you might need to rotate or flip your image before it's oriented correctly to find sea monsters. In the above image, **after flipping and rotating it** to the appropriate orientation, there are two sea monsters (marked with **`O`**):\\n\\n```\\n.####...#####..#...###..\\n#####..#..#.#.####..#.#.\\n.#.#...#.###...#.##.O#..\\n#.O.##.OO#.#.OO.##.OOO##\\n..#O.#O#.O##O..O.#O##.##\\n...#.#..##.##...#..#..##\\n#.##.#..#.#..#..##.#.#..\\n.###.##.....#...###.#...\\n#.####.#.#....##.#..#.#.\\n##...#..#....#..#...####\\n..#.##...###..#.#####..#\\n....#.##.#.#####....#...\\n..##.##.###.....#.##..#.\\n#...#...###..####....##.\\n.#.##...#.##.#.#.###...#\\n#.###.#..####...##..#...\\n#.###...#.##...#.##O###.\\n.O##.#OO.###OO##..OOO##.\\n..O#.O..O..O.#O##O##.###\\n#.#..##.########..#..##.\\n#.#####..#.#...##..#....\\n#....##..#.#########..##\\n#...#.....#..##...###.##\\n#..###....##.#...##.##.#\\n```\\n\\nDetermine how rough the waters are in the sea monsters' habitat by counting the number of `#` that are **not** part of a sea monster. In the above example, the habitat's water roughness is **`273`**.\\n\\n**How many `#` are not part of a sea monster?**\";","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.es/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n","export default \"You finally have a chance to look at all of the produce moving around. Chocolate, cinnamon, mint, chili peppers, nutmeg, vanilla... the Elves must be growing these plants to make **hot chocolate**! As you realize this, you hear a conversation in the distance. When you go to investigate, you discover two Elves in what appears to be a makeshift underground kitchen/laboratory.\\n\\nThe Elves are trying to come up with the ultimate hot chocolate recipe; they're even maintaining a scoreboard which tracks the quality **score** (`0`-`9`) of each recipe.\\n\\nOnly two recipes are on the board: the first recipe got a score of `3`, the second, `7`. Each of the two Elves has a **current recipe**: the first Elf starts with the first recipe, and the second Elf starts with the second recipe.\\n\\nTo create new recipes, the two Elves combine their current recipes. This creates new recipes from the **digits of the sum** of the current recipes' scores. With the current recipes' scores of `3` and `7`, their sum is `10`, and so two new recipes would be created: the first with score `1` and the second with score `0`. If the current recipes' scores were `2` and `3`, the sum, `5`, would only create one recipe (with a score of `5`) with its single digit.\\n\\nThe new recipes are added to the end of the scoreboard in the order they are created. So, after the first round, the scoreboard is `3, 7, 1, 0`.\\n\\nAfter all new recipes are added to the scoreboard, each Elf picks a new current recipe. To do this, the Elf steps forward through the scoreboard a number of recipes equal to **1 plus the score of their current recipe**. So, after the first round, the first Elf moves forward `1 + 3 = 4` times, while the second Elf moves forward `1 + 7 = 8` times. If they run out of recipes, they loop back around to the beginning. After the first round, both Elves happen to loop around until they land on the same recipe that they had in the beginning; in general, they will move to different recipes.\\n\\nDrawing the first Elf as parentheses and the second Elf as square brackets, they continue this process:\\n\\n```\\n(3)[7]\\n(3)[7] 1  0 \\n 3  7  1 [0](1) 0 \\n 3  7  1  0 [1] 0 (1)\\n(3) 7  1  0  1  0 [1] 2 \\n 3  7  1  0 (1) 0  1  2 [4]\\n 3  7  1 [0] 1  0 (1) 2  4  5 \\n 3  7  1  0 [1] 0  1  2 (4) 5  1 \\n 3 (7) 1  0  1  0 [1] 2  4  5  1  5 \\n 3  7  1  0  1  0  1  2 [4](5) 1  5  8 \\n 3 (7) 1  0  1  0  1  2  4  5  1  5  8 [9]\\n 3  7  1  0  1  0  1 [2] 4 (5) 1  5  8  9  1  6 \\n 3  7  1  0  1  0  1  2  4  5 [1] 5  8  9  1 (6) 7 \\n 3  7  1  0 (1) 0  1  2  4  5  1  5 [8] 9  1  6  7  7 \\n 3  7 [1] 0  1  0 (1) 2  4  5  1  5  8  9  1  6  7  7  9 \\n 3  7  1  0 [1] 0  1  2 (4) 5  1  5  8  9  1  6  7  7  9  2 \\n```\\n\\nThe Elves think their skill will improve after making a few recipes (your puzzle input). However, that could take ages; you can speed this up considerably by identifying **the scores of the ten recipes** after that. For example:\\n\\n- If the Elves think their skill will improve after making `9` recipes, the scores of the ten recipes **after** the first nine on the scoreboard would be `5158916779` (highlighted in the last line of the diagram).\\n- After `5` recipes, the scores of the next ten would be `0124515891`.\\n- After `18` recipes, the scores of the next ten would be `9251071085`.\\n- After `2018` recipes, the scores of the next ten would be `5941429882`.\\n\\n**What are the scores of the ten recipes immediately after the number of recipes in your puzzle input?**\\n\\n[comment]: <> (PART 2)\\n\\nAs it turns out, you got the Elves' plan backwards. They actually want to know how many recipes appear on the scoreboard to the left of the first recipes whose scores are the digits from your puzzle input.\\n\\n- `51589` first appears after `9` recipes.\\n- `01245` first appears after `5` recipes.\\n- `92510` first appears after `18` recipes.\\n- `59414` first appears after `2018` recipes.\\n\\n**How many recipes appear on the scoreboard to the left of the score sequence in your puzzle input?**\";","export default \"A crop of this size requires significant logistics to transport produce, soil, fertilizer, and so on. The Elves are very busy pushing things around in **carts** on some kind of rudimentary system of tracks they've come up with.\\n\\nSeeing as how cart-and-track systems don't appear in recorded history for another 1000 years, the Elves seem to be making this up as they go along. They haven't even figured out how to avoid collisions yet.\\n\\nYou map out the tracks (your puzzle input) and see where you can help.\\n\\nTracks consist of straight paths (`|` and `-`), curves (`/` and `\\\\`), and intersections (`+`). Curves connect exactly two perpendicular pieces of track; for example, this is a closed loop:\\n\\n```\\n/----\\\\\\n|    |\\n|    |\\n\\\\----/\\n```\\n\\nIntersections occur when two perpendicular paths cross. At an intersection, a cart is capable of turning left, turning right, or continuing straight. Here are two loops connected by two intersections:\\n\\n```\\n/-----\\\\\\n|     |\\n|  /--+--\\\\\\n|  |  |  |\\n\\\\--+--/  |\\n   |     |\\n   \\\\-----/\\n```\\n\\nSeveral **carts** are also on the tracks. Carts always face either up (`^`), down (`v`), left (`<`), or right (`>`). (On your initial map, the track under each cart is a straight path matching the direction the cart is facing.)\\n\\nEach time a cart has the option to turn (by arriving at any intersection), it turns **left** the first time, goes **straight** the second time, turns **right** the third time, and then repeats those directions starting again with **left** the fourth time, **straight** the fifth time, and so on. This process is independent of the particular intersection at which the cart has arrived - that is, the cart has no per-intersection memory.\\n\\nCarts all move at the same speed; they take turns moving a single step at a time. They do this based on their **current location**: carts on the top row move first (acting from left to right), then carts on the second row move (again from left to right), then carts on the third row, and so on. Once each cart has moved one step, the process repeats; each of these loops is called a **tick**.\\n\\nFor example, suppose there are two carts on a straight track:\\n\\n```\\n|  |  |  |  |\\nv  |  |  |  |\\n|  v  v  |  |\\n|  |  |  v  X\\n|  |  ^  ^  |\\n^  ^  |  |  |\\n|  |  |  |  |\\n```\\n\\nFirst, the top cart moves. It is facing down (`v`), so it moves down one square. Second, the bottom cart moves. It is facing up (`^`), so it moves up one square. Because all carts have moved, the first tick ends. Then, the process repeats, starting with the first cart. The first cart moves down, then the second cart moves up - right into the first cart, colliding with it! (The location of the crash is marked with an `X`.) This ends the second and last tick.\\n\\nHere is a longer example:\\n\\n```\\n/->-\\\\        \\n|   |  /----\\\\\\n| /-+--+-\\\\  |\\n| | |  | v  |\\n\\\\-+-/  \\\\-+--/\\n  \\\\------/   \\n\\n/-->\\\\        \\n|   |  /----\\\\\\n| /-+--+-\\\\  |\\n| | |  | |  |\\n\\\\-+-/  \\\\->--/\\n  \\\\------/   \\n\\n/---v        \\n|   |  /----\\\\\\n| /-+--+-\\\\  |\\n| | |  | |  |\\n\\\\-+-/  \\\\-+>-/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   v  /----\\\\\\n| /-+--+-\\\\  |\\n| | |  | |  |\\n\\\\-+-/  \\\\-+->/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  /----\\\\\\n| /->--+-\\\\  |\\n| | |  | |  |\\n\\\\-+-/  \\\\-+--^\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  /----\\\\\\n| /-+>-+-\\\\  |\\n| | |  | |  ^\\n\\\\-+-/  \\\\-+--/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  /----\\\\\\n| /-+->+-\\\\  ^\\n| | |  | |  |\\n\\\\-+-/  \\\\-+--/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  /----<\\n| /-+-->-\\\\  |\\n| | |  | |  |\\n\\\\-+-/  \\\\-+--/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  /---<\\\\\\n| /-+--+>\\\\  |\\n| | |  | |  |\\n\\\\-+-/  \\\\-+--/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  /--<-\\\\\\n| /-+--+-v  |\\n| | |  | |  |\\n\\\\-+-/  \\\\-+--/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  /-<--\\\\\\n| /-+--+-\\\\  |\\n| | |  | v  |\\n\\\\-+-/  \\\\-+--/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  /<---\\\\\\n| /-+--+-\\\\  |\\n| | |  | |  |\\n\\\\-+-/  \\\\-<--/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  v----\\\\\\n| /-+--+-\\\\  |\\n| | |  | |  |\\n\\\\-+-/  \\\\<+--/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  /----\\\\\\n| /-+--v-\\\\  |\\n| | |  | |  |\\n\\\\-+-/  ^-+--/\\n  \\\\------/   \\n\\n/---\\\\        \\n|   |  /----\\\\\\n| /-+--+-\\\\  |\\n| | |  X |  |\\n\\\\-+-/  \\\\-+--/\\n  \\\\------/   \\n```\\n\\nAfter following their respective paths for a while, the carts eventually crash. To help prevent crashes, you'd like to know the **location of the first crash**. Locations are given in `X,Y` coordinates, where the furthest left column is `X=0` and the furthest top row is `Y=0`:\\n\\n```\\n           111\\n 0123456789012\\n0/---\\\\        \\n1|   |  /----\\\\\\n2| /-+--+-\\\\  |\\n3| | |  X |  |\\n4\\\\-+-/  \\\\-+--/\\n5  \\\\------/   \\n```\\n\\nIn this example, the location of the first crash is **`7,3`**.\\n\\n[comment]: <> (PART 2)\\n\\nThere isn't much you can do to prevent crashes in this ridiculous system. However, by predicting the crashes, the Elves know where to be in advance and **instantly remove the two crashing carts** the moment any crash occurs.\\n\\nThey can proceed like this for a while, but eventually, they're going to run out of carts. It could be useful to figure out where the last cart that **hasn't** crashed will end up.\\n\\nFor example:\\n\\n```\\n/>-<\\\\  \\n|   |  \\n| /<+-\\\\\\n| | | v\\n\\\\>+</ |\\n  |   ^\\n  \\\\<->/\\n\\n/---\\\\  \\n|   |  \\n| v-+-\\\\\\n| | | |\\n\\\\-+-/ |\\n  |   |\\n  ^---^\\n\\n/---\\\\  \\n|   |  \\n| /-+-\\\\\\n| v | |\\n\\\\-+-/ |\\n  ^   ^\\n  \\\\---/\\n\\n/---\\\\  \\n|   |  \\n| /-+-\\\\\\n| | | |\\n\\\\-+-/ ^\\n  |   |\\n  \\\\---/\\n```\\n\\nAfter four very expensive crashes, a tick ends with only one cart remaining; its final location is **`6,4`**.\\n\\n**What is the location of the last cart** at the end of the first tick where it is the only cart left?\";","export default \"1-7 q: qqqqxvqrkbqqztlqlzq\\n1-3 q: cqbm\\n15-16 h: hhhhhhhhhhhhhhbsh\\n4-16 x: xvbxswpnvxtnfjrxxx\\n6-7 v: kbbvnswp\\n17-18 h: hhhvhhhhhhhhhhhhhh\\n1-7 w: twftdrb\\n4-5 t: wcjtfpt\\n3-9 f: mbfvfptbfq\\n3-10 x: xfxxxxxxxv\\n5-11 p: ppvhkgpmwfjp\\n5-8 c: cbhhrtsbpf\\n13-14 t: ttttltttgttttvht\\n11-16 m: mmmmmmmrmmdmmmmxmmm\\n3-13 b: bbbbbgbbbbbkkbvd\\n7-10 d: ndddwdmdddhddv\\n4-7 d: gcndnddkwhd\\n14-18 z: zzzzzzzzzzzzzvzzzzzz\\n5-6 c: mfcwccckdccfmzc\\n9-14 p: bppzpwhzdgnpnh\\n11-19 q: jqhqqqqqqqmfqqqqqqqq\\n5-6 h: kqhpgl\\n15-18 w: wwwwwwwwwwwwwwqwwqw\\n2-10 m: qmmmmtphbrw\\n10-20 k: jxlnkxnkhlkgkzhxbdvg\\n8-9 c: ccccccccc\\n12-19 k: vlkkkkklkzkkzkkckkfk\\n13-14 s: bsfssqsscsssdj\\n11-13 p: rmpdppplgcnpwxd\\n9-16 c: ccccccccrclccqcgcc\\n3-8 s: snsssmssdns\\n13-19 t: ttttttttttttttttttwt\\n7-8 q: dqqqdqqqqnqdq\\n10-11 w: wwwvwwvhwtvwwwmw\\n3-6 b: bbsnbpbckbb\\n1-4 g: gggjg\\n6-8 b: jvrqbbmb\\n2-6 t: cvdtzn\\n3-4 v: vvmd\\n2-8 z: vmwhtskz\\n2-6 b: jbrbjbs\\n1-2 d: ndzwd\\n17-20 r: xjfmlrrjcnnrmkvhrpwr\\n8-10 q: qqqwqqqqqdl\\n2-5 p: phppxpppppppp\\n9-10 z: zzzzzznzzz\\n8-9 k: phgksffkrfgp\\n11-13 w: wwwwwwwwwwnwz\\n9-11 k: krkkkkqkkkkskkk\\n19-20 d: dmcwfddgdddvdffdhdld\\n8-11 f: bflfqsffvfdffmfpfqf\\n6-10 v: wwqvvvjvrd\\n4-5 v: vvdvw\\n3-4 h: hdhh\\n9-10 d: dndfdddddd\\n3-13 n: nnfnnnnnnnnnnnnnnmnn\\n5-12 b: zwqcbkfcbbnbb\\n5-15 q: qqrdqqqmqqnqqnjkqqqw\\n6-8 l: vfllklxllclll\\n3-4 h: hchh\\n12-16 b: bbbbbbbbbbbhwbbtgbs\\n4-10 p: ppwxplpppp\\n4-5 s: szhss\\n8-10 w: tvdtvbwnlfvkspxp\\n4-9 z: zzznnkzwdzrz\\n5-14 p: pppppppppppjpp\\n6-7 n: hnnnnqnn\\n1-4 q: qqdqqq\\n7-8 w: wwwwwwbpww\\n3-10 x: xfxxnxjxxxpx\\n5-19 m: kmqhgpjdszvgrfrdlhm\\n10-12 k: kqqzkkkkkkkk\\n4-7 l: llpqcgmll\\n4-5 p: rwppp\\n2-6 q: mqqhrsdk\\n7-10 m: cmmvscmmkm\\n9-18 k: kkkkkzkkqdpkdlkjpgk\\n2-7 m: xmglcvmkmln\\n8-12 n: nnnnnnnfjnnbn\\n4-5 n: nnnnn\\n13-17 z: zzzzzzzzzzzzkzzzz\\n1-5 t: mfftmn\\n2-3 n: nskh\\n11-18 s: sjssgsssfstzsbhnsw\\n14-16 d: pgxrmlxdthpdndfdt\\n2-3 h: hhhhh\\n3-4 s: hssn\\n7-9 f: fffffcmff\\n2-4 s: srwbvhnlqssdpsssx\\n3-4 v: vvvvvsvxvvh\\n12-13 x: xxxxsxsxxdxmpjxlxxf\\n15-16 m: cjcmmmmgdmbnmcmm\\n8-11 l: hsjlnlvlfchgjlrdl\\n9-11 k: kkknkkdkdkkk\\n5-6 q: qgqqfpq\\n16-19 w: wwwwfwwwwwwwvlwwwtw\\n2-13 n: nnnjngnwgldsnrnrr\\n5-6 x: qwbpxx\\n4-5 x: xxxhx\\n11-13 t: ctpskdtbwbtkstfj\\n2-8 z: jwznsgln\\n17-18 r: rrrrrrrrrrrrrrrrwnr\\n7-12 v: bkpvwzzsdnsd\\n5-7 h: hxxnpzh\\n7-8 z: zzzzzzxs\\n3-7 z: hzstpkrlht\\n7-10 p: ppgkppnpdppj\\n10-11 g: gghhgvgggwf\\n9-11 q: qqqqxqqqqpqqqq\\n2-3 r: qrrfr\\n3-8 x: xvxzsxtxgxb\\n11-14 q: fbqtzvjdqqhqqrqjrqq\\n11-16 c: cccpccccccscwccfccn\\n9-11 m: snmmmcmmsmmmmkm\\n2-11 m: mmmczqsmclmrvmbzlv\\n10-15 z: zzzzzzzzzjzzzzkjzzm\\n3-13 j: jjxjjjjwjjjjbjjjdjjd\\n7-10 j: sjjqjjvzjjcjrh\\n8-9 x: xxxxxxxzxxx\\n4-11 n: nnmnmndfnhqnhnn\\n16-19 v: kntvxvvvvpvvvvghkzp\\n6-9 b: pbbbxxjfqvngbvbb\\n16-17 j: jjjjjjjjmjjjjjjjjj\\n2-3 t: wttttttt\\n10-15 c: cccccccccgpcccccc\\n7-10 j: jjjjjjqjjrj\\n1-7 f: cffffftfff\\n8-14 r: rrnrrrrrfrrgscrmr\\n1-12 b: jbbbjbkwbgbb\\n13-16 m: mmxmmmmmwmmwmfmmmhbm\\n1-9 s: fsssssssqs\\n8-15 q: pxqqqqvbqqsbqzjngkv\\n3-4 w: wkspxwm\\n1-7 h: gkfhhhjhhhch\\n1-4 w: sqrnwwgwqdw\\n2-6 d: dpdwdld\\n2-3 m: mmmmm\\n4-6 p: pppspp\\n2-7 c: ctcglxx\\n11-13 x: xxqxxxxxxxxxxd\\n7-9 c: cgccccbcrc\\n6-9 p: xspppkppprp\\n4-5 v: vvfqrv\\n15-19 l: llwllllllfllllglllcl\\n10-17 v: vvvvvvvvvgvvvvvvk\\n11-14 s: sstngtbhsfsgds\\n3-4 c: dxklc\\n6-7 l: lllllll\\n8-10 w: wwwwwwxtwkwnw\\n3-4 l: sgllkmdpzgzvllzv\\n7-17 w: zdfsdmwbphwhzwrxww\\n2-12 l: rbwfpnmzgtsl\\n3-6 s: qssdwlfbnm\\n5-16 f: fffffffffffffffzff\\n12-14 l: lllfllllldlllljll\\n14-19 x: pxxxxxxxqxxxxxxxkxwx\\n12-14 b: bbbbbbbbbbbrbnbbbb\\n2-12 j: trjqljjgrjjq\\n1-10 q: qqqqqqqqqqqqq\\n1-6 t: jttttrtt\\n1-2 v: rpvfcxhcgx\\n4-5 r: frsrr\\n1-6 v: jvvvvqvvvv\\n2-4 v: tvvb\\n4-5 h: hhchhzhqhcvh\\n8-9 c: ccphccccccc\\n13-15 c: cccbccccccxccxclcscc\\n5-6 b: bbkbpczbs\\n10-16 g: gdgggggggggggggggg\\n1-11 f: fmffxfffgcfwfffbzff\\n3-13 m: mzmmkmntbmmmmcz\\n1-2 g: xkgq\\n10-12 r: rbrmrrrrrwrrhrqvkr\\n7-8 m: wbbmmmmmfmm\\n3-4 l: dsnt\\n4-5 k: kkkkkkk\\n16-17 r: rrrrcrgrrmqwjrpwmtr\\n15-17 z: zzzzzzzzzzzzzzzzzzz\\n13-15 b: zbbbbbbbbbbttbbb\\n8-13 w: twrwwwlwtwwww\\n10-11 w: wwwwwwwwwwwwwwwwww\\n4-6 b: pxvqbb\\n5-8 n: wnnnznngw\\n4-9 q: njjqqkrlq\\n10-15 c: cckhfccdhfccccj\\n10-15 c: ccrktcccgccgccz\\n1-5 s: dvssx\\n2-3 w: wwnw\\n3-4 n: nnnnc\\n7-16 n: tdlhmgsqknfnwgnnwmn\\n9-11 z: zgdzzzzwfgjwzzzm\\n4-5 f: ffpffff\\n3-6 f: fvgfcff\\n5-6 f: fkffhhlhrfg\\n7-13 g: gtflglggggwbg\\n4-5 w: wwdwrw\\n8-10 w: hwpzzwwwjbqfww\\n5-11 f: ftgfffffffpqffffffff\\n6-7 f: fffffml\\n6-12 j: jjtjjtjjjzjzjh\\n4-6 h: phwtrn\\n10-14 l: lllllllllcllll\\n6-7 d: hdwxdsk\\n13-18 w: kwwwwwwwwwwwwwwjwww\\n3-8 q: bpqtzmqqljll\\n1-3 c: cccds\\n4-5 m: mmmmzd\\n4-7 c: cccjcck\\n4-6 t: ctdvts\\n3-10 x: xsxrxshzjxrt\\n3-6 j: wljvmxqzrjhctx\\n4-5 v: vwvvcld\\n8-9 l: blllllvllglllll\\n4-14 j: jjjjjjjxxsjmjjjjj\\n8-12 v: bvvvvvvqvvvbvv\\n2-6 g: pgsgcglt\\n1-4 g: qggs\\n7-9 h: phchhpxhqhhh\\n5-7 z: czzjzrnq\\n3-4 k: kkkw\\n2-3 v: vjfv\\n7-11 v: slrrxhrhnvvk\\n7-10 t: czhvlfwthc\\n2-17 m: zmmmmtbmzlwmmmmslbm\\n1-4 m: fmjz\\n6-8 d: sdddddddddw\\n2-5 h: pnfkhrwchvc\\n2-4 r: brsrktfkqdlhzvvsfhf\\n3-4 n: qnknnn\\n7-10 f: rvnzfmfzrfdqkffc\\n2-5 x: hxxqxkxxw\\n1-7 w: wwqzwkww\\n2-3 s: ssps\\n8-16 d: ddjdddddddddbddddd\\n10-12 d: dddxddddwldfsd\\n1-6 v: skcvcwjf\\n2-7 g: ggggzlggjgwg\\n2-5 j: rjzfjqjzjtjkfp\\n15-17 f: bqslszncqcvrpfrff\\n2-13 d: xcddddddddwdzdmddzd\\n1-9 l: lllmllxlljlxhll\\n10-17 p: msbwpcprpppnsbpppzk\\n2-13 v: vwdvvrsjrvvvpcvvv\\n5-9 c: xscgtfxjbchcp\\n4-6 g: jghgfg\\n7-8 v: vvvvnvvv\\n10-12 z: zzzzzmzzhbxz\\n11-17 b: fknnqwzpgbbqnxkckj\\n1-3 h: zgbpdwdnmmhbnqxm\\n4-6 t: httsznfnx\\n5-10 f: fflfffrfvxvgdq\\n1-3 r: zrrrrrrrrnrr\\n5-7 k: kkkkkkkkkkk\\n6-7 r: rrrrrfgrrrz\\n3-12 s: sssssssssssssss\\n3-5 t: ttjdtt\\n3-4 s: zzhslfrtwsj\\n5-6 d: dddpddv\\n1-7 q: bqqqdqpqq\\n10-13 s: ssstscpsslsrsssds\\n7-8 r: lrrrrrrr\\n5-10 z: jzfwzlzjlz\\n3-8 g: grpggggg\\n1-7 c: jccccjvcc\\n12-13 n: nnnnnnnnnnnhn\\n1-5 t: ztwwnt\\n8-9 z: zszzzzzbzzzz\\n1-5 p: pppppp\\n8-9 j: jjjjjbjkcjgj\\n5-6 x: xwhxlx\\n5-8 d: ddddwddx\\n5-17 l: lllztxdllwblllllv\\n9-18 m: mmgmmzmrmzchvrhqmm\\n17-18 c: wzsjwnccrgbcwhrmgc\\n10-17 f: fbdmffffchfcfkfft\\n17-18 r: rzbzrszcnnrmlrrrzk\\n1-9 p: cppppppppppp\\n1-9 t: ttptqthtttct\\n5-7 c: ncwnhmswscrqgtjtdgcr\\n5-10 f: dffsfffpffhzf\\n8-19 n: mnscfmjnnlvznnvlktn\\n7-8 z: zzzzxzzd\\n8-18 z: lzzbzbczzhdkzzwzgzz\\n1-9 x: rxxsxxxxxxxfxxxx\\n5-10 w: kjrwwptbww\\n12-13 z: zzzfzzzrzzzzz\\n5-6 g: gghggg\\n16-18 q: qqqqqqqqqqqlqqqqqxqq\\n5-9 c: lmcsxccccqjhmtcq\\n1-3 x: xxtnxfqzxxx\\n13-15 w: wddxxwwgqwwxwwww\\n12-16 r: mrrjmrrrhrrrrrrrrr\\n18-19 j: nmfjvcjljptwjnjjjjj\\n1-13 g: ggggggggggggggg\\n11-15 p: tpldppcbbbpzpvppw\\n2-11 x: hbxdxxgnqxbxxxxjjxx\\n9-11 s: nsnsksshzsqss\\n1-16 k: knkkfkkqkhhbkppvkk\\n2-4 x: tlwd\\n5-7 h: npmhclh\\n15-17 t: ttttttttttttttsttt\\n5-6 d: dxddrkddhdl\\n8-12 d: bddjdffdddtkgdhddd\\n7-8 z: dkxzgbzzlw\\n3-4 z: pzzz\\n5-6 t: ttttqvv\\n2-7 d: tpsdkqds\\n18-19 c: cccccccccccccccccbcc\\n2-3 c: hcmj\\n5-6 l: llllwl\\n2-6 t: tqtttx\\n11-12 r: rrrfrrrvrrrcrrrrrrr\\n9-12 s: dspssssshssssss\\n1-3 d: ddddc\\n4-5 t: tbpttzvtqr\\n4-6 j: jjgjdjj\\n2-4 t: tbtb\\n4-5 w: wbwbwwvww\\n10-11 s: dwsspssssssss\\n1-8 s: tssssssl\\n6-8 k: kksgmgkq\\n6-11 p: pppppppjcpq\\n7-8 c: ggcccpcclr\\n13-14 h: hhhhhhhhhhhhbfh\\n14-15 n: hsnnnnnnnnbnnwmnnn\\n11-13 k: xxmqpkkcqkkjn\\n12-14 w: qwkwwwxqwwzwcw\\n1-17 n: nnnnnfnnvnnnnnnrpnn\\n2-3 b: xbsgcgnrh\\n4-5 v: ckpfvkvvswdnh\\n6-7 q: qqqfqqf\\n8-10 m: vntcbkgmmm\\n9-13 m: bvxrzxbmlnmxcvmrwrc\\n4-5 j: fjjlj\\n1-3 k: lkskjkkc\\n8-14 d: ftbhrdxmmfdbkwrsqr\\n1-6 q: qrwcqqmtsqqhq\\n16-17 h: zlmjqfbxhhhfmpvsdg\\n3-8 v: bpwnbflvsljdzfkdmv\\n8-18 m: mskwllxmbgbrdjmhwmn\\n9-10 h: hhhhhzhhhq\\n6-8 t: jttttztv\\n2-4 m: xmmm\\n15-17 f: ffffffffffffffjfwfff\\n3-5 q: xrqqq\\n1-4 h: hhqfmhhh\\n14-15 f: ffffffffffhfcffd\\n2-11 w: fjjnmtswwwbhwcrgjwgd\\n4-9 q: qqqqqhqxqqxqt\\n8-11 g: gggggggcggggggggg\\n1-5 s: dbstvs\\n2-4 z: zzzgz\\n10-13 r: rrrrrrrrrrrrr\\n3-4 r: wrzr\\n5-9 c: cccddcrfccc\\n2-8 k: vkkvlgvvsqzzkkvnk\\n8-9 d: djdxdddwxdqrd\\n5-7 j: cjjpjggqhjwtth\\n5-15 n: nmnbnmnrxnrkznnvnn\\n3-13 j: cjjjjvgjqdjjdqjr\\n6-7 r: rzkrrvr\\n3-5 v: nvczvzgrnk\\n6-7 x: xxxxxdv\\n2-5 c: hccpcw\\n9-16 d: ddddddddddddddddd\\n6-9 c: ccfccdpcqccccp\\n4-5 q: kqtqq\\n1-2 z: zzzk\\n9-13 d: ddddddddddddd\\n5-8 q: prfjgqvzqbqqqq\\n2-6 h: rhrvghkfx\\n3-10 d: rddszpfmrdfgqt\\n7-11 w: wwvwwwkwwwlwwwwwww\\n7-9 b: bbbbbbbbm\\n1-2 r: ffnppzhtrkj\\n1-10 m: mxnmfmlkwmwpkj\\n3-10 n: nnwmnxnxnnl\\n14-16 p: pppppppppppppfppp\\n1-2 m: mmgn\\n11-12 p: hpppppkpppppp\\n6-14 l: lfvlllscxnlpll\\n11-12 r: rrrbrdrrrrrm\\n3-6 w: wwwcgw\\n9-12 b: rbfhbqblnbbbbdb\\n5-6 m: hmmkmmqmkm\\n4-6 q: qclhqjqq\\n4-16 l: lllnpllllllllllblllr\\n4-5 m: nxcmmtmr\\n3-5 q: qmblr\\n4-5 m: mmmmm\\n16-17 b: bbbbbbbbbbbbbbbcbb\\n1-7 p: tjppppppppp\\n5-6 k: kkkksf\\n2-10 x: cxjbfjkwjxqwzjxcbq\\n2-5 t: tsjkfn\\n4-7 g: xgbcrst\\n4-5 x: xxxxxx\\n2-5 s: sszxb\\n4-12 k: wcrkhkgkzklkqkh\\n8-10 b: bbbbbbbnbn\\n2-7 k: fkzfkkkkkklk\\n4-8 w: wwwwwwwww\\n4-8 h: hhhhhhhjh\\n4-11 h: tgbhnnrzpshbjhq\\n6-7 b: bsbdqbbb\\n2-6 t: sqvtbgttbftt\\n2-7 c: mctjgnn\\n3-8 m: ktthpgrfmrqkcj\\n5-7 x: whcxpgxvfq\\n5-14 w: wwwwwwwwwwwwwww\\n2-14 m: nmbxjbsmfjhdxmswks\\n7-11 b: jbbprkhndbqclbb\\n5-7 f: ffbfhfq\\n6-10 z: zzzzzzzzzzzz\\n4-7 d: mkdddgdhdh\\n2-4 d: pkjd\\n5-7 c: ccctqptcccccc\\n15-16 h: hshfjthnhssrvdhb\\n4-5 b: bbbxb\\n5-12 l: llllmllllllnl\\n3-4 t: tbgt\\n5-9 w: wwvzwblwgwwwwvwww\\n3-4 g: mmggfggg\\n8-14 j: jnjjvjcjtmpjtjjxcpw\\n8-9 h: hhhhwhhpch\\n5-7 v: vvdzhcvv\\n16-17 v: vvvvvvvvvvvvvvvtq\\n12-18 s: sdcvjsfqtgnhcsmmsm\\n6-13 n: hnqglmrjfgdnnpvtjr\\n12-13 q: qmqqvqqqtqqvqqq\\n1-9 z: nzzzzzzzzzzzzzz\\n1-4 l: lllllll\\n15-17 j: jjjjjjjjjjqjjjpjhj\\n2-3 t: bttb\\n3-4 q: qqqx\\n1-3 t: wtjt\\n18-19 x: xgnmxxljxwxxztxjvxx\\n2-4 n: pkpf\\n17-19 s: sssvssssssssssssssss\\n13-14 l: llqlllllllllll\\n5-9 m: mxgnmmrdmzll\\n3-5 m: mmcmmmmwmmm\\n4-8 b: bbbbbmplb\\n4-6 x: xxxxvx\\n1-2 m: lvfb\\n9-10 n: npnnnnnpnnnn\\n3-5 m: mmnmwmmmm\\n15-20 r: mwrrrrrrrwrrrrrrnrrr\\n1-2 l: rzlll\\n9-11 s: sssdssnssts\\n3-5 c: lccncc\\n13-14 v: vvvvvvvvvvvvvv\\n2-12 g: vshnfnhkzgjgkqn\\n6-9 k: kqskrckkwg\\n18-19 v: xzwbgvvnwlprqdxvshl\\n16-17 v: vvvvvvvvvvvvvvvzv\\n6-13 m: vkmmclmmwjfcvnmmm\\n5-11 j: sjjjqwjjrjjqj\\n5-7 q: djqhqcqhlz\\n8-9 f: fffmcfftw\\n12-14 x: xqpnjxjxlpxwxxb\\n7-16 h: hhhglhnhbcxhvhhxhh\\n12-13 v: vcvxvvvvvvvvvvv\\n12-13 g: ggdngtlxwlrtsgcgmtgm\\n5-6 n: nhnnhcn\\n3-4 n: nnngwk\\n9-10 k: kkkkkkpkkk\\n6-11 r: rrrrrkrrmrtr\\n3-9 d: dwdwdddqnfdddddddd\\n8-15 q: qvqqxqqwqrqqqfjq\\n6-7 f: ffffflf\\n4-9 m: rpmsmphdmmbpdmmhmpr\\n3-9 q: qqqqqqqqcq\\n3-4 d: hddds\\n2-4 f: rcfj\\n3-4 k: kkhn\\n6-9 n: npnnnnnlj\\n1-6 k: tvspqddqktkkqkvk\\n11-12 x: slxrptmpfqtp\\n12-14 l: jjvwhlldtlllllh\\n13-14 g: ngggggggggggks\\n14-15 z: zzzzzzzzzzzzzjvzz\\n5-6 l: vbsnvllnhlchblllc\\n7-13 z: zgczzbzgzlpnczzz\\n17-18 v: vvvvvvvvrvvvvvvvvvv\\n15-16 h: hhhhhhhhhghhhhhh\\n1-5 n: snnqv\\n6-7 m: mmmmmmmm\\n15-17 p: pppppppppppspqpppxp\\n12-14 w: wwwwwhwwwwwwwwwww\\n4-8 s: fssltbzbsrn\\n5-7 g: gkxgbggg\\n15-16 s: ssssssssssssssss\\n2-4 l: lxtswwg\\n5-6 p: plppzkpp\\n9-10 r: srrrprgrhrrrvrr\\n1-2 d: ddlhchdfll\\n3-4 j: jjwg\\n7-11 b: bkfbvbdvzlbz\\n7-13 q: qgvwkzkrkvvks\\n2-7 c: ccjtcbccccgv\\n2-3 q: fqqq\\n3-4 b: btssh\\n6-7 m: mnmmmmm\\n3-4 n: nrnn\\n5-14 n: fcsxngnnkqxnjnn\\n14-19 x: rmxcxxxxwxzxxhxxxlc\\n3-13 q: qqqqqgqmdshrqnqlqlqt\\n14-16 v: vvpvvvvvjvvnvvvvvvvv\\n15-16 c: cccccccccclcccch\\n4-6 v: hvvcvv\\n7-9 d: dcdmddxdld\\n16-18 x: rxxxxxxxzxxxxxxxdx\\n11-14 l: llcsqllgvfmhlvtvb\\n7-10 h: hhhhhdmhhwhhhh\\n5-17 g: ggggggggggggggggg\\n4-6 q: fbsnmzqdsqsqfpdr\\n12-16 n: fnnlvnflmcnndtfnlw\\n8-13 c: cpwshcvbccbjmlch\\n7-9 l: sfhcltwlc\\n9-13 w: xwwwwxwwwwwgwwkw\\n5-6 q: kqqqqqjqqqqqqk\\n14-17 k: kkkkkkkkcvbkkqxtkkkk\\n8-9 h: qjhxhjhzl\\n3-6 l: jlllvl\\n10-11 q: shkxnqwfrhhznlb\\n3-9 l: dwbvfgngtzcbhzlft\\n16-20 b: qstrwcrclxzbwtlbpnwb\\n8-10 n: ndhpptnnnjnnnbnn\\n4-8 l: lllnlllw\\n1-3 v: vdfxksvvn\\n14-17 b: blbbmbbbbbbbbbxbbbb\\n9-10 t: tttrkltgfbtth\\n10-12 n: njhnnnznnnnn\\n8-9 w: hfwwdwwww\\n4-5 c: scrcccwc\\n17-18 t: ttttttttttttttttmp\\n10-11 t: tttttttttvjtttttt\\n1-3 m: mdlrc\\n8-9 r: zrnjxkbrrppzgvf\\n3-4 d: sqddksgdjmd\\n3-5 m: mmmmmmm\\n1-8 h: nhclfdhlqwhhczn\\n2-7 c: bbcbccgxhcwn\\n4-6 l: zldqlgl\\n9-11 n: pqbxnxfzhtd\\n2-15 r: drmrjfxlqvmlcnwlbn\\n14-15 k: kkkskkkkkkkkktk\\n4-5 x: mxxzsxxxxx\\n1-2 p: hhfwz\\n6-13 b: mbdbkbpbjbbcb\\n12-16 t: tthfzkrqvhltzhlttwtw\\n6-11 h: hhhhhhhhhchzh\\n3-8 q: knndgrkmnqqxjj\\n5-7 v: svkvhfvv\\n6-9 r: rrrrrwrrrrr\\n3-10 p: pspxqhpxfqp\\n3-9 z: xfzzmjgqzgjzczqpnj\\n6-10 n: nnnncrnnnqnnnnn\\n1-7 k: kkkkkkkkk\\n2-4 m: mhmj\\n3-7 j: qjtjjmbjjkfjjrj\\n2-7 r: nrdxvnr\\n1-2 l: wrrr\\n3-4 t: ttjktt\\n9-13 l: lllllllclslllll\\n12-19 p: cpplpppphpppppdpntp\\n10-12 p: dnpppppppwpgpppp\\n2-4 z: pzzb\\n1-2 k: kpkt\\n4-7 r: rrrrrrq\\n1-7 t: xttwtnqttd\\n1-4 g: zngs\\n4-6 d: qszrkcxxdt\\n1-6 b: cpbhfm\\n3-4 m: knmn\\n9-11 c: lpdbchcckwnrc\\n3-4 r: rrrrr\\n12-18 q: qzqqwqqqqxrqqwqqqdqq\\n6-9 v: wvvvvpvbq\\n6-7 g: sggxxdhl\\n12-17 b: mbsgqwvzlnjskhxctt\\n4-5 f: rsfkc\\n9-12 h: hhhhhhhhshhhhhh\\n4-5 p: nppcn\\n3-5 g: ggwsmggsgggfg\\n4-6 p: gppfpsh\\n13-14 v: fvftvjtqvxsqhzrv\\n2-3 l: jlmbl\\n2-4 v: wwjvv\\n4-8 l: lllhlhllmlplg\\n1-14 f: znvtwnmslnfhjrds\\n3-10 z: zzhzkhzzlkdxzzz\\n17-19 r: rrrrrrrrrrrrrrrrrrrr\\n15-16 q: qpvqdgqkqqqqqqqq\\n5-12 k: wkkkkknkszpkkrk\\n3-8 j: jjhjjjjwj\\n2-12 s: qvknfbrpsrfsp\\n11-12 j: jjjjjjlfjjcrzjtj\\n3-13 m: mmmmglpmhtrfvmfmmmx\\n6-17 l: lllllblllllllllldll\\n4-5 q: rqqnqqqqq\\n8-9 p: fppppnspp\\n11-17 q: pqqqqqqqqqjqlqqqqd\\n3-4 l: lslll\\n1-10 r: bgrrrrrrrprrr\\n12-17 g: gggwjnxgmggngggrgpg\\n14-16 z: zxzzzzzzzzzzzpzgz\\n4-12 t: sttttttttttttwtz\\n6-7 x: xlzxxxxg\\n3-4 g: ggcg\\n3-11 c: zblkwrxvcnl\\n3-16 l: lhlljbljsllfhlklrlv\\n8-9 v: vvvvvvvvtp\\n2-5 f: fpbqcglx\\n3-15 g: cwmgbgntbgwccqggpv\\n4-11 m: mwwfhdgxdsmxckqcqvpg\\n12-14 v: vvpvvvvvvvvfnwvv\\n2-4 b: bbsxbwqbbx\\n4-7 s: knsnxlsmg\\n3-4 z: zzzzz\\n1-4 x: mxxxxxxx\\n2-7 w: pxwmtbkskmmfcddczqd\\n9-12 b: bbbbbqlbgbbb\\n3-4 l: mlqrlchqn\\n2-3 b: bbbb\\n13-15 x: lxxfjvqxhxhlxxx\\n5-8 m: mtmnkvmcm\\n3-7 v: xvwvvvwbtvs\\n2-16 x: wsbhsvzxbjfjwlzlzr\\n3-4 d: dzrd\\n5-7 l: llllllml\\n14-15 d: dddddddddddddwb\\n6-7 t: ttttfbttg\\n11-12 v: vvvvvvvvvvvvvvvv\\n11-14 z: zzzzzlzzzzdfvjtzk\\n4-20 b: jfnnqxxvxwhbfmbxqdxq\\n6-9 d: dddddzdddd\\n1-2 s: rnwsscss\\n2-3 q: kqkrhq\\n8-16 r: krlrxhrchrrrrvrkr\\n5-7 r: svcrrfq\\n2-13 b: bbbbbbbbbbbbbbs\\n3-7 k: pdxkstw\\n9-16 w: wwwwwwwwvwwwgwwww\\n3-5 g: gbgkggpcmjgrc\\n13-15 d: dddmdddmdddmldg\\n3-17 t: tkpttktttbttttttt\\n1-5 n: pnnngnnn\\n3-4 f: ffhf\\n3-7 p: tqpnncpczlp\\n4-13 b: ppbnsfztshmbbggn\\n1-4 r: rvlrrqrrrt\\n4-8 s: snfwsssrsrrssssszp\\n1-7 w: fwwwwwww\\n1-4 d: fdjb\\n7-8 l: llglthmjvlllt\\n7-8 w: wwwwwwzjw\\n7-9 v: zrgvvvvvvv\\n2-7 d: pdddzvh\\n2-9 w: nwwwbjswwxwxczlmh\\n5-10 w: wwcwwwwfwwghwbw\\n6-8 n: dqgnqjnnnnn\\n4-14 r: rdrfrrrrrrrrrvrrr\\n10-11 d: ddddddghtdfdhd\\n2-6 n: gngqzn\\n6-7 f: ffffdff\\n5-9 b: bbbbwbbbzb\\n7-9 n: knnnngnfnnn\\n8-14 b: gbnbsdbwcwdbvb\\n6-9 w: nttwjwbmw\\n3-13 c: gswwmvqdchfcgfrqcn\\n11-12 k: kzkvhkfrjxxjv\\n3-9 d: xdzkdgfdrx\\n6-13 q: qqqqcqqqqqqqqqq\\n7-9 b: bmbbbbbbb\\n8-16 p: hppgwpbmppcppppd\\n9-12 m: mwmmscmmdmpkmmm\\n3-6 n: nnnnnnn\\n3-16 f: lfqfhfffdfffszfkh\\n12-13 f: ffffffffffffmftffxf\\n1-5 k: kkkqk\\n3-6 f: ffsgft\\n2-9 z: ktzvzztzzrzzfnk\\n4-7 p: pppppgp\\n5-9 j: jgtjkvjhtjmvtc\\n4-5 g: ngngw\\n5-6 f: ffffcgf\\n3-11 k: xkkkcvwkkck\\n7-11 c: qcccpchcccc\\n3-17 h: hhnhhhhhhhhhhhhhhh\\n4-5 x: bxjxj\\n18-19 v: vbvcvvvcwvvvvvvvvtn\\n12-14 d: dddddddddddwdxddd\\n6-10 b: bbbbbbbbbbbb\\n1-4 f: pfjf\\n1-8 b: bbbbbbltbbbbbb\\n14-15 d: dzddkfqcdxwfdnd\\n8-10 t: tvxwlxltjt\\n7-9 l: lxklrwlhl\\n3-6 c: cclccdc\\n15-17 w: wdwwwwwwwwxwwwqwfw\\n1-4 h: ngkhh\\n3-4 j: jjjj\\n4-9 h: nphhzhhmhgb\\n5-10 v: tsxzvvdvmvvsvp\\n1-11 r: frjgrqrrrrkrrmrl\\n10-12 p: zlkppppppmxppphsgd\\n5-8 p: stmggpsmx\\n3-5 r: rrrrrrrrrrrrrr\\n2-3 t: ttgt\\n6-11 m: mmjmsmhmmsmdmfmvm\\n6-8 s: pnkbhsfsfgsr\\n7-13 t: gchcvtttwgkmlbw\\n8-11 l: lllllllrllrlh\\n5-7 d: djvddzdd\\n3-4 z: zzzzkk\\n5-11 s: wsbdskxssjtqcs\\n2-3 w: wwwszj\\n1-4 m: mmvm\\n3-9 x: bkzkrvkjfbtxn\\n5-6 z: zzzzzwz\\n1-4 v: vvvrvv\\n1-4 d: zdxd\\n6-8 k: klfnzkrswq\\n1-6 p: pkjpcpntjzvp\\n14-16 p: pdpppqmpmppqppppgp\\n9-10 w: wwvglrwkrbwwwkwzww\\n3-6 v: vfdvvcsvv\\n9-13 z: zzzzzzbzzgfzzzzzczz\\n4-5 n: nnnqnn\\n4-13 m: jmbmmmmmmmnmmmvmm\\n2-10 r: rlrcrrdnkrkrsqr\\n9-14 r: rzrgrrrrhrrbrsrr\\n9-11 f: ffpffzfvffzf\\n10-11 j: jzjjjjzfpjjjrsgjjt\\n3-4 b: bbbnbb\\n4-6 z: zgzwzqhq\\n10-11 j: jjxjxhjjjwj\\n4-5 b: bbbbb\\n4-5 d: dbzhw\\n2-8 r: rrrlrrrrgrgfrwdf\\n1-5 q: qmtrq\\n9-13 j: jkjjjjjjjzjjt\\n3-7 j: rjjjjjjjm\\n5-9 z: zzzzdzzznzz\\n2-13 t: tjtttttttfttsttt\\n12-13 d: kbddmmkmcwdkddw\\n3-4 q: qqql\\n5-6 j: jjjjsqjj\\n1-2 b: bbgwqt\\n3-11 t: tftjtttttttttt\\n9-12 h: hjxhhhhhqhhzz\\n1-2 m: ncmmmml\\n1-3 x: qxxs\\n1-7 t: dtstrnxttt\\n11-13 q: qqdqqpjjqktqbqnqqq\\n2-5 p: pppppp\\n2-4 n: njdjzpnghzbgvnngqn\\n11-12 g: lpfwcvsqgmggfrjmdvs\\n1-7 n: hrwhnvrmm\\n12-13 s: hssdssscsgsksjssss\\n3-8 x: csxgdxkxxptmlw\\n9-11 q: qqqqqqnqkqmqqqqq\\n3-4 g: wzkf\\n7-8 t: cktttttt\\n4-12 c: fgdjrccpmhcccwcgfm\\n6-8 p: jppppppt\\n1-4 p: pppppr\\n1-7 n: nnrrrtndwn\\n1-6 l: rldlkq\\n2-4 x: rglr\\n2-7 p: vpvmkgp\\n4-5 n: nnnnz\\n5-18 w: txgfflhvtdpdvwlwmmq\\n9-10 l: tlllllllddl\\n1-3 b: xpzbbbrbbr\\n3-5 n: npnpnn\\n10-14 q: nqqqqqqqqqqqqqqdqx\\n7-10 w: bdwwwwgwljxgv\\n7-11 k: kwknkkdlzkk\\n1-10 w: wsjbvzwslmwttq\\n15-18 b: bbbbbbbcbbbrbbbbbbb\\n6-8 j: jdjjnlfj\\n10-11 r: xrgrrrrrnvwrrfrr\\n11-15 x: xxxxxxxxxxxxxxjx\\n5-10 w: wfwwnwvngwlwwlw\\n2-4 k: kkkk\\n3-5 h: hjhhh\\n7-8 s: lqsssscjrss\\n10-12 t: tttsttttttttg\\n3-8 p: szpsqzqp\\n3-8 x: xxxxxxxxx\\n6-7 r: rrxrrdrr\\n1-2 b: zbbbbbbbbbbbbb\\n3-6 v: vxvkvv\\n4-5 w: wwwwwwdw\\n3-5 n: nnfnn\\n11-12 g: gggggggvggxgg\\n10-12 s: sssqssssssssns\\n3-7 h: hlmhhhhhhh\\n7-8 v: vsdcvkvvszzm\\n6-9 g: ggwnldgws\\n14-15 q: qqqqkqqqqqqqkwkq\\n8-9 l: bttjllqhnqjdvhsnk\\n10-11 s: sqsscsqsscts\\n10-14 h: hjhxhhhnhhxglkhvzl\\n3-6 r: krrnvr\\n12-17 z: zzsfzzzjzzzrzhzzgh\\n1-5 b: bdnmb\\n18-19 c: cccccccccccccccccckc\\n13-16 t: tttttttrtttcdttpt\\n5-6 c: ccczlxc\\n2-7 b: phbqtkkkdglk\\n4-6 x: tgrmqlxwgrgwxmkfr\\n2-7 p: xspljfg\\n4-9 b: bbbwbbbbmbbb\\n3-9 b: brbvbbxqb\\n13-14 c: cccpckqscbcchc\\n1-3 m: mmmm\\n1-2 v: bvvvvc\\n2-3 b: bbsbbbnbbb\\n1-2 f: gkfms\\n5-6 n: nnnnnq\\n4-5 c: kffccnrmn\\n1-6 b: slgwbm\\n2-3 x: mxcj\\n3-4 p: gpbqpfsp\\n5-8 s: szwszsss\\n5-6 g: zkgjggg\\n3-10 v: twmqbvvnvv\\n3-5 z: shlzs\\n1-6 r: wrrljrfntswb\\n2-7 j: jjjjjjjjjj\\n4-5 f: jfffqw\\n1-3 r: kwrrrrfwp\\n2-9 c: ccmcrthdqtk\\n13-15 w: wwwwwwwwwwwwrwwww\\n14-15 s: ssssssssssssssss\\n2-5 r: rhmrfmr\\n6-7 x: dwxgfpsbtvx\\n7-8 b: bbbbcbbb\\n1-5 l: slllcqlll\\n3-4 h: hhbr\\n3-6 k: kkkpkkk\\n2-5 s: nsssmsssbs\\n7-8 s: xtxtwtzspxsszmgjlpzx\\n2-4 r: jzqc\\n9-10 h: hhhhhhhbwh\\n8-13 g: xgzjgjgggggmgggzc\\n1-10 j: lrhzsjmfrzz\\n4-10 z: dkqdhhrszpcplmfqgg\\n7-9 x: xxxxxxwxxx\\n12-13 f: fffpfqcfbkdvsbtzwwf\\n5-8 g: ghsvggggzgggg\\n10-14 z: ctzzkszzzlzmzzzz\\n2-4 d: xfwdd\\n9-15 j: xjjdjcjhnjjjfjjj\\n1-2 h: hhhhhgwjhznh\\n9-13 d: kddddbdddxddjsdsdd\\n7-9 x: rxxxxdwxxxxnxkxcx\\n6-16 r: rlrtlkdftfgqpkrsljr\\n1-3 z: pzzz\\n5-6 h: krhbsh\\n8-9 x: mxqhpmqglxxwxqwxxxp\\n2-4 z: vmfj\\n12-15 s: sssfsssssksssst\\n3-5 f: fwhfb\\n10-12 j: jjjjjzwjjjjw\\n4-6 j: jjjjjjjjjjj\\n11-12 k: kkkkvfktkkkkkkwwzknk\\n5-8 m: mhhmbvmvms\\n10-14 r: rlwrdfzkhgrcrlz\\n5-6 h: hhhhfh\\n2-4 w: wwqhwww\\n1-5 x: nxxxwxx\\n11-16 h: xpshnhxbwclbhrhwsh\\n7-9 t: ttttflgtkh\\n10-20 n: bnknnnnnnlnnnnmnvncn\\n2-5 w: pwwhwkq\\n1-5 j: jhjjj\\n5-6 f: fzffzfwfr\\n3-6 s: sssssgs\\n9-10 w: wwwwwnwxbrww\\n5-6 z: xzzhzjzzzzhzhz\\n17-18 v: vvvvvvvvvvvvvvvtvbv\\n13-20 l: llllldllllllllllllll\\n8-14 k: kkkkkkkgkkkkkkkk\\n7-9 j: jjnjjjjjjj\\n7-14 j: tjbjljjrjjjjzjjjj\\n1-4 m: jcmmm\\n6-9 g: ggnggsghggg\\n2-16 v: pvvqdcrpzpsmppfvdftf\\n8-11 j: jjjjjjjjjvj\\n4-6 m: qbmmxmjpm\\n2-12 l: pllqdxmwfmmlmznqr\\n3-4 b: bsbhbbbbb\\n1-4 w: wwww\\n1-11 r: rrrrjrrrgmrr\\n3-8 t: tnrztcht\\n3-14 p: pjppkpplsphlpn\\n7-8 j: tdfcjdjbjjjvjj\\n10-11 n: nnnnnnmhnnnnrddrnn\\n1-7 p: tppgqppptqscprnp\\n3-4 c: cqcmcc\\n2-8 l: llllllrlll\\n9-12 j: dmcwsjjrvmzjp\\n4-8 h: hhhrhhhb\\n1-5 n: nnnnnn\\n5-6 s: srssss\\n2-8 n: nrbngnntnnn\\n1-13 f: bffmjfdfffffp\\n7-8 t: tqtttttt\\n3-4 x: xxhh\\n15-18 j: jjjjjjjjjjjjjjpjjk\\n7-9 v: vkvvmzvvv\\n5-7 j: xjjgkjknjjp\\n2-4 l: llslkh\\n10-11 m: mmmmmmmmmjwmmmwmm\\n5-6 j: pjjzjqbqv\\n5-11 n: nnnncnnnnnfnnnnnn\\n2-13 g: gdfrmlcszxcwj\\n9-16 b: bbbbbbwhpztbhdbzb\\n1-4 f: fffffc\\n1-3 f: fffkf\\n16-17 p: pppppppppppppppkt\\n6-10 h: wzcnzhvhml\\n1-9 f: ffffffffff\\n3-8 f: kffgggng\\n8-13 m: mmmmmmmmmmmmmm\\n12-19 k: zkzzlkkvpnllksklljr\\n1-4 j: jjmjjjjxjwj\\n4-5 h: phhhhzhhhmhhprh\\n11-12 p: ppppppppppvppp\\n13-16 j: hpgjjjwfhjgmdttl\\n2-4 w: wwjwhthzhvpmpfkw\\n9-10 k: kkxkkkkskkv\\n17-20 j: jjjjjjbjjjzjjjjjjjjj\\n1-3 v: cvvvb\\n5-8 s: zbnmbfgdp\\n10-11 x: xxxxgmdtxxtxxxbx\\n12-17 n: nmnnjcndnndcnncnnrnn\\n3-6 p: lmblxwpjvfgjps\\n9-12 s: ssssssssfsssw\\n9-10 g: ggggggwgkzgggg\\n5-12 m: pzmmmfxgvmtmlmq\\n2-7 p: ptppprn\\n9-10 c: bgqtkccxcqb\\n8-11 r: rdrrrrrhrrmr\\n7-9 w: wwqwwwfwwjwhgrw\\n5-7 r: rrrrrrh\\n2-10 s: rsflsvlwfs\\n3-7 b: bbqbbbb\\n11-12 m: mmjmmqmnmmmm\\n7-13 h: hhhhhhphhhnhghh\\n12-13 b: bbbbbbblbbbtk\\n5-13 h: ppgzjhhhlhhqx\\n14-19 q: qlbqmqqqjqqqqrqkjnq\\n3-19 f: pxmznsfdhzjqrdfjqrd\\n16-17 q: qqmdqrqqxcqfxfgjg\\n12-13 j: njjjzjghjjjjc\\n9-11 l: vmbsllkcshmrhklrl\\n1-2 c: tccccc\\n3-6 p: jspprpjxhn\\n5-8 x: xrxzxfwxxx\\n9-10 z: zdznzzzzzzzgzz\\n4-5 j: jjpjq\\n4-6 r: rcxscm\\n2-6 k: pkqjskrlfknnrqt\\n3-11 k: bqbskncdkfrphshvv\\n11-13 g: ggqgggggggggggg\\n6-14 f: fffdxmfffjfffmffff\\n19-20 z: zzzznzzzzzzzzzzzzzzz\\n5-8 j: jjjjjjjjjgjjjjjjjjj\\n2-4 k: pkbkqpsrgkcwc\\n8-12 b: dbbwtbwbqxvbwrbl\\n1-8 v: rvrvfcnlcwflcvlsv\\n4-5 f: hffhfkq\\n3-12 g: zggpngtnvzgd\\n4-8 t: ttttwrwt\\n12-13 x: xxxxxxxvxxxdnx\\n9-12 j: jrvjjjjjbjjp\\n1-13 b: zbhbbbbbbbbbvbb\\n1-2 w: wwwwwww\\n15-16 k: tfkxskmvqlkkmfkj\\n12-18 b: bdpxktjwpxhsbgmrfb\\n8-10 v: vvvvvvtzvzvv\\n18-19 g: ggglgggggggggggggggg\\n4-8 s: pnzsjvwsmxwgrjmsm\\n14-17 p: pppppxppppppppprpkp\\n9-17 n: nvlnqnwnnnztfcgnpdn\\n3-5 l: mlqflfl\\n7-11 z: dzzzzdmnzznzvzzz\\n14-16 r: xrrsvrhhrlnjjrvrr\\n12-14 z: vnwzqsvvtdnpvvdrhgz\\n1-4 h: mhhhh\\n1-5 m: pmmmmmm\\n6-11 j: jmkljhjjvjmfmjpj\\n2-4 f: xhtkdf\\n5-14 x: frqqxljjwsxndx\";","export default \"\";","export default \"The submarine has been making some odd creaking noises, so you ask it to produce a diagnostic report just in case.\\n\\nThe diagnostic report (your puzzle input) consists of a list of binary numbers which, when decoded properly, can tell you many useful things about the conditions of the submarine. The first parameter to check is the **power consumption**.\\n\\nYou need to use the binary numbers in the diagnostic report to generate two new binary numbers (called the **gamma rate** and the **epsilon rate**). The power consumption can then be found by multiplying the gamma rate by the epsilon rate.\\n\\nEach bit in the gamma rate can be determined by finding the **most common bit in the corresponding position** of all numbers in the diagnostic report. For example, given the following diagnostic report:\\n\\n```\\n00100\\n11110\\n10110\\n10111\\n10101\\n01111\\n00111\\n11100\\n10000\\n11001\\n00010\\n01010\\n```\\n\\nConsidering only the first bit of each number, there are five `0` bits and seven `1` bits. Since the most common bit is `1`, the first bit of the gamma rate is `1`.\\n\\nThe most common second bit of the numbers in the diagnostic report is `0`, so the second bit of the gamma rate is `0`.\\n\\nThe most common value of the third, fourth, and fifth bits are `1`, `1`, and `0`, respectively, and so the final three bits of the gamma rate are `110`.\\n\\nSo, the gamma rate is the binary number `10110`, or **`22`** in decimal.\\n\\nThe epsilon rate is calculated in a similar way; rather than use the most common bit, the least common bit from each position is used. So, the epsilon rate is `01001`, or **`9`** in decimal. Multiplying the gamma rate (`22`) by the epsilon rate (`9`) produces the power consumption, **`198`**.\\n\\nUse the binary numbers in your diagnostic report to calculate the gamma rate and epsilon rate, then multiply them together. **What is the power consumption of the submarine?** (Be sure to represent your answer in decimal, not binary.)\\n\\n[comment]: <> (PART 2)\\n\\nNext, you should verify the **life support rating**, which can be determined by multiplying the **oxygen generator rating** by the **CO2 scrubber rating**.\\n\\nBoth the oxygen generator rating and the CO2 scrubber rating are values that can be found in your diagnostic report - finding them is the tricky part. Both values are located using a similar process that involves filtering out values until only one remains. Before searching for either rating value, start with the full list of binary numbers from your diagnostic report and **consider just the first bit** of those numbers. Then:\\n\\n- Keep only numbers selected by the **bit criteria** for the type of rating value for which you are searching. Discard numbers which do not match the bit criteria.\\n- If you only have one number left, stop; this is the rating value for which you are searching.\\n- Otherwise, repeat the process, considering the next bit to the right.\\n\\nThe **bit criteria** depends on which type of rating value you want to find:\\n\\n- To find **oxygen generator rating**, determine the **most common** value (`0` or `1`) in the current bit position, and keep only numbers with that bit in that position. If 0 and 1 are equally common, keep values with a 1 in the position being considered.\\n- To find **CO2 scrubber rating**, determine the **least common** value (`0` or `1`) in the current bit position, and keep only numbers with that bit in that position. If 0 and 1 are equally common, keep values with a 0 in the position being considered.\\n\\nFor example, to determine the **oxygen generator rating** value using the same example diagnostic report from above:\\n\\n- Start with all 12 numbers and consider only the first bit of each number. There are more `1` bits (7) than `0` bits (5), so keep only the 7 numbers with a `1` in the first position: `11110`, `10110`, `10111`, `10101`, `11100`, `10000`, and `11001`.\\n- Then, consider the second bit of the 7 remaining numbers: there are more `0` bits (4) than `1` bits (3), so keep only the 4 numbers with a `0` in the second position: `10110`, `10111`, `10101`, and `10000`.\\n- In the third position, three of the four numbers have a `1`, so keep those three: `10110`, `10111`, and `10101`.\\n- In the fourth position, two of the three numbers have a `1`, so keep those two: `10110` and `10111`.\\n- In the fifth position, there are an equal number of `0` bits and `1` bits (one each). So, to find the **oxygen generator rating**, keep the number with a `1` in that position: `10111`.\\n- As there is only one number left, stop; the **oxygen generator rating** is `10111`, or **`23`** in decimal.\\n\\nThen, to determine the **CO2 scrubber rating** value from the same example above:\\n\\n- Start again with all 12 numbers and consider only the first bit of each number. There are fewer `0` bits (5) than `1` bits (7), so keep only the 5 numbers with a `0` in the first position: `00100`, `01111`, `00111`, `00010`, and `01010`.\\n- Then, consider the second bit of the 5 remaining numbers: there are fewer `1` bits (2) than `0` bits (3), so keep only the 2 numbers with a `1` in the second position: `01111` and `01010`.\\n- In the third position, there are an equal number of `0` bits and `1` bits (one each). So, to find the **CO2 scrubber rating**, keep the number with a `0` in that position: `01010`.\\n- As there is only one number left, stop; the **CO2 scrubber rating** is `01010`, or **`10`** in decimal.\\n\\nFinally, to find the life support rating, multiply the oxygen generator rating (`23`) by the CO2 scrubber rating (`10`) to get **`230`**.\\n\\nUse the binary numbers in your diagnostic report to calculate the oxygen generator rating and CO2 scrubber rating, then multiply them together. **What is the life support rating of the submarine?** (Be sure to represent your answer in decimal, not binary.)\";","export default \"42,44,71,26,70,92,77,45,6,18,79,54,31,34,64,32,16,55,81,11,90,10,21,87,0,84,8,23,1,12,60,20,57,68,61,82,49,59,22,2,63,33,50,39,28,30,88,41,69,72,98,73,7,65,53,35,96,67,36,4,51,75,24,86,97,85,66,29,74,40,93,58,9,62,95,91,80,99,14,19,43,37,27,56,94,25,83,48,17,38,78,15,52,76,5,13,46,89,47,3\\n\\n48 69 68 49 13\\n25 14 30 74 89\\n16 38 19 24 29\\n56 97 50 65 79\\n57 52  5 27 76\\n\\n65 69 73 60 66\\n79 23 95 32 56\\n36 51 26  1 28\\n76  9  3 71 77\\n41 15 61 68 14\\n\\n77 86 11 96 50\\n64 35 76 14  5\\n31 20 53 84 66\\n83 40  1 28 79\\n15 74 92 65 39\\n\\n20 55 65 13 48\\n 1  3 98 78 29\\n58 45 39 18 34\\n43 26 83 33 50\\n84 15 62 71 88\\n\\n 0 10  3 19 47\\n51 43 62 11 70\\n38 59 56 81 55\\n77 36 39 91 74\\n23 14 67 12 80\\n\\n36 18 47 14 60\\n33 96 84 44 72\\n 1 37 74 93 80\\n50 95 59 90 27\\n63 53 65 41 78\\n\\n31  4 85 55 74\\n65 73  2 52  0\\n99 82 83 25 81\\n70 75 90 91 89\\n44 15 53 67 39\\n\\n11 39 36 37 32\\n84 19 58 34 48\\n 3 69 81 41 59\\n86  2 56 47 90\\n31 12 17 14 40\\n\\n28 13 34 45 37\\n83 55 61 80 92\\n77 33 44 40 31\\n54 25 71 56 93\\n60 70 20 65  9\\n\\n82 60 11 40 90\\n 0 75 86 55 58\\n24  9 72 89 56\\n54 16 22 70 57\\n64 39 31 33  5\\n\\n56 24 42 76 29\\n 0 60 12 84 73\\n72 81 99 15 70\\n88 90 80 26 65\\n61 47 19  7 17\\n\\n28 64 80  3 41\\n32  0 22 18 97\\n87 94  1 52 83\\n37 29 14  5 82\\n73 58 56 88 49\\n\\n70 23 43 81 66\\n27 14 38  8 13\\n26 17  6 67 83\\n91 96 37 39 18\\n19 25 77 98 53\\n\\n33 12 42  4 44\\n88 99 61 27 43\\n68 13 38 57 87\\n59 20  2 90 40\\n80 64 77 94 21\\n\\n47 29 58 72 24\\n26 66 42 68 36\\n34 80 76 94 59\\n61 41 64 44 50\\n 2 28 20  9 17\\n\\n88  3 36 39  0\\n83 54 86  9 92\\n14 82 34 62 73\\n63 95 78 23 55\\n24 41 47  2 58\\n\\n78 85 93 38 30\\n41  0 29 39 40\\n28 76 98 60 96\\n26 94 35  1 82\\n66 56 31 64 45\\n\\n30 15 12 44 24\\n32 49 99 76  8\\n64 56 43 42 19\\n62 83 33 48 54\\n89 74 72  3 91\\n\\n76 48 51 11 16\\n67 78 71 62 58\\n56 29 74  5 17\\n 9 81 65 12 39\\n19 24  1 13 30\\n\\n72 96 63  4 62\\n71 47  9 56 90\\n12 86 52 10  3\\n49 83 73  7 87\\n85 64 48 81 32\\n\\n28 72 38 47 63\\n37 14 13 51 27\\n 8 82 46 86 55\\n22 18 59 81 10\\n77 21 58 24 25\\n\\n92 49 67 19 85\\n45 50 41 79 84\\n 4  0 75 17 53\\n91 23 28 82  6\\n60 37 18 13 69\\n\\n 1 27 74 89  4\\n29  9 78 48 54\\n10 38 13 40 49\\n71 73 79 77 17\\n25 22 91 20  2\\n\\n94 40 75 63 10\\n89 81 32 72 73\\n 8 65 68 62 58\\n76 97 57 34 66\\n 0 82 14 90 11\\n\\n30 89 82 29 85\\n41 78 91 73 14\\n66 98 21 23 16\\n63 65 99 10 58\\n67 51 17 11 19\\n\\n37 74 52 31 28\\n48 14 13 72 59\\n45 30 46  7  9\\n89 77 16 33 81\\n62  4 15  5 96\\n\\n72 63 77 57 86\\n 8 65 11 44 69\\n78 52 14 84 80\\n36 42 30 59 33\\n46 10 92 19 26\\n\\n13 65 92  1  5\\n71 54 28 33 98\\n42 94 30 35 78\\n57 85 25 60  7\\n43 80 48 97 27\\n\\n29 64 61 99 74\\n94 68 72 36 51\\n11 83 21 96 86\\n56 53 25 48 92\\n60 15 19 50 76\\n\\n12 61 89 99 30\\n84 50 34 74 55\\n26 72 36 86  3\\n 4 79  6  8 40\\n 5 83 82 66 44\\n\\n40 93 61 20 50\\n90  7 60 38 16\\n22 52  3 92  5\\n32  0 57 58 30\\n68 28 81 46 54\\n\\n86 72 55 48 24\\n21  3 25 22 20\\n16 64 97 77 68\\n66  2  9 47 30\\n36 87 67 23  0\\n\\n18 54 51 38 44\\n73 50 68 59 61\\n45  0  5 80 19\\n79 65 66 30 15\\n26 74 23 99 95\\n\\n75  9 34 74 86\\n53 14 25 61 31\\n17 60 10 32 93\\n47 33  0 77 68\\n38 45  4 55 39\\n\\n32 81 21 11 31\\n30 56  3 25 18\\n80 96 20 65 71\\n41 67 22 97 10\\n93 68 17 13  1\\n\\n54 42 23  8 83\\n87 63 36 95 81\\n40 14 13  6 18\\n44 16 89 59 69\\n17 10 73 76  5\\n\\n36 69  2 13 74\\n17  7  9 42 54\\n79 21  5 19 66\\n68 22  4 85 25\\n63 23 10 75 87\\n\\n27 61 41 78  4\\n77 76 82 85 17\\n74  0 54 63 34\\n 6 56  1 16 89\\n 8 12 36 59 81\\n\\n37 22  9 36 19\\n79 61 78 96 91\\n41 11 42  8 24\\n85 84 35 47 31\\n50 16 62 53 21\\n\\n93 61 14 78 75\\n51 88  3 54 37\\n57 36 23 77 91\\n72 47 39 65 35\\n 2 58 86 81 27\\n\\n 0 34 82 13 53\\n 5 88 42 11 45\\n26 81 28 46 24\\n67 71 95  6  9\\n69 97 41 15  7\\n\\n92 25 31 62 35\\n83 72 54 61 41\\n28 51 45 79  3\\n16 38 52 58  2\\n37  7 36 21 22\\n\\n92 33 21 47 89\\n14 40 23 82 59\\n42 73  4 94 72\\n67 63 16  8 75\\n70 43 48 81 13\\n\\n63 99 85 39 15\\n58 68 62 50 24\\n25 60 26  5 94\\n 8 53 75 46 61\\n66  3 16 47 42\\n\\n21 89 33 61 12\\n36 83 76 80 24\\n93 95  4  0  7\\n91 43 17 14 64\\n84 71 45 44  5\\n\\n23 74 19 40 42\\n83 75 15 12 21\\n 4 11 90 51 53\\n 1 77 54 62 82\\n28  5 46 52 79\\n\\n73 60 22  3 71\\n53 67 30 58 15\\n59 89 40 21 31\\n13 42 84 97 10\\n81  6 70 88 52\\n\\n91 26 38 80 79\\n46 24 66 53 93\\n25  2 58 59 63\\n65 78 36  7  1\\n83 72 50 39 21\\n\\n31 22 32 36 79\\n97 60 62 43 96\\n 7 15 71 89 87\\n76 95 10 19 48\\n68 69 29 24 56\\n\\n25 40 47 50 31\\n15 13 45 66 30\\n12 67 95  3 48\\n43 61 60 75 59\\n16 69 98  6 88\\n\\n10 80 15 17 23\\n87 52 56 51 22\\n43 58 96 63 27\\n29 13 33 66 25\\n16 97 88 90 77\\n\\n 5 11 90  8 18\\n51 42 73 25 85\\n69 94 79 53 32\\n72 23 57 15  3\\n78 28 47 37 35\\n\\n80 81 44 53 14\\n36 71 35 83 30\\n94 40  2 99 97\\n16 48 85 76 20\\n56 25 89 88 39\\n\\n34 54  9 36 44\\n14 19  0 64 40\\n25 78 74 18 13\\n82 10  6 92 95\\n84  8 75 98 45\\n\\n95  8 27 29 89\\n33 79 88 59 24\\n 4 28 35 72 97\\n22 77 85 94 76\\n46 43 68 65 67\\n\\n42 13  3 20 43\\n12 98 31 69  4\\n56 67 25 89 71\\n16 29 33  1 36\\n27 80  0 47  5\\n\\n62 66 86 63 70\\n44 27  5 78 85\\n49 40 58 61 89\\n37 43 36 68 28\\n22  7 35 52 57\\n\\n73 62 90 75 81\\n31 94 77 44 14\\n18  9 10 93 17\\n89 39 63 66 53\\n42 88 59 36  2\\n\\n54 52 76 79 61\\n95 39  3 41 63\\n74 97 38  0 15\\n 6 23 11 10 83\\n46 67 96 77 29\\n\\n 0 76  9 84 52\\n45 27 29 56 85\\n89 63 77 49 65\\n 4 13 78 33 37\\n64  7  1 94 12\\n\\n16 32 78 73 90\\n 2 48 57 75 23\\n95 27 33 12 51\\n69 26 17 42 61\\n67 89 74 44 15\\n\\n47 90  5 76 96\\n71 24  9 69 16\\n64 23 98 66 81\\n29 34 63 72 22\\n41 17 45 87 57\\n\\n48 45 87 14  1\\n86 28  6 62 46\\n27 92 11 49 94\\n 0 90 10 70 20\\n 2 59 88 96 33\\n\\n16 29 68  4 82\\n56 67  2 69 25\\n94 47 61 51 32\\n70 31 21 43 42\\n76 60 17 59 92\\n\\n18  6 87 56 61\\n89 53  5 47 69\\n93 57 78 41 82\\n27 24 51 99 29\\n42 74 28 75 97\\n\\n21 62 60 86 85\\n24 35  1 29  2\\n89 15 72 70 39\\n99 79 87 93 34\\n53 71 10 20 50\\n\\n76 55 18 28 33\\n37 14 64  7  0\\n13 60 54 62  5\\n61  3 99 56 10\\n30 86 47 24 39\\n\\n24 96 18 55 52\\n79 73 91 14 88\\n42 37 12 64 21\\n45 51 33 34  3\\n 8 77 47 40 16\\n\\n55 54 98 85 97\\n80 21 27 15 36\\n 1 26  7 70 44\\n48 25 59  0 38\\n 5 58 18  3 12\\n\\n76 78 79 92 88\\n 7 80 57 68 28\\n27 16  8 10 62\\n32 98 64 60 39\\n52  4 85 48 35\\n\\n94 64 19 67 12\\n49 61 77 89 31\\n80 11 18 26 83\\n21 76 66 85 91\\n60 88 28 86 69\\n\\n88 27 52 28 89\\n 3  5 15 78 97\\n79 34  7 42 80\\n14 83 90 68 65\\n35 13 58 71 17\\n\\n90 10  0 30 69\\n64 75 61 62 97\\n 3 29 40 58 57\\n98 48  5 37 23\\n70 12  6 36  7\\n\\n27 87 59 84 83\\n19 91 24 32 78\\n62 14 58 18 68\\n37  1 99 44 94\\n71 23 54  8 74\\n\\n12 78  7 55 59\\n81 87 69 49 22\\n79 99 84 58 65\\n40 42 85 74 91\\n61 39 51 88 36\\n\\n 2  9 62 76 11\\n87 36 72 80 96\\n28 16  7 17 39\\n68 33  5 71 92\\n41 22 70  4 52\\n\\n49  1 23 37 60\\n72 79  2 40 13\\n31 47 59 48 33\\n96 80 62  3 12\\n34 89 75 18 95\\n\\n34 72  3 78 60\\n57 51 47 26  7\\n 2 50 82  4 56\\n81 95 22 42 73\\n25 37 97 65  6\\n\\n86 23 17 39 53\\n 6 49 66 32 30\\n71 40 64 11  8\\n82 60 18 13 68\\n12  7 42 52 72\\n\\n16  0 88 84 98\\n42 92 19 89  2\\n51 26  1 33 10\\n40 87 32 17 27\\n 7 68 35 50 11\\n\\n39 52 56 23 75\\n66 64 26 10 53\\n46 25 60 48 28\\n61 27 98 40 59\\n65 95 85 13 62\\n\\n74 32 72 43 23\\n26 90 83 68 82\\n48 60 39 17 54\\n51 36 37 85 88\\n99 81 69 50 93\\n\\n16 71  3 29 81\\n18 97 17 20 48\\n95 38 61 87 98\\n52 76  8 42 36\\n45  4 78 55 89\\n\\n64 18 54 39 77\\n36 66 98 88 38\\n49 50 74 69 65\\n71  3 93 34 82\\n23 26 92 15 33\\n\\n18 99 45 69  8\\n32 75 47  2 91\\n41 55 90  5  3\\n93 11 84 78 56\\n80 57 51 50 74\\n\\n90  0 19 53 11\\n69 50 47 16 26\\n 5 32 73 51 14\\n84 37 34  7 56\\n68 10 74 29 62\\n\\n42 80  7 72 35\\n 1 50 15  0 49\\n43 19 41 26 48\\n65  2 36 17 20\\n85 32  5 75 30\\n\\n 8 80 72  1 81\\n90 69 48 36 23\\n55 16 35 41  5\\n71 12 59 29 79\\n60 92 53 73 96\\n\\n45 55 75 77  6\\n 1 91 76  5 39\\n54 65 61 34  8\\n27 59 47 85 44\\n66 29 36 80 60\\n\\n82 75 32 29 14\\n41 21 20 68 89\\n80 64 56 33 31\\n13 12 55 81  7\\n36 78  4 24 50\\n\\n55 28 90 35 22\\n77 92 56 16 47\\n48  4 67 95 37\\n63 80 36 12 44\\n88 58 10 68 84\\n\\n 7 88 53 55 60\\n81 99 91 28 70\\n75  8  0 40 84\\n17 24 30 71 56\\n78 20 83 29 74\\n\\n10 16 11  5 38\\n72 77 37 68 81\\n78 13 45 89 46\\n90 49 18 53 42\\n71  0 28 26 75\\n\\n36 73 23 44  7\\n 1 96 17 11 42\\n77 54 68 80 79\\n85 56 28 58 52\\n57  2 43 18 61\\n\\n 9 18 29 44 61\\n13 80 57 95 47\\n 2 15 72 50 65\\n77 12 42 64 36\\n49 67 31  6 90\\n\\n99 74  9 64 59\\n17 87 86  5 28\\n44 41 82 53 45\\n95 51 98 50 94\\n22 37 46 25  4\\n\\n46 54 82 17 77\\n88 63 50 65 64\\n 5 19 39 21 11\\n57 58 20  6 40\\n99 37 66 70 95\\n\\n30 68 11 29 13\\n 1 69  0  9 93\\n33 57 23 50 71\\n 8 77  6 25 45\\n34 12 60  7 28\\n\\n91 53 88 47 40\\n77 92 87 37 84\\n89 95 78 21 39\\n65 20 54 94 85\\n45 74 30 49 11\\n\\n 3 58 90 93 96\\n53 66 24 43 32\\n62 84 19 82 22\\n13 89 20 97  1\\n15 91 51 68 49\";","export default \"Santa's sleigh uses a very high-precision clock to guide its movements, and the clock's oscillator is regulated by stars. Unfortunately, the stars have been stolen... by the Easter Bunny. To save Christmas, Santa needs you to retrieve all **fifty stars** by December 25th.\\n\\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants **one star**. Good luck!\\n\\nYou're airdropped near **Easter Bunny Headquarters** in a city somewhere. \\\"Near\\\", unfortunately, is as close as you can get - the instructions on the Easter Bunny Recruiting Document the Elves intercepted start here, and nobody had time to work them out further.\\n\\nThe Document indicates that you should start at the given coordinates (where you just landed) and face North. Then, follow the provided sequence: either turn left (`L`) or right (`R`) 90 degrees, then walk forward the given number of blocks, ending at a new intersection.\\n\\nThere's no time to follow such ridiculous instructions on foot, though, so you take a moment and work out the destination. Given that you can only walk on the [street grid of the city](https://en.wikipedia.org/wiki/Taxicab_geometry), how far is the shortest path to the destination?\\n\\nFor example:\\n\\n- Following `R2, L3` leaves you `2` blocks East and `3` blocks North, or `5` blocks away.\\n- `R2, R2, R2` leaves you `2` blocks due South of your starting position, which is `2` blocks away.\\n- `R5, L5, R5, R3` leaves you `12` blocks away.\\n\\n**How many blocks away** is Easter Bunny HQ?\\n\\n[comment]: <> (PART 2)\\n\\nThen, you notice the instructions continue on the back of the Recruiting Document. Easter Bunny HQ is actually at the first location you visit twice.\\n\\nFor example, if your instructions are `R8, R4, R4, R8`, the first location you visit twice is `4` blocks away, due East.\\n\\nHow many blocks away is the **first location you visit twice?**\";","export default \"A giant [whale](https://en.wikipedia.org/wiki/Sperm_whale) has decided your submarine is its next meal, and it's much faster than you are. There's nowhere to run!\\n\\nSuddenly, a swarm of crabs (each in its own tiny submarine - it's too deep for them otherwise) zooms in to rescue you! They seem to be preparing to blast a hole in the ocean floor; sensors indicate a **massive underground cave system** just beyond where they're aiming!\\n\\nThe crab submarines all need to be aligned before they'll have enough power to blast a large enough hole for your submarine to get through. However, it doesn't look like they'll be aligned before the whale catches you! Maybe you can help?\\n\\nThere's one major catch - crab submarines can only move horizontally.\\n\\nYou quickly make a list of **the horizontal position of each crab** (your puzzle input). Crab submarines have limited fuel, so you need to find a way to make all of their horizontal positions match while requiring them to spend as little fuel as possible.\\n\\nFor example, consider the following horizontal positions:\\n\\n```\\n16,1,2,0,4,2,7,1,2,14\\n```\\n\\nThis means there's a crab with horizontal position `16`, a crab with horizontal position `1`, and so on.\\n\\nEach change of 1 step in horizontal position of a single crab costs 1 fuel. You could choose any horizontal position to align them all on, but the one that costs the least fuel is horizontal position `2`:\\n\\n- Move from `16` to `2`: `14` fuel\\n- Move from `1` to `2`: `1` fuel\\n- Move from `2` to `2`: `0` fuel\\n- Move from `0` to `2`: `2` fuel\\n- Move from `4` to `2`: `2` fuel\\n- Move from `2` to `2`: `0` fuel\\n- Move from `7` to `2`: `5` fuel\\n- Move from `1` to `2`: `1` fuel\\n- Move from `2` to `2`: `0` fuel\\n- Move from `14` to `2`: `12` fuel\\n\\nThis costs a total of **`37`** fuel. This is the cheapest possible outcome; more expensive outcomes include aligning at position `1` (`41` fuel), position `3` (`39` fuel), or position `10` (`71` fuel).\\n\\nDetermine the horizontal position that the crabs can align to using the least fuel possible. **How much fuel must they spend to align to that position?**\\n\\n[comment]: <> (PART 2)\\n\\nThe crabs don't seem interested in your proposed solution. Perhaps you misunderstand crab engineering?\\n\\nAs it turns out, crab submarine engines don't burn fuel at a constant rate. Instead, each change of 1 step in horizontal position costs 1 more unit of fuel than the last: the first step costs `1`, the second step costs `2`, the third step costs `3`, and so on.\\n\\nAs each crab moves, moving further becomes more expensive. This changes the best horizontal position to align them all on; in the example above, this becomes `5`:\\n\\n- Move from `16` to `5`: `66` fuel\\n- Move from `1` to `5`: `10` fuel\\n- Move from `2` to `5`: `6` fuel\\n- Move from `0` to `5`: `15` fuel\\n- Move from `4` to `5`: `1` fuel\\n- Move from `2` to `5`: `6` fuel\\n- Move from `7` to `5`: `3` fuel\\n- Move from `1` to `5`: `10` fuel\\n- Move from `2` to `5`: `6` fuel\\n- Move from `14` to `5`: `45` fuel\\n\\nThis costs a total of **`168`** fuel. This is the new cheapest possible outcome; the old alignment position (`2`) now costs `206` fuel instead.\\n\\nDetermine the horizontal position that the crabs can align to using the least fuel possible so they can make you an escape route! **How much fuel must they spend to align to that position?**\";","export default \"[1518-09-28 00:56] wakes up\\n[1518-10-15 00:05] falls asleep\\n[1518-02-15 00:58] wakes up\\n[1518-08-26 00:51] wakes up\\n[1518-03-23 00:32] wakes up\\n[1518-05-04 23:56] Guard #523 begins shift\\n[1518-07-28 00:55] wakes up\\n[1518-02-08 00:49] wakes up\\n[1518-04-20 00:02] Guard #2017 begins shift\\n[1518-09-12 00:57] wakes up\\n[1518-06-11 00:34] wakes up\\n[1518-06-08 00:20] wakes up\\n[1518-01-29 00:53] wakes up\\n[1518-09-23 00:03] falls asleep\\n[1518-02-11 00:19] falls asleep\\n[1518-05-12 23:57] Guard #151 begins shift\\n[1518-07-24 00:47] wakes up\\n[1518-07-21 00:03] falls asleep\\n[1518-05-19 00:54] wakes up\\n[1518-08-21 00:52] wakes up\\n[1518-10-10 00:52] wakes up\\n[1518-02-02 00:14] wakes up\\n[1518-10-15 00:52] wakes up\\n[1518-03-13 23:46] Guard #2081 begins shift\\n[1518-08-07 00:26] falls asleep\\n[1518-08-13 00:00] Guard #349 begins shift\\n[1518-10-17 00:22] falls asleep\\n[1518-03-10 00:14] falls asleep\\n[1518-09-30 00:48] wakes up\\n[1518-07-01 23:57] Guard #3469 begins shift\\n[1518-04-09 23:57] Guard #3413 begins shift\\n[1518-04-28 00:35] falls asleep\\n[1518-06-08 00:49] wakes up\\n[1518-08-15 00:25] falls asleep\\n[1518-05-16 00:55] falls asleep\\n[1518-06-13 00:48] falls asleep\\n[1518-03-28 00:52] falls asleep\\n[1518-10-19 00:01] Guard #2677 begins shift\\n[1518-01-29 00:04] Guard #2017 begins shift\\n[1518-04-09 00:23] falls asleep\\n[1518-07-05 00:31] falls asleep\\n[1518-06-15 23:58] Guard #1151 begins shift\\n[1518-03-09 00:38] wakes up\\n[1518-09-05 00:48] wakes up\\n[1518-08-14 00:58] wakes up\\n[1518-09-05 00:40] falls asleep\\n[1518-06-10 23:56] Guard #151 begins shift\\n[1518-03-16 00:00] Guard #1091 begins shift\\n[1518-05-14 00:02] falls asleep\\n[1518-07-23 00:52] wakes up\\n[1518-09-13 00:50] wakes up\\n[1518-10-19 23:59] Guard #2087 begins shift\\n[1518-03-02 00:53] falls asleep\\n[1518-11-20 00:42] falls asleep\\n[1518-04-23 00:31] wakes up\\n[1518-04-19 00:43] wakes up\\n[1518-09-07 23:59] Guard #1091 begins shift\\n[1518-08-30 00:00] Guard #71 begins shift\\n[1518-11-14 00:53] falls asleep\\n[1518-06-08 00:04] Guard #2017 begins shift\\n[1518-03-21 00:58] wakes up\\n[1518-04-19 00:24] falls asleep\\n[1518-02-08 00:53] wakes up\\n[1518-09-23 00:32] wakes up\\n[1518-05-08 00:04] falls asleep\\n[1518-10-17 00:55] wakes up\\n[1518-10-12 23:57] Guard #3413 begins shift\\n[1518-09-24 00:06] falls asleep\\n[1518-08-06 00:43] falls asleep\\n[1518-10-15 00:49] falls asleep\\n[1518-01-28 00:58] wakes up\\n[1518-09-28 23:57] Guard #2081 begins shift\\n[1518-08-15 00:30] falls asleep\\n[1518-03-06 00:53] falls asleep\\n[1518-04-20 00:18] wakes up\\n[1518-02-18 00:10] falls asleep\\n[1518-02-27 23:56] Guard #1459 begins shift\\n[1518-09-04 23:58] Guard #907 begins shift\\n[1518-09-20 00:11] falls asleep\\n[1518-09-02 00:35] wakes up\\n[1518-11-12 00:03] Guard #907 begins shift\\n[1518-07-18 00:16] falls asleep\\n[1518-10-07 23:57] Guard #3539 begins shift\\n[1518-02-16 00:31] falls asleep\\n[1518-02-18 00:32] falls asleep\\n[1518-06-18 00:55] wakes up\\n[1518-09-26 00:26] falls asleep\\n[1518-05-12 00:44] wakes up\\n[1518-09-01 00:50] falls asleep\\n[1518-09-25 00:04] Guard #367 begins shift\\n[1518-07-17 00:59] wakes up\\n[1518-08-29 00:02] falls asleep\\n[1518-02-20 00:40] wakes up\\n[1518-05-01 00:03] Guard #409 begins shift\\n[1518-11-20 00:02] Guard #2593 begins shift\\n[1518-09-18 00:04] Guard #1091 begins shift\\n[1518-01-30 00:57] falls asleep\\n[1518-01-31 00:33] falls asleep\\n[1518-11-12 23:57] Guard #409 begins shift\\n[1518-06-14 00:53] falls asleep\\n[1518-08-08 00:25] falls asleep\\n[1518-02-01 00:10] falls asleep\\n[1518-07-11 00:50] wakes up\\n[1518-04-18 00:03] Guard #449 begins shift\\n[1518-10-09 00:53] wakes up\\n[1518-06-24 23:52] Guard #409 begins shift\\n[1518-07-19 00:53] wakes up\\n[1518-03-08 00:21] wakes up\\n[1518-07-14 00:36] wakes up\\n[1518-07-02 00:22] falls asleep\\n[1518-06-25 00:03] falls asleep\\n[1518-08-10 23:51] Guard #3539 begins shift\\n[1518-04-06 00:57] falls asleep\\n[1518-10-13 00:08] wakes up\\n[1518-08-24 00:58] wakes up\\n[1518-05-28 00:31] falls asleep\\n[1518-05-17 00:00] Guard #1627 begins shift\\n[1518-03-14 00:05] falls asleep\\n[1518-07-25 00:42] falls asleep\\n[1518-04-25 00:02] Guard #71 begins shift\\n[1518-11-16 00:10] falls asleep\\n[1518-10-05 00:00] Guard #409 begins shift\\n[1518-09-22 00:57] wakes up\\n[1518-07-02 23:59] Guard #409 begins shift\\n[1518-04-25 00:41] falls asleep\\n[1518-07-30 00:48] wakes up\\n[1518-02-07 00:50] wakes up\\n[1518-10-02 00:36] falls asleep\\n[1518-02-25 00:40] wakes up\\n[1518-03-12 00:44] falls asleep\\n[1518-10-10 00:55] falls asleep\\n[1518-01-29 00:42] falls asleep\\n[1518-04-17 00:57] wakes up\\n[1518-08-22 00:32] falls asleep\\n[1518-11-04 00:22] wakes up\\n[1518-11-03 00:29] falls asleep\\n[1518-05-08 00:51] wakes up\\n[1518-06-03 00:15] falls asleep\\n[1518-11-18 23:56] Guard #2081 begins shift\\n[1518-07-14 00:13] falls asleep\\n[1518-07-04 00:02] falls asleep\\n[1518-04-11 00:02] Guard #1459 begins shift\\n[1518-06-01 00:12] falls asleep\\n[1518-04-01 23:53] Guard #409 begins shift\\n[1518-06-22 00:27] falls asleep\\n[1518-05-20 23:57] Guard #523 begins shift\\n[1518-08-29 00:35] wakes up\\n[1518-07-29 00:54] wakes up\\n[1518-10-28 00:42] wakes up\\n[1518-07-05 00:00] Guard #523 begins shift\\n[1518-08-26 00:27] falls asleep\\n[1518-04-15 00:04] falls asleep\\n[1518-09-20 00:00] Guard #2393 begins shift\\n[1518-07-19 00:31] wakes up\\n[1518-02-23 00:48] wakes up\\n[1518-11-14 00:01] falls asleep\\n[1518-08-31 00:21] falls asleep\\n[1518-05-03 00:18] falls asleep\\n[1518-08-20 23:56] Guard #1627 begins shift\\n[1518-10-01 00:37] falls asleep\\n[1518-10-19 00:52] wakes up\\n[1518-11-05 00:40] wakes up\\n[1518-03-07 00:08] falls asleep\\n[1518-01-28 00:49] wakes up\\n[1518-04-14 00:22] falls asleep\\n[1518-08-20 00:27] wakes up\\n[1518-03-17 00:17] falls asleep\\n[1518-05-03 23:58] Guard #2593 begins shift\\n[1518-07-30 00:59] wakes up\\n[1518-08-17 00:16] falls asleep\\n[1518-08-22 00:25] wakes up\\n[1518-07-15 00:54] wakes up\\n[1518-04-11 23:56] Guard #409 begins shift\\n[1518-09-22 00:03] Guard #349 begins shift\\n[1518-10-01 00:18] falls asleep\\n[1518-02-06 00:58] wakes up\\n[1518-09-03 23:57] Guard #71 begins shift\\n[1518-09-21 00:30] falls asleep\\n[1518-07-27 00:03] Guard #2393 begins shift\\n[1518-11-09 00:19] falls asleep\\n[1518-08-14 00:21] falls asleep\\n[1518-08-01 00:02] Guard #1627 begins shift\\n[1518-02-07 00:58] wakes up\\n[1518-10-18 00:57] wakes up\\n[1518-06-26 00:58] wakes up\\n[1518-10-07 00:00] Guard #1627 begins shift\\n[1518-05-01 00:57] falls asleep\\n[1518-04-23 00:20] falls asleep\\n[1518-09-15 00:02] Guard #1459 begins shift\\n[1518-06-05 00:42] falls asleep\\n[1518-03-02 23:50] Guard #1627 begins shift\\n[1518-06-19 00:51] wakes up\\n[1518-06-01 23:56] Guard #151 begins shift\\n[1518-06-22 23:48] Guard #2393 begins shift\\n[1518-02-10 00:14] falls asleep\\n[1518-06-11 00:57] wakes up\\n[1518-07-09 00:39] wakes up\\n[1518-10-17 23:59] Guard #3469 begins shift\\n[1518-09-21 00:51] wakes up\\n[1518-06-24 00:57] wakes up\\n[1518-09-14 00:42] falls asleep\\n[1518-08-26 00:37] falls asleep\\n[1518-11-22 00:50] falls asleep\\n[1518-10-26 00:00] Guard #409 begins shift\\n[1518-07-12 00:33] wakes up\\n[1518-07-24 23:59] Guard #1627 begins shift\\n[1518-09-28 00:00] Guard #349 begins shift\\n[1518-08-28 23:46] Guard #907 begins shift\\n[1518-07-08 23:57] Guard #1459 begins shift\\n[1518-05-20 00:05] falls asleep\\n[1518-08-06 00:04] Guard #907 begins shift\\n[1518-05-03 00:45] wakes up\\n[1518-11-11 00:08] falls asleep\\n[1518-05-16 00:28] wakes up\\n[1518-03-11 00:54] wakes up\\n[1518-06-06 23:57] Guard #3469 begins shift\\n[1518-11-22 00:16] falls asleep\\n[1518-02-18 00:04] Guard #71 begins shift\\n[1518-06-26 00:09] falls asleep\\n[1518-03-08 23:48] Guard #523 begins shift\\n[1518-08-02 00:00] Guard #367 begins shift\\n[1518-11-20 00:44] wakes up\\n[1518-04-04 00:22] wakes up\\n[1518-09-22 23:51] Guard #3413 begins shift\\n[1518-10-10 00:04] Guard #1627 begins shift\\n[1518-08-05 00:07] falls asleep\\n[1518-09-27 00:58] wakes up\\n[1518-07-09 00:35] falls asleep\\n[1518-09-29 00:20] wakes up\\n[1518-06-14 00:59] wakes up\\n[1518-06-19 23:59] Guard #2081 begins shift\\n[1518-08-19 00:29] wakes up\\n[1518-08-16 00:51] wakes up\\n[1518-07-07 00:19] wakes up\\n[1518-06-28 00:11] falls asleep\\n[1518-10-31 00:45] wakes up\\n[1518-07-24 00:08] wakes up\\n[1518-05-01 00:59] wakes up\\n[1518-06-11 23:47] Guard #3413 begins shift\\n[1518-10-02 23:58] Guard #2087 begins shift\\n[1518-09-06 23:58] Guard #409 begins shift\\n[1518-03-25 00:50] falls asleep\\n[1518-04-05 00:46] falls asleep\\n[1518-07-17 00:03] Guard #71 begins shift\\n[1518-06-15 00:49] falls asleep\\n[1518-07-12 00:47] wakes up\\n[1518-11-07 00:19] falls asleep\\n[1518-03-17 00:50] wakes up\\n[1518-04-10 00:57] falls asleep\\n[1518-09-19 00:19] wakes up\\n[1518-08-05 00:55] wakes up\\n[1518-03-17 00:00] Guard #1627 begins shift\\n[1518-07-26 00:57] wakes up\\n[1518-03-26 23:56] Guard #2593 begins shift\\n[1518-05-30 23:49] Guard #523 begins shift\\n[1518-07-07 00:18] falls asleep\\n[1518-09-04 00:56] wakes up\\n[1518-06-27 00:01] falls asleep\\n[1518-08-11 00:49] falls asleep\\n[1518-03-07 00:52] wakes up\\n[1518-05-18 00:34] wakes up\\n[1518-06-05 00:59] wakes up\\n[1518-04-22 00:38] wakes up\\n[1518-05-16 00:57] wakes up\\n[1518-03-21 00:47] wakes up\\n[1518-04-25 00:57] wakes up\\n[1518-09-03 00:04] falls asleep\\n[1518-04-23 00:59] wakes up\\n[1518-09-02 00:01] Guard #2393 begins shift\\n[1518-09-22 00:53] falls asleep\\n[1518-09-15 00:26] falls asleep\\n[1518-10-24 00:34] wakes up\\n[1518-05-23 00:54] wakes up\\n[1518-02-15 00:35] wakes up\\n[1518-03-08 00:25] falls asleep\\n[1518-10-11 23:57] Guard #349 begins shift\\n[1518-08-04 00:36] falls asleep\\n[1518-04-14 00:53] wakes up\\n[1518-07-24 00:23] falls asleep\\n[1518-08-22 00:22] falls asleep\\n[1518-07-24 00:04] falls asleep\\n[1518-09-20 00:43] wakes up\\n[1518-05-26 00:29] falls asleep\\n[1518-06-11 00:32] falls asleep\\n[1518-03-14 23:56] Guard #151 begins shift\\n[1518-06-27 00:57] wakes up\\n[1518-05-14 23:47] Guard #2017 begins shift\\n[1518-11-06 23:56] Guard #367 begins shift\\n[1518-04-05 00:49] wakes up\\n[1518-09-13 23:56] Guard #151 begins shift\\n[1518-09-28 00:52] falls asleep\\n[1518-11-14 23:59] Guard #1091 begins shift\\n[1518-07-21 00:49] wakes up\\n[1518-06-08 00:27] falls asleep\\n[1518-08-13 00:32] wakes up\\n[1518-10-14 00:59] wakes up\\n[1518-05-22 00:35] falls asleep\\n[1518-06-24 00:00] Guard #409 begins shift\\n[1518-08-08 00:54] wakes up\\n[1518-09-19 00:15] falls asleep\\n[1518-10-15 23:59] Guard #349 begins shift\\n[1518-06-11 00:18] falls asleep\\n[1518-06-24 00:50] falls asleep\\n[1518-10-28 00:38] falls asleep\\n[1518-09-09 00:26] falls asleep\\n[1518-05-03 00:22] wakes up\\n[1518-08-18 00:00] Guard #3413 begins shift\\n[1518-09-16 00:58] wakes up\\n[1518-09-29 00:26] falls asleep\\n[1518-08-13 00:18] falls asleep\\n[1518-08-16 00:50] falls asleep\\n[1518-08-09 00:51] wakes up\\n[1518-08-02 00:59] wakes up\\n[1518-06-21 00:43] wakes up\\n[1518-07-09 00:43] falls asleep\\n[1518-02-16 00:51] wakes up\\n[1518-05-17 00:55] falls asleep\\n[1518-10-28 23:58] Guard #1459 begins shift\\n[1518-10-03 00:13] falls asleep\\n[1518-11-11 00:51] wakes up\\n[1518-05-27 00:38] wakes up\\n[1518-09-26 00:31] wakes up\\n[1518-07-02 00:58] wakes up\\n[1518-03-25 00:08] falls asleep\\n[1518-04-03 00:24] wakes up\\n[1518-04-18 00:33] falls asleep\\n[1518-06-21 00:53] falls asleep\\n[1518-09-25 23:59] Guard #1459 begins shift\\n[1518-05-26 00:03] Guard #3469 begins shift\\n[1518-10-26 23:59] Guard #409 begins shift\\n[1518-02-06 00:25] falls asleep\\n[1518-11-09 00:54] wakes up\\n[1518-09-03 00:24] wakes up\\n[1518-04-25 23:50] Guard #2393 begins shift\\n[1518-03-06 00:29] wakes up\\n[1518-05-12 00:02] Guard #2081 begins shift\\n[1518-09-26 00:53] wakes up\\n[1518-05-23 00:02] Guard #367 begins shift\\n[1518-08-13 00:41] falls asleep\\n[1518-09-12 00:37] wakes up\\n[1518-09-01 00:32] falls asleep\\n[1518-09-02 00:29] falls asleep\\n[1518-07-17 23:59] Guard #3539 begins shift\\n[1518-09-21 00:35] wakes up\\n[1518-03-28 00:49] wakes up\\n[1518-09-06 00:01] Guard #3413 begins shift\\n[1518-04-01 00:52] wakes up\\n[1518-10-12 00:15] falls asleep\\n[1518-06-20 00:13] falls asleep\\n[1518-10-04 00:25] falls asleep\\n[1518-04-18 23:57] Guard #2017 begins shift\\n[1518-10-23 00:48] falls asleep\\n[1518-05-27 00:03] Guard #367 begins shift\\n[1518-11-16 00:34] wakes up\\n[1518-09-04 00:14] falls asleep\\n[1518-04-04 00:34] wakes up\\n[1518-02-03 00:37] wakes up\\n[1518-04-24 00:41] wakes up\\n[1518-04-20 00:10] falls asleep\\n[1518-02-15 00:43] falls asleep\\n[1518-05-30 00:53] falls asleep\\n[1518-04-20 23:58] Guard #1091 begins shift\\n[1518-08-18 00:54] wakes up\\n[1518-02-28 00:46] falls asleep\\n[1518-09-11 00:34] falls asleep\\n[1518-04-04 00:16] falls asleep\\n[1518-03-03 23:56] Guard #1459 begins shift\\n[1518-11-04 00:19] falls asleep\\n[1518-05-04 00:06] falls asleep\\n[1518-05-02 00:00] Guard #2677 begins shift\\n[1518-09-26 00:37] falls asleep\\n[1518-06-27 00:23] wakes up\\n[1518-10-04 00:43] wakes up\\n[1518-06-08 00:52] falls asleep\\n[1518-05-12 00:35] falls asleep\\n[1518-10-01 23:58] Guard #2393 begins shift\\n[1518-05-17 00:16] falls asleep\\n[1518-10-15 00:27] wakes up\\n[1518-11-21 23:56] Guard #409 begins shift\\n[1518-02-09 00:15] falls asleep\\n[1518-02-21 23:56] Guard #2393 begins shift\\n[1518-02-23 00:04] Guard #1627 begins shift\\n[1518-02-23 00:56] wakes up\\n[1518-10-06 00:52] wakes up\\n[1518-04-10 00:30] falls asleep\\n[1518-07-22 00:29] falls asleep\\n[1518-10-24 00:26] falls asleep\\n[1518-06-23 00:04] falls asleep\\n[1518-10-08 00:37] wakes up\\n[1518-09-27 00:01] Guard #449 begins shift\\n[1518-10-23 00:29] falls asleep\\n[1518-03-24 23:57] Guard #2017 begins shift\\n[1518-08-27 00:51] wakes up\\n[1518-11-18 00:02] Guard #2063 begins shift\\n[1518-07-09 00:55] wakes up\\n[1518-03-27 00:16] falls asleep\\n[1518-07-03 00:45] wakes up\\n[1518-06-27 23:57] Guard #2393 begins shift\\n[1518-06-03 00:41] wakes up\\n[1518-04-04 00:57] wakes up\\n[1518-03-22 00:29] falls asleep\\n[1518-10-17 00:42] falls asleep\\n[1518-10-21 00:02] Guard #2087 begins shift\\n[1518-02-14 00:28] falls asleep\\n[1518-03-12 00:59] wakes up\\n[1518-10-02 00:33] wakes up\\n[1518-06-21 00:54] wakes up\\n[1518-07-29 00:32] falls asleep\\n[1518-06-26 00:29] falls asleep\\n[1518-11-14 00:47] wakes up\\n[1518-03-01 00:48] wakes up\\n[1518-03-27 23:59] Guard #367 begins shift\\n[1518-08-12 00:42] wakes up\\n[1518-05-27 00:53] wakes up\\n[1518-11-11 00:46] falls asleep\\n[1518-03-14 00:51] wakes up\\n[1518-02-01 00:26] wakes up\\n[1518-07-03 00:27] falls asleep\\n[1518-03-06 00:56] wakes up\\n[1518-07-11 00:19] falls asleep\\n[1518-10-31 23:57] Guard #523 begins shift\\n[1518-05-05 00:25] falls asleep\\n[1518-04-06 00:59] wakes up\\n[1518-02-26 00:49] falls asleep\\n[1518-09-16 00:56] falls asleep\\n[1518-02-08 00:52] falls asleep\\n[1518-04-24 00:04] Guard #2087 begins shift\\n[1518-02-24 00:04] Guard #367 begins shift\\n[1518-04-16 00:40] falls asleep\\n[1518-10-07 00:21] falls asleep\\n[1518-03-02 00:58] wakes up\\n[1518-03-29 00:34] falls asleep\\n[1518-05-31 00:13] wakes up\\n[1518-03-21 00:52] falls asleep\\n[1518-02-21 00:13] falls asleep\\n[1518-06-05 00:03] Guard #2081 begins shift\\n[1518-08-02 00:51] falls asleep\\n[1518-11-08 00:09] falls asleep\\n[1518-01-30 00:51] falls asleep\\n[1518-04-04 00:48] wakes up\\n[1518-11-22 00:58] wakes up\\n[1518-10-05 00:26] falls asleep\\n[1518-05-03 00:40] falls asleep\\n[1518-06-12 00:46] wakes up\\n[1518-05-21 00:35] wakes up\\n[1518-04-12 23:59] Guard #2677 begins shift\\n[1518-09-06 00:23] falls asleep\\n[1518-03-13 00:00] falls asleep\\n[1518-06-04 00:06] falls asleep\\n[1518-04-30 00:41] wakes up\\n[1518-03-30 00:01] Guard #3469 begins shift\\n[1518-02-27 00:25] wakes up\\n[1518-11-05 23:52] Guard #409 begins shift\\n[1518-11-01 00:42] wakes up\\n[1518-05-07 00:55] wakes up\\n[1518-11-11 00:04] Guard #449 begins shift\\n[1518-04-08 00:01] Guard #907 begins shift\\n[1518-08-11 23:58] Guard #409 begins shift\\n[1518-05-27 00:49] falls asleep\\n[1518-09-12 00:42] falls asleep\\n[1518-08-26 23:57] Guard #523 begins shift\\n[1518-03-27 00:39] falls asleep\\n[1518-05-09 23:59] Guard #449 begins shift\\n[1518-09-05 00:54] wakes up\\n[1518-08-18 00:17] falls asleep\\n[1518-04-29 00:21] falls asleep\\n[1518-11-14 00:12] falls asleep\\n[1518-03-01 00:00] falls asleep\\n[1518-03-09 00:19] falls asleep\\n[1518-08-12 00:38] falls asleep\\n[1518-05-06 23:50] Guard #409 begins shift\\n[1518-04-06 23:59] Guard #367 begins shift\\n[1518-04-30 00:07] falls asleep\\n[1518-02-23 00:54] falls asleep\\n[1518-10-22 00:18] falls asleep\\n[1518-05-07 23:50] Guard #2393 begins shift\\n[1518-08-15 00:01] Guard #2393 begins shift\\n[1518-11-09 00:01] Guard #2393 begins shift\\n[1518-04-10 00:58] wakes up\\n[1518-05-30 00:39] falls asleep\\n[1518-03-06 00:06] falls asleep\\n[1518-02-20 23:56] Guard #2677 begins shift\\n[1518-09-06 00:53] falls asleep\\n[1518-05-24 00:30] wakes up\\n[1518-11-20 00:37] wakes up\\n[1518-02-04 00:58] wakes up\\n[1518-07-26 00:00] Guard #349 begins shift\\n[1518-04-03 00:36] falls asleep\\n[1518-03-08 00:18] falls asleep\\n[1518-06-02 00:10] falls asleep\\n[1518-01-30 23:58] Guard #151 begins shift\\n[1518-11-08 00:01] Guard #2593 begins shift\\n[1518-03-12 23:52] Guard #3413 begins shift\\n[1518-01-31 23:59] Guard #449 begins shift\\n[1518-01-28 00:00] Guard #151 begins shift\\n[1518-11-16 23:51] Guard #2393 begins shift\\n[1518-07-16 00:33] falls asleep\\n[1518-06-10 00:01] Guard #1627 begins shift\\n[1518-11-12 00:41] falls asleep\\n[1518-02-07 00:57] falls asleep\\n[1518-03-01 00:45] falls asleep\\n[1518-08-07 00:55] wakes up\\n[1518-07-16 00:38] wakes up\\n[1518-06-21 00:08] falls asleep\\n[1518-03-03 00:39] wakes up\\n[1518-07-16 00:00] Guard #71 begins shift\\n[1518-09-12 00:04] Guard #2081 begins shift\\n[1518-02-13 00:50] wakes up\\n[1518-07-22 00:11] falls asleep\\n[1518-02-20 00:03] falls asleep\\n[1518-10-21 00:34] falls asleep\\n[1518-05-18 23:58] Guard #449 begins shift\\n[1518-04-23 00:57] falls asleep\\n[1518-03-05 00:02] falls asleep\\n[1518-09-09 23:59] Guard #2593 begins shift\\n[1518-02-08 23:58] Guard #2677 begins shift\\n[1518-06-14 00:16] falls asleep\\n[1518-05-28 00:01] Guard #2393 begins shift\\n[1518-11-06 00:05] falls asleep\\n[1518-10-29 00:41] wakes up\\n[1518-07-19 00:39] falls asleep\\n[1518-09-10 00:31] wakes up\\n[1518-09-29 00:37] wakes up\\n[1518-07-15 00:03] falls asleep\\n[1518-09-23 00:04] wakes up\\n[1518-02-27 00:45] wakes up\\n[1518-09-05 00:51] falls asleep\\n[1518-02-08 00:38] falls asleep\\n[1518-10-13 00:47] wakes up\\n[1518-03-23 00:05] falls asleep\\n[1518-06-10 00:57] falls asleep\\n[1518-02-24 00:40] falls asleep\\n[1518-05-16 00:00] Guard #151 begins shift\\n[1518-11-07 00:53] wakes up\\n[1518-08-03 00:58] wakes up\\n[1518-07-19 23:58] Guard #491 begins shift\\n[1518-03-31 23:57] Guard #367 begins shift\\n[1518-05-28 23:57] Guard #2063 begins shift\\n[1518-05-13 23:47] Guard #3539 begins shift\\n[1518-06-26 23:51] Guard #3413 begins shift\\n[1518-05-19 23:52] Guard #1151 begins shift\\n[1518-07-01 00:08] falls asleep\\n[1518-03-22 00:34] wakes up\\n[1518-10-04 00:00] Guard #2593 begins shift\\n[1518-10-31 00:03] Guard #449 begins shift\\n[1518-08-11 00:09] wakes up\\n[1518-08-23 00:57] wakes up\\n[1518-04-07 00:20] falls asleep\\n[1518-04-05 00:36] wakes up\\n[1518-09-15 00:56] falls asleep\\n[1518-10-29 00:40] falls asleep\\n[1518-07-28 00:53] falls asleep\\n[1518-06-17 00:42] falls asleep\\n[1518-11-21 00:30] falls asleep\\n[1518-06-14 00:00] Guard #2593 begins shift\\n[1518-04-10 00:38] wakes up\\n[1518-01-30 00:00] Guard #3539 begins shift\\n[1518-08-10 00:55] wakes up\\n[1518-06-16 00:30] falls asleep\\n[1518-05-15 00:48] falls asleep\\n[1518-07-10 00:33] wakes up\\n[1518-05-16 00:32] falls asleep\\n[1518-05-19 00:44] falls asleep\\n[1518-06-28 00:19] wakes up\\n[1518-07-08 00:28] wakes up\\n[1518-05-17 23:58] Guard #3469 begins shift\\n[1518-06-17 00:53] wakes up\\n[1518-03-24 00:27] falls asleep\\n[1518-03-07 00:11] wakes up\\n[1518-10-09 00:17] falls asleep\\n[1518-05-13 00:38] wakes up\\n[1518-07-28 00:46] wakes up\\n[1518-05-24 00:50] wakes up\\n[1518-02-27 00:00] Guard #2087 begins shift\\n[1518-05-12 00:53] wakes up\\n[1518-03-27 00:58] wakes up\\n[1518-09-23 00:25] falls asleep\\n[1518-11-23 00:52] falls asleep\\n[1518-05-16 00:37] wakes up\\n[1518-05-10 00:31] falls asleep\\n[1518-04-08 00:12] falls asleep\\n[1518-10-27 00:53] wakes up\\n[1518-10-23 23:58] Guard #151 begins shift\\n[1518-03-30 00:17] falls asleep\\n[1518-02-16 00:54] falls asleep\\n[1518-02-21 00:58] wakes up\\n[1518-10-26 00:51] falls asleep\\n[1518-03-13 00:58] wakes up\\n[1518-02-01 00:54] falls asleep\\n[1518-10-17 00:51] falls asleep\\n[1518-11-21 00:37] wakes up\\n[1518-10-19 00:31] falls asleep\\n[1518-03-23 00:42] falls asleep\\n[1518-05-18 00:40] falls asleep\\n[1518-06-21 00:42] falls asleep\\n[1518-04-30 00:45] falls asleep\\n[1518-08-16 00:34] falls asleep\\n[1518-04-27 00:53] falls asleep\\n[1518-04-03 00:22] falls asleep\\n[1518-10-17 00:47] wakes up\\n[1518-09-22 00:46] wakes up\\n[1518-06-19 00:00] falls asleep\\n[1518-07-12 00:36] falls asleep\\n[1518-11-10 00:29] falls asleep\\n[1518-04-02 00:01] falls asleep\\n[1518-05-21 23:57] Guard #3413 begins shift\\n[1518-03-20 00:52] wakes up\\n[1518-02-23 00:40] falls asleep\\n[1518-09-17 00:13] falls asleep\\n[1518-03-15 00:54] wakes up\\n[1518-09-19 00:03] Guard #523 begins shift\\n[1518-11-19 00:41] falls asleep\\n[1518-09-07 00:45] wakes up\\n[1518-07-08 00:05] falls asleep\\n[1518-10-11 00:30] falls asleep\\n[1518-01-28 00:57] falls asleep\\n[1518-03-03 00:01] falls asleep\\n[1518-08-23 00:07] falls asleep\\n[1518-02-07 00:49] falls asleep\\n[1518-07-07 00:57] wakes up\\n[1518-06-17 00:35] wakes up\\n[1518-10-23 00:41] wakes up\\n[1518-10-17 00:03] Guard #1459 begins shift\\n[1518-09-12 00:06] falls asleep\\n[1518-08-11 00:02] falls asleep\\n[1518-02-27 00:20] falls asleep\\n[1518-09-05 00:14] wakes up\\n[1518-02-15 23:56] Guard #907 begins shift\\n[1518-07-22 00:03] Guard #3469 begins shift\\n[1518-11-11 00:43] wakes up\\n[1518-07-18 00:36] wakes up\\n[1518-09-01 00:41] falls asleep\\n[1518-05-09 00:29] falls asleep\\n[1518-03-15 00:19] falls asleep\\n[1518-09-29 23:46] Guard #2593 begins shift\\n[1518-05-28 00:58] wakes up\\n[1518-10-01 00:59] wakes up\\n[1518-05-30 00:01] Guard #2677 begins shift\\n[1518-07-05 23:51] Guard #1459 begins shift\\n[1518-02-10 00:00] Guard #349 begins shift\\n[1518-02-18 00:53] wakes up\\n[1518-07-12 00:39] wakes up\\n[1518-11-13 00:57] wakes up\\n[1518-03-02 00:02] Guard #2677 begins shift\\n[1518-03-03 00:26] falls asleep\\n[1518-02-19 23:54] Guard #3539 begins shift\\n[1518-04-15 00:25] falls asleep\\n[1518-04-06 00:45] falls asleep\\n[1518-06-06 00:51] wakes up\\n[1518-06-13 00:01] Guard #907 begins shift\\n[1518-10-16 00:18] falls asleep\\n[1518-10-01 00:28] wakes up\\n[1518-08-28 00:16] falls asleep\\n[1518-06-26 00:25] wakes up\\n[1518-06-01 00:36] wakes up\\n[1518-09-24 00:52] wakes up\\n[1518-03-14 00:34] falls asleep\\n[1518-05-15 00:04] falls asleep\\n[1518-04-13 00:45] wakes up\\n[1518-05-24 00:18] falls asleep\\n[1518-10-29 00:48] falls asleep\\n[1518-06-09 00:04] Guard #2393 begins shift\\n[1518-03-12 00:48] wakes up\\n[1518-04-22 00:14] falls asleep\\n[1518-03-10 00:49] wakes up\\n[1518-04-26 00:02] falls asleep\\n[1518-08-31 00:23] wakes up\\n[1518-02-26 00:57] wakes up\\n[1518-09-14 00:55] wakes up\\n[1518-07-18 00:44] wakes up\\n[1518-10-25 00:02] Guard #449 begins shift\\n[1518-09-12 23:54] Guard #1151 begins shift\\n[1518-07-17 00:07] falls asleep\\n[1518-03-02 00:17] falls asleep\\n[1518-05-31 00:21] falls asleep\\n[1518-11-12 00:42] wakes up\\n[1518-01-30 00:35] wakes up\\n[1518-06-28 23:54] Guard #2393 begins shift\\n[1518-05-25 00:37] wakes up\\n[1518-07-28 00:14] falls asleep\\n[1518-09-11 00:48] wakes up\\n[1518-04-30 00:08] wakes up\\n[1518-10-29 00:53] wakes up\\n[1518-10-16 00:59] wakes up\\n[1518-08-31 00:57] wakes up\\n[1518-02-08 00:04] Guard #523 begins shift\\n[1518-05-05 23:56] Guard #1459 begins shift\\n[1518-03-18 00:04] falls asleep\\n[1518-05-30 00:55] wakes up\\n[1518-07-10 00:16] falls asleep\\n[1518-11-02 00:58] wakes up\\n[1518-03-18 00:49] wakes up\\n[1518-10-28 00:45] falls asleep\\n[1518-07-10 00:03] Guard #2593 begins shift\\n[1518-03-28 00:59] wakes up\\n[1518-05-23 00:44] falls asleep\\n[1518-08-30 00:27] falls asleep\\n[1518-08-09 00:00] Guard #367 begins shift\\n[1518-10-08 00:20] falls asleep\\n[1518-03-31 00:05] falls asleep\\n[1518-01-30 00:52] wakes up\\n[1518-02-24 23:52] Guard #409 begins shift\\n[1518-03-04 23:49] Guard #2017 begins shift\\n[1518-01-29 00:30] wakes up\\n[1518-11-02 00:37] falls asleep\\n[1518-03-25 00:56] wakes up\\n[1518-04-04 00:02] Guard #2017 begins shift\\n[1518-04-07 00:57] wakes up\\n[1518-11-19 00:42] wakes up\\n[1518-08-06 23:56] Guard #2593 begins shift\\n[1518-06-26 00:00] Guard #523 begins shift\\n[1518-11-08 00:36] wakes up\\n[1518-07-31 00:28] falls asleep\\n[1518-05-04 00:56] wakes up\\n[1518-10-23 00:55] wakes up\\n[1518-03-20 23:56] Guard #3469 begins shift\\n[1518-05-21 00:14] falls asleep\\n[1518-02-06 23:56] Guard #1627 begins shift\\n[1518-09-30 00:02] falls asleep\\n[1518-11-20 00:12] falls asleep\\n[1518-06-11 00:23] wakes up\\n[1518-06-22 00:00] Guard #71 begins shift\\n[1518-02-02 23:59] Guard #1459 begins shift\\n[1518-05-25 00:20] falls asleep\\n[1518-06-18 00:53] falls asleep\\n[1518-06-04 00:45] wakes up\\n[1518-09-28 00:34] falls asleep\\n[1518-07-26 00:19] falls asleep\\n[1518-07-01 00:37] wakes up\\n[1518-06-20 00:29] wakes up\\n[1518-02-14 00:56] wakes up\\n[1518-05-20 00:23] wakes up\\n[1518-02-07 00:43] wakes up\\n[1518-02-11 00:46] wakes up\\n[1518-07-07 23:46] Guard #367 begins shift\\n[1518-04-23 00:00] Guard #3413 begins shift\\n[1518-08-05 00:02] Guard #907 begins shift\\n[1518-07-10 23:59] Guard #2677 begins shift\\n[1518-05-12 00:50] falls asleep\\n[1518-10-28 00:01] Guard #1151 begins shift\\n[1518-03-18 23:57] Guard #1091 begins shift\\n[1518-08-20 00:10] falls asleep\\n[1518-02-12 00:58] wakes up\\n[1518-03-10 23:49] Guard #907 begins shift\\n[1518-07-01 00:01] Guard #367 begins shift\\n[1518-04-12 00:59] wakes up\\n[1518-06-22 00:28] wakes up\\n[1518-08-18 23:56] Guard #2393 begins shift\\n[1518-05-09 00:43] wakes up\\n[1518-08-01 00:29] falls asleep\\n[1518-07-06 00:03] falls asleep\\n[1518-05-11 00:03] Guard #491 begins shift\\n[1518-04-29 23:57] Guard #1627 begins shift\\n[1518-11-06 00:54] wakes up\\n[1518-04-02 00:24] wakes up\\n[1518-04-26 00:41] wakes up\\n[1518-05-07 00:02] falls asleep\\n[1518-09-20 23:59] Guard #2393 begins shift\\n[1518-09-16 00:01] Guard #349 begins shift\\n[1518-08-15 00:35] wakes up\\n[1518-08-21 00:31] falls asleep\\n[1518-02-16 00:55] wakes up\\n[1518-05-28 00:57] falls asleep\\n[1518-07-22 23:59] Guard #907 begins shift\\n[1518-10-22 00:24] wakes up\\n[1518-02-21 00:40] wakes up\\n[1518-09-16 00:39] falls asleep\\n[1518-11-03 00:57] wakes up\\n[1518-07-16 00:46] falls asleep\\n[1518-07-04 00:53] wakes up\\n[1518-08-15 00:27] wakes up\\n[1518-11-02 23:59] Guard #349 begins shift\\n[1518-04-18 00:46] wakes up\\n[1518-02-03 00:57] wakes up\\n[1518-06-05 00:28] wakes up\\n[1518-11-13 23:54] Guard #1627 begins shift\\n[1518-07-08 00:56] wakes up\\n[1518-07-13 00:00] Guard #1459 begins shift\\n[1518-02-06 00:02] Guard #907 begins shift\\n[1518-01-31 00:45] wakes up\\n[1518-05-05 00:48] wakes up\\n[1518-07-06 00:43] wakes up\\n[1518-06-14 23:59] Guard #1627 begins shift\\n[1518-10-31 00:44] falls asleep\\n[1518-02-28 23:51] Guard #367 begins shift\\n[1518-08-09 00:22] wakes up\\n[1518-09-16 00:48] wakes up\\n[1518-11-08 00:57] falls asleep\\n[1518-07-25 00:43] wakes up\\n[1518-03-11 23:58] Guard #1151 begins shift\\n[1518-06-05 23:48] Guard #2677 begins shift\\n[1518-06-30 00:54] wakes up\\n[1518-10-09 00:03] Guard #71 begins shift\\n[1518-06-02 23:59] Guard #907 begins shift\\n[1518-05-28 00:36] wakes up\\n[1518-06-05 00:14] falls asleep\\n[1518-06-17 00:14] falls asleep\\n[1518-03-20 00:19] falls asleep\\n[1518-08-25 00:01] Guard #491 begins shift\\n[1518-05-30 00:46] wakes up\\n[1518-09-23 00:59] wakes up\\n[1518-08-27 00:41] wakes up\\n[1518-06-04 00:53] wakes up\\n[1518-08-31 00:03] Guard #907 begins shift\\n[1518-07-14 00:58] wakes up\\n[1518-07-29 00:03] Guard #2593 begins shift\\n[1518-03-29 00:01] Guard #2677 begins shift\\n[1518-03-07 00:03] Guard #71 begins shift\\n[1518-06-09 00:41] wakes up\\n[1518-10-23 00:02] Guard #367 begins shift\\n[1518-10-20 00:43] wakes up\\n[1518-03-30 00:40] wakes up\\n[1518-06-27 00:38] falls asleep\\n[1518-09-27 00:29] falls asleep\\n[1518-11-05 00:23] falls asleep\\n[1518-03-05 00:59] wakes up\\n[1518-05-03 00:00] Guard #2081 begins shift\\n[1518-03-28 00:39] falls asleep\\n[1518-04-21 23:58] Guard #2017 begins shift\\n[1518-06-30 00:03] Guard #409 begins shift\\n[1518-06-29 00:45] wakes up\\n[1518-06-23 00:05] wakes up\\n[1518-08-17 00:57] wakes up\\n[1518-03-08 00:57] wakes up\\n[1518-03-26 00:20] falls asleep\\n[1518-06-21 00:38] wakes up\\n[1518-02-25 23:57] Guard #523 begins shift\\n[1518-03-01 00:11] wakes up\\n[1518-03-10 00:03] Guard #907 begins shift\\n[1518-08-24 00:02] Guard #409 begins shift\\n[1518-08-27 00:49] falls asleep\\n[1518-05-10 00:57] wakes up\\n[1518-03-22 23:53] Guard #3413 begins shift\\n[1518-05-01 00:48] falls asleep\\n[1518-04-03 00:58] wakes up\\n[1518-06-28 00:22] falls asleep\\n[1518-06-01 00:59] wakes up\\n[1518-03-29 00:37] wakes up\\n[1518-11-23 00:01] falls asleep\\n[1518-09-19 00:51] wakes up\\n[1518-03-27 00:30] wakes up\\n[1518-07-22 00:49] wakes up\\n[1518-09-30 23:58] Guard #1151 begins shift\\n[1518-11-09 23:59] Guard #3539 begins shift\\n[1518-02-11 00:01] Guard #3469 begins shift\\n[1518-08-27 23:57] Guard #1151 begins shift\\n[1518-09-28 00:43] wakes up\\n[1518-03-04 00:59] wakes up\\n[1518-08-16 00:44] wakes up\\n[1518-10-20 00:38] falls asleep\\n[1518-04-13 00:33] falls asleep\\n[1518-04-27 00:57] wakes up\\n[1518-08-26 00:04] Guard #349 begins shift\\n[1518-10-07 00:35] wakes up\\n[1518-07-23 23:50] Guard #2393 begins shift\\n[1518-10-21 00:36] wakes up\\n[1518-04-02 23:58] Guard #3469 begins shift\\n[1518-07-06 00:33] falls asleep\\n[1518-11-20 23:58] Guard #2593 begins shift\\n[1518-09-01 00:42] wakes up\\n[1518-06-08 00:56] wakes up\\n[1518-04-27 00:00] Guard #2677 begins shift\\n[1518-10-11 00:09] falls asleep\\n[1518-02-21 00:43] falls asleep\\n[1518-10-21 23:56] Guard #2087 begins shift\\n[1518-09-15 00:47] wakes up\\n[1518-04-24 00:08] falls asleep\\n[1518-06-20 23:57] Guard #71 begins shift\\n[1518-05-31 00:59] wakes up\\n[1518-02-02 00:10] falls asleep\\n[1518-08-29 00:55] wakes up\\n[1518-03-30 23:50] Guard #907 begins shift\\n[1518-10-26 00:56] wakes up\\n[1518-07-23 00:22] falls asleep\\n[1518-04-02 00:52] wakes up\\n[1518-07-12 00:14] falls asleep\\n[1518-02-18 00:22] wakes up\\n[1518-08-31 00:42] falls asleep\\n[1518-10-11 00:58] wakes up\\n[1518-04-14 00:02] Guard #71 begins shift\\n[1518-02-28 00:28] wakes up\\n[1518-10-17 00:32] wakes up\\n[1518-05-25 00:56] wakes up\\n[1518-10-02 00:58] wakes up\\n[1518-07-27 23:58] Guard #907 begins shift\\n[1518-10-12 00:57] wakes up\\n[1518-06-28 00:35] wakes up\\n[1518-03-22 00:57] wakes up\\n[1518-11-17 00:38] wakes up\\n[1518-09-22 00:36] falls asleep\\n[1518-07-30 00:53] falls asleep\\n[1518-08-26 00:29] wakes up\\n[1518-09-11 00:01] Guard #151 begins shift\\n[1518-03-21 23:57] Guard #2393 begins shift\\n[1518-07-14 00:49] falls asleep\\n[1518-10-30 00:22] falls asleep\\n[1518-02-22 00:32] falls asleep\\n[1518-04-28 00:10] wakes up\\n[1518-07-06 23:57] Guard #151 begins shift\\n[1518-06-17 23:56] Guard #409 begins shift\\n[1518-01-30 00:20] falls asleep\\n[1518-07-20 23:46] Guard #151 begins shift\\n[1518-03-26 00:48] wakes up\\n[1518-06-16 00:33] wakes up\\n[1518-08-22 00:42] wakes up\\n[1518-03-22 00:50] wakes up\\n[1518-05-13 00:34] falls asleep\\n[1518-06-13 00:56] wakes up\\n[1518-04-15 23:56] Guard #151 begins shift\\n[1518-03-02 00:46] wakes up\\n[1518-05-17 00:56] wakes up\\n[1518-10-29 23:56] Guard #2593 begins shift\\n[1518-10-28 00:56] wakes up\\n[1518-05-16 00:09] wakes up\\n[1518-02-01 00:59] wakes up\\n[1518-03-22 00:47] falls asleep\\n[1518-04-08 00:49] wakes up\\n[1518-09-05 00:08] falls asleep\\n[1518-07-03 23:50] Guard #409 begins shift\\n[1518-07-06 00:14] wakes up\\n[1518-02-03 00:56] falls asleep\\n[1518-08-04 00:02] Guard #409 begins shift\\n[1518-08-30 00:57] wakes up\\n[1518-10-05 00:52] wakes up\\n[1518-06-07 00:33] wakes up\\n[1518-05-27 00:35] falls asleep\\n[1518-07-27 00:41] wakes up\\n[1518-10-13 00:11] falls asleep\\n[1518-04-04 00:56] falls asleep\\n[1518-07-16 00:54] falls asleep\\n[1518-05-17 00:48] wakes up\\n[1518-07-13 00:41] wakes up\\n[1518-04-30 00:33] falls asleep\\n[1518-08-13 00:54] wakes up\\n[1518-04-04 00:37] falls asleep\\n[1518-09-09 00:03] Guard #2393 begins shift\\n[1518-07-08 00:41] falls asleep\\n[1518-09-07 00:36] falls asleep\\n[1518-04-29 00:00] Guard #2081 begins shift\\n[1518-07-27 00:07] falls asleep\\n[1518-09-10 00:18] falls asleep\\n[1518-04-17 00:00] Guard #151 begins shift\\n[1518-10-11 00:00] Guard #367 begins shift\\n[1518-09-13 00:13] wakes up\\n[1518-06-12 00:52] falls asleep\\n[1518-08-17 00:04] Guard #367 begins shift\\n[1518-08-23 00:00] Guard #2677 begins shift\\n[1518-03-25 00:18] wakes up\\n[1518-07-16 00:56] wakes up\\n[1518-10-14 00:00] Guard #409 begins shift\\n[1518-04-05 00:03] falls asleep\\n[1518-06-04 00:52] falls asleep\\n[1518-03-25 23:57] Guard #2677 begins shift\\n[1518-04-15 00:14] wakes up\\n[1518-09-29 00:07] falls asleep\\n[1518-08-10 00:00] Guard #449 begins shift\\n[1518-06-11 00:56] falls asleep\\n[1518-04-04 00:27] falls asleep\\n[1518-08-02 23:56] Guard #2017 begins shift\\n[1518-05-31 23:59] Guard #2081 begins shift\\n[1518-10-03 00:51] wakes up\\n[1518-11-10 00:38] wakes up\\n[1518-10-14 23:50] Guard #523 begins shift\\n[1518-10-05 23:58] Guard #349 begins shift\\n[1518-07-16 00:49] wakes up\\n[1518-02-07 00:38] falls asleep\\n[1518-09-17 00:03] Guard #151 begins shift\\n[1518-03-31 00:46] wakes up\\n[1518-03-23 23:58] Guard #523 begins shift\\n[1518-09-19 00:49] falls asleep\\n[1518-04-16 00:59] wakes up\\n[1518-02-25 00:03] falls asleep\\n[1518-04-01 00:06] falls asleep\\n[1518-04-28 00:56] wakes up\\n[1518-05-24 23:57] Guard #71 begins shift\\n[1518-04-09 00:54] wakes up\\n[1518-06-15 00:54] wakes up\\n[1518-09-09 00:51] wakes up\\n[1518-11-08 00:58] wakes up\\n[1518-06-12 00:02] falls asleep\\n[1518-03-14 00:15] wakes up\\n[1518-03-13 00:28] falls asleep\\n[1518-09-13 00:00] falls asleep\\n[1518-08-19 00:20] falls asleep\\n[1518-05-08 23:58] Guard #2393 begins shift\\n[1518-02-16 23:57] Guard #491 begins shift\\n[1518-08-01 00:59] wakes up\\n[1518-02-02 00:00] Guard #1459 begins shift\\n[1518-02-05 00:52] wakes up\\n[1518-09-17 00:40] wakes up\\n[1518-10-19 00:38] wakes up\\n[1518-04-11 00:51] wakes up\\n[1518-03-09 00:16] wakes up\\n[1518-08-24 00:46] falls asleep\\n[1518-07-30 00:20] falls asleep\\n[1518-03-17 23:48] Guard #3413 begins shift\\n[1518-10-26 00:30] falls asleep\\n[1518-09-13 00:17] falls asleep\\n[1518-02-15 00:30] falls asleep\\n[1518-07-19 00:26] falls asleep\\n[1518-06-06 00:01] falls asleep\\n[1518-03-05 23:58] Guard #3413 begins shift\\n[1518-11-01 00:09] falls asleep\\n[1518-09-25 00:49] wakes up\\n[1518-02-03 00:21] falls asleep\\n[1518-05-19 00:26] falls asleep\\n[1518-09-15 00:57] wakes up\\n[1518-08-08 00:03] Guard #2017 begins shift\\n[1518-08-27 00:13] falls asleep\\n[1518-07-13 00:28] falls asleep\\n[1518-08-28 00:56] wakes up\\n[1518-02-24 00:46] wakes up\\n[1518-06-03 23:59] Guard #3469 begins shift\\n[1518-03-18 00:10] wakes up\\n[1518-11-04 23:57] Guard #2087 begins shift\\n[1518-09-01 00:59] wakes up\\n[1518-10-10 00:20] falls asleep\\n[1518-02-04 00:12] falls asleep\\n[1518-05-25 00:50] falls asleep\\n[1518-09-24 00:00] Guard #449 begins shift\\n[1518-08-10 00:29] falls asleep\\n[1518-06-04 00:43] falls asleep\\n[1518-06-18 23:49] Guard #1459 begins shift\\n[1518-03-21 00:16] falls asleep\\n[1518-06-12 00:58] wakes up\\n[1518-04-04 23:46] Guard #2017 begins shift\\n[1518-10-19 00:51] falls asleep\\n[1518-05-15 00:27] wakes up\\n[1518-06-07 00:20] falls asleep\\n[1518-08-20 00:00] Guard #1627 begins shift\\n[1518-02-10 00:36] wakes up\\n[1518-04-11 00:39] falls asleep\\n[1518-02-18 00:38] falls asleep\\n[1518-07-26 00:44] wakes up\\n[1518-10-13 00:07] falls asleep\\n[1518-08-11 00:56] wakes up\\n[1518-06-02 00:39] wakes up\\n[1518-04-29 00:54] wakes up\\n[1518-05-18 00:06] falls asleep\\n[1518-11-17 00:04] falls asleep\\n[1518-06-08 00:15] falls asleep\\n[1518-08-29 00:38] falls asleep\\n[1518-05-31 00:04] falls asleep\\n[1518-02-28 00:54] wakes up\\n[1518-10-25 00:15] falls asleep\\n[1518-02-27 00:37] falls asleep\\n[1518-04-28 00:00] falls asleep\\n[1518-10-10 00:59] wakes up\\n[1518-04-15 00:50] wakes up\\n[1518-02-18 23:59] Guard #1091 begins shift\\n[1518-05-02 00:43] wakes up\\n[1518-02-05 00:00] Guard #1627 begins shift\\n[1518-11-22 23:47] Guard #151 begins shift\\n[1518-07-07 00:33] falls asleep\\n[1518-11-23 00:55] wakes up\\n[1518-04-16 00:42] wakes up\\n[1518-11-04 00:02] Guard #2677 begins shift\\n[1518-03-18 00:45] falls asleep\\n[1518-11-14 00:08] wakes up\\n[1518-06-10 00:59] wakes up\\n[1518-09-02 23:51] Guard #907 begins shift\\n[1518-06-14 00:42] wakes up\\n[1518-02-03 23:58] Guard #2593 begins shift\\n[1518-07-18 00:42] falls asleep\\n[1518-02-18 00:33] wakes up\\n[1518-11-15 23:57] Guard #2393 begins shift\\n[1518-05-14 00:30] wakes up\\n[1518-03-23 00:50] wakes up\\n[1518-10-06 00:16] falls asleep\\n[1518-01-28 00:40] falls asleep\\n[1518-05-16 00:12] falls asleep\\n[1518-07-22 00:23] wakes up\\n[1518-08-04 00:46] wakes up\\n[1518-07-05 00:44] wakes up\\n[1518-08-20 00:43] wakes up\\n[1518-09-01 00:00] Guard #2393 begins shift\\n[1518-02-22 00:44] wakes up\\n[1518-05-19 00:33] wakes up\\n[1518-10-11 00:14] wakes up\\n[1518-09-07 00:41] falls asleep\\n[1518-10-30 00:56] wakes up\\n[1518-06-01 00:39] falls asleep\\n[1518-04-09 00:04] Guard #2677 begins shift\\n[1518-03-09 00:05] falls asleep\\n[1518-08-16 00:00] Guard #2081 begins shift\\n[1518-06-04 00:27] wakes up\\n[1518-10-18 00:48] falls asleep\\n[1518-03-12 00:57] falls asleep\\n[1518-08-23 00:29] wakes up\\n[1518-07-13 23:56] Guard #367 begins shift\\n[1518-05-06 00:13] falls asleep\\n[1518-07-31 00:00] Guard #449 begins shift\\n[1518-08-20 00:31] falls asleep\\n[1518-10-27 00:07] falls asleep\\n[1518-03-03 00:13] wakes up\\n[1518-08-03 00:27] falls asleep\\n[1518-01-29 00:08] falls asleep\\n[1518-10-14 00:35] falls asleep\\n[1518-04-27 23:46] Guard #2017 begins shift\\n[1518-10-26 00:44] wakes up\\n[1518-05-18 00:51] wakes up\\n[1518-08-23 00:34] falls asleep\\n[1518-11-22 00:32] wakes up\\n[1518-07-30 00:02] Guard #2087 begins shift\\n[1518-05-02 00:06] falls asleep\\n[1518-03-13 00:08] wakes up\\n[1518-02-28 00:25] falls asleep\\n[1518-07-31 00:46] wakes up\\n[1518-04-16 00:50] falls asleep\\n[1518-09-06 00:55] wakes up\\n[1518-02-12 00:05] falls asleep\\n[1518-08-06 00:56] wakes up\\n[1518-03-24 00:48] wakes up\\n[1518-07-25 00:27] falls asleep\\n[1518-01-30 00:58] wakes up\\n[1518-04-06 00:47] wakes up\\n[1518-09-21 00:48] falls asleep\\n[1518-05-24 00:39] falls asleep\\n[1518-05-01 00:52] wakes up\\n[1518-02-11 23:46] Guard #1459 begins shift\\n[1518-06-17 00:03] Guard #151 begins shift\\n[1518-03-07 23:58] Guard #2593 begins shift\\n[1518-04-02 00:49] falls asleep\\n[1518-03-20 00:00] Guard #2087 begins shift\\n[1518-04-05 23:58] Guard #2087 begins shift\\n[1518-02-14 00:00] Guard #151 begins shift\\n[1518-04-30 00:54] wakes up\\n[1518-05-06 00:57] wakes up\\n[1518-09-23 00:46] falls asleep\\n[1518-11-02 00:02] Guard #71 begins shift\\n[1518-07-14 23:50] Guard #523 begins shift\\n[1518-07-12 00:46] falls asleep\\n[1518-08-09 00:48] falls asleep\\n[1518-11-13 00:28] falls asleep\\n[1518-02-12 23:52] Guard #523 begins shift\\n[1518-04-14 23:46] Guard #409 begins shift\\n[1518-08-14 00:02] Guard #2593 begins shift\\n[1518-06-09 00:23] falls asleep\\n[1518-09-07 00:37] wakes up\\n[1518-02-09 00:40] wakes up\\n[1518-05-15 00:52] wakes up\\n[1518-09-01 00:37] wakes up\\n[1518-09-25 00:15] falls asleep\\n[1518-04-17 00:35] falls asleep\\n[1518-03-07 00:20] falls asleep\\n[1518-06-25 00:56] wakes up\\n[1518-10-02 00:28] falls asleep\\n[1518-05-16 00:07] falls asleep\\n[1518-05-24 00:00] Guard #367 begins shift\\n[1518-06-29 00:00] falls asleep\\n[1518-07-12 00:00] Guard #3413 begins shift\\n[1518-07-25 00:29] wakes up\\n[1518-02-15 00:02] Guard #907 begins shift\\n[1518-03-22 00:53] falls asleep\\n[1518-04-12 00:57] falls asleep\\n[1518-08-09 00:06] falls asleep\\n[1518-02-05 00:44] falls asleep\\n[1518-07-19 00:00] Guard #2081 begins shift\\n[1518-05-22 00:54] wakes up\\n[1518-06-30 00:48] falls asleep\\n[1518-10-25 00:45] wakes up\\n[1518-03-04 00:33] falls asleep\\n[1518-11-23 00:44] wakes up\\n[1518-03-11 00:00] falls asleep\\n[1518-05-26 00:59] wakes up\\n[1518-09-06 00:29] wakes up\\n[1518-08-22 00:04] Guard #523 begins shift\\n[1518-11-14 00:56] wakes up\\n[1518-02-13 00:03] falls asleep\\n[1518-07-26 00:51] falls asleep\";","export default \"set i 31\\nset a 1\\nmul p 17\\njgz p p\\nmul a 2\\nadd i -1\\njgz i -2\\nadd a -1\\nset i 127\\nset p 680\\nmul p 8505\\nmod p a\\nmul p 129749\\nadd p 12345\\nmod p a\\nset b p\\nmod b 10000\\nsnd b\\nadd i -1\\njgz i -9\\njgz a 3\\nrcv b\\njgz b -1\\nset f 0\\nset i 126\\nrcv a\\nrcv b\\nset p a\\nmul p -1\\nadd p b\\njgz p 4\\nsnd a\\nset a b\\njgz 1 3\\nsnd b\\nset f 1\\nadd i -1\\njgz i -11\\nsnd a\\njgz f -16\\njgz a -19\";","var map = {\n\t\"./2016/Day-1.txt\": \"bbcf\",\n\t\"./2016/Day-2.txt\": \"056b\",\n\t\"./2017/Day-1.txt\": \"0e52\",\n\t\"./2017/Day-10.txt\": \"2914\",\n\t\"./2017/Day-11.txt\": \"fb3b\",\n\t\"./2017/Day-12.txt\": \"488e\",\n\t\"./2017/Day-13.txt\": \"2bc7\",\n\t\"./2017/Day-15.txt\": \"f2db\",\n\t\"./2017/Day-16.txt\": \"7509\",\n\t\"./2017/Day-17.txt\": \"f87c\",\n\t\"./2017/Day-18.txt\": \"97a1\",\n\t\"./2017/Day-19.txt\": \"5ef1\",\n\t\"./2017/Day-2.txt\": \"a25f\",\n\t\"./2017/Day-20.txt\": \"231a\",\n\t\"./2017/Day-21.txt\": \"1848\",\n\t\"./2017/Day-22.txt\": \"cf04\",\n\t\"./2017/Day-23.txt\": \"45d3\",\n\t\"./2017/Day-24.txt\": \"b077\",\n\t\"./2017/Day-25.txt\": \"dce8\",\n\t\"./2017/Day-3.txt\": \"fa93\",\n\t\"./2017/Day-4.txt\": \"9c0e\",\n\t\"./2017/Day-5.txt\": \"0a46\",\n\t\"./2017/Day-6.txt\": \"60a1\",\n\t\"./2017/Day-7.txt\": \"5406\",\n\t\"./2017/Day-8.txt\": \"6838\",\n\t\"./2017/Day-9.txt\": \"52a6\",\n\t\"./2018/Day-1.txt\": \"2470\",\n\t\"./2018/Day-10.txt\": \"ce3d\",\n\t\"./2018/Day-11.txt\": \"06d5\",\n\t\"./2018/Day-12.txt\": \"e9e1f\",\n\t\"./2018/Day-13.txt\": \"2043\",\n\t\"./2018/Day-14.txt\": \"115b\",\n\t\"./2018/Day-15.txt\": \"1076\",\n\t\"./2018/Day-16.txt\": \"5934\",\n\t\"./2018/Day-17.txt\": \"71e9\",\n\t\"./2018/Day-18.txt\": \"69a9\",\n\t\"./2018/Day-19.txt\": \"0485\",\n\t\"./2018/Day-2.txt\": \"b8ca\",\n\t\"./2018/Day-20.txt\": \"b4b9\",\n\t\"./2018/Day-21.txt\": \"13fd\",\n\t\"./2018/Day-22.txt\": \"fe3b\",\n\t\"./2018/Day-23.txt\": \"e99a\",\n\t\"./2018/Day-3.txt\": \"e366\",\n\t\"./2018/Day-4.txt\": \"9729\",\n\t\"./2018/Day-5.txt\": \"9167\",\n\t\"./2018/Day-6.txt\": \"5db3\",\n\t\"./2018/Day-7.txt\": \"ad08\",\n\t\"./2018/Day-8.txt\": \"5430\",\n\t\"./2018/Day-9.txt\": \"f95a\",\n\t\"./2020/Day-1.txt\": \"b70f\",\n\t\"./2020/Day-10.txt\": \"b6f2\",\n\t\"./2020/Day-11.txt\": \"2718\",\n\t\"./2020/Day-12.txt\": \"2e5c\",\n\t\"./2020/Day-13.txt\": \"cad6\",\n\t\"./2020/Day-14.txt\": \"5522\",\n\t\"./2020/Day-15.txt\": \"0b93\",\n\t\"./2020/Day-16.txt\": \"9e57\",\n\t\"./2020/Day-17.txt\": \"a031\",\n\t\"./2020/Day-18.txt\": \"f70d\",\n\t\"./2020/Day-19.txt\": \"ebce\",\n\t\"./2020/Day-2.txt\": \"913e\",\n\t\"./2020/Day-20.txt\": \"af80\",\n\t\"./2020/Day-21.txt\": \"016b\",\n\t\"./2020/Day-22.txt\": \"7a71\",\n\t\"./2020/Day-23.txt\": \"64ab\",\n\t\"./2020/Day-24.txt\": \"f82f\",\n\t\"./2020/Day-25.txt\": \"cf25\",\n\t\"./2020/Day-3.txt\": \"d1d0\",\n\t\"./2020/Day-4.txt\": \"574c\",\n\t\"./2020/Day-5.txt\": \"bdde\",\n\t\"./2020/Day-6.txt\": \"14bc\",\n\t\"./2020/Day-7.txt\": \"40ba\",\n\t\"./2020/Day-8.txt\": \"c8f2\",\n\t\"./2020/Day-9.txt\": \"1396\",\n\t\"./2021/Day-1.txt\": \"c35a\",\n\t\"./2021/Day-2.txt\": \"e1ce\",\n\t\"./2021/Day-3.txt\": \"d6d3\",\n\t\"./2021/Day-4.txt\": \"92ba\",\n\t\"./2021/Day-5.txt\": \"ab32\",\n\t\"./2021/Day-6.txt\": \"712d\",\n\t\"./2021/Day-7.txt\": \"f042\",\n\t\"./2021/Day-8.txt\": \"6ad2\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"9820\";","export default \"kvvfl kvvfl olud wjqsqa olud frc\\nslhm rdfm yxb rsobyt rdfm\\npib wzfr xyoakcu zoapeze rtdxt rikc jyeps wdyo hawr xyoakcu hawr\\nismtq qwoi kzt ktgzoc gnxblp dzfayil ftfx asscba ionxi dzfayil qwoi\\ndzuhys kfekxe nvdhdtj hzusdy xzhehgc dhtvdnj oxwlvef\\ngxg qahl aaipx tkmckn hcsuhy jsudcmy kcefhpn kiasaj tkmckn\\nroan kqnztj edc zpjwb\\nyzc roc qrygby rsvts nyijgwr xnpqz\\njqgj hhgtw tmychia whkm vvxoq tfbzpe ska ldjmvmo\\nnyeeg omn geyen ngyee rcjt rjuxh\\nqpq udci tnp fdfk kffd eyzvmg ufppf wfuodj toamfn tkze jzsb\\nrrcgxyp rbufd tfjmok vpyhej hcnz ftkojm\\njnmomfc jnmomfc bkluz izn ovvm flsch bkluz\\nodisl hzwv hiasrhi hez ihihsra qpbmi ltwjj iknkwxf nbdtq gbo\\ngjtszl gjtszl fruo fruo\\nrdapv gaik cqboix sxnizhh uxmpali jdd usqnz advrp dze\\nflooz flooz qad tcrq yze bnoijff qpqu vup hyagwll\\nlnazok dze foi tqwjsk hpx qcql euzpj mwfrk\\nilb fmviby ivybmf gtx xtg\\nrpauuu timere gyg wcolt ireetm safi\\ncroe szwmq bbhd lciird vhcci pdax\\nhnc ykswt qqqmei goe bri wmyai hnc qpgqc pberqf bzs\\nhsnrb wdvh iezzrq iezzrq rdbmpta iezzrq kemnptg alkjnp wymmz\\nngw don ddvyds nlhkoa aaf gptumum ugtpmmu\\nvmccke qbpag kvf kvf tgrfghb kvf bhpd sglgx\\nobomgk bkcgo yso ttft vbw ckl wjgk\\nfli qvw zhin dfpgfjb udsin nihz ovr tiewo\\ntgmzmph hauzieo jmg tdbtl lvfr qpaayq qapaqy ausioeu jun piygx\\njkp guqrnx asdqmxf vmfvtqb tloqgyo ioix gajowri tmek ilc puhipb\\nuycn zxqm znft ayal znacus kvcyd ekv qqfpnh\\nfqghur xtbtdd ztjrylr bpuikb ziyk\\nrvakn uqbl ozitpdh uqbl dsej xehj\\nlaxp haz jyd xnkrb ijldth woy xapl iqgg alpx gnupa ukptmmh\\ndyiy dyiy ihb qcyxr\\nwbwkd hdwu zvgkn hdwu wjc sakwhn zxujdo npllzp uyr uyr\\nfxczpmn cininu akcxs ggslxr riyxe ojisxe\\nppbch sampq dnct afikor dnct edsqy pnzyzmc afikor\\njnvygtn hijqjxl vsd jnvygtn nqcqv zns odq gkboxrv kolnq wrvd\\nmroq mroq flsbu flsbu\\nfyshor xvpaunj qmktlo xoce wkiyfu ukcl srndc ugwylwm ozcwdw mtqcste kpokr\\ncfh cxjvx cfh cfh uewshh\\nbpspbap bpspbap fquj mxmn bwls iirhvuk dmpkyt exrn mxmn\\ntvyvzk ezszod ntxr xtnr och\\nknfxhy kbnyl knfxhy xhkssx lxru uprh nkxpbx oodolxr tpvyf\\nnblmysu iwoffs upgof tyagwf aan vovji ajk ywzq oyfi sfulz\\naushzkm lcaeki mkuzsah ynxvte rsntd refk pcm\\nmgguob gobmug dzenpty gmogbu\\nyvq eepof rgnree nerger fpb stfrln ernger\\nhrgkbl mzwvswk rsrsbk ieru holco pajvvn ztgsr qkyp fyeg owpcmoj\\nfowda gmsqdca yugj mcrroxv mqcbojd fjnqfji qdfsc jqs\\nqnc rvjfz vvxk sjd xrma ucdjvq sbw zydyt dfzww\\nocajazv cozaajv tqunkla udwf ecnnmbz lsakqg bki njnda zsdu ccfqw rxpc\\nqqm qdfya qxyx qmq qfday uqnfttt\\nrnbirb iapor qet iapor hxkhz dfvzig pedl ybyb\\nmkgamxg xkniv meb hbzmxjn dhbj zhbxjmn hdjb\\nilteux pyutyfx mau lrr bacak\\nsjjonmn dbbbgs crxyuu jztstgd ezb uiabyaa\\ntra fle ufzlvf nnaw kec hiwnnlj tei wld iyt syk hjdczb\\nqmd jtlud dgh dbanock fzp dsjgqru wwvo jwvxwgv xlemfij jcacd\\nrpkx oxesil snazcgx fly miiyc ikmtmp oefyyn egbw\\nypfpeu wldnyd acchppb yqwcaw wldnyd turbz megci nbgxq xkc ypfpeu\\niqqv iqqv neui iqqv\\nypsxm icqyup zyetrwq nbisrv\\nviommi toszx dpueq eyy cunjou ffcjc jaeez djefra pxvkj liudlig yye\\nfhnacbg jghchh ghjhhc iue hwqmo\\nvbjw lpn cizba ltnsfpz tzoweml irewlc uzckhpd mszal obd\\nyeos utxkft hflxkfe fxczge qpgigkc ksgr vuumql vhlvv\\nxzmkv xzmkv krecdi klpem jsbu nwcmik emfzxf cjmpgnj\\nvtkjo pmiv zou gxo qdiyxsf hwyinjk jhkgf rjq\\ndyuoc ywiyvch irfgl ywiyvch fxb fxb\\ntuz onhr syu rqya abkaf bcfx mbknex juwoor zmksl\\noheg spjorx ksdy vwtq fxz phvtazk tcze lrxg\\nhew lbup botaj ltr jpd\\ndxgc tzinkej gnz hxvvub adsqmc dxgc asgpp rqbdcra goy pmamdua bhiacva\\nxqv ygb kihxqz vyv pjcny vmyvsdv cgsi nfyx\\ntqga ssshrw ndq qlbvwh huyd pxbgj qbxk dkkbf jxy chsobw pph\\nhxl iwph iwph xnr otifm ljhre\\nzlgvpd kapxpoc dve rklk ogh hgnp rbrmc zzkz hhmcx aklmo\\nsar gfor nkf hek nkf aql shc aql\\ndtcrw kfjzcjx qyhi bldson whwdayo mqtgt xhqzp ttqmg\\nomspdml isze jdl nvwo qrkm wztfg ssfgyh dryj jhp unsmty\\njxt cszylng ifht ixtuna azoi xutqlv jtx tjx\\nusgm azuayp fgkby ezpyq jqwl ezofj\\ntnhvil nrvg moyrpqs sldx qymoff megflxh pyhqwms xmdw\\nzomy zcquwnv lzx bvcna yods mjp dgsez\\nblklyf xokd gpit tiysj yrwfhm tofx\\ndtig vhdp omuj vhpd\\nfogwxim qvdwig emdiv jvhl euwbzkg xvxb hwmqo ujdmlp epmykj\\nsjxll sjxll pedvgb sjxll\\ndrvay gtzhgtx yrt okz nqf\\nhaxfazn pvkovwb pgu tgshw mxcjf pbe nwoymzc mxcjf pbe hydwy jradcr\\nprjsloa ahylvj okbsj qbdcdjt pmfo pagyoeg vkmhjzt khzmjvt opfm xfrji gyjqyel\\nlzypt jdbtrad ogr jdbtrad heink\\nrcoucuq gdxewa rcoucuq whlw zhhm rcoucuq azaqohe mzyli rdvaf\\nyuag ebcf yuag nsotg qqzuxr jfmao vyucw wmoye\\nqwvk xemm hgqrr wyxkpp tojndm xlvzypw jus bgnu bgnu nklfwhs\\ndaqi knenmku ccm xkiuy vkexsbc kvvdagx umopitw yaocnx yoakqql mllmsp\\nmrxgl gywit mfopia ncnsvw vdxek axuiot rsejua nei prndudz mnu\\negqn gaa qgen urs mix zbn rhn\\newharq aihy udkdaob kgrdd kgrdd kugbjtj fcef llqb pduxaq wcexmm\\ndwtiw nelq hppad algxgf gcc upou akm efnb mxmhrud\\nyxqaa ups okbhgt iet qns tqn rnjqxgp\\nnpmhdm cgds ldexvr typi jyivoqk zkgq vfyxu xgfo\\ndkwnmr umm dkwnmr okpjw wqx jpztebl eqsib dkwnmr\\ndxbild wpbup evscivq dxbild dxbild geqp ojfbpl jshvqej\\ncxdntxs csfocjd pyy tuhws teb boyloz xfw scxh pxhonky\\nlteucke xrgwy hszgzu hnyrcvb\\npfgsgwg dxzh fworek qbstod\\nusemcrf psczxu gcjtr brls\\nhjol efxczux bqdn gvrnpey yyoqse gbam ndzyj lbwb bhzn unsezg\\nbapw xifz blupk qqdk bofvqpp wnbuwyt rnwocu lzwgtt zucag pov\\nxkre lqvd juf lqvd xio xyg xyg\\ntzdao ztheib aymcf aorg iyawrch hetcxa iyawrch czdymc ccv\\nucgl azlppu jvxqlj pest\\ndvwlw fuuy mnhmm okrp ualnqlm uyuznba fzyejk yaq crl ctprp\\nodfq knox mkbcku pxucmuf lpjpol phl\\nixongh hfs ruorbd auy qyssl kykwcix aytsm rlj aytsm duq segpqhk\\nizufsk wedpzh podjkor eamo vqvev ifnz podjkor xrnuqe\\ntwyfps bmdbgtu qye qkwjms\\nwlav htym vhsnu cocphsj mdsuq vhsnu jflgmrp\\nopajag itwjhfu purnnvk opajag\\nhpkopqp vnj aialpt lzrkzfs nwucez nwuezc\\nmcx hzcjxq zbxr dsx tpknx fva\\nrlvgm xrejsvn ghawxb efyos xty wdzdgh olahbtn rga efyos vhtm nsr\\ncni mbab qtgeiow ulttn rckc kmiaju jvbq emyvpew cdlxldn ulttn brhkprx\\neykpffp rapik qki fhjgdyu tome ehjuy bibjk htxd vexvag\\nwrk dpxt gwkuiov gbkif ike gbkif pcd wpj toywyf qzsa aol\\nyqwzh uujn ujun ujnu\\nsrs ralwxrz yxvvmgp sjhbhk waasid cqtxoxf whcladv jkmaq khjbsh dlavcwh\\nmdvsjh xaj etvxlsy fxgiy rgjesel rlegesj ptriz ebdyhkp kugxm dxv egljser\\nlhehwrs mqevb ygmv gri izop qgb ivm\\nloqqam alojlwg hgen hbyw qlwpun loqqam worgnwk kope\\nphozre todsknr todsknr ibj mvllsar\\nwuripy ruwlfbh wukbkey qhq iishw tvtvci xawvxc vxacwx hsiwi ogq\\nxryq vxwupqa zhqex aquxpwv bnvxrba dtbxki\\nyvvwh zvsm vqskhp vqskhp ggqqlw bpn wbuv\\nkqz tdy goqwge ygn jgd\\nszjjhdk zkpoo nxexz ebicc\\nwzuemcj oyd qupulju iaakzmt vzkvz\\nnppahov umm wpzev wxkgfxd owgekp bhhb bbhh dgviiw kdfgxwx wryb\\nbnc rhes lmbuhhy kwbefga bnc rtxnvz bnc\\nani mggxf mcoixh zdd nai hbhzl mes bdpqr\\nmjn uinoty jjegvze bjgqg yhqsxbt coj obylb hddude xqi rhfbhha alood\\ncbjzj drmihy tfkrhsd nuhav hihzx bvblqpl tdd szmp gjgfv box\\nuumhdxd cmwgyf vepr rwqdkj exwk\\nhwvr ydvw bqefu kghes gvbhp awms iqsqes khgse\\nmrey jqfw fwvzhps komj dayvs fbui zmtd cofn mrey\\ndsjds fdpx irjj usndok qcctsvf fgk wvg txwxcl dxs llp zyilwtq\\nxmkelgk fdukc cye legkxkm wwly\\nenlny eynln cccku brkz dpof mwfoxcd yftmnqh wpebvyc\\nggdn jnysl dsacffw ukj hdae cmzxku\\nuqhm gcachmn kxndfrl htmfis jfnajz fiqiypr kekho kekho ndcw ckrndub dejfna\\nkeazuq ertql rauwl keazuq obmh rauwl ksrotm\\njppp poigqhv repfsje grjk xwkyuh pkx ayzcj hoxzv\\nyhjw pcuyad icie icie icie hwcsuy wcd yihjh jnrxs\\ngaug ivvx ceb xujonak hbtfkeb ttciml cctoz\\ndggyyi dggyyi gqlyumf yasu fwdfa cbb nncn verhq\\nrhgcw gpcyct kiuhbg kiuhbg gpcyct jlmleo nhumm\\nwulxxu jyjek hclcp ogob viex wiqcupq\\ntthu nxgzpid kcnj mss ukapgkp nnc bxjocv qwxs oejwsif aywqtu brahkb\\ndtde bgvb smu vbbg zhlu\\nlyo nwjjmep ldbok wgxhto wwuh qfgjknk wnsl\\nlleyr onha hkwulbm jfg\\nbybjwd uoxvbh mvj iqfpnxs bybjwd zqtszp wvc lbazjr zkzenja cev\\nrbuyyr divtslq yuqmyt ajyveb smxsjb nlk tzqhq ims fewg wpjhr gqh\\nkpewfd beq klilis klisli eeezut\\neuqh hueq ldoo crqurv lvrwh tmaewp oodl\\nbqi lzrf jyhvxfh bqi jyhvxfh nbztd lwpdn cuzi\\nsrjylou phavzjd wost uxkaq byh sluryoj\\nihrdk bcegkpq nygrs qbcq wyjg dvzme pgzhjl vibg kvv\\nijsx iedemek ktlz gtga tbal lbki gtga\\nvmiaxn kefig kefig vngxz\\nvrdmfvi qts vlvhq vlvhq dihmq\\ncfz dyrz zlw qnt vok fwvahg skshbqf hbwozdc ntana jdb uflp\\nrimbj bxemw sfps krtk umta vnk ewmbx nrlje ymrtqrz mxewb kjxunbt\\negnuti ozat eltl ngueti\\nqtcwoxq rmaf qtcwoxq qtcwoxq\\nzws gcoa pydruw qsrk lrkybdf ugr wkrxoj nyvf vitwn\\ntmr hhd dojid zwrj bhsim righ keqlep flzunou\\nlwoquvy acjowxk tqudk oenvioh nyavyl\\nrgh dfhgyke iff cpxhuz hui koe iff hui dmukrei\\nbjiumig lcbmbgh vleipx sfawua rnf\\ngftfh qwb tfdroe xbno qhgofm vqfoe mux\\nljdrr gyfggai iun nju xrucbis mhrcrh fukr obvuqc whlalfe xrucbis nju\\nnxjmjr egqwg arllu xqaahri lzc ivt uhsti\\nsqiepba rcmts kvesv nvp\\ntiksw tiksw rjni gbhvzm ctbq zuqfyvz\\nibsnm kfka aoqigwo sqouih rxz\\njmymq lxio adtmk umyu sxvzquq bporqnb heol fow\\nmepa eckq rqviawv dkqoei ifmngpp jiava rtklseu\\nyuycd jiufjci yuycd uowg yuycd udq izkicbr csxobh\\nnwu tfsjavb rruoxbn oepcov elxf rruoxbn rruoxbn azglwth jcjm ksqiqpv\\ndthfwip zqnwa zqnwa zqnwa\\ngso wruece ufl crgnlxv vllsm dpyfm wpa ctxko\\nwvpze seodz lpq lpq pmtp wsxs ffppx\\nyfxquj phvjn rtwieq rtwieq kgxztyu vbjvkc prqqd lyzmdo ojbrt ojbrt qiqjz\\nesaezr rpggiy jey kbzrhu uthus osr xxaiijd qfxlf auhzbx gkigoqw\\nyfhcj uvgck cds gjhhrg cmempgj yfhcj cjb\\nyxi voxvtuw unwg jqqm\\nigvjr ljz rus sru gbjtjt qfeg ztu zjl\\nleof ocxns hbkoysh hbkoysh leof\\nhab lyxmf yhh qeks fwhfxki xmbcak okqjii nfgzyg bhtfgdj lpmjn\\nmgognh tad herere lvwnzx ixwqs zphmuuc etdjz kczsf\\nmtej rlolsnn zbl uykek dpkan gmz etxtgj\\nmihuieo emjgbp jgks mihuieo iexrfw mjdnr bvp mcuzea xkbusvi\\njvqpj bwt jvqpj bwt gxr\\nqpnd fpt tpor bibbpcg hmvguez wqc afl ckviua gpi\\ndntmcg jglm sxtnu sxtnu sxtnu\\nfzkbptw cbfwo ozvwov wbv gcdd izqo ovwzov lolewo xikqpw\\nnkxyxzd kpn datf fki werq mwidqx oiibor zizcjph\\nxvgyxym zor ijoy lvwsf fjuara idvvq rreit mqyyy ctio tzwqqhj rnpee\\nmaqkfpk maqkfpk xukg sfdmnlg xjopvr xjopvr irf\\nliujcd vnlkouy dxkwc gto vhjvtw\\nswhqhj cas aupsd swhqhj cas bvbooii jquck dtdm\\nigh iqicicf ghi pcxt srcrjx gmf gyscphv\\ndrplj drplj wopgpnk wytag wopgpnk\\nzexe ilcqoh qiefb txkuv lirfzv\\novvpn ovvpn uqeurqx uwzn hgmucj ovvpn sjxulms\\nrox silka irhsvym kutus otasof tdneav pcagds\\nmkja omu tyshbfq onp trxs lxa tftbv bnpl djhnc zdqfs muo\\ntjj rmmqas cbbkxs qio pikk ykyew gxlxt nhsyl ykyew\\nfrcprg njrz oaxcmhc qben pedm ecvtga nzxwpb ior gaklot dpem\\nzyt kncau spoe qlchg sqys wkpbng yflju qlchg vkve bzadbpa\\nqtq pkaicl qtq mfkfqvr dnleiq brrjxsx uoyxh pkaicl yvmlug\\nfirwy imtlp ywl qfa dqrbazz ztzb pcsbwhn zesmlag\\nivey ivey mtvc mtvc\\nlhize acwf moa cdeoazd voktshy qmvqq jvmuvk ljfmq tsanygc\\nxreiqkc aawrovl pofcsg xreiqkc xreiqkc\\ncjbzvn ozds iniqu sdoz gqmki bablvll krs vjzcbn\\nizsod htkeqz entxn qtns prpcwu omfnmoy\\nkwfb tctzda aztctd tadtcz gyt wunbcub ydiwdin xxk\\nepnl ijcp giq ltfk zjcabve zfksmz epnl giq xxxbsom\\nulyukpa mdjsbn dydko uhkdt qms aaaj hustlwu\\nzlsbu ohx jcwovf egf zlvpqgx qhejm wrywdmw\\nuhxqrzr mmu kjxcalj unuohiq rri yzngnb ikvlxry mfiym qbksdx\\nkhqciz som yklmm jceb khqciz jspy jceb\\nncwggv njvi nqox krtsn lnm\\nbgtqme xaxcoq qbtgme obqual vorfk baoqul lgrb\\njli tsbb nlxjc pkwzmz dlxrj hmho gzguko ilj iyaasm\\nwlmw grkumg dynwtyo emxhhqr huluk slpqu uhqcmd absmr ufirmwr\\npbs pcammxv dplfr tzvmav nccyy blvyq ffhnz bccutq\\nhgge ghge vxmvz hqxgjdg zab guo gheg\\nylj bucoyoq udndc wpgyrbx ueh udndc gxdsdh hdoz wwgqlg\\ncjdeh gttyqe kdkm ltzd lfeozse quvjq mnwhokm kdv oojxm nxt\\nmfkzus knqxt saxkqww njx zumsfk sbmcyad cpt agvbuv\\ntukn vyco yobvsn bzgnn klrnzy kea thzk pxpwq ryfff nxzm\\nylbm lxlz lybm lzxl\\nwgtxoij zad slgsi cvnxfg iomswwl vmx\\nhkm yinhnkj kmh kwkw kayknck chur styjif yknakck\\nrtfwhkq rtfwhkq zsf zsf\\nsldq zlntr ueegiw kajivqc ozcbm ceft snvugom pdyc elppeed nnqrp prwwf\\nlhk xjonc muc tudag tsafx mmivb dvrjbp qgrew\\nhnzer fbgqp aazta aazta lxaz lmgv aazta\\nvictgxu victgxu mlpd ummrnbx cazjgnw isxcyp efy zfa cyusj\\ngyojxo onzq gyojxo uxufp awi ilhl wefwfxr gcjlt tmliynw uxufp pdcnxah\\nwjwachn xkuhfbp oky oky ybaeqkr rbuix yreoaw wepmye brvon aasb\\nkiidorw vxtxiqx wtqvbrv efdth isel qbom vcssyc vxtxiqx wtqvbrv riafzsw mqzsj\\neurpjd vkhdamt tmfx czeoot hiz ykz lmixzq tfur jhzr\\nipuftpj qbll sqkkdw fwncmiv bri oeeh lehd ioh wag\\nsuima nanngc imrmc krq atxdo woy atxdo akev qlr aezco qlr\\ncfc efwbzck ozkmcxv moczkvx ccf\\nbnekky iakrk sask uwgnjp iyi rynev bdnas ldh kass\\nsicmw vvjbvv cap nsumc xgvrlm wsoo uoqdu psykckm\\nugg mtr wnzhmmh tjxc ehwnji lwhu mdsckk yvmk enubrqo\\ngrb oxmxz ohu ytetedv ssx apzlppg fdkamm sxofc jdt ynmu wyejok\\numoep rbyqm eqfk twqnog cptbbi dragna ngqs ffb cexxnc rbyqm\\nutizi ormkel wvwur bdx ecelqbv xiccama aag glfvmj\\nznb rsuqoa uxo svc\\nobs lbifa cffi catpd\\nqkxwian ajlzjz wewduzp bbyv qmt fsr qgiu epinp ghmf\\nhatg bfgmb aght ghat\\nkuq inp dun cknbun wmwsu drlmmg kyxc bdl\\nbddybth swdbf jhi fva qpobio bjwm wjaztp jywi\\nmgckz vhveu zkemhp zdf xtiqqew mlx wazgd\\numbjq pya lvvxf jeavij rhrxvew bwjqgpr piz\\nxaycpwo vjcuc qksc yuixhni sfbfb dydyaq gdfvb tggg xidphvf bpjdrl goskxym\\nagxfoip gguif wvo agxfoip ntkbaw fbyggy ooft zxih\\nnzvsu ffwq uxvfbl qrql olhmhom qhdltg ymwz krtndtx olhmhom nfsv krtndtx\\nqdp jqk ustz xjripzv mnk grnodk pjwdsj uug zqxjqj\\nmufrcox zunisfs ocvcge acamm xua vor bsde kxr vor kxr orccxx\\nncycbp anvcxay bmm wndmeaw oso knmk mmb wamenwd kmkv ppdd\\nmotdcn xzagzwu vuzt utffrn yuqxzrh uvzt ujttq\\ntauoqy coiy ybesz tauoqy wpmr trquyne ahxbj jzhems dsdy\\naczq ypw pgmzz srfn quatjgf\\ncih ypapk bfxvr euvhkk gugru auhqui\\nvyf pssgfvy dnhvbfl xpacme dnhvbfl mzdv iynq hcqu\\nlbzvbu hhxiq hdfyiiz iyzihfd xhqih uzdqyxr\\niapbdll vdr cprmrkk vdr dfjqse mlry flpqk vdr\\ngrrfkq xcpxd grrfkq dxc bjpr prvwh swoc swoc\\nbopo chvwuhf qhd ieesl xey ieesl fnjcbe\\nkic fyq hsucnu agwyl pzzmd hqksh psw\\nmxf uau iti lcoz lpg zbu ocre wqlocmh mxf nidqj lcoz\\nbypmix ptzxgmf xmtzgpf hrvzzq\\nlbfw zwusma lbfw tuyyy\\nlrf uej unswvh obgsb npbl zajr kenea uej qnyjcu wzufim qpzkgya\\nqcrxj llyu kligt hlm ehwtbx dda lgsvhdt xewfcv uikn\\nnfzjx izqdbq mfbxs imiuc yqxb xlmvix izqdbq eflqfq wku omgtuu izqdbq\\nlasdwg hiy btzt eefd eyoep icn nnmhg otml rek luixac nyzgn\\nvekteds utsuxdx utsuxdx vekteds\\nfeyov qrij zbebwg ijrq seplram wttkwm zewbgb kzuhuh\\ndmkgtv wohgqo ddtqmv zatahx mym hqowog tkmvdg\\nvhha wjrmuyx kqh vyyrj xzchbi ejsdq orlxg vyyrj dlrc\\nyetngqn zdtuqox hkarjei fqpsgh eaqwbg zsssog ghb gddqqzr hbg\\nobldb zsrhz zxp uxphnev mwnbc pfjft fms xwslk vjm fxy\\nnfij dbfykv ttq gyjgac igxuyqi gtiioqx ilhdex dbfykv uyp bdiwya gqf\\npffzruz vogfosh dcs wje\\npohhf fhpoh oon yyz\\nxxuam afwm qxl lnt syyr bwxhhf sozauq shlhfmz kwnn milav ochq\\nwefcqrt gejw cwerqtf fttf gjew\\njfsvnmr osca epwtle pgfif sxom\\nexlfzmq nakp rgdnx rrcvth vhrrct aajjdrt ryyg dsozd jdqlqj pakn iruv\\nrmcvo txszcs xxhyxz hbsozk wshkocf rmcvo rcbnt\\nkitz yjgney yvkymef nauj hmllsgl kyhm kqr pzsu rcf pzsu qpte\\ncdinpx bfur mkj naz ihkheyr nohhoe\\nylris xeqcgup wap bbfih tgfoj\\nina gnlnm zyeqhij cudfuf ipufae bvkdzni aat teqsg cudfuf bjokrbl teqsg\\naedx edax dnfwq qndwf\\nrdngdy jde wvgkhto bdvngf mdup eskuvg ezli opibo mppoc mdup zrasc\\nqcnc iaw grjfsxe gnf gnf\\nzbjm snznt zelswrk gkhlnx dqxqn qqxnd dmro\\nzisecvx ztezof uzbq otnrtj qsjzkwm ewvcp rlir bfghlq tgapdr qxmr\\nipnqj opjf vabyoe wkwnd\\nwyf mfqxnrf apm snarf jqu aaghx pwecbv lvghayg\\nacncv jmmbwlg oiphlm ifuo cvt\\npvmb egansnd zmh gcuzzci rrxpslv ubith\\nuoleptg xbouzn xbmg cfh cpn wpqi xbouzn xtxis sxzpns\\nrilybri kurbpq vfmjpck tjyogho hfyxad svfofx lfbbhxj khaerfs iqr\\nseaebgz wlmtkre qguv qguv wlmtkre\\nsgo edkxya zdqgwtt gxu nibuu rairqoq mzxli dci qsv\\ntsol mdhzqr rmaqnru ggvcq arbwkn hlkcnj ljkcuof\\nmmliphp ocup puoc eijjv\\ngmajqpb ijki ijki kvz\\npmqss unhlpcj dlkll nuhlcjp expe tlurzmv nsy vlumtzr tgseozl\\ngkvaoni hsba hsba viuedv phyoclp fdq phyoclp febld nqfs\\nrxvdtw abn pntv qrqfzz slsvv abn lrxix mnu npot\\nghlfjp woy xwkbmv bkahpkj jve cncvk jvdype fwgvoju yrkwjp gwfvln mvkv\\nkmluh mie bby fwer chsinb ojglqr nqk mie\\nyzmiu igkgca ybnsqja jpfejtp yjddy xsosxfi ingx qwuhb emrkwpx idqjmmm\\nbtrllw mphm dkvo ewdl dchcul yah btrllw kmqi mtvgk wtb\\nhxsgard yuikc lykt tdee adprp gpougod klnzk mzsmlb\\nhdn znblw ifoblur bwzln dbv\\nsmofpbs vjuyiro llk lfzesga tybu tybu\\ngffnpug xaup iqiyz fjkpnkz drrk fwyxw lwzfskz gslwpmv vjxylva tbkyo nib\\nevydmb nhwuiiu fkerq nkgbuyy uclrs ydjgglh xhotwbm riirgzt\\nbsub eavbt uvd dpzwyt rhn khrbptt xszckc djnfxju axofhat powmso nvdffrv\\nxtuykl fjz mbikc xpnx hmey fjz fjz\\nrkls nwdcsyx rkls rkls\\ntygml untequ ybdfumz nqffbq uipc sove hfnqj\\nytecew vven koqn royynd qsn ksl qsn sdw\\nhknlw qwho whoq oqwh\\nlzmmtqu qvhyeo cnofuj utpwkjz gnirz yhhu aodbnd\\nzsr axw kwtzcv tydzo kwtzcv lkxsm\\nrbjtqe nihifd gvdxd bpxzy rxteky vgcgllv vbbua anygiup rqo\\ndpd wblfwp wblfwp wblfwp ygahc tqjbaq\\ngsw gsw pacgj xmrcz zmxhmch xmrcz\\npdq rhe xqmq lgpkhg fyffrot ovnqh wle\\ntbjavke ypzzrj jizx gdxoh icjsat otfh fmygumv\\nsnch nxlgjgp jeyn sxoqfj jtage jtage iuice\\nrtb coefuj grwg grwg rtb krhqnma vfhgbr\\nvhegtl btorwxg szcev kbvkx itsk nlzpbed\\nhiukrf ilzkm yllhh xsgwkdp zyy kjbv\\nrfcg tdorci zcj wzftlv rfcg rfcg\\nlgbc lzizat vsno pau nvv vsno bbr lzizat qhtb gwp\\nsfwnio tcugjk bsfsz ykyfwg ibkap fsrvy mygk kzunawx zyhyh\\nmpavlh qps bylh lttjkz rqabgk vewb bwev tlzkjt gzrbxga ktmso prpkj\\ngpf ims ynh ffrs vpa iemp gofh cgbauje\\nsecys qks mcnfhwh drog kqs pajy zoltkw lfihnb myb ioxptu\\nytq nrta ouk ajqblf yuwwcd zdy blyoxbw dakk nvgi bzrhzaa\\nnkoych sufiia xkdvw crtldee zycl qblab egqhr qblab\\nnllno muxaf vds qjnitmw zkpj wskyhft kmqct xamuzpw qcai cdjtbt kaxv\\nqzdytpe osr fuw osr qzdytpe whperd rydwdcl knoa\\nzkdznhd peh duoygr zamrgl irnvj otpe pltpq jdkecg\\nbyzgw rece iigdug ehif tpgje\\nccnn foqdran gbctca tefdjxh ntcr rjciii xip xlss crl wvvhzqm twyohf\\ndqyii milqqc qjgkojp qjgkojp ryde\\ntdkyj tbrcud tsba vqtmb cjwxnf\\nhqhmq wemvrce nagig pwnw nagig epg nagig vlsi\\ntqgvw luoplw hccti npjm rytdruq cylrsun rytdruq vjsbjl rytdruq ppti\\nitgt tuwc itgt rvp itgt tigns eipl ksmru\\npdw wdhtkn nbdbpn wff zhuuipg rvemv qxr\\nqgkwdq cjilayh ymeks mrpuzai dwgs stfstgz ucvqhb yout oiq\\nvpxik ypfr qytimvu qms oxbmw ppyfx\\nfwwidn gdhd pyuexk snsz iwndfw\\nlfcb sllxjna lfcb hpzahfg mmvgaa svny jhuzd\\nunyg gicmzd fwc spkciy toyq wjupckd vzzx iuqgka ytqycb pxsufj\\ngoj tnrcml eyizngj txa xrkiw zvu igduz\\nwek xrrlkna clyof rrlnxak\\ncjm rmyuku vjom gtf\\nbuk cfae awstd dywgqp hxo wcxvf laihqw xdqfes wdbh qceh uzlwj\\nsudguo dxwplto rlebdh bkamu dxwplto\\ncrwkyxm yuz kjtdhom crwkyxm\\ntrhc sduorxr aizfryh rsudxor gbyc\\npczkyl bptp qnn nxmpwsx udrg hhlb rubtrmx twzodlp xygnht\\njmqct cden yfajtkz fevcw sxonbxz sxonbxz qkzkm hhngr fbv\\nsdsnm mwvicr wypfi cty ndbowr woiz mrauwzd qlno mwvicr\\nvteyo fng lvr lxytn txpj milg\\nwjx ahtmgo cgwcaj kaxae fhlvlqf\\nezj eetqhzu upwda iiefwlk vyvby\\nimalvy yeghqe jwcu mvrod cwju\\nbxnmsa yhfu npsdar tsbri hfuy sirbt oofxmy\\nfkndt elbjtn vepqtxt elvpf fpelv bzkgag qttexpv prblwb\\nrmq iqs yvprnyy iezqrzm wlqsrr\\nyviovq lekxghj oey qwhzj lxknxw qiyovv ksnt jptz\\ntyrg cifxt hugqf tyrg ffuiv jmax qyw fozfosq ffuiv\\nnmg rsl jpzazd qbtlf yxqtsj czwmdfd bamge lbjdof uqy jssc\\ncbx boozjip pwgvzlq rjz kxy kxy hszacok fvsq jhnir cnsba gafz\\nsbcuxb wfur nnnfqjj fdwg huhe sbcuxb\\nicwk qelbxs uevp qped zsnhh wpuok wddxsln ftnzupr ruxol cgxjb jbhh\\nizcp htykj xxmndoq amnspe htykj\\nvverol oixwlny vqd tvfzu henc gnyrwr\\nytxio etytsx choynep zqapo hfjit\\nlkvgr oyzfa taiqr jok djatvy ckif tmdw oyzfa zroy\\njlgpyp kkqysg oqjki hjohoug hbhta muilz zft\\nsumfyu wftcu bwwdcy lezimwa qwvxv zwh mqyv bmfot aii torcol rnt\\ntpdj xrw ccsbnh fhptv fwkxjfm dmqaokd bjci\\nzxi vmf vmf dpyg\\nsfzxysw lcms bkojtv bkojtv\\nopywo qll ipkitr mtwp tudrr svhyp huz bxsdpn xomfy\\ngkod luo qrosbp orbd rpsjzyd rlh gdok tze\\nnusiuq nusiuq zeys ahufexc\\nveno jntg avtmtdn qojxru zegdcql odfcetz pgehau\\nuqun vigjm ykac ozlelj danmji bibugox\\nrpuozh ajwru rbvuevv uhzsq\\niawoe tyb aewio ymf byt inijv ctu fcys micsgzl pbby alt\\ngktyxp ris mqpfm bkqsfl nrg idbbcxg jhcf\\nqibt invvv qibt luitx rnm eby hrfbmwl wnap sgkzvb qlwc hrfbmwl\\njwkv qecsjbw lycgldd wjvk tjcp dycldgl pzrvr zrlcf kji\\nnzsrmiq nmhse ilivrk kqv\\nbesmyzi imkgpt iekbjax abxeijk uvzs wwv\\njdocl uki ltswp tjkljc ymce iuepze qygqxzs tei lkry\\nhhyfy gvzd mqksxlq czn afe mesnag eep frwgekg mqksxlq phpy\\nehg connnza ekt ddgokw\\nmpbsoms uzhzl xevww ztt uzhzl\\nlftybr firc awsud dsxdkk ltf ipjv dtx lcymth\\nvkcpb gxtxq yioeq fexj xxgqt\\nsrvca fslnnvf nfmkpvt egw wemumq jie vznf dzsjw cukf kcvyir\\nyxjkl lyjkx jyxlk kgc xtz\\ntpoe xzov csp leleoqo noyre tdhf cyib sjgtdx raehdw nmcxp\\nqvt uhznqe bpvos vtq ddlebtd tqv\\nxlw utsxs gpia rvlvnts elkxr dddihy tnrslvv ibf wlx bxg\\ncwqnnrt rkkqyf dye yde fzl pthanj\\nboc rqjenpp xjqte jteqx pvoofc pidqe ruoucy gvnro ognrv\\nqhalb gnazwc fhl iuti\\nclnbjfo nnfs nnfs heymvr oarew oarew nxu\\nlwtrotg hiaxwj ymzbly nvhzjhj zlsaheg nvhzjhj ymzbly\\nrrvi tsjp tsjp tsjp killji\\nrpx hiclj cmwq ibhj nfd\\npvwymn iebkd xmpw vuhhkap ksw zigzy mzzyyxy rmuh iwwhea cglfq\\nrlwelgy sffml jin qsdzro xlsty mgqzuu etxjuo emzd jgnoyq tkjuy vfvb\\ntkctdj hhkuc viskmy obw\\nzvjkuj akeky ikj jqd hfhzbwe bkc\\nbtev nrdo hcyiuph stf qharfg vpmel mpfz nvs ytgbbc\\nieepn ndueuw svmdr tcvumw mceyrn mrjwhyl tbdj mgrgvz\\nuxrs ckyi xpmqm czzrkl cjp\\nnlliwd wrqkrkz yjmng nlliwd zirde hcjjn wco ysf mgl\\ndxti lcahe ommare izlwf ramsfb nzgfvo ijvm fwymrdu bndq\\nisxy jpvuzu tdduyhw dixp cfa fkzbteg ytoi kepk ysf yqcpi\\nqmeprfj soqo ncgeor cqsuuj grzy wogxy vyblnbg slvtry vdols kka\\nltykfp gtzl olrp gxend vapee deq\\nemywfbn dbfiut rkt wvwe dbfiut bwffhea yuzcxv gogpicp wvwe\\nvqvmrp ofbk dlfabd jwllzxk obx vqpwjj umvng tqwis fstxy fstxy\\nmiha zgvyux rmraszo xwf\\nkjaagk btm kjaagk wkewjrg kjaagk\\nlbmli aizs omrdr gzktnx asiz ptanzpa xlo ljre ckyb wob\\nsvz dlk rijagg avxmg fkzwhk uro gegm\\ndzplum temdw jqnm tvxcww bmg tftttpp deuw comxey xfimzjx caluczi nqn\\nuwvhxa ztkd nlsdyt vihl julkwwv uzch dwakhs\\nwkhuihh ycrc cxff vzcfhpp uegfd gaok kcnvz lhzogq lwa tyrypvu\\nidp zmrrzp zmrrzp nktp xsnx rjsxn\\neybrnib ivgntl vaxsbpi eybrnib\\nnzvnq xvbfa pbhwwh ylju runvsj imlx vztesn\\nnfdohd nfdohd gtevnky pivjyct ihvd fzcsrq lko fmqk\\nkwpkks ecikxu bcxswlt qvrxm sbcqmh\\nkdjrmj piuh kdjrmj vnaf gyedkg vptxgm xezssxx zsg qjzpo zsg\\noqo sley aqx qmpqb fgmylbj egd zivj kepxizv kuakyn lunbnd\\nhmcf hmcf xlhgc hmcf cdlm buofnx\\nonjcj yluonz kzmk phqo phqo phqo\\nohaafy efl bnkkjww wwjnyoj dxeaig ywnjjwo slk hrbebw ohlyju elf\\nmsohiqz aunk njki bfktdgi htmyrj mgx\\nnumlzrl rmnlulz glb ltt fhbajz gqxpu\\ngko hco oai ryq xwy sdqosft spjkiu cxfhg ycwpglh noy rah\\nbtzpjem brpk vqr atxu rhlh rqv jmg fvyus\\nphmxxgj ejx xje qtk hsb kqt npwj gqt\\nhujyjp nwmsd ant zipuya lrkahww uwqal vzlo qmbo twkjkse ufivi\\nzfbnyz fwvh xrnrw usn zin daq iwjzj\\nyykyg iwypfy hehqnl cjvk cevdrec\\ngui muuto wsta glqmx gfo rdmbv mxwz gffzt eejpw gion\\nlpng nduid iqbpu nduid knrqd\\nxwxn oefpckv gjaua ugaaj gjuaa\\nqxk aeql trqdmqc crzlinj crzlinj trqdmqc rijcne ewyf\\nrfv qmbe fvr bmeq\\nupqyfw lowzq wpen upqyfw gfskbil sljuzh wpen\\nbdcara qyhx rtaez qyq gbyr\\nevzls qxtxq clzd svbgqi zxlzgss vtrre fko eebo qjyl\\nzaapeo kpwhz tygknau nyd pch trp xqe\\nypzcafg rnqmbh qtteg sncu ssojhhm zonfym thir xmgheb wqj gpjg ssojhhm\\nwvcwyn xrf muozyya lasdp xpjgu kpqv zkiihiv ifje cbdlavg xbied hfnaa\\nqqqb rettz rycukl ihpkhh\\ndnxzxqv znb znb fbxj azxtezb xvxa\\npeqkd xlzqkov esgnw ucku hrwpfxd xtd vnig vlmfp ajte qswr kqoj\\ndpwy oavzkk dwyp ehij upqxgii pydw\\namfc hfv xmqa nqvn cal rqmcq oej amqx cla ntxj\\nhqhhe qkbhwli wmhlcq xaczs peywuo\\nvcr xfv xfv kymo qpszwzo xfv\\nnmrbur tswo xbo ljlrzo bmhpgc pev zovkznz lok wbbhtkk\\ntojj lxqgr rhjavrm ndsdup gdbjwaq cqpnl wfaxivl rfry ryfr udspnd\\nbeffod sknlph amb feobdf\\nmldgn jxovw yuawcvz kzgzwht rxqhzev fsdnvu vluuo eycoh cugf qjugo\\ntlnd qcxj ker fdir cgkpo nrqhyq raef uqadf iahy rxx\\nmhvisju lhmdbs tcxied xeidtc ujry cditex gvqpqm\\ncgc jazrp crgnna uvuokl uvuokl uoiwl sknmc sknmc\\nrvbu czwpdit vmlihg spz lfaxxev zslfuto oog dvoksub\";","export default \"You arrive in the year 18. If it weren't for the coat you got in 1018, you would be very cold: the North Pole base hasn't even been constructed.\\n\\nRather, it hasn't been constructed **yet**. The Elves are making a little progress, but there's not a lot of liquid water in this climate, so they're getting very dehydrated. Maybe there's more underground?\\n\\nYou scan a two-dimensional vertical slice of the ground nearby and discover that it is mostly **sand** with veins of **clay**. The scan only provides data with a granularity of **square meters**, but it should be good enough to determine how much water is trapped there. In the scan, x represents the distance to the right, and y represents the distance down. There is also a **spring of water** near the surface at `x=500, y=0`. The scan identifies **which square meters are clay** (your puzzle input).\\n\\nFor example, suppose your scan shows the following veins of clay:\\n\\n```\\nx=495, y=2..7\\ny=7, x=495..501\\nx=501, y=3..7\\nx=498, y=2..4\\nx=506, y=1..2\\nx=498, y=10..13\\nx=504, y=10..13\\ny=13, x=498..504\\n```\\n\\nRendering clay as `#`, sand as `.`, and the water spring as `+`, and with `x` increasing to the right and `y` increasing downward, this becomes:\\n\\n```\\n   44444455555555\\n   99999900000000\\n   45678901234567\\n 0 ......+.......\\n 1 ............#.\\n 2 .#..#.......#.\\n 3 .#..#..#......\\n 4 .#..#..#......\\n 5 .#.....#......\\n 6 .#.....#......\\n 7 .#######......\\n 8 ..............\\n 9 ..............\\n10 ....#.....#...\\n11 ....#.....#...\\n12 ....#.....#...\\n13 ....#######...\\n```\\n\\nThe spring of water will produce water **forever**. Water can move through sand, but is blocked by clay. Water **always moves down** when possible, and spreads to the left and right otherwise, filling space that has clay on both sides and falling out otherwise.\\n\\nFor example, if five squares of water are created, they will flow downward until they reach the clay and settle there. Water that has come to rest is shown here as `~`, while sand through which water has passed (but which is now dry again) is shown as `|`:\\n\\n```\\n......+.......\\n......|.....#.\\n.#..#.|.....#.\\n.#..#.|#......\\n.#..#.|#......\\n.#....|#......\\n.#~~~~~#......\\n.#######......\\n..............\\n..............\\n....#.....#...\\n....#.....#...\\n....#.....#...\\n....#######...\\n```\\n\\nTwo squares of water can't occupy the same location. If another five squares of water are created, they will settle on the first five, filling the clay reservoir a little more:\\n\\n```\\n......+.......\\n......|.....#.\\n.#..#.|.....#.\\n.#..#.|#......\\n.#..#.|#......\\n.#~~~~~#......\\n.#~~~~~#......\\n.#######......\\n..............\\n..............\\n....#.....#...\\n....#.....#...\\n....#.....#...\\n....#######...\\n```\\n\\nWater pressure does not apply in this scenario. If another four squares of water are created, they will stay on the right side of the barrier, and no water will reach the left side:\\n\\n```\\n......+.......\\n......|.....#.\\n.#..#.|.....#.\\n.#..#~~#......\\n.#..#~~#......\\n.#~~~~~#......\\n.#~~~~~#......\\n.#######......\\n..............\\n..............\\n....#.....#...\\n....#.....#...\\n....#.....#...\\n....#######...\\n```\\n\\nAt this point, the top reservoir overflows. While water can reach the tiles above the surface of the water, it cannot settle there, and so the next five squares of water settle like this:\\n\\n```\\n......+.......\\n......|.....#.\\n.#..#||||...#.\\n.#..#~~#|.....\\n.#..#~~#|.....\\n.#~~~~~#|.....\\n.#~~~~~#|.....\\n.#######|.....\\n........|.....\\n........|.....\\n....#...|.#...\\n....#...|.#...\\n....#~~~~~#...\\n....#######...\\n```\\n\\nNote especially the leftmost `|`: the new squares of water can reach this tile, but cannot stop there. Instead, eventually, they all fall to the right and settle in the reservoir below.\\n\\nAfter 10 more squares of water, the bottom reservoir is also full:\\n\\n```\\n......+.......\\n......|.....#.\\n.#..#||||...#.\\n.#..#~~#|.....\\n.#..#~~#|.....\\n.#~~~~~#|.....\\n.#~~~~~#|.....\\n.#######|.....\\n........|.....\\n........|.....\\n....#~~~~~#...\\n....#~~~~~#...\\n....#~~~~~#...\\n....#######...\\n```\\n\\nFinally, while there is nowhere left for the water to settle, it can reach a few more tiles before overflowing beyond the bottom of the scanned data:\\n\\n```\\n......+.......    (line not counted: above minimum y value)\\n......|.....#.\\n.#..#||||...#.\\n.#..#~~#|.....\\n.#..#~~#|.....\\n.#~~~~~#|.....\\n.#~~~~~#|.....\\n.#######|.....\\n........|.....\\n...|||||||||..\\n...|#~~~~~#|..\\n...|#~~~~~#|..\\n...|#~~~~~#|..\\n...|#######|..\\n...|.......|..    (line not counted: below maximum y value)\\n...|.......|..    (line not counted: below maximum y value)\\n...|.......|..    (line not counted: below maximum y value)\\n```\\n\\nHow many tiles can be reached by the water? To **prevent counting forever**, ignore tiles with a y coordinate smaller than the smallest y coordinate in your scan data or larger than the largest one. Any `x` coordinate is valid. In this example, the lowest `y` coordinate given is `1`, and the highest is `13`, causing the water spring (in row `0`) and the water falling off the bottom of the render (in rows `14` through infinity) to be ignored.\\n\\nSo, in the example above, counting both water at rest (`~`) and other sand tiles the water can hypothetically reach (`|`), the total number of tiles the water can reach is **`57`**.\\n\\n**How many tiles can the water reach** within the range of `y` values in your scan?\\n\\n[comment]: <> (PART 2)\\n\\nAfter a very long time, the water spring will run dry. How much water will be retained?\\n\\nIn the example above, water that won't eventually drain out is shown as `~`, a total of **`29`** tiles.\\n\\n**How many water tiles are left** after the water spring stops producing water and all remaining water not at rest has drained?\";","export default \"departure location: 47-874 or 885-960\\ndeparture station: 25-616 or 622-964\\ndeparture platform: 42-807 or 825-966\\ndeparture track: 36-560 or 583-965\\ndeparture date: 37-264 or 289-968\\ndeparture time: 27-325 or 346-954\\narrival location: 37-384 or 391-950\\narrival station: 35-233 or 244-963\\narrival platform: 26-652 or 675-949\\narrival track: 41-689 or 710-954\\nclass: 27-75 or 81-952\\nduration: 45-784 or 807-967\\nprice: 40-350 or 374-970\\nroute: 30-892 or 904-968\\nrow: 47-144 or 151-957\\nseat: 28-750 or 773-973\\ntrain: 30-456 or 475-950\\ntype: 34-642 or 648-968\\nwagon: 42-486 or 498-970\\nzone: 37-152 or 167-973\\n\\nyour ticket:\\n83,137,101,73,67,61,103,131,151,127,113,107,109,89,71,139,167,97,59,53\\n\\nnearby tickets:\\n191,477,199,428,5,724,512,212,509,613,193,861,293,595,844,247,136,302,376,252\\n598,628,446,312,180,250,405,54,110,780,829,63,840,404,784,307,254,102,708,637\\n890,168,741,685,143,859,773,914,884,324,924,192,248,906,393,531,414,632,226,862\\n295,174,778,927,523,590,515,62,646,514,483,776,92,185,169,525,60,440,885,104\\n480,849,545,484,525,874,170,551,888,201,596,513,274,743,602,598,616,454,141,452\\n583,179,260,138,624,88,131,480,737,433,194,604,172,393,243,261,128,125,227,873\\n395,204,538,783,540,151,209,203,454,939,975,540,932,246,119,910,120,443,306,552\\n62,62,429,173,453,174,134,169,442,799,109,125,212,866,840,429,833,231,912,292\\n159,527,69,545,677,126,555,324,501,405,297,86,678,395,870,323,186,629,639,866\\n89,744,515,932,406,921,618,536,126,349,61,264,593,445,302,411,406,106,479,93\\n406,395,413,859,584,125,129,100,940,94,451,377,251,992,227,187,523,744,152,217\\n774,87,784,58,417,211,171,547,727,455,516,597,212,224,427,193,526,941,81,76\\n99,294,723,613,71,628,118,56,81,922,72,680,298,616,230,548,259,710,147,247\\n633,676,827,784,400,682,303,504,748,231,843,392,158,126,735,744,321,553,833,176\\n92,384,874,944,290,775,915,479,244,68,403,745,544,258,537,932,776,346,646,913\\n95,111,687,589,195,120,681,193,777,113,261,111,60,530,143,185,61,229,773,815\\n418,914,123,857,289,773,827,475,407,206,504,409,742,386,198,636,632,825,349,863\\n870,129,608,731,534,116,992,425,731,712,583,633,921,69,906,782,58,685,181,685\\n618,250,406,539,679,904,589,197,918,167,259,207,782,316,143,73,52,912,548,71\\n541,71,407,510,71,928,297,509,585,260,324,913,834,174,346,935,603,173,373,523\\n304,912,348,212,683,262,69,303,269,711,727,938,102,738,59,401,928,204,477,739\\n420,207,89,408,784,349,316,885,681,606,55,536,53,526,311,712,915,307,129,11\\n857,101,211,225,975,612,826,377,784,924,510,681,481,916,419,257,484,180,244,885\\n107,537,428,249,406,609,318,622,60,131,291,641,686,174,213,678,738,128,618,117\\n412,304,103,687,316,427,946,734,317,685,74,558,295,172,749,285,58,555,132,449\\n251,614,441,193,64,534,427,308,610,598,103,200,929,215,301,347,738,982,607,589\\n389,436,211,409,537,934,137,177,521,399,869,125,630,776,400,836,186,422,121,724\\n869,248,179,839,378,204,171,174,600,516,614,929,636,80,450,739,256,601,934,683\\n316,86,244,244,838,477,847,502,434,733,143,440,429,712,257,624,676,192,821,375\\n211,387,775,448,61,511,749,712,142,517,863,919,942,526,381,314,108,89,401,724\\n431,264,219,480,890,592,646,350,214,885,347,144,779,180,449,222,780,256,642,558\\n230,540,830,52,194,114,742,908,547,129,932,646,835,438,743,625,865,781,927,888\\n920,226,0,325,136,746,167,453,169,298,737,596,627,776,748,223,887,377,886,391\\n401,557,247,932,512,603,265,510,408,200,651,718,232,780,414,65,105,66,409,171\\n904,320,525,103,594,109,107,593,189,288,480,518,75,748,54,413,114,347,224,829\\n297,426,92,251,541,382,865,829,209,446,452,552,252,366,776,722,720,924,436,747\\n129,197,734,712,866,134,723,180,856,58,886,830,720,868,931,103,556,531,165,547\\n292,737,719,61,61,433,919,832,446,184,314,499,614,846,929,67,715,534,394,147\\n839,945,632,851,145,714,309,905,725,855,246,90,542,383,729,248,447,433,218,939\\n734,949,721,249,324,518,784,437,102,417,55,606,556,728,847,737,560,728,111,385\\n530,114,539,172,595,172,844,384,449,949,676,685,112,555,204,11,651,167,136,143\\n934,777,103,613,426,60,554,321,730,405,786,398,517,858,224,50,775,66,247,652\\n584,840,19,842,131,945,289,551,594,177,588,374,350,926,554,216,718,920,320,597\\n627,510,596,595,301,925,318,835,860,480,451,540,371,97,476,414,258,475,293,502\\n310,435,715,195,210,429,63,296,678,644,143,314,247,233,611,550,505,726,87,507\\n456,541,831,417,486,225,233,105,431,387,846,538,309,207,316,450,196,598,889,410\\n716,183,603,746,878,249,189,222,688,441,847,140,716,678,559,778,891,348,173,407\\n69,910,127,292,521,83,718,594,928,939,870,606,138,61,291,235,184,925,264,868\\n167,478,912,442,736,527,92,542,264,196,652,787,382,614,891,926,54,632,625,438\\n179,499,636,684,936,774,614,524,711,175,85,536,681,639,832,398,383,873,580,583\\n86,433,57,915,407,738,906,186,409,377,482,323,176,11,391,848,779,307,292,683\\n946,227,829,677,339,258,114,245,244,641,478,262,930,504,261,134,529,712,440,938\\n858,723,862,866,436,210,481,826,825,346,614,144,545,310,415,946,604,384,528,568\\n257,861,589,305,611,88,131,684,949,807,317,314,107,882,724,229,88,934,295,230\\n382,559,845,856,638,186,303,713,520,736,126,78,587,318,151,206,936,596,632,405\\n53,378,219,833,306,856,857,833,846,632,651,734,22,550,731,835,311,71,623,685\\n214,304,682,747,186,206,231,316,482,515,406,559,545,595,60,774,6,642,739,294\\n292,890,173,349,591,56,905,416,416,881,84,583,409,217,887,553,252,522,256,591\\n93,397,253,185,252,842,88,916,51,628,932,151,941,162,206,376,857,834,736,304\\n54,246,730,908,560,323,383,526,549,482,870,844,688,338,66,316,486,586,499,531\\n828,122,96,138,136,749,329,605,453,507,535,520,921,588,636,90,121,891,846,889\\n530,143,300,143,63,687,833,711,117,132,500,997,384,303,914,612,936,443,229,230\\n304,126,888,678,390,501,215,89,636,739,220,178,87,232,107,716,317,891,396,943\\n909,883,515,350,221,688,179,604,480,226,135,139,110,862,677,430,408,85,139,63\\n183,538,433,907,229,940,519,98,858,311,479,414,783,469,717,833,196,207,838,559\\n502,856,826,888,515,91,106,200,890,69,290,722,884,784,595,638,888,229,444,449\\n433,854,437,710,105,530,635,748,550,730,23,943,260,549,549,172,95,841,128,595\\n685,606,861,305,105,710,169,120,935,712,50,622,532,54,102,590,484,4,445,224\\n117,505,324,737,212,931,500,138,136,261,400,418,543,241,84,675,686,868,65,905\\n317,143,940,583,711,436,829,248,89,514,445,993,514,445,715,886,556,414,558,301\\n318,739,513,442,511,483,210,224,172,619,939,906,382,778,930,132,436,543,308,298\\n600,906,82,313,505,451,507,500,401,364,777,777,182,450,860,583,719,110,230,919\\n204,109,422,425,633,944,83,544,887,140,647,439,247,448,176,554,521,587,606,609\\n97,868,223,632,551,444,247,779,321,905,119,292,619,597,931,854,558,613,827,829\\n234,217,106,613,508,152,143,486,627,830,448,112,677,99,81,323,607,500,112,826\\n600,591,138,628,818,82,504,315,191,191,779,910,402,206,626,746,775,724,398,719\\n907,917,504,125,829,382,297,633,799,99,102,455,735,710,425,200,933,97,734,612\\n652,719,67,292,651,144,567,296,446,200,906,432,930,916,199,179,262,151,126,419\\n253,730,542,435,928,142,174,933,608,196,196,251,799,749,142,416,904,776,310,515\\n548,298,919,21,906,253,846,838,839,735,62,455,109,622,291,586,777,681,121,718\\n108,90,182,863,831,434,542,346,725,449,98,649,383,828,943,125,202,826,248,372\\n731,941,611,88,223,603,442,917,506,718,374,192,651,610,251,115,445,781,896,67\\n526,726,454,159,110,202,94,480,888,223,623,295,95,605,432,322,455,680,384,319\\n636,254,384,194,422,298,237,58,173,130,402,675,246,727,509,213,833,400,456,505\\n231,529,230,318,256,61,872,716,212,736,682,485,647,132,51,423,711,726,56,446\\n103,848,305,446,746,212,387,75,719,422,604,842,305,479,415,587,727,310,926,612\\n96,317,587,299,131,533,524,548,485,885,611,861,302,756,178,442,847,299,142,886\\n221,168,936,873,946,858,778,624,179,937,441,226,318,444,294,98,852,303,8,632\\n253,890,106,725,374,226,197,375,222,142,863,908,306,645,452,547,934,249,634,518\\n778,548,255,81,254,167,403,932,112,74,191,947,341,530,251,120,216,545,722,948\\n834,204,535,292,836,627,746,91,418,554,379,219,253,231,680,74,689,388,192,51\\n514,832,251,309,645,405,865,920,869,402,255,206,535,478,67,201,843,611,115,542\\n539,231,684,506,988,650,104,480,942,232,453,557,914,93,587,587,909,615,527,632\\n946,541,842,437,577,923,397,232,259,179,832,585,254,309,552,885,613,211,740,175\\n936,303,250,69,627,346,475,454,827,744,544,376,387,782,626,828,914,737,511,922\\n182,873,689,484,319,130,222,247,766,593,121,97,173,424,839,777,184,724,533,552\\n55,650,798,68,536,400,180,479,740,404,834,500,419,775,374,116,107,552,874,601\\n853,498,196,622,866,744,74,217,892,607,946,90,915,121,485,374,939,452,905,647\\n51,136,377,211,87,58,456,831,435,94,294,140,714,523,606,915,733,238,107,144\\n528,112,107,528,541,92,678,478,931,741,712,552,582,834,944,609,609,863,734,119\\n840,240,612,524,249,410,314,847,724,425,132,91,507,311,408,522,174,133,535,57\\n376,63,350,167,555,517,128,942,173,212,303,484,745,675,918,852,19,720,249,400\\n872,455,97,940,348,714,531,946,79,603,638,173,188,180,862,230,593,191,213,930\\n324,685,916,629,923,498,50,449,601,595,183,838,480,845,369,523,138,601,220,207\\n225,316,102,943,80,209,483,112,103,718,70,484,555,888,850,185,780,376,946,101\\n79,947,200,316,844,634,302,382,407,314,501,710,57,859,852,257,375,65,868,774\\n723,727,726,99,254,649,888,591,699,289,83,680,293,597,106,829,312,135,774,516\\n645,588,86,65,594,932,141,62,842,524,213,232,325,738,780,534,777,724,292,186\\n589,193,138,379,397,394,874,557,249,732,75,988,83,55,65,929,710,376,398,394\\n838,75,513,887,127,525,806,229,852,212,211,652,295,783,520,611,214,316,606,932\\n833,259,874,742,440,717,425,555,622,381,873,499,257,244,485,196,531,864,712,700\\n638,444,206,506,538,933,300,615,638,410,776,525,406,481,922,385,827,677,855,302\\n216,749,137,850,262,589,397,53,474,291,680,584,315,516,246,399,730,91,91,289\\n536,829,290,416,316,229,675,946,900,910,865,295,121,62,542,320,71,434,587,113\\n742,629,526,414,721,775,223,377,558,867,549,839,680,721,218,401,838,711,10,944\\n679,541,736,179,181,322,891,403,885,532,313,320,736,738,499,647,350,726,858,92\\n905,627,603,503,741,424,244,597,112,826,212,236,219,138,258,542,189,301,599,82\\n865,734,318,538,912,924,886,982,845,713,297,746,736,611,629,197,648,120,727,534\\n181,415,143,735,622,302,297,502,193,548,614,302,949,203,644,384,611,208,114,864\\n936,734,391,435,830,546,846,181,318,314,214,550,712,15,434,250,642,607,247,622\\n128,637,606,112,304,63,626,407,584,854,167,438,745,251,227,446,786,316,684,419\\n188,426,710,888,827,873,740,651,196,686,734,516,747,931,537,258,748,431,417,158\\n227,120,851,730,429,104,616,256,947,22,221,506,212,207,193,125,929,600,527,739\\n85,805,717,842,55,51,222,250,251,347,321,110,100,629,174,839,686,301,59,55\\n406,435,476,171,132,319,24,734,63,584,537,888,549,318,535,194,888,941,136,721\\n614,527,600,301,258,551,858,263,849,737,70,377,847,680,790,56,485,519,254,323\\n175,113,447,598,115,591,650,434,323,947,430,592,517,677,546,67,221,650,80,448\\n842,52,138,348,313,221,55,612,580,941,170,740,122,63,197,433,840,542,219,923\\n437,733,528,120,604,476,83,161,718,944,191,231,729,636,687,432,199,106,138,374\\n382,360,918,258,205,248,925,444,684,718,591,861,96,734,549,86,223,624,429,590\\n100,314,729,89,780,532,589,843,146,101,204,535,421,201,125,555,553,514,740,382\\n281,501,55,590,230,613,916,887,216,929,608,631,194,924,264,418,455,309,324,410\\n413,855,928,250,935,52,713,258,926,931,499,137,80,128,264,212,626,252,126,302\\n85,675,188,317,741,550,106,784,233,313,531,401,306,843,504,477,995,255,396,742\\n183,130,126,938,624,195,936,540,378,641,554,835,545,0,749,53,262,712,292,478\\n853,117,747,476,621,347,69,686,212,726,905,602,447,747,181,591,482,182,845,748\\n519,244,736,395,70,681,106,560,416,730,82,921,69,407,325,403,306,552,90,287\\n629,524,202,521,377,210,731,542,726,477,615,738,141,146,437,909,202,318,110,437\\n685,248,453,69,718,485,148,946,255,130,191,907,510,325,523,102,636,202,442,736\\n919,87,203,432,110,209,305,318,636,191,85,186,529,571,535,918,222,392,418,611\\n296,407,929,223,922,734,527,77,747,183,711,515,509,533,453,505,300,918,749,82\\n625,260,298,429,61,210,408,628,236,518,869,598,71,550,945,500,122,863,128,101\\n873,857,836,192,784,783,183,253,57,838,63,560,96,725,603,15,885,446,83,127\\n739,424,158,397,430,75,548,784,227,427,830,61,859,552,683,254,552,524,724,416\\n64,184,168,558,742,209,87,212,112,523,632,253,431,68,559,528,685,246,272,505\\n827,128,946,732,717,550,403,646,54,111,744,111,686,717,437,440,83,854,320,525\\n946,643,104,199,262,306,93,641,292,437,434,731,412,393,320,863,933,507,144,313\\n213,130,219,319,441,601,676,349,313,846,587,407,675,503,679,865,483,223,661,307\\n871,225,643,247,639,933,391,775,431,512,885,838,84,831,732,411,417,681,111,930\\n715,737,176,748,196,585,519,90,312,604,780,541,310,536,991,520,209,178,407,171\\n735,200,448,727,189,608,509,194,919,155,606,485,848,516,725,312,731,84,190,510\\n601,477,83,678,833,404,634,506,776,223,54,167,651,982,733,203,522,178,480,831\\n856,498,729,421,252,53,911,171,174,454,86,310,129,169,502,778,485,375,854,879\\n541,685,538,612,394,536,130,513,652,434,124,888,720,696,51,152,103,206,417,230\\n311,193,585,539,126,94,232,556,676,379,480,938,151,635,925,80,427,648,914,188\\n130,186,175,205,55,403,601,906,202,722,843,600,518,348,390,725,628,434,598,410\\n563,108,545,187,439,84,70,939,68,545,714,914,844,177,75,442,912,632,608,103\\n540,624,946,541,736,207,716,236,85,855,909,108,258,67,300,230,588,231,180,98\\n560,511,722,942,51,180,933,598,263,211,522,89,135,617,728,395,58,512,840,63\\n603,251,716,608,378,72,976,264,144,681,506,736,499,248,101,439,67,123,61,439\\n251,57,779,264,101,381,593,546,128,728,936,262,557,133,603,737,630,166,305,591\\n92,259,908,446,937,595,257,588,870,121,252,132,346,215,310,742,346,102,240,455\\n727,584,749,529,841,73,532,100,854,887,428,350,551,861,628,799,857,190,904,923\\n604,629,253,927,583,500,99,323,610,677,259,843,413,178,779,890,129,76,140,526\\n309,448,139,376,184,607,871,635,923,856,550,299,383,97,122,841,486,789,591,595\\n593,177,678,931,95,226,110,904,453,554,979,835,85,68,890,552,483,917,213,934\\n558,858,17,323,891,521,86,859,712,931,436,394,847,294,729,587,374,778,168,936\\n133,214,428,826,597,934,680,522,264,151,249,303,409,81,218,888,479,604,842,617\\n779,517,122,69,167,855,76,827,530,886,512,151,303,231,255,725,176,827,428,135\\n724,842,407,623,945,399,153,291,126,399,376,548,749,374,836,623,259,67,539,439\\n223,613,475,405,478,680,876,182,872,712,111,510,948,250,404,868,84,844,213,230\\n446,155,214,921,224,720,931,118,588,314,923,780,404,118,889,778,425,141,298,100\\n184,584,433,167,518,710,253,198,992,736,188,325,212,925,424,293,537,634,212,509\\n613,555,926,218,552,394,945,679,248,578,726,85,857,260,421,448,174,303,450,129\\n440,486,116,309,855,75,935,604,624,890,648,724,242,304,118,306,174,479,439,783\\n418,640,187,917,296,110,686,73,388,888,395,784,826,527,111,906,123,511,587,835\\n595,257,532,541,108,778,718,552,947,641,616,129,811,584,208,918,603,918,260,949\\n294,554,778,305,716,52,652,259,621,121,191,598,603,593,130,858,837,865,204,447\\n779,418,782,210,417,606,729,676,230,634,641,10,534,63,176,64,630,374,475,852\\n394,233,319,434,124,394,813,936,406,542,225,249,807,710,407,73,525,853,74,244\\n607,193,194,507,407,432,595,548,891,919,312,836,443,560,217,640,542,777,879,295\\n587,890,516,516,874,203,64,59,455,485,174,949,743,175,272,138,676,229,863,413\\n305,861,864,929,749,560,558,131,627,110,128,888,685,783,14,403,715,482,84,347\\n221,868,391,529,155,918,442,640,226,224,257,410,530,545,447,290,417,86,531,920\\n773,77,100,127,182,227,412,634,909,480,675,222,152,745,548,914,209,736,924,547\\n872,15,540,733,304,526,904,553,96,541,534,528,500,448,525,212,541,508,523,603\\n541,742,921,118,440,682,743,104,159,717,689,631,712,198,830,115,425,250,525,303\\n222,408,525,306,352,58,736,417,210,350,316,191,889,303,233,783,230,638,210,530\\n595,870,682,179,374,782,66,401,608,807,867,688,679,849,384,542,190,719,334,292\\n861,302,631,836,187,423,607,414,130,239,584,511,520,941,638,774,480,776,724,481\\n749,249,450,531,732,612,209,637,485,943,97,743,86,499,324,438,913,599,470,228\\n197,594,200,688,144,485,445,874,930,486,774,122,378,740,684,136,167,372,136,261\\n290,914,937,596,60,196,504,682,217,233,151,137,651,50,528,158,433,59,733,854\\n298,630,241,291,289,406,642,404,649,850,711,55,865,208,93,854,445,777,742,605\\n558,476,125,905,255,437,528,2,847,845,717,915,224,601,381,451,782,455,601,216\\n319,96,453,143,502,215,917,433,433,424,589,521,780,382,606,251,155,427,739,81\\n794,115,934,842,213,223,320,689,214,917,218,832,629,610,189,177,728,191,610,177\\n129,890,177,216,400,589,203,641,414,511,262,352,843,261,63,859,849,520,633,104\\n816,207,125,439,407,915,741,86,639,943,60,515,203,186,519,946,783,58,927,835\\n938,939,312,412,608,532,138,841,554,892,540,541,294,260,849,407,143,297,793,392\\n477,612,425,67,983,720,652,914,609,451,511,97,318,827,175,184,627,747,246,91\\n591,174,396,522,793,167,56,831,296,593,91,830,178,831,307,54,504,505,198,554\\n133,217,891,679,201,873,831,190,558,516,2,550,260,637,946,750,299,439,391,605\\n735,252,446,546,606,198,477,742,942,598,86,635,725,258,563,867,946,845,310,485\\n255,943,607,427,380,304,375,202,189,408,684,512,289,374,302,866,104,651,297,242\\n723,255,299,499,548,850,207,744,688,936,782,62,305,436,78,116,218,948,429,73\\n743,732,173,872,559,745,209,556,180,946,908,172,640,864,184,616,933,828,828,998\\n200,411,180,206,480,143,396,57,375,151,713,171,921,317,829,924,322,445,550,329\\n408,640,434,998,590,712,59,213,614,834,712,686,599,850,260,518,418,939,744,835\\n101,714,13,542,928,593,171,536,181,925,907,863,187,302,312,475,541,101,65,179\\n712,526,677,510,128,409,188,524,451,737,904,74,686,801,852,869,481,614,59,428\\n916,534,442,189,172,534,193,802,559,505,409,860,195,682,379,380,325,122,510,66\\n587,51,120,718,249,932,935,595,909,255,248,629,913,632,167,828,152,585,388,215\\n531,93,545,421,842,254,57,932,811,648,775,503,452,531,502,410,254,605,500,308\\n638,400,101,196,226,100,373,613,433,226,478,86,711,425,784,777,443,137,454,95\\n917,887,826,414,832,778,400,133,714,739,394,115,524,823,304,538,308,777,98,436\\n600,507,264,743,439,253,128,599,110,437,159,535,861,398,347,502,889,747,62,313\\n710,108,727,174,285,110,507,248,177,652,454,542,776,932,855,115,622,193,86,189\\n634,501,253,740,59,151,706,403,923,587,719,206,835,99,600,807,298,535,85,923\\n197,224,181,634,109,453,550,546,261,429,396,94,930,615,158,412,541,856,64,546\\n346,916,444,100,640,10,775,868,506,436,94,139,141,890,292,199,687,526,384,845\\n888,231,295,302,774,685,478,639,915,887,187,124,931,392,486,359,731,201,783,527\\n368,633,397,726,59,103,776,483,892,914,931,728,142,933,851,376,245,913,940,348\\n445,774,399,864,498,182,891,742,343,625,172,220,168,640,528,184,89,429,137,57\\n886,453,129,741,545,108,513,182,941,400,608,156,522,517,109,594,741,557,476,931\\n925,90,232,451,176,109,70,726,307,54,935,171,84,711,261,844,739,315,526,804\\n885,296,746,254,239,739,480,375,260,727,376,109,845,179,773,375,123,499,929,194\\n96,84,184,632,141,291,650,782,113,76,948,520,405,377,687,546,226,316,190,832\\n106,288,427,553,446,121,746,87,502,85,518,510,122,322,230,230,293,481,540,445\\n504,830,263,71,912,689,731,855,368,452,530,54,264,558,684,868,445,838,409,478\\n926,680,622,376,841,85,839,727,835,392,478,650,587,71,190,400,743,733,768,549\\n846,203,178,630,675,849,742,438,909,255,867,548,553,167,875,74,213,732,482,85\\n687,746,612,680,717,381,402,317,93,247,860,74,143,743,231,547,182,66,833,465\\n711,119,891,649,509,593,592,306,600,420,414,298,720,276,129,413,891,828,225,178\\n880,257,383,873,382,499,550,60,216,913,94,605,82,928,406,298,854,253,395,318\\n183,940,255,652,182,723,546,634,222,612,99,229,840,719,81,63,62,645,855,380\";","export default \".......#\\n....#...\\n...###.#\\n#...###.\\n....##..\\n##.#..#.\\n###.#.#.\\n....#...\";","export default \"157\\t564\\t120\\t495\\t194\\t520\\t510\\t618\\t244\\t443\\t471\\t473\\t612\\t149\\t506\\t138\\n1469\\t670\\t47\\t604\\t1500\\t238\\t1304\\t1426\\t54\\t749\\t1218\\t1409\\t60\\t51\\t1436\\t598\\n578\\t184\\t2760\\t3057\\t994\\t167\\t2149\\t191\\t2913\\t2404\\t213\\t1025\\t1815\\t588\\t2421\\t3138\\n935\\t850\\t726\\t155\\t178\\t170\\t275\\t791\\t1028\\t75\\t781\\t138\\t176\\t621\\t773\\t688\\n212\\t977\\t297\\t645\\t229\\t194\\t207\\t640\\t804\\t509\\t833\\t726\\t197\\t825\\t242\\t743\\n131\\t43\\t324\\t319\\t64\\t376\\t231\\t146\\t382\\t162\\t464\\t314\\t178\\t353\\t123\\t446\\n551\\t121\\t127\\t155\\t1197\\t288\\t1412\\t1285\\t557\\t137\\t145\\t1651\\t1549\\t1217\\t681\\t1649\\n1723\\t1789\\t5525\\t4890\\t3368\\t188\\t3369\\t4842\\t3259\\t2502\\t4825\\t163\\t146\\t2941\\t126\\t5594\\n311\\t2420\\t185\\t211\\t2659\\t2568\\t2461\\t231\\t2599\\t1369\\t821\\t506\\t2227\\t180\\t220\\t1372\\n197\\t4490\\t141\\t249\\t3615\\t3314\\t789\\t4407\\t169\\t352\\t4383\\t5070\\t5173\\t3115\\t132\\t3513\\n4228\\t2875\\t3717\\t504\\t114\\t2679\\t165\\t3568\\t3002\\t116\\t756\\t151\\t4027\\t261\\t4813\\t2760\\n651\\t3194\\t2975\\t2591\\t1019\\t835\\t3007\\t248\\t3028\\t1382\\t282\\t3242\\t296\\t270\\t3224\\t3304\\n1858\\t1650\\t1720\\t1848\\t95\\t313\\t500\\t1776\\t207\\t1186\\t72\\t259\\t281\\t1620\\t79\\t77\\n3841\\t3217\\t440\\t3481\\t3643\\t940\\t3794\\t4536\\t1994\\t4040\\t3527\\t202\\t193\\t1961\\t230\\t217\\n2837\\t2747\\t2856\\t426\\t72\\t78\\t2361\\t96\\t2784\\t2780\\t98\\t2041\\t2444\\t1267\\t2167\\t2480\\n411\\t178\\t4263\\t4690\\t3653\\t162\\t3201\\t4702\\t3129\\t2685\\t3716\\t147\\t3790\\t4888\\t79\\t165\";","export default \"You land at the regional airport in time for your next flight. In fact, it looks like you'll even have time to grab some food: all flights are currently delayed due to **issues in luggage processing**.\\n\\nDue to recent aviation regulations, many rules (your puzzle input) are being enforced about bags and their contents; bags must be color-coded and must contain specific quantities of other color-coded bags. Apparently, nobody responsible for these regulations considered how long they would take to enforce!\\n\\nFor example, consider the following rules:\\n\\n```\\nlight red bags contain 1 bright white bag, 2 muted yellow bags.\\ndark orange bags contain 3 bright white bags, 4 muted yellow bags.\\nbright white bags contain 1 shiny gold bag.\\nmuted yellow bags contain 2 shiny gold bags, 9 faded blue bags.\\nshiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.\\ndark olive bags contain 3 faded blue bags, 4 dotted black bags.\\nvibrant plum bags contain 5 faded blue bags, 6 dotted black bags.\\nfaded blue bags contain no other bags.\\ndotted black bags contain no other bags.\\n```\\n\\nThese rules specify the required contents for `9` bag types. In this example, every `faded blue` bag is empty, every `vibrant plum` bag contains 11 bags (5 `faded blue` and 6 `dotted black`), and so on.\\n\\nYou have a **`shiny gold`** bag. If you wanted to carry it in at least one other bag, how many different bag colors would be valid for the outermost bag? (In other words: how many colors can, eventually, contain at least one shiny gold bag?)\\n\\nIn the above rules, the following options would be available to you:\\n\\n- A `bright white` bag, which can hold your `shiny gold` bag directly.\\n- A `muted yellow` bag, which can hold your `shiny gold` bag directly, plus some other bags.\\n- A `dark orange` bag, which can hold `bright white` and `muted yellow` bags, either of which could then hold your `shiny gold` bag.\\n- A `light red` bag, which can hold `bright white` and muted `yellow bags`, either of which could then hold your `shiny gold` bag.\\n\\nSo, in this example, the number of bag colors that can eventually contain at least one `shiny gold` bag is **`4`**.\\n\\n**How many bag colors can eventually contain at least one `shiny gold` bag?** (The list of rules is quite long; make sure you get all of it.)\\n\\n[comment]: <> (PART 2)\\n\\nIt's getting pretty expensive to fly these days - not because of ticket prices, but because of the ridiculous number of bags you need to buy!\\n\\nConsider again your shiny gold bag and the rules from the above example:\\n\\n- `faded blue` bags contain `0` other bags.\\n- `dotted black` bags contain `0` other bags.\\n- `vibrant plum` bags contain `11` other bags: `5` `faded blue` bags and `6` `dotted black` bags.\\n- `dark olive` bags contain `7` other bags: `3` `faded blue` bags and `4` `dotted black` bags.\\n\\nSo, a single `shiny gold` bag must contain 1 `dark olive` bag (and the 7 bags within it) plus 2 `vibrant plum` bags (and the 11 bags within **each** of those): `1 + 1*7 + 2 + 2*11` = `32` bags!\\n\\nOf course, the actual rules have a small chance of going several levels deeper than this example; be sure to count all of the bags, even if the nesting becomes topologically impractical!\\n\\nHere's another example:\\n\\n```\\nshiny gold bags contain 2 dark red bags.\\ndark red bags contain 2 dark orange bags.\\ndark orange bags contain 2 dark yellow bags.\\ndark yellow bags contain 2 dark green bags.\\ndark green bags contain 2 dark blue bags.\\ndark blue bags contain 2 dark violet bags.\\ndark violet bags contain no other bags.\\n```\\n\\nIn this example, a single `shiny gold` bag must contain `126` other bags.\\n\\n**How many individual bags are required inside your single shiny gold bag?**\";","export default \"It only takes a few hours of sailing the ocean on a raft for boredom to sink in. Fortunately, you brought a small deck of [space cards](https://adventofcode.com/2019/day/22)! You'd like to play a game of **Combat**, and there's even an opponent available: a small crab that climbed aboard your raft before you left.\\n\\nFortunately, it doesn't take long to teach the crab the rules.\\n\\nBefore the game starts, split the cards so each player has their own deck (your puzzle input). Then, the game consists of a series of **rounds**: both players draw their top card, and the player with the higher-valued card wins the round. The winner keeps both cards, placing them on the bottom of their own deck so that the winner's card is above the other card. If this causes a player to have all of the cards, they win, and the game ends.\\n\\nFor example, consider the following starting decks:\\n\\n```\\nPlayer 1:\\n9\\n2\\n6\\n3\\n1\\n\\nPlayer 2:\\n5\\n8\\n4\\n7\\n10\\n```\\n\\nThis arrangement means that player 1's deck contains 5 cards, with `9` on top and `1` on the bottom; player 2's deck also contains 5 cards, with `5` on top and `10` on the bottom.\\n\\nThe first round begins with both players drawing the top card of their decks: `9` and `5`. Player 1 has the higher card, so both cards move to the bottom of player 1's deck such that `9` is above `5`. In total, it takes 29 rounds before a player has all of the cards:\\n\\n```\\n-- Round 1 --\\nPlayer 1's deck: 9, 2, 6, 3, 1\\nPlayer 2's deck: 5, 8, 4, 7, 10\\nPlayer 1 plays: 9\\nPlayer 2 plays: 5\\nPlayer 1 wins the round!\\n\\n-- Round 2 --\\nPlayer 1's deck: 2, 6, 3, 1, 9, 5\\nPlayer 2's deck: 8, 4, 7, 10\\nPlayer 1 plays: 2\\nPlayer 2 plays: 8\\nPlayer 2 wins the round!\\n\\n-- Round 3 --\\nPlayer 1's deck: 6, 3, 1, 9, 5\\nPlayer 2's deck: 4, 7, 10, 8, 2\\nPlayer 1 plays: 6\\nPlayer 2 plays: 4\\nPlayer 1 wins the round!\\n\\n-- Round 4 --\\nPlayer 1's deck: 3, 1, 9, 5, 6, 4\\nPlayer 2's deck: 7, 10, 8, 2\\nPlayer 1 plays: 3\\nPlayer 2 plays: 7\\nPlayer 2 wins the round!\\n\\n-- Round 5 --\\nPlayer 1's deck: 1, 9, 5, 6, 4\\nPlayer 2's deck: 10, 8, 2, 7, 3\\nPlayer 1 plays: 1\\nPlayer 2 plays: 10\\nPlayer 2 wins the round!\\n\\n...several more rounds pass...\\n\\n-- Round 27 --\\nPlayer 1's deck: 5, 4, 1\\nPlayer 2's deck: 8, 9, 7, 3, 2, 10, 6\\nPlayer 1 plays: 5\\nPlayer 2 plays: 8\\nPlayer 2 wins the round!\\n\\n-- Round 28 --\\nPlayer 1's deck: 4, 1\\nPlayer 2's deck: 9, 7, 3, 2, 10, 6, 8, 5\\nPlayer 1 plays: 4\\nPlayer 2 plays: 9\\nPlayer 2 wins the round!\\n\\n-- Round 29 --\\nPlayer 1's deck: 1\\nPlayer 2's deck: 7, 3, 2, 10, 6, 8, 5, 9, 4\\nPlayer 1 plays: 1\\nPlayer 2 plays: 7\\nPlayer 2 wins the round!\\n\\n\\n== Post-game results ==\\nPlayer 1's deck: \\nPlayer 2's deck: 3, 2, 10, 6, 8, 5, 9, 4, 7, 1\\n```\\n\\nOnce the game ends, you can calculate the winning player's **score**. The bottom card in their deck is worth the value of the card multiplied by 1, the second-from-the-bottom card is worth the value of the card multiplied by 2, and so on. With 10 cards, the top card is worth the value on the card multiplied by 10. In this example, the winning player's score is:\\n\\n```\\n   3 * 10\\n+  2 *  9\\n+ 10 *  8\\n+  6 *  7\\n+  8 *  6\\n+  5 *  5\\n+  9 *  4\\n+  4 *  3\\n+  7 *  2\\n+  1 *  1\\n= 306\\n```\\n\\nSo, once the game ends, the winning player's score is **`306`**.\\n\\nPlay the small crab in a game of Combat using the two decks you just dealt. **What is the winning player's score?**\\n\\n[comment]: <> (PART 2)\\n\\nYou lost to the small crab! Fortunately, crabs aren't very good at recursion. To defend your honor as a Raft Captain, you challenge the small crab to a game of **Recursive Combat**.\\n\\nRecursive Combat still starts by splitting the cards into two decks (you offer to play with the same starting decks as before - it's only fair). Then, the game consists of a series of **rounds** with a few changes:\\n\\n- Before either player deals a card, if there was a previous round in this game that had exactly the same cards in the same order in the same players' decks, the **game** instantly ends in a win for player 1. Previous rounds from other games are not considered. (This prevents infinite games of Recursive Combat, which everyone agrees is a bad idea.)\\n- Otherwise, this round's cards must be in a new configuration; the players begin the round by each drawing the top card of their deck as normal.\\n- If both players have at least as many cards remaining in their deck as the value of the card they just drew, the winner of the round is determined by playing a new game of Recursive Combat (see below).\\n- Otherwise, at least one player must not have enough cards left in their deck to recurse; the winner of the round is the player with the higher-value card.\\n\\nAs in regular Combat, the winner of the round (even if they won the round by winning a sub-game) takes the two cards dealt at the beginning of the round and places them on the bottom of their own deck (again so that the winner's card is above the other card). Note that the winner's card might be **the lower-valued of the two cards** if they won the round due to winning a sub-game. If collecting cards by winning the round causes a player to have all of the cards, they win, and the game ends.\\n\\nHere is an example of a small game that would loop forever without the infinite game prevention rule:\\n\\n```\\nPlayer 1:\\n43\\n19\\n\\nPlayer 2:\\n2\\n29\\n14\\n```\\n\\nDuring a round of Recursive Combat, if both players have at least as many cards in their own decks as the number on the card they just dealt, the winner of the round is determined by recursing into a sub-game of Recursive Combat. (For example, if player 1 draws the `3` card, and player 2 draws the `7` card, this would occur if player 1 has at least 3 cards left and player 2 has at least 7 cards left, not counting the `3` and `7` cards that were drawn.)\\n\\nTo play a sub-game of Recursive Combat, each player creates a new deck by making a **copy** of the next cards in their deck (the quantity of cards copied is equal to the number on the card they drew to trigger the sub-game). During this sub-game, the game that triggered it is on hold and completely unaffected; no cards are removed from players' decks to form the sub-game. (For example, if player 1 drew the 3 card, their deck in the sub-game would be **copies** of the next three cards in their deck.)\\n\\nHere is a complete example of gameplay, where `Game 1` is the primary game of Recursive Combat:\\n\\n```\\n=== Game 1 ===\\n\\n-- Round 1 (Game 1) --\\nPlayer 1's deck: 9, 2, 6, 3, 1\\nPlayer 2's deck: 5, 8, 4, 7, 10\\nPlayer 1 plays: 9\\nPlayer 2 plays: 5\\nPlayer 1 wins round 1 of game 1!\\n\\n-- Round 2 (Game 1) --\\nPlayer 1's deck: 2, 6, 3, 1, 9, 5\\nPlayer 2's deck: 8, 4, 7, 10\\nPlayer 1 plays: 2\\nPlayer 2 plays: 8\\nPlayer 2 wins round 2 of game 1!\\n\\n-- Round 3 (Game 1) --\\nPlayer 1's deck: 6, 3, 1, 9, 5\\nPlayer 2's deck: 4, 7, 10, 8, 2\\nPlayer 1 plays: 6\\nPlayer 2 plays: 4\\nPlayer 1 wins round 3 of game 1!\\n\\n-- Round 4 (Game 1) --\\nPlayer 1's deck: 3, 1, 9, 5, 6, 4\\nPlayer 2's deck: 7, 10, 8, 2\\nPlayer 1 plays: 3\\nPlayer 2 plays: 7\\nPlayer 2 wins round 4 of game 1!\\n\\n-- Round 5 (Game 1) --\\nPlayer 1's deck: 1, 9, 5, 6, 4\\nPlayer 2's deck: 10, 8, 2, 7, 3\\nPlayer 1 plays: 1\\nPlayer 2 plays: 10\\nPlayer 2 wins round 5 of game 1!\\n\\n-- Round 6 (Game 1) --\\nPlayer 1's deck: 9, 5, 6, 4\\nPlayer 2's deck: 8, 2, 7, 3, 10, 1\\nPlayer 1 plays: 9\\nPlayer 2 plays: 8\\nPlayer 1 wins round 6 of game 1!\\n\\n-- Round 7 (Game 1) --\\nPlayer 1's deck: 5, 6, 4, 9, 8\\nPlayer 2's deck: 2, 7, 3, 10, 1\\nPlayer 1 plays: 5\\nPlayer 2 plays: 2\\nPlayer 1 wins round 7 of game 1!\\n\\n-- Round 8 (Game 1) --\\nPlayer 1's deck: 6, 4, 9, 8, 5, 2\\nPlayer 2's deck: 7, 3, 10, 1\\nPlayer 1 plays: 6\\nPlayer 2 plays: 7\\nPlayer 2 wins round 8 of game 1!\\n\\n-- Round 9 (Game 1) --\\nPlayer 1's deck: 4, 9, 8, 5, 2\\nPlayer 2's deck: 3, 10, 1, 7, 6\\nPlayer 1 plays: 4\\nPlayer 2 plays: 3\\nPlaying a sub-game to determine the winner...\\n\\n=== Game 2 ===\\n\\n-- Round 1 (Game 2) --\\nPlayer 1's deck: 9, 8, 5, 2\\nPlayer 2's deck: 10, 1, 7\\nPlayer 1 plays: 9\\nPlayer 2 plays: 10\\nPlayer 2 wins round 1 of game 2!\\n\\n-- Round 2 (Game 2) --\\nPlayer 1's deck: 8, 5, 2\\nPlayer 2's deck: 1, 7, 10, 9\\nPlayer 1 plays: 8\\nPlayer 2 plays: 1\\nPlayer 1 wins round 2 of game 2!\\n\\n-- Round 3 (Game 2) --\\nPlayer 1's deck: 5, 2, 8, 1\\nPlayer 2's deck: 7, 10, 9\\nPlayer 1 plays: 5\\nPlayer 2 plays: 7\\nPlayer 2 wins round 3 of game 2!\\n\\n-- Round 4 (Game 2) --\\nPlayer 1's deck: 2, 8, 1\\nPlayer 2's deck: 10, 9, 7, 5\\nPlayer 1 plays: 2\\nPlayer 2 plays: 10\\nPlayer 2 wins round 4 of game 2!\\n\\n-- Round 5 (Game 2) --\\nPlayer 1's deck: 8, 1\\nPlayer 2's deck: 9, 7, 5, 10, 2\\nPlayer 1 plays: 8\\nPlayer 2 plays: 9\\nPlayer 2 wins round 5 of game 2!\\n\\n-- Round 6 (Game 2) --\\nPlayer 1's deck: 1\\nPlayer 2's deck: 7, 5, 10, 2, 9, 8\\nPlayer 1 plays: 1\\nPlayer 2 plays: 7\\nPlayer 2 wins round 6 of game 2!\\nThe winner of game 2 is player 2!\\n\\n...anyway, back to game 1.\\nPlayer 2 wins round 9 of game 1!\\n\\n-- Round 10 (Game 1) --\\nPlayer 1's deck: 9, 8, 5, 2\\nPlayer 2's deck: 10, 1, 7, 6, 3, 4\\nPlayer 1 plays: 9\\nPlayer 2 plays: 10\\nPlayer 2 wins round 10 of game 1!\\n\\n-- Round 11 (Game 1) --\\nPlayer 1's deck: 8, 5, 2\\nPlayer 2's deck: 1, 7, 6, 3, 4, 10, 9\\nPlayer 1 plays: 8\\nPlayer 2 plays: 1\\nPlayer 1 wins round 11 of game 1!\\n\\n-- Round 12 (Game 1) --\\nPlayer 1's deck: 5, 2, 8, 1\\nPlayer 2's deck: 7, 6, 3, 4, 10, 9\\nPlayer 1 plays: 5\\nPlayer 2 plays: 7\\nPlayer 2 wins round 12 of game 1!\\n\\n-- Round 13 (Game 1) --\\nPlayer 1's deck: 2, 8, 1\\nPlayer 2's deck: 6, 3, 4, 10, 9, 7, 5\\nPlayer 1 plays: 2\\nPlayer 2 plays: 6\\nPlaying a sub-game to determine the winner...\\n\\n=== Game 3 ===\\n\\n-- Round 1 (Game 3) --\\nPlayer 1's deck: 8, 1\\nPlayer 2's deck: 3, 4, 10, 9, 7, 5\\nPlayer 1 plays: 8\\nPlayer 2 plays: 3\\nPlayer 1 wins round 1 of game 3!\\n\\n-- Round 2 (Game 3) --\\nPlayer 1's deck: 1, 8, 3\\nPlayer 2's deck: 4, 10, 9, 7, 5\\nPlayer 1 plays: 1\\nPlayer 2 plays: 4\\nPlaying a sub-game to determine the winner...\\n\\n=== Game 4 ===\\n\\n-- Round 1 (Game 4) --\\nPlayer 1's deck: 8\\nPlayer 2's deck: 10, 9, 7, 5\\nPlayer 1 plays: 8\\nPlayer 2 plays: 10\\nPlayer 2 wins round 1 of game 4!\\nThe winner of game 4 is player 2!\\n\\n...anyway, back to game 3.\\nPlayer 2 wins round 2 of game 3!\\n\\n-- Round 3 (Game 3) --\\nPlayer 1's deck: 8, 3\\nPlayer 2's deck: 10, 9, 7, 5, 4, 1\\nPlayer 1 plays: 8\\nPlayer 2 plays: 10\\nPlayer 2 wins round 3 of game 3!\\n\\n-- Round 4 (Game 3) --\\nPlayer 1's deck: 3\\nPlayer 2's deck: 9, 7, 5, 4, 1, 10, 8\\nPlayer 1 plays: 3\\nPlayer 2 plays: 9\\nPlayer 2 wins round 4 of game 3!\\nThe winner of game 3 is player 2!\\n\\n...anyway, back to game 1.\\nPlayer 2 wins round 13 of game 1!\\n\\n-- Round 14 (Game 1) --\\nPlayer 1's deck: 8, 1\\nPlayer 2's deck: 3, 4, 10, 9, 7, 5, 6, 2\\nPlayer 1 plays: 8\\nPlayer 2 plays: 3\\nPlayer 1 wins round 14 of game 1!\\n\\n-- Round 15 (Game 1) --\\nPlayer 1's deck: 1, 8, 3\\nPlayer 2's deck: 4, 10, 9, 7, 5, 6, 2\\nPlayer 1 plays: 1\\nPlayer 2 plays: 4\\nPlaying a sub-game to determine the winner...\\n\\n=== Game 5 ===\\n\\n-- Round 1 (Game 5) --\\nPlayer 1's deck: 8\\nPlayer 2's deck: 10, 9, 7, 5\\nPlayer 1 plays: 8\\nPlayer 2 plays: 10\\nPlayer 2 wins round 1 of game 5!\\nThe winner of game 5 is player 2!\\n\\n...anyway, back to game 1.\\nPlayer 2 wins round 15 of game 1!\\n\\n-- Round 16 (Game 1) --\\nPlayer 1's deck: 8, 3\\nPlayer 2's deck: 10, 9, 7, 5, 6, 2, 4, 1\\nPlayer 1 plays: 8\\nPlayer 2 plays: 10\\nPlayer 2 wins round 16 of game 1!\\n\\n-- Round 17 (Game 1) --\\nPlayer 1's deck: 3\\nPlayer 2's deck: 9, 7, 5, 6, 2, 4, 1, 10, 8\\nPlayer 1 plays: 3\\nPlayer 2 plays: 9\\nPlayer 2 wins round 17 of game 1!\\nThe winner of game 1 is player 2!\\n\\n\\n== Post-game results ==\\nPlayer 1's deck: \\nPlayer 2's deck: 7, 5, 6, 2, 4, 1, 10, 8, 9, 3\\n```\\n\\nAfter the game, the winning player's score is calculated from the cards they have in their original deck using the same rules as regular Combat. In the above game, the winning player's score is **`291`**.\\n\\nDefend your honor as Raft Captain by playing the small crab in a game of Recursive Combat using the same two decks as before. **What is the winning player's score?**\";","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isForced = require('../internals/is-forced');\nvar redefine = require('../internals/redefine');\nvar hasOwn = require('../internals/has-own-property');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar isSymbol = require('../internals/is-symbol');\nvar toPrimitive = require('../internals/to-primitive');\nvar fails = require('../internals/fails');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar thisNumberValue = require('../internals/this-number-value');\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\nvar TypeError = global.TypeError;\nvar arraySlice = uncurryThis(''.slice);\nvar charCodeAt = uncurryThis(''.charCodeAt);\n\n// `ToNumeric` abstract operation\n// https://tc39.es/ecma262/#sec-tonumeric\nvar toNumeric = function (value) {\n  var primValue = toPrimitive(value, 'number');\n  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);\n};\n\n// `ToNumber` abstract operation\n// https://tc39.es/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, 'number');\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (isSymbol(it)) throw TypeError('Cannot convert a Symbol value to a number');\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = charCodeAt(it, 0);\n    if (first === 43 || first === 45) {\n      third = charCodeAt(it, 2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (charCodeAt(it, 1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = arraySlice(it, 2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = charCodeAt(digits, index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.es/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));\n    var dummy = this;\n    // check on 1..constructor(foo) case\n    return isPrototypeOf(NumberPrototype, dummy) && fails(function () { thisNumberValue(dummy); })\n      ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +\n    // ESNext\n    'fromString,range'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}\n","export default \"556,286 -> 341,71\\n337,201 -> 782,646\\n786,780 -> 117,111\\n977,864 -> 199,86\\n544,127 -> 544,144\\n539,471 -> 539,972\\n364,765 -> 364,285\\n282,325 -> 892,935\\n536,941 -> 158,941\\n280,39 -> 806,565\\n168,662 -> 363,857\\n639,676 -> 639,701\\n397,809 -> 466,809\\n716,118 -> 625,209\\n153,582 -> 497,926\\n35,706 -> 398,706\\n61,41 -> 519,41\\n158,557 -> 158,922\\n320,177 -> 624,481\\n800,779 -> 466,779\\n292,270 -> 292,497\\n919,17 -> 757,17\\n935,520 -> 935,688\\n948,480 -> 303,480\\n306,811 -> 306,467\\n227,582 -> 464,819\\n757,807 -> 757,688\\n983,12 -> 30,965\\n632,262 -> 640,262\\n755,314 -> 138,931\\n179,599 -> 179,144\\n556,246 -> 801,491\\n114,218 -> 114,60\\n183,70 -> 423,70\\n561,661 -> 231,331\\n875,738 -> 723,890\\n812,828 -> 812,78\\n98,707 -> 88,707\\n804,979 -> 188,979\\n503,178 -> 453,178\\n902,678 -> 248,678\\n603,618 -> 737,752\\n788,735 -> 559,964\\n839,134 -> 839,408\\n569,356 -> 491,356\\n566,543 -> 566,77\\n624,386 -> 111,386\\n781,109 -> 781,52\\n187,709 -> 23,545\\n220,123 -> 856,123\\n210,528 -> 398,716\\n942,935 -> 58,51\\n102,13 -> 102,560\\n926,588 -> 969,545\\n529,117 -> 146,117\\n989,211 -> 739,461\\n207,201 -> 207,106\\n799,876 -> 284,876\\n370,773 -> 687,456\\n571,972 -> 571,351\\n877,910 -> 877,12\\n384,205 -> 384,940\\n493,915 -> 912,496\\n764,412 -> 368,16\\n368,220 -> 333,220\\n526,271 -> 778,271\\n379,203 -> 417,165\\n168,577 -> 168,709\\n529,808 -> 598,739\\n959,506 -> 959,626\\n576,89 -> 863,89\\n277,412 -> 311,378\\n12,19 -> 975,982\\n620,951 -> 240,571\\n937,206 -> 954,206\\n231,177 -> 918,864\\n499,825 -> 315,825\\n289,876 -> 289,302\\n408,569 -> 46,207\\n461,838 -> 91,838\\n281,294 -> 281,737\\n61,541 -> 61,747\\n768,857 -> 768,276\\n782,97 -> 33,97\\n544,563 -> 251,856\\n731,216 -> 731,19\\n767,142 -> 242,667\\n469,612 -> 952,129\\n508,363 -> 508,540\\n614,845 -> 614,739\\n342,362 -> 235,362\\n880,703 -> 880,653\\n942,669 -> 651,669\\n884,976 -> 884,924\\n158,822 -> 945,35\\n510,716 -> 884,342\\n523,946 -> 73,496\\n334,430 -> 157,253\\n593,77 -> 105,565\\n269,132 -> 243,132\\n902,529 -> 180,529\\n554,767 -> 554,938\\n164,615 -> 425,615\\n51,713 -> 51,341\\n428,606 -> 89,945\\n600,402 -> 600,185\\n774,550 -> 774,207\\n465,204 -> 697,436\\n577,719 -> 255,719\\n647,990 -> 970,990\\n649,170 -> 886,407\\n428,503 -> 428,394\\n381,608 -> 381,444\\n778,175 -> 778,121\\n795,379 -> 379,379\\n929,792 -> 218,81\\n504,837 -> 504,449\\n212,216 -> 212,76\\n446,744 -> 446,116\\n824,247 -> 577,247\\n77,214 -> 553,214\\n913,234 -> 913,670\\n949,24 -> 43,930\\n733,758 -> 733,62\\n628,659 -> 962,659\\n172,749 -> 755,749\\n901,717 -> 184,717\\n457,578 -> 923,112\\n943,11 -> 912,11\\n728,597 -> 116,597\\n465,134 -> 465,159\\n170,953 -> 170,533\\n231,715 -> 231,219\\n209,187 -> 984,962\\n798,515 -> 798,601\\n479,123 -> 479,148\\n360,387 -> 360,356\\n962,818 -> 962,770\\n852,607 -> 852,886\\n159,838 -> 967,30\\n823,659 -> 642,478\\n374,893 -> 545,893\\n248,819 -> 248,978\\n894,473 -> 894,47\\n182,975 -> 278,879\\n75,248 -> 913,248\\n969,533 -> 969,827\\n18,40 -> 842,864\\n972,909 -> 220,157\\n378,159 -> 571,159\\n875,478 -> 238,478\\n95,807 -> 264,638\\n418,68 -> 418,387\\n784,548 -> 332,548\\n365,354 -> 365,836\\n731,615 -> 235,615\\n885,104 -> 513,476\\n816,47 -> 385,478\\n626,741 -> 626,499\\n371,372 -> 920,921\\n83,150 -> 922,989\\n623,520 -> 645,498\\n612,305 -> 561,305\\n845,149 -> 788,149\\n914,35 -> 829,35\\n143,165 -> 143,520\\n164,218 -> 266,218\\n118,644 -> 397,644\\n59,942 -> 970,31\\n616,774 -> 970,420\\n30,468 -> 874,468\\n454,208 -> 454,536\\n524,488 -> 524,931\\n54,479 -> 560,479\\n815,591 -> 815,813\\n959,971 -> 30,42\\n23,181 -> 149,181\\n841,294 -> 841,681\\n34,47 -> 367,47\\n913,590 -> 913,374\\n690,64 -> 690,672\\n541,112 -> 781,112\\n380,843 -> 687,536\\n303,330 -> 465,330\\n408,403 -> 326,403\\n352,962 -> 925,389\\n121,882 -> 873,130\\n979,294 -> 29,294\\n228,688 -> 228,738\\n845,930 -> 901,930\\n726,189 -> 27,888\\n223,888 -> 989,888\\n483,632 -> 483,321\\n606,810 -> 820,810\\n225,31 -> 225,342\\n841,18 -> 841,417\\n375,185 -> 375,413\\n641,189 -> 307,523\\n126,900 -> 126,990\\n530,220 -> 690,220\\n496,263 -> 154,263\\n140,503 -> 419,503\\n349,733 -> 349,819\\n43,29 -> 928,914\\n683,842 -> 683,489\\n113,634 -> 806,634\\n771,145 -> 130,145\\n88,467 -> 908,467\\n328,642 -> 328,795\\n986,191 -> 218,959\\n857,166 -> 857,594\\n950,763 -> 229,42\\n263,940 -> 101,940\\n689,182 -> 689,835\\n241,237 -> 733,237\\n965,150 -> 279,150\\n871,242 -> 474,639\\n688,947 -> 688,11\\n319,738 -> 945,112\\n21,853 -> 853,21\\n69,533 -> 69,741\\n492,981 -> 492,210\\n942,69 -> 249,69\\n63,364 -> 203,364\\n340,505 -> 15,505\\n41,43 -> 979,981\\n395,623 -> 217,801\\n540,37 -> 540,381\\n64,112 -> 882,930\\n887,212 -> 217,882\\n168,159 -> 108,159\\n117,22 -> 959,864\\n413,500 -> 413,616\\n775,597 -> 962,597\\n171,901 -> 143,901\\n777,391 -> 41,391\\n901,139 -> 70,970\\n215,75 -> 215,261\\n973,433 -> 786,433\\n757,568 -> 612,423\\n363,347 -> 185,525\\n274,363 -> 274,709\\n435,569 -> 880,569\\n267,297 -> 86,478\\n221,852 -> 985,88\\n322,560 -> 322,962\\n470,259 -> 470,508\\n861,860 -> 843,860\\n172,474 -> 172,714\\n53,839 -> 499,839\\n600,40 -> 600,227\\n820,952 -> 99,231\\n650,486 -> 586,486\\n305,273 -> 305,392\\n826,417 -> 826,92\\n309,934 -> 309,720\\n381,644 -> 381,623\\n38,78 -> 38,54\\n326,450 -> 173,450\\n474,100 -> 474,135\\n607,536 -> 192,121\\n686,504 -> 164,504\\n538,623 -> 429,623\\n200,385 -> 933,385\\n568,275 -> 31,275\\n105,201 -> 706,201\\n582,584 -> 827,584\\n24,469 -> 24,519\\n306,224 -> 32,224\\n429,528 -> 304,528\\n272,851 -> 272,927\\n636,113 -> 636,244\\n481,107 -> 783,107\\n834,87 -> 175,746\\n684,50 -> 61,673\\n30,335 -> 739,335\\n621,893 -> 266,893\\n968,942 -> 968,390\\n895,23 -> 136,23\\n742,650 -> 756,636\\n42,582 -> 368,582\\n890,266 -> 786,266\\n591,807 -> 921,807\\n915,333 -> 915,160\\n746,326 -> 826,326\\n663,803 -> 34,174\\n533,513 -> 692,513\\n205,133 -> 935,133\\n730,138 -> 58,810\\n290,87 -> 290,488\\n693,513 -> 693,323\\n188,491 -> 188,587\\n562,593 -> 562,122\\n629,457 -> 629,299\\n132,781 -> 381,781\\n356,965 -> 356,899\\n720,715 -> 487,715\\n356,120 -> 954,120\\n657,507 -> 323,173\\n13,190 -> 742,190\\n677,640 -> 491,640\\n145,605 -> 366,605\\n143,683 -> 681,145\\n700,787 -> 557,787\\n958,406 -> 212,406\\n267,734 -> 705,734\\n470,333 -> 257,120\\n790,656 -> 523,389\\n13,904 -> 898,19\\n29,970 -> 961,38\\n846,454 -> 846,153\\n564,488 -> 98,488\\n904,19 -> 60,863\\n493,112 -> 472,133\\n945,977 -> 141,173\\n720,231 -> 720,367\\n783,133 -> 783,422\\n165,754 -> 165,604\\n752,308 -> 715,271\\n413,969 -> 431,951\\n833,437 -> 833,881\\n612,802 -> 612,64\\n974,187 -> 543,618\\n655,183 -> 675,183\\n696,833 -> 906,623\\n756,792 -> 756,741\\n338,140 -> 878,680\\n854,955 -> 241,342\\n602,466 -> 326,466\\n470,125 -> 464,131\\n568,141 -> 43,666\\n826,318 -> 783,275\\n194,986 -> 194,466\\n896,330 -> 621,55\\n482,709 -> 704,931\\n345,912 -> 345,741\\n758,119 -> 758,841\\n11,777 -> 11,249\\n88,945 -> 795,945\\n665,74 -> 124,615\\n243,831 -> 249,837\\n40,69 -> 720,749\\n757,804 -> 757,900\\n803,265 -> 336,732\\n299,155 -> 758,614\\n787,173 -> 172,788\\n251,400 -> 251,168\\n217,480 -> 486,480\\n939,974 -> 21,56\\n767,649 -> 378,649\\n197,764 -> 561,400\\n767,577 -> 579,577\\n952,982 -> 28,58\\n282,527 -> 282,640\\n944,125 -> 184,125\\n149,848 -> 351,848\\n36,437 -> 350,437\\n63,527 -> 764,527\\n66,313 -> 302,549\\n805,485 -> 577,485\\n660,626 -> 903,626\\n927,542 -> 897,542\\n577,344 -> 577,934\\n624,284 -> 624,497\\n649,618 -> 153,122\\n942,32 -> 227,747\\n10,190 -> 10,629\\n84,638 -> 470,252\\n362,89 -> 362,762\\n351,844 -> 916,279\\n683,561 -> 497,747\\n628,473 -> 103,473\\n319,525 -> 782,62\\n842,131 -> 551,131\\n980,960 -> 51,31\\n662,12 -> 666,12\\n337,814 -> 337,736\\n720,99 -> 760,99\\n867,515 -> 867,650\\n248,872 -> 142,872\\n295,274 -> 298,274\\n102,369 -> 102,648\\n523,142 -> 54,611\\n369,798 -> 978,189\\n215,688 -> 835,688\\n846,242 -> 786,182\\n68,923 -> 68,342\\n690,416 -> 559,547\\n567,134 -> 278,134\\n89,126 -> 846,883\\n779,325 -> 389,325\\n675,461 -> 675,622\\n278,925 -> 953,250\\n907,460 -> 519,848\\n769,60 -> 592,60\\n331,103 -> 331,49\\n148,366 -> 148,516\\n933,52 -> 332,52\\n488,642 -> 488,523\\n632,403 -> 83,952\\n321,840 -> 756,405\\n302,627 -> 907,22\\n650,449 -> 650,553\\n219,466 -> 219,297\\n841,947 -> 78,184\\n40,746 -> 712,74\\n559,306 -> 895,306\\n317,592 -> 317,275\\n267,183 -> 267,428\\n43,397 -> 43,359\\n952,705 -> 952,634\\n921,837 -> 258,174\\n634,783 -> 656,805\\n366,309 -> 224,309\\n383,470 -> 526,613\\n717,419 -> 717,332\\n543,752 -> 543,500\\n954,892 -> 101,39\\n294,379 -> 583,379\\n829,388 -> 829,491\\n748,509 -> 283,509\\n347,75 -> 467,195\\n618,958 -> 371,711\\n986,827 -> 213,54\\n34,617 -> 982,617\\n716,902 -> 716,429\\n970,52 -> 107,915\\n563,33 -> 563,680\\n803,82 -> 136,749\\n24,968 -> 273,968\\n816,483 -> 620,287\\n783,588 -> 623,588\\n397,210 -> 988,801\\n911,387 -> 911,446\\n770,730 -> 786,730\\n22,11 -> 982,971\\n395,316 -> 151,316\\n301,420 -> 301,248\\n10,10 -> 989,989\\n637,358 -> 247,358\\n932,341 -> 642,341\\n162,594 -> 162,448\\n51,946 -> 396,946\\n591,253 -> 958,620\\n567,849 -> 567,713\\n879,910 -> 879,603\\n889,642 -> 437,642\\n669,528 -> 945,252\\n644,237 -> 774,237\\n488,870 -> 738,620\\n692,388 -> 959,388\\n506,17 -> 701,17\\n663,514 -> 663,216\\n684,862 -> 289,862\\n511,235 -> 519,227\\n866,940 -> 153,227\\n381,518 -> 87,518\\n837,573 -> 181,573\\n337,191 -> 337,135\\n324,573 -> 945,573\\n449,800 -> 390,741\\n763,378 -> 763,695\\n24,457 -> 444,877\\n267,875 -> 798,344\\n724,848 -> 395,848\\n931,322 -> 931,244\\n426,241 -> 280,241\\n175,879 -> 175,883\\n496,158 -> 560,158\\n899,319 -> 805,319\\n799,424 -> 563,188\\n958,388 -> 958,290\\n558,95 -> 314,95\\n768,646 -> 961,839\\n246,534 -> 246,147\\n808,720 -> 808,385\\n912,147 -> 912,305\\n670,676 -> 776,676\\n534,594 -> 696,594\\n736,768 -> 736,364\\n377,784 -> 377,368\\n799,105 -> 978,284\\n763,575 -> 763,253\\n581,205 -> 581,45\\n932,782 -> 678,782\\n400,950 -> 936,414\\n68,616 -> 897,616\\n399,662 -> 291,554\\n354,397 -> 354,489\\n219,276 -> 862,919\\n115,138 -> 195,138\\n863,326 -> 863,335\\n884,130 -> 271,743\\n986,148 -> 234,900\\n254,186 -> 973,905\\n975,971 -> 672,971\\n122,533 -> 19,636\\n316,512 -> 219,609\\n113,480 -> 716,480\\n483,540 -> 845,178\";","export default \"Step O must be finished before step C can begin.\\nStep Y must be finished before step D can begin.\\nStep N must be finished before step D can begin.\\nStep G must be finished before step F can begin.\\nStep C must be finished before step Z can begin.\\nStep H must be finished before step K can begin.\\nStep W must be finished before step T can begin.\\nStep T must be finished before step F can begin.\\nStep S must be finished before step I can begin.\\nStep X must be finished before step B can begin.\\nStep J must be finished before step A can begin.\\nStep K must be finished before step D can begin.\\nStep Z must be finished before step A can begin.\\nStep A must be finished before step B can begin.\\nStep L must be finished before step V can begin.\\nStep F must be finished before step M can begin.\\nStep B must be finished before step V can begin.\\nStep M must be finished before step Q can begin.\\nStep D must be finished before step E can begin.\\nStep I must be finished before step U can begin.\\nStep R must be finished before step V can begin.\\nStep E must be finished before step U can begin.\\nStep P must be finished before step V can begin.\\nStep V must be finished before step Q can begin.\\nStep U must be finished before step Q can begin.\\nStep P must be finished before step U can begin.\\nStep O must be finished before step F can begin.\\nStep T must be finished before step M can begin.\\nStep I must be finished before step Q can begin.\\nStep M must be finished before step U can begin.\\nStep R must be finished before step E can begin.\\nStep T must be finished before step R can begin.\\nStep H must be finished before step S can begin.\\nStep L must be finished before step B can begin.\\nStep S must be finished before step Q can begin.\\nStep E must be finished before step Q can begin.\\nStep B must be finished before step Q can begin.\\nStep S must be finished before step M can begin.\\nStep C must be finished before step D can begin.\\nStep S must be finished before step R can begin.\\nStep G must be finished before step D can begin.\\nStep T must be finished before step E can begin.\\nStep T must be finished before step Q can begin.\\nStep N must be finished before step I can begin.\\nStep S must be finished before step P can begin.\\nStep N must be finished before step J can begin.\\nStep X must be finished before step L can begin.\\nStep G must be finished before step K can begin.\\nStep N must be finished before step E can begin.\\nStep H must be finished before step D can begin.\\nStep H must be finished before step P can begin.\\nStep O must be finished before step A can begin.\\nStep V must be finished before step U can begin.\\nStep F must be finished before step D can begin.\\nStep B must be finished before step P can begin.\\nStep T must be finished before step L can begin.\\nStep I must be finished before step P can begin.\\nStep K must be finished before step Z can begin.\\nStep G must be finished before step M can begin.\\nStep F must be finished before step Q can begin.\\nStep J must be finished before step L can begin.\\nStep H must be finished before step Q can begin.\\nStep W must be finished before step R can begin.\\nStep R must be finished before step U can begin.\\nStep P must be finished before step Q can begin.\\nStep D must be finished before step V can begin.\\nStep G must be finished before step C can begin.\\nStep Z must be finished before step B can begin.\\nStep O must be finished before step H can begin.\\nStep S must be finished before step A can begin.\\nStep J must be finished before step Q can begin.\\nStep N must be finished before step F can begin.\\nStep L must be finished before step R can begin.\\nStep O must be finished before step R can begin.\\nStep W must be finished before step M can begin.\\nStep J must be finished before step F can begin.\\nStep G must be finished before step W can begin.\\nStep K must be finished before step U can begin.\\nStep D must be finished before step U can begin.\\nStep W must be finished before step I can begin.\\nStep E must be finished before step V can begin.\\nStep Y must be finished before step Q can begin.\\nStep L must be finished before step E can begin.\\nStep S must be finished before step B can begin.\\nStep T must be finished before step V can begin.\\nStep C must be finished before step U can begin.\\nStep M must be finished before step P can begin.\\nStep G must be finished before step S can begin.\\nStep B must be finished before step R can begin.\\nStep K must be finished before step M can begin.\\nStep X must be finished before step A can begin.\\nStep R must be finished before step P can begin.\\nStep B must be finished before step I can begin.\\nStep C must be finished before step X can begin.\\nStep O must be finished before step P can begin.\\nStep D must be finished before step Q can begin.\\nStep F must be finished before step B can begin.\\nStep I must be finished before step R can begin.\\nStep Y must be finished before step I can begin.\\nStep M must be finished before step D can begin.\\nStep F must be finished before step U can begin.\";","export default \"Tile 1249:\\n...#......\\n#..#..#.##\\n##........\\n#.#.......\\n..........\\n#...###...\\n#..#......\\n#...##....\\n..........\\n.....#...#\\n\\nTile 1693:\\n..#..####.\\n#.........\\n##..#....#\\n#.....#..#\\n......#.##\\n#........#\\n.....##...\\n.#..##.#.#\\n##........\\n###..#....\\n\\nTile 1481:\\n....#####.\\n#....#..##\\n##..#....#\\n##..#...#.\\n#..#.#...#\\n..........\\n...#..#...\\n.#...#...#\\n#...#.....\\n..#..##.##\\n\\nTile 3169:\\n####...#.#\\n#.#.....#.\\n.#......##\\n..#.#....#\\n...###..#.\\n#....###.#\\n.......#..\\n##.##.....\\n.#.#......\\n.#....#...\\n\\nTile 1229:\\n##..###..#\\n#.......#.\\n..#..##..#\\n##..#.....\\n#.#..#..#.\\n.#..#.#.##\\n....#....#\\n#..#..#.##\\n....#....#\\n..##..####\\n\\nTile 1489:\\n#......#..\\n....#.....\\n#.....#..#\\n#.......#.\\n#.#..#..#.\\n#.........\\n#........#\\n#..#.#....\\n#.........\\n....####.#\\n\\nTile 2477:\\n#####.##.#\\n.###...###\\n#....#..##\\n.#.#..#..#\\n###.##...#\\n#........#\\n#..#..#...\\n.......#.#\\n#......###\\n##.##.##.#\\n\\nTile 2897:\\n##.##..#.#\\n#.......##\\n#.#..#.#..\\n..#...#..#\\n...##.#..#\\n..#.......\\n#.#..##..#\\n..#....#.#\\n#....#.#.#\\n#......###\\n\\nTile 2083:\\n..#...##.#\\n###.#.##..\\n....##....\\n#...#..#..\\n...##....#\\n#..#......\\n.#.##.....\\n..##..####\\n....###..#\\n.#...#.#..\\n\\nTile 1069:\\n..#.#.#..#\\n..#....#.#\\n.........#\\n##..#.....\\n#.....#...\\n..##......\\n#..#......\\n.##..#####\\n#.#....#..\\n.....#..#.\\n\\nTile 1427:\\n...####.##\\n.###......\\n.#..#.#..#\\n..#.###.##\\n.#..#.....\\n..##.#....\\n.#......#.\\n#....#...#\\n.......#..\\n#.#..###..\\n\\nTile 1429:\\n.##.#.#.#.\\n#..##....#\\n..#......#\\n...#....##\\n...#.##..#\\n..#.#.....\\n#....#..##\\n#..#.....#\\n.##....#..\\n##.#.#...#\\n\\nTile 2357:\\n#.##..#.##\\n.........#\\n#..#.#..##\\n#....#.#..\\n#........#\\n#...##....\\n#....#....\\n....##...#\\n#.#..##...\\n.###.#.#..\\n\\nTile 3181:\\n...#..####\\n........#.\\n#...#...##\\n#.#.....##\\n#.........\\n##...#....\\n#.##.....#\\n#....#...#\\n..#.#...##\\n#..###.##.\\n\\nTile 2887:\\n.#..#.###.\\n#.........\\n.#....#...\\n#........#\\n..#.##...#\\n.......##.\\n....#.#..#\\n#...###..#\\n.#...#..##\\n###...#..#\\n\\nTile 2837:\\n##.##..###\\n.......#.#\\n....#.#..#\\n.......##.\\n.....#....\\n#.#.##..#.\\n#.#..#...#\\n....#.##..\\n..#......#\\n...######.\\n\\nTile 2539:\\n.###....#.\\n.......##.\\n##.##...#.\\n.###.....#\\n###..##...\\n.##....#.#\\n........#.\\n..........\\n.#........\\n#.....#...\\n\\nTile 2399:\\n##.#..##..\\n#...#.#..#\\n.##......#\\n###..##...\\n.#....#...\\n....#.#...\\n.....###.#\\n#.......##\\n#......#..\\n.##.##....\\n\\nTile 2383:\\n#..##.###.\\n.#.......#\\n#.#..#....\\n#..#.#...#\\n#.#.#.....\\n......#...\\n#....#..#.\\n..#.#.#..#\\n#..#.##..#\\n.#.##...##\\n\\nTile 2521:\\n.#..#.##.#\\n#........#\\n#.#...#.##\\n#........#\\n##.#.#..##\\n#..######.\\n.##..##..#\\n.#.....##.\\n.#.#......\\n..#..#####\\n\\nTile 1823:\\n#.#...##..\\n#..#.....#\\n.##......#\\n#...###.#.\\n......#...\\n.....##...\\n#....##.#.\\n#.........\\n#..#.....#\\n#.#.##.#..\\n\\nTile 1301:\\n####.#.###\\n#.##...##.\\n..#...####\\n..........\\n#....#..##\\n....#..#..\\n#..#.#.#..\\n...#...#..\\n###..###.#\\n.##..#.#.#\\n\\nTile 1289:\\n#.###....#\\n#.#.....#.\\n#.....##.#\\n#........#\\n.##.#...#.\\n.###..#...\\n..#.......\\n.##...#...\\n...#....##\\n.###....#.\\n\\nTile 3823:\\n#.##.##..#\\n.........#\\n#...##.#.#\\n.#.##.....\\n##.....#..\\n.#..#....#\\n#...#...##\\n#.........\\n#........#\\n.#.##.####\\n\\nTile 2411:\\n#.####.###\\n#....#.###\\n..##.....#\\n#.#...#..#\\n##...#.#.#\\n##.##...##\\n#.......#.\\n#...##...#\\n.........#\\n###.##.##.\\n\\nTile 1039:\\n.......#.#\\n..#.......\\n........#.\\n.##...####\\n##...#..##\\n.#.......#\\n..#.#.....\\n...#.....#\\n.........#\\n..#...#...\\n\\nTile 1609:\\n.##..#..##\\n##.###.###\\n.#.....#..\\n#........#\\n...#...#..\\n#.......##\\n...#..###.\\n#.##.##.##\\n#.......#.\\n...#.#....\\n\\nTile 2017:\\n##..#..#..\\n....###...\\n..##......\\n#...#.###.\\n#....#....\\n#.#.......\\n#..#.#....\\n###..##..#\\n###.#....#\\n#.#.#.#.##\\n\\nTile 3301:\\n.#####...#\\n...##.....\\n#..###...#\\n#....#...#\\n...#.#...#\\n#......#.#\\n#........#\\n...#......\\n.......#.#\\n..#####...\\n\\nTile 3733:\\n#####.##.#\\n#.##..#..#\\n#....#..##\\n#....#....\\n.....##...\\n#......#..\\n#....##.##\\n.........#\\n.#..#....#\\n.....##...\\n\\nTile 2309:\\n#..##.##..\\n...#.#.#.#\\n#..##.#..#\\n....##....\\n##....#..#\\n##..##.#.#\\n.###....#.\\n###...#.##\\n....#.....\\n.#.#.###.#\\n\\nTile 2879:\\n#.##.##...\\n...#.....#\\n...##.####\\n...#.#.#.#\\n#.###.##.#\\n.....#...#\\n#.....#.#.\\n#..#.#..##\\n.....###..\\n.##..#.###\\n\\nTile 3583:\\n.#.##...#.\\n..##...##.\\n#.#....##.\\n#.##...#.#\\n.....#..##\\n#####.....\\n..###..#..\\n..##..#.#.\\n.##....##.\\n##.##...#.\\n\\nTile 2153:\\n##...####.\\n..#.#...#.\\n##..##..#.\\n.#..#.#...\\n..........\\n..#...#...\\n#....#.###\\n...##....#\\n#.##.....#\\n#...#....#\\n\\nTile 3581:\\n#...##.###\\n..####..##\\n...##....#\\n.#..#.....\\n.##......#\\n#.#......#\\n...###.#.#\\n###.#.....\\n#.##.##...\\n#.#.....#.\\n\\nTile 2927:\\n##.#.#..##\\n..........\\n..........\\n.....#....\\n#..#..#..#\\n....#.#...\\n.#...#...#\\n.#...##..#\\n......#...\\n###.#.##.#\\n\\nTile 2861:\\n.#..#.###.\\n#..#....##\\n#.#.#..#..\\n........#.\\n..#.#.#...\\n...##....#\\n#..###.#.#\\n#..#..##..\\n..#.#....#\\n.#..####.#\\n\\nTile 2851:\\n#.#....#..\\n#........#\\n.#........\\n#..##.#...\\n..##....##\\n.#.......#\\n#.........\\n......#..#\\n..........\\n###.##..##\\n\\nTile 3319:\\n...##....#\\n#.......##\\n##.#..#...\\n.##....###\\n#...#...##\\n..#.......\\n.###..#..#\\n#...#.....\\n.........#\\n.#..##.#..\\n\\nTile 2143:\\n...#......\\n##.#...#.#\\n##.......#\\n#.##..#..#\\n..#...#..#\\n.#.#...#..\\n..#....#..\\n......#...\\n#.#.......\\n#..#..#.##\\n\\nTile 1093:\\n#.#...#.#.\\n##..#.....\\n.........#\\n##..#...##\\n##..#..#..\\n##..##....\\n##.##....#\\n#.#....#..\\n.#.#..#..#\\n..#.##.###\\n\\nTile 3391:\\n#....#..#.\\n#...#..#..\\n##....##..\\n..#.#..#.#\\n#####...##\\n..#..#...#\\n#.#......#\\n.#...#....\\n.....##.##\\n.#.#.#....\\n\\nTile 3917:\\n...##.#...\\n#..#.....#\\n#..##.###.\\n#.#..#..#.\\n.####..#.#\\n..##.#.###\\n#.#..##.#.\\n#....##..#\\n..###.#..#\\n..##.####.\\n\\nTile 1847:\\n#.##.#..#.\\n.#.##.....\\n#.#..#..#.\\n#....#.#..\\n.#.......#\\n..#..#.#.#\\n..##....##\\n#.#.##....\\n##.#..#...\\n.##.##.###\\n\\nTile 1667:\\n.##..#..#.\\n###....##.\\n#.####.#.#\\n...#.....#\\n.#.#..##.#\\n.#..#....#\\n#.##.#...#\\n#.#.#.....\\n...###...#\\n#.#..####.\\n\\nTile 1217:\\n...#####..\\n....#..#.#\\n..#...####\\n#........#\\n#........#\\n###..#...#\\n.##.##...#\\n.#.......#\\n.....##...\\n.##.#.###.\\n\\nTile 3467:\\n###.##....\\n.......#.#\\n.....#..##\\n##..#....#\\n....#..#..\\n....#..###\\n#......###\\n#.##...#..\\n..#.....##\\n...#.#..#.\\n\\nTile 1297:\\n..###..##.\\n#....#.#.#\\n.........#\\n###.#....#\\n#......#.#\\n##....##..\\n#.#.##..##\\n.##.....#.\\n.....#...#\\n.#.##.....\\n\\nTile 3877:\\n..###.#...\\n##..#....#\\n###.##..##\\n.#..######\\n....#.#..#\\n.#.......#\\n#...##.#..\\n..#..#....\\n#.##.##..#\\n#..##.#.#.\\n\\nTile 2389:\\n##...#####\\n##..#.#..#\\n#..#.....#\\n......#..#\\n.#........\\n#....##.#.\\n.##....#..\\n#.....#.#.\\n#........#\\n...##.#...\\n\\nTile 3361:\\n.....#.#..\\n.........#\\n...#....#.\\n##.##.....\\n#....##...\\n##...#...#\\n#...####.#\\n..##.....#\\n...#...#.#\\n###.####..\\n\\nTile 2207:\\n###.##..#.\\n#..###....\\n......#..#\\n#........#\\n##....##.#\\n........#.\\n...#..#...\\n#....#..##\\n...####...\\n##........\\n\\nTile 1997:\\n..#.#..###\\n......#...\\n...#...#..\\n..#......#\\n.........#\\n#....#...#\\n....#..#..\\n.....#....\\n#........#\\n#....#####\\n\\nTile 1063:\\n#.#...##..\\n.##..#....\\n#.#..##...\\n..#...####\\n......##..\\n#...#.#...\\n####......\\n.#.....#..\\n.#.......#\\n#...####..\\n\\nTile 3109:\\n...###.###\\n.......#..\\n......##.#\\n.#......##\\n#..##..#..\\n##..#..#.#\\n.....##.##\\n#....#.#.#\\n.....###..\\n####....#.\\n\\nTile 1097:\\n#####.##..\\n.#...#.##.\\n..#..#....\\n#..#....#.\\n#.#....#.#\\n.#...#.#.#\\n#....#..##\\n#....#...#\\n...#...#..\\n...#.#..#.\\n\\nTile 1117:\\n#..##.#.##\\n#.#.....#.\\n...#.#...#\\n#.#..##.#.\\n#.###..#..\\n#....#...#\\n....#.....\\n.#...#...#\\n..##..#..#\\n.#.#.....#\\n\\nTile 2551:\\n.#..#.####\\n#...#.....\\n##....##.#\\n#....#....\\n.##.....#.\\n.#...#....\\n#....#.#..\\n......#...\\n##.#.#....\\n.#....#..#\\n\\nTile 2677:\\n.#.####..#\\n#.#.....##\\n...#.#....\\n.#...#...#\\n.##...#..#\\n##....#...\\n...##.#..#\\n##...#..##\\n##...#...#\\n##...###.#\\n\\nTile 1367:\\n.#.##...##\\n#.#..#....\\n....##.#..\\n.........#\\n.#....##.#\\n....#.##..\\n....##...#\\n#.#..#...#\\n#.#.#..##.\\n....#.##.#\\n\\nTile 1913:\\n.##..#..##\\n.#...##.##\\n..#.....#.\\n......#...\\n...#...##.\\n...####...\\n..#..#....\\n....#.#...\\n#.........\\n.####.####\\n\\nTile 1709:\\n.#....##..\\n..#...#.##\\n.#......#.\\n...#....##\\n.#.##...#.\\n.#.#.#.###\\n.........#\\n#.......#.\\n##....#...\\n..#.##.###\\n\\nTile 1459:\\n.##..#.#..\\n...##.....\\n.#.#...###\\n...#.....#\\n##..#..#.#\\n.........#\\n.........#\\n....#...#.\\n#..#......\\n...#.#...#\\n\\nTile 2137:\\n##..#....#\\n#.#####.#.\\n......#..#\\n#.#......#\\n#...#..#.#\\n#..#..#.##\\n###..####.\\n.##..#...#\\n#.#.......\\n.##.##....\\n\\nTile 2659:\\n#.##..#...\\n#...##....\\n#...#...#.\\n#........#\\n#....#....\\n.......##.\\n..#.....#.\\n#.#..##..#\\n#......#..\\n..###.#..#\\n\\nTile 2657:\\n####...##.\\n........#.\\n..####..#.\\n..#.......\\n....#.#..#\\n#.#.#.#...\\n...#....#.\\n###...####\\n........##\\n##.#.#.#..\\n\\nTile 2099:\\n#.###.##.#\\n#..#...###\\n..#......#\\n.#...#.#..\\n...##.....\\n###.##...#\\n..##..#...\\n...#......\\n..#.#.#.#.\\n..#.##....\\n\\nTile 3209:\\n##.###....\\n...#....#.\\n#..##..##.\\n##.##.#...\\n.#..#....#\\n#..#.#...#\\n.#...#...#\\n#..#......\\n...#......\\n..#.#.###.\\n\\nTile 1879:\\n#.##.#.##.\\n.#.##.#...\\n#..#.#....\\n#.....###.\\n#..##.....\\n....##....\\n#..#..#...\\n#.........\\n..#.##....\\n...####.##\\n\\nTile 1621:\\n###....#.#\\n.........#\\n.#....##..\\n.....#.#..\\n.#...#.#..\\n##...####.\\n.....#...#\\n#.........\\n....#.#..#\\n.####...##\\n\\nTile 3931:\\n.####.###.\\n#.##.....#\\n#..#.#...#\\n..#......#\\n###..#.##.\\n....##....\\n#..#......\\n..........\\n.#.....#.#\\n#.##.#..##\\n\\nTile 2777:\\n##....####\\n.#.#......\\n##......#.\\n#.......##\\n.#..#.#..#\\n##.#...#.#\\n##.#.....#\\n...##....#\\n#..#.#....\\n#.#..#....\\n\\nTile 2909:\\n#......##.\\n#........#\\n..#.#.###.\\n.......#.#\\n........##\\n....#.....\\n......#...\\n#........#\\n#.......#.\\n......#.#.\\n\\nTile 1777:\\n.##...####\\n.##.....#.\\n#..#.#..#.\\n.#......##\\n.#....#..#\\n#.###.#...\\n.#.#......\\n###..#...#\\n.#.......#\\n..#...#.##\\n\\nTile 3251:\\n...#.###..\\n#....##..#\\n#....#..#.\\n#....#..##\\n.....#...#\\n#.......##\\n.......#.#\\n#....#..#.\\n#...##...#\\n.#.#.....#\\n\\nTile 1601:\\n#....#....\\n.##.##...#\\n.........#\\n#.........\\n.#.....###\\n#..##.#.#.\\n#......#.#\\n.#..#.#..#\\n.#...#....\\n.#.#.#..##\\n\\nTile 1283:\\n#####.#..#\\n..#....##.\\n#..#......\\n.#....##..\\n.#.#.....#\\n##......##\\n#.....##..\\n##..#....#\\n#........#\\n.#.###..##\\n\\nTile 3079:\\n..#.##....\\n.......#.#\\n..#...##.#\\n..###...#.\\n#..#.....#\\n..##.....#\\n..#..#.#..\\n.##.#.#..#\\n#..#......\\n.#.##..#..\\n\\nTile 3793:\\n##..#####.\\n##...#....\\n##....#...\\n..........\\n#.........\\n.#....#..#\\n#....#..#.\\n#....#....\\n###..##...\\n#.###.##..\\n\\nTile 3037:\\n.##.#..##.\\n#..#.###..\\n.#....#...\\n...####..#\\n..#.###..#\\n#.#..#....\\n.##......#\\n#.....#..#\\n#...#.#...\\n##.######.\\n\\nTile 1669:\\n##.#......\\n.#......#.\\n##.#...#.#\\n#.#.#.#..#\\n##........\\n##....#...\\n#.#.....#.\\n..........\\n.........#\\n####...###\\n\\nTile 1087:\\n.###.#.#.#\\n###.......\\n.....#...#\\n##.....#..\\n.#.#......\\n...#......\\n#...#..#.#\\n#........#\\n#..#....##\\n.#...#####\\n\\nTile 2617:\\n.##..#.#..\\n.....#...#\\n..#.#.....\\n....#...##\\n####...##.\\n..##......\\n...#...#..\\n..#.#.##.#\\n#.#.......\\n###.##....\\n\\nTile 3943:\\n.#.####..#\\n.........#\\n#.........\\n.#........\\n###..#....\\n...#....#.\\n#...#.#...\\n.#......#.\\n...##.#...\\n..##....#.\\n\\nTile 2273:\\n##.#.#...#\\n...##.#..#\\n..##......\\n..#.....#.\\n#......#..\\n...#....#.\\n.##....#.#\\n...#.#.#..\\n#..###.#.#\\n###.#..##.\\n\\nTile 3803:\\n##....#..#\\n##...#.#.#\\n..##....#.\\n#...#..###\\n....#.....\\n....#.####\\n#.....##..\\n##....###.\\n#....#..##\\n#####.##..\\n\\nTile 1697:\\n....####.#\\n#....#.#.#\\n#.....#.##\\n#......#..\\n#.#...#...\\n#....#.#..\\n.##....#..\\n##...#.#.#\\n#.#..#..#.\\n.......#..\\n\\nTile 3343:\\n######.#..\\n#....##...\\n#.#.##...#\\n#...####..\\n#......#..\\n##.#..##.#\\n#.....##.#\\n..##.##..#\\n..#......#\\n###..##...\\n\\nTile 1549:\\n#.##.###.#\\n.....###..\\n...#.###..\\n##...##..#\\n#.#.......\\n#.........\\n....#....#\\n..#.....##\\n.....##...\\n#.#.##.##.\\n\\nTile 1619:\\n..###.###.\\n##.###...#\\n#...##...#\\n....##...#\\n..##..#.#.\\n#...#.#..#\\n#.......##\\n#..#.....#\\n....##...#\\n.#...#.#..\\n\\nTile 2971:\\n..##.###..\\n#.....#..#\\n#..#.....#\\n#..#...#.#\\n...#......\\n#......###\\n#....####.\\n.#....#...\\n...#.....#\\n#...###..#\\n\\nTile 3617:\\n####...#..\\n.......#.#\\n.#.#......\\n#..##..###\\n.##.......\\n.#....#..#\\n.....#.###\\n....##.#..\\n#....#...#\\n.#.##.####\\n\\nTile 1543:\\n......#.##\\n#......#.#\\n##.....###\\n#...#...##\\n#.#....#..\\n.#........\\n#....#....\\n......##..\\n##...#..#.\\n#...#.##.#\\n\\nTile 2111:\\n####..#...\\n#..#...#.#\\n#.#.#.##..\\n##........\\n#...#..#..\\n#.##..#...\\n#.........\\n##.#..#...\\n.##.#.###.\\n#.##.####.\\n\\nTile 1499:\\n#.####.#..\\n..##.#...#\\n#..#......\\n....#.....\\n.#..##...#\\n#.#...##.#\\n...#.##.##\\n###..#.###\\n.....#....\\n...##.##.#\\n\\nTile 3461:\\n.#####.#.#\\n#.........\\n..#..#....\\n..#......#\\n###...####\\n...#.##..#\\n.#........\\n#..#....##\\n#...#...##\\n####.....#\\n\\nTile 1483:\\n.....#.##.\\n##........\\n#.#.....#.\\n##......#.\\n#.....#...\\n..#.......\\n##....#..#\\n##........\\n..#...####\\n......###.\\n\\nTile 2467:\\n###.#.#...\\n#.#.....#.\\n#...#....#\\n#....#...#\\n...#..#..#\\n##...#....\\n#.#.###...\\n#..##..#.#\\n#.........\\n..######.#\\n\\nTile 3631:\\n###.#...##\\n.........#\\n#.##..#...\\n...##..#..\\n##..#.#..#\\n#..#.#....\\n......#.#.\\n..........\\n#......##.\\n..##.#....\\n\\nTile 3767:\\n#...#.#..#\\n..........\\n#......#.#\\n#...#.#..#\\n##.......#\\n..#......#\\n........#.\\n##...##.##\\n#........#\\n....#....#\\n\\nTile 2381:\\n.#.#.##...\\n#.##.#....\\n...##.#.##\\n#.....#.#.\\n#......#..\\n...#....#.\\n......####\\n#.#.#.....\\n##...##..#\\n...#...#.#\\n\\nTile 2687:\\n###...####\\n.....#.###\\n..#.#.#.#.\\n##..#...##\\n#.###...#.\\n..#.##..##\\n##.....#..\\n##..#..#.#\\n#...#..#.#\\n#.#..###.#\\n\\nTile 3719:\\n..####.#..\\n.#......##\\n#......###\\n##....###.\\n.#...##.##\\n.#.....#.#\\n..##..#.#.\\n#......###\\n...#...#..\\n......###.\\n\\nTile 3259:\\n######.#.#\\n#..#......\\n.........#\\n#.......#.\\n..##...#..\\n##...##.##\\n#......#.#\\n##.......#\\n#.......#.\\n#..##.#.##\\n\\nTile 3643:\\n###..#..##\\n#.#.#.#...\\n..##....#.\\n##....##..\\n..##......\\n#..#..#.##\\n......##..\\n#.......#.\\n#...##..##\\n#.#..#.###\\n\\nTile 2767:\\n####....##\\n..........\\n.........#\\n..#....#.#\\n#......###\\n#.##..#..#\\n#.#..#.#..\\n...#.#...#\\n#..####..#\\n##..#####.\\n\\nTile 2333:\\n###..#.##.\\n..##.....#\\n..#.#..##.\\n#.....#..#\\n....#.#...\\n##...#....\\n#.#......#\\n###.......\\n#...#....#\\n..#..#..##\\n\\nTile 2857:\\n..#..##..#\\n#.....#...\\n##....#..#\\n#...##....\\n....#.#..#\\n#.#.##....\\n#...##..#.\\n.#...##..#\\n#...#.#...\\n.#.###.#.#\\n\\nTile 1193:\\n#.#..#.#.#\\n##..####..\\n###..##.#.\\n#.......##\\n###....##.\\n...#...#..\\n#...#....#\\n##.......#\\n#####.##.#\\n..#####.##\\n\\nTile 2351:\\n.##..#####\\n#.........\\n.#..#.....\\n#.##.#...#\\n..#.#..#..\\n#.###....#\\n###..#....\\n##.......#\\n#...#..#..\\n.....#...#\\n\\nTile 1129:\\n..##..####\\n.....##..#\\n##........\\n.........#\\n#...#.....\\n....#...##\\n..#....##.\\n..#.....#.\\n..#.......\\n.##.###...\\n\\nTile 3433:\\n.##..#....\\n...###.###\\n.......##.\\n#..#.#.#.#\\n........#.\\n...###...#\\n...#......\\n.##...###.\\n.#.#..#..#\\n##..##..#.\\n\\nTile 1091:\\n###.####..\\n.#..#.....\\n##.......#\\n#.#...#...\\n...##.....\\n#..###...#\\n..##...#.#\\n#...#..###\\n.....#...#\\n###.#....#\\n\\nTile 3407:\\n.####.#...\\n.#..#.#..#\\n..#..#....\\n......#..#\\n.........#\\n#...##...#\\n...#.###.#\\n#....#...#\\n#.....###.\\n.#.#.#.#..\\n\\nTile 2591:\\n.##..##...\\n..#...##.#\\n...#..####\\n.#....#.##\\n#...##.#..\\n#...#....#\\n#..#.....#\\n#..#.....#\\n..........\\n.#.###.#.#\\n\\nTile 3613:\\n###.######\\n.#...##..#\\n#.##.....#\\n#.........\\n#...#.....\\n###.....##\\n.#.##.#..#\\n##..#...##\\n####......\\n..#...#...\\n\\nTile 3967:\\n#.#..#.#..\\n#..#.....#\\n...##...#.\\n.#.##...#.\\n#####..#.#\\n..##.#..#.\\n..........\\n#.#.#..#.#\\n#.#.....##\\n#..#####.#\\n\\nTile 1999:\\n#.#.#..##.\\n####.##.##\\n..##...#.#\\n....#....#\\n.##.#.#...\\n..........\\n.......##.\\n#.#......#\\n##...#.#.#\\n.#.#.#.#..\\n\\nTile 2689:\\n.#..#####.\\n.#........\\n..#....#.#\\n#......#.#\\n.#.#..#.##\\n###...#..#\\n...#...#.#\\n##......##\\n......##.#\\n.##.#..##.\\n\\nTile 3533:\\n.####.#...\\n#........#\\n#......#..\\n.........#\\n#..#.##..#\\n###....#.#\\n...##..#..\\n..#.....#.\\n#...#..###\\n..###.##.#\\n\\nTile 2267:\\n#.##...#.#\\n#....#....\\n.#.#.##...\\n.#....#.##\\n..#.#.....\\n.##.......\\n##.....#..\\n####....#.\\n......#..#\\n#..##..#.#\\n\\nTile 2297:\\n###..##...\\n#..##..##.\\n..#....#.#\\n#.#.##...#\\n..#.##..#.\\n...##...#.\\n#...#.....\\n.....#.#.#\\n#..#....#.\\n.###..##..\\n\\nTile 2711:\\n##..##...#\\n...##....#\\n...#..#.#.\\n#........#\\n...#.....#\\n........##\\n##....##..\\n#.##.....#\\n#.###.....\\n###...#..#\\n\\nTile 1931:\\n.###...###\\n......#.##\\n....##..##\\n#...#...#.\\n..#..##.#.\\n#.....#..#\\n#...#....#\\n#........#\\n...#..#.#.\\n#.##..###.\\n\\nTile 1787:\\n#...##..##\\n..#.......\\n#..#.#.#..\\n...#..#..#\\n.##.#..###\\n#.#.#.....\\n..........\\n....##...#\\n..........\\n.#.#...#..\\n\\nTile 2549:\\n##.#...###\\n.....#...#\\n#......###\\n##.###....\\n#..#....#.\\n##.......#\\n.#........\\n..###...##\\n##..##...#\\n#.##...#.#\\n\\nTile 2789:\\n#.#.#.#.##\\n#...#.##..\\n.##...#.##\\n#.##.#....\\n...#......\\n###.......\\n#.......##\\n#.#...#..#\\n..#.#....#\\n.##.#..#..\\n\\nTile 2707:\\n#..#.#...#\\n#.#.#.#...\\n...#..#..#\\n##.#.....#\\n#....#.##.\\n.....#...#\\n#.....#...\\n....#.#...\\n#..###...#\\n##..##.###\\n\\nTile 3313:\\n###.#..#..\\n.#....#..#\\n...#.....#\\n....#..###\\n....#..#..\\n#..#.#....\\n##.#..##..\\n..#...#.##\\n##..##....\\n.##.###.#.\\n\\nTile 1607:\\n..#...###.\\n#.....#...\\n#.......##\\n#.....#...\\n###.#.#..#\\n#.#.....#.\\n#..#...###\\n.........#\\n..#.......\\n##.#.#####\\n\\nTile 3889:\\n###.#...##\\n##.......#\\n....#..#..\\n#.#......#\\n.##......#\\n#...##....\\n#....##..#\\n.......#..\\n#...#...#.\\n##.#####.#\\n\\nTile 3821:\\n..###.##..\\n........##\\n#..##..#.#\\n.##.#..#.#\\n#....##.##\\n#.....##.#\\n#.....#..#\\n##........\\n#.#..#....\\n##.#.###..\\n\\nTile 3347:\\n.##..#...#\\n#.#...#...\\n#..#..###.\\n.#......#.\\n#..###.##.\\n......#...\\n##..##.#..\\n.#.###.#..\\n........#.\\n#.###..##.\\n\\nTile 1907:\\n.#.##...#.\\n#......#..\\n...#......\\n##.......#\\n.#.....#..\\n.#.....###\\n........##\\n.##.#..#.#\\n##.....#..\\n#.########\\n\\nTile 2903:\\n##.....#.#\\n....#.##..\\n...#.....#\\n.#..#####.\\n.....##.#.\\n.#......#.\\n..........\\n#..#.....#\\n....#...##\\n.#..##..##\\n\\nTile 1399:\\n#....###.#\\n..#..#####\\n.#....##.#\\n...#...#..\\n#..##.#..#\\n.....#....\\n..#......#\\n........##\\n#..###....\\n#..###.###\\n\\nTile 1993:\\n###.##..#.\\n##........\\n##..#..##.\\n.........#\\n.........#\\n#..##.#.#.\\n.##.......\\n#..#.....#\\n#.##.#..##\\n##.#.#..#.\\n\\nTile 3671:\\n...##.#..#\\n##....##.#\\n#..#....##\\n#..#...#.#\\n.#.#.#...#\\n........##\\n..........\\n##.......#\\n#.##....##\\n.#..#..##.\\n\\nTile 3167:\\n###..##..#\\n.....##...\\n.......#..\\n#...#.#..#\\n.#.##.#..#\\n###....##.\\n##........\\n#.........\\n..#..#....\\n.....##.#.\\n\\nTile 1109:\\n..#...#..#\\n#..#.#.#..\\n.#........\\n.......#.#\\n#..#..#...\\n.........#\\n##.#......\\n........##\\n#.#.##..#.\\n..#..#.#..\\n\\nTile 3089:\\n.###.#####\\n#..#..#.#.\\n#......#.#\\n...#.....#\\n.........#\\n.#.#...#..\\n.#..#.#.##\\n.......###\\n.#.#..#.##\\n..#..###..\\n\\nTile 1051:\\n.....##..#\\n#...##.#..\\n..........\\n..........\\n#.#.##..#.\\n...##...##\\n.##.#####.\\n.#...##..#\\n..#.#...#.\\n#.......##\\n\\nTile 2113:\\n#...###.##\\n.#.....##.\\n...#....##\\n...##..#..\\n#....#...#\\n..##.#....\\n##....#.#.\\n..#...###.\\n.....#.#.#\\n.##......#\\n\\nTile 2131:\\n#....#####\\n#.#.......\\n.###.#..##\\n###.##.#..\\n#...#.....\\n.#.#.....#\\n###....#..\\n..#.....##\\n.#...##.##\\n#..###....\\n\";","export default \"32/31\\n2/2\\n0/43\\n45/15\\n33/24\\n20/20\\n14/42\\n2/35\\n50/27\\n2/17\\n5/45\\n3/14\\n26/1\\n33/38\\n29/6\\n50/32\\n9/48\\n36/34\\n33/50\\n37/35\\n12/12\\n26/13\\n19/4\\n5/5\\n14/46\\n17/29\\n45/43\\n5/0\\n18/18\\n41/22\\n50/3\\n4/4\\n17/1\\n40/7\\n19/0\\n33/7\\n22/48\\n9/14\\n50/43\\n26/29\\n19/33\\n46/31\\n3/16\\n29/46\\n16/0\\n34/17\\n31/7\\n5/27\\n7/4\\n49/49\\n14/21\\n50/9\\n14/44\\n29/29\\n13/38\\n31/11\";","export default \"^WSESESSENENESSEENNW(NWWNWW(SESNWN|)NENENWWNEENEESESENNEENWNWWS(S|E|WNNWNWSWSWNNENNWNWSWSE(SSSWNWN(WWNNNWSWSESWWSWSWNWSWSEESSEENN(WSNE|)ESSEENWNENWN(WSWENE|)EESESSENEES(WSWWSSS(WNN(NNN|WSSSSWWNENWNN(ESNW|)WSSWWWWSWNNEEEENWWWNENWWWSS(ENSW|)WSSE(N|SSESWWSSWSSWWSESENESSSSWNWWWSWSSSEESWSWWN(NNWNENWNNNESSENEN(ESEEWWNW|)NNWWS(ESNW|)WWSSWSESSSWSWNNENWWNENWNWWNNWWWWSWSSWWWWNENWWSSSESSSSSWSSWWWNENWWSWWSSSSESENESSSSENENWNENESENENENNEENNWSWW(NNNES(EEEESSENEEENE(SESEEE(NW(NEWS|)W|SSSSESSWWN(WWWNWNENWNN(WSSWSESWWNWWN(WWSESSSSSEEENESESWSWNWSSWWWNEN(ESNW|)WNNNNW(NEWS|)SSSSWSSE(SEEEESWSESWSESSENNNNNESESESWW(N|SESSW(N|WSESWSSESWWNWSSEESSWSESWSEENNEENWNEEEESSWW(NEWS|)SWSEEESWWWW(WWWWWWWNNNNWNWSSSWSWS(EEEN(W|NN)|WNWWNENWNEEES(WSEWNE|)ENNNWWWWS(WSSWWNNNE(ENENNNWSWNWSSE(SWWSSSWSSSS(ENEN(WNSE|)EESS(W(W|N)|EE)|WNNWWSS(ENSW|)WNNNNNENNNNW(NEESSEE(SSWS(E|SW(NNNEWSSS|)S(WNSE|)E)|NE(NWW(NNENWWNNWNNNENEEEESWSSWNNWSWSESES(W|ESENEEEESEENNNWNNEEESESEENN(ESSSSWSWWSSWNW(WSSWSSS(ENNEESS(WNSE|)EES(WW|ENNNE(NWNN(EE(S(W|E(SSWNSENN|)N)|N(N|W))|WSSSSWNNWWN(SEESSEWNNWWN|))|SSSSW(W|SEE(NEWS|)SSWW(NE|SEE))))|WNNNNENWWSWNW(NEEWWS|)SWNWSW)|NNNN(NWES|)ESS(EEN(W|E)|S))|W(WNWWNWNWSS(WWSSE(SWS(EESNWW|)WNWSW(W|NNENE(S|NWNENWNENWNN(EES(SSE(SWSEWNEN|)EEEE(NW(NEN(W|E(N|SS))|W)|S(S|W))|W)|WWWSSWSWSWS(EENESENE(NW(NNESNWSS|)W|S)|SW(SSSSSESSS(WNN|EN)|NNNNNEE(SWSNEN|)NNE(EENNE(SSEWNN|)NNWNENEENEENNNNNWNWNWSSESWSWSEES(WSWWN(E|NNNNNNNE(NNWNEEEEESSENESENENWNWNNNEESS(WNSE|)SENENNW(S|NNENNENENNWWWNWWWNNWSSSSSSESEE(SSWNWSWNNWNWWWWNNEENNNNENE(SSSW(SESWS(WW|E)|N)|ENEEENNWNWSWS(EE|WSWWSWSSWSESWWWNWSWSWSW(SSSEENEEE(EEESE(N|ESWSSEE(NWES|)SWWS(EESEWNWW|)WWNENNWN(E|NWWSESWWNW(NEWS|)WWSW(N|SSSESWSSENENNNWNEE(NWES|)SES(ENE(S|N(E|WW))|SW(SSWSWWSESSSENNNESSE(SSSWWSEESS(SSWSWWSS(ENESENNE(WSSWNWESENNE|)|W(SSENSWNN|)NNNNENN(EESWS(SWEN|)E|NNN(EENSWW|)W(NNN|SSSS)))|E)|NNN(W|N(N|E)))|N)))))|NWNW(NEESNWWS|)SW(WSNE|)N)|NNENENENNWNEESENNWWNWSWNNW(SSSESWSS(ENEWSW|)S|NENESEEEENESEEEE(SWSWNWSS(E|WNW(WWN(WW|EEE)|SS(E|SSWS(WNSE|)S)))|NWWWNNWWS(E|WSWWNWWNW(SS|NENWNENNW(S|NENENNWSW(S|NNEENWWNNNNNEEENESENNWWWSWNNEENNWWS(E|W(SSS|NNENENNNWNNENWNNW(NEESSEESENNN(WWSEWNEE|)ESENESSWWSEESSEEENENWNWNW(SSESWENWNN|)NEEEESS(WNWESE|)ENNESSESENEENEN(EESSSEEEESSWWSSENESEENWNENNEESEEENNNWN(WSWNWWSS(W(SS|WWNEN(ESNW|)WWWSSEN(SWNNEEWWSSEN|))|E(EEESWENWWW|)N)|EEEEEEESESENN(W|EESEESSWSWNW(N(EE|N)|SWNWSSWSESWSSSWWSEEESSWWWN(WSWNNNNE(SS|ENWNNWSWWSE(SSWSSE(SSEEESWSWSEENESSWSESESWWSSWWNWNEE(S|N(NNWWNWNWSWWWWSEEESENESEESWWWWSESE(SSE(N|SENESSENNENESEESSESSEESWWWNNWWW(NEN(ESNW|)W|SEESSSSSEESSWSEENENENWNENWN(WSS(SS|WNNWSS)|ENENWNWNEEEESESSSWW(SW(N|SEESEEENENNNWSSW(W(SEWN|)W|NNNNENWWNEEEESENENWWWWWNWSWSWWNENNNWWSWWSEE(ENSW|)SSWW(SS|WN(EE|NWNENEENNNEESES(WWNSEE|)EENNESESWSS(WNWSSNNESE|)EES(W|EEEENESEESWSEEESWSWNWSSWSSWSESWSSSSESESESWWWN(WSSESENESSSES(WWNNWW(SESNWN|)NWNNWS(SSEWNN|)WNWNEEENWWWWWNNWN(EESENENENNNNNN(EEE(SSWSW(NNEWSS|)SSSE(NN|SWWSEES(SEWN|)WWW(WW|N))|N(W|NE(NWES|)SS))|W(SWEN|)N)|WW(NEWS|)SWSWSWWSWNWSSWNWSWNWWSWNNENENEENWNENE(SSSE(NEWS|)SWWWS(W|EE)|NNWSWSWWWNNNWWNWSSWNWWNENNES(EENN(W(NN(ESNW|)NWSSSWNWSSWNWWWSWNWNNWWWSSWSSSSSENNNEN(W|NNESSESESESWSEENENWN(W|E(NWES|)E(E|SSSEESSSWSSWSSENEENESSWWSSSENEN(ENE(NENWW(S|NNNE(SSEE(ENWWEESW|)S|NNWSWWSSS(WS|ENN)))|SSSW(WSWSEEEN(ESENN(E(N|EESESENN(ESENN(W|ENES(SWSSWSW(WWWWSWN(NNESEWNWSS|)WWWSWNWWSESESSEEENWWNEE(NWES|)EES(ENNEWSSW|)WSSWWWWWSESSENEN(W|ESSWSWSEE(NESNWS|)SWWWWSESEE(SWWWNWSWWWS(EE|WNNENESENENNNNWSWNNEE(ESSSEN|NNNENWNWNWNNE(S|NWNWWNEN(ESNW|)WWWSWNWNWNNNWWSSWSWNWSSEEEE(N(NN|W)|ESWWSWNWSSSS(WNNNW(WSS(WNNW|EN)|N(NNNWNENENWNNNEE(SWSESSE(SWWEEN|)NENEN(WWSNEE|)ENWNNE(N|SE(N|SSESEEN(E(SE(NESNWS|)SWS(E|SWWSS(ENESNWSW|)WNWNNE(S|N(WNWSW|EESW)))|N)|W)))|NNWWNEENWWWSSS(EE|WWNWNNWSSSWWSEEE(EEESSWSESWSWNNWNEN(E|WWW(SESWENWN|)WWNNWWNNWNNW(SWSSSSSES(W|E(ENENWW(S|WNN(ESNW|)N)|S))|NENWNENNENWWS(S|WNW(NEEEN(WWW|ESENNNEENENNWSWNWNENWWNEENNWWNNN(EESS(WNSE|)EESSSW(SSENEENNEESEENWNNWN(WSS(E|WW(NEWS|)SS)|NNEESS(WNSE|)SSENNEESSSSWN(WSSWSSWSWNWWW(NEEEN(WN|ES)|SSESEN(NWES|)EEEEN(W|NEN(ESEESSESWSWSEEEEESESWSSESENESES(ENNWNN(EES(S|W)|WSW(W|NNNNE(SS|ENNEEES(SWWNEWSEEN|)ENN(ESSE(E|S)|WNNWWWNNWN(WSSWSWWWSS(EEEN(ENE(N|SS(EEN(ESNW|)W|SSWWN(ENSW|)WSS(ESNW|)WNW(NE|SW)))|WW)|WNNWWN(WW|EEENWNNWSW(SEWN|)NNEENESSSE(NNNN(EE|WWWSWNN(WSWWEENE|)EEN(W|N))|SE(SW|ENW))))|EENESSWSEEE(N(WNENWNN(WW(SEWN|)N|EEE(SWWEEN|)NNNEN(W|ESSSEE(NWNNESESS(NNWNWSNESESS|)|SSW(NWWNN|SESS))))|E)|SS))))))|WSWWN(E|WW(SEWN|)N(E|WWNNENWWSWSESWWSSWNNNNNNNE(NWWN(EENWNEESS(NNWWSEWNEESS|)|WWSW(SEE(N|ESWWWWSSSEENN(WSNE|)EESSW(N|SSE(N|SS(WWN(E|WWS(SSE(NN|S)|WNWNNWSWWNNE(NEEE(NWNENN(ESNW|)WW(NEWS|)S(WW(NEWS|)SS(ENESNWSW|)SW(SWSSSE(SS(WNSE|)ENESSWWSEEENNN(NWWEES|)E|NN)|N)|E)|S(SES(EENWESWW|)W|WW))|S)))|E))))|N))|SS(SS|ENEEEESSSW(ENNNWWEESSSW|))))))|W)))|NN))|NN)|WW(N|S(SE(SWSE(EE|SS(SSE(S(ESEWNW|)W|N)|W(N|W)))|N)|W))))|S))))|N)))|E))|EEEESWWSESWSESWSWN(N|WSS(W|EESWSESWSW(SW(N|SESWW(NN|WS(EESE(SWEN|)NENEEENWWN(WSNE|)NESEENNESENNNWNENESSESE(SWS(EEENWESWWW|)SW(NNN|SWS(WWNENE|ESS(WN|ESEN)))|NNNNNNN(WNNWSWSSSEN(N|ESS(SS|WWWSWW(SESS(E|WNW(SSESNWNN|)NN)|NENENWW(NENE(S|NNE(S|NWN(EE(SEES(SS|WW)|N)|W(N|WWSWS(WNSE|)EEE(NWES|)S))))|S))))|ESESSSWNN(SSENNNSSSWNN|)))|WWSSW(SESWSSEE(NWES|)SWS(WNSE|)(E|SS)|WNENWW(S|WNENWWSS(NNEESWENWWSS|))))))|NNN))))))))|N(E|W)))|N)|EENESEE(SWWSSEN(SWNNEEWWSSEN|)|N(ESNW|)WNNW(N|WS(WSNE|)E))))|W))|W)|W)|N))|W))))|S)|ESESWSEEEN(WNSE|)ESS(SWNWSSE(WNNESEWNWSSE|)|EE))|S)))|SESEEENWWNWNEENNWWN(WSSEEWWNNE|)EENNWNW(SSEWNN|)NEEENENWNWSSWWNWWS(WNNENENESE(NESENNEEENWWWNNW(WSESWS(E|WNW(NEWS|)SW(S|N))|NENWNEENNWWWNNWNNNWWWSWNWSSSEEN(EE(NWES|)SSS(E(SE(SWEN|)EE|N)|WN(N|WWWSWNW(W(W|NEENNWSWNWNNESENE(S|ENENWNWSSWNNWWWSWNWSWSSENEE(ENESNWSW|)SSW(WW(SESNWN|)WNNNNWSWSWSS(WNNWN(WSW(NWSNES|)SEESWWSSEEN(ESS(ENNSSW|)WWS(E|S(WW|S))|W)|EENENWNNNNWSWS(ESWSSEN(SWNNENSWSSEN|)|WNNENNEN(ESS(EENENENENNESESWSEEEENENNNN(WWSWW(SESSENEN(N|W)|WWN(WSW(NWWEES|)SESWSWSWS(NENENEWSWSWS|)|EEE))|ESSSSSSEENEENNWWS(W(S|NNNNESES(W|ENN(W|ESENESSWSSENESESWWWSW(SEEEEN(WW|ESESWSEESENESSSSSESSWNWNNWWWNNWWWNENN(WSWWWN(NW(NEWS|)WSWWN(WN(WSWSWSSESENEESS(W(N|WWWWWNNE(SEWN|)NNWNN(ESENEWSWNW|)W(N|WSESS(WSWWW(NEN(E(S|N|E)|W)|SESENEE(SWSNEN|)N)|E)))|ESESEESS(ENNNEEESSEEEN(ESSESSSSEESEESWWWSWSESWSSESESWSWW(SESWSWSSW(NNWNEN(ESNW|)W|SWSW(SSEESWSW(SSS(W|EEENNENENWNNESESESWSEENENNW(NENWNNEES(W|EESESWSEESSSWNWN(WNNW(NEWS|)SSSESWWSESSWSWWWWSSSENNESESENN(W|ENENNNE(N|EESSSSWNNW(NEWS|)SSSSESSESSEEEEEEESEEESESWWSSSSEEESWSESEEESEENWNWWNW(NEEENNENWWWWNNNNWS(WNWWWNEEEEEESSSEEES(WWW|EENNNWWNEENWNWWNWNENESENNWWNNWWWWSSSWNNWNENEEEEEESEES(WW|ESSEE(NWNNWNWNW(NEEENE(NWNENNNWWSESWWWWSEESS(ENNSSW|)WNWWWWSEEESWWS(EE|WNWNNWNWSWWNENNENNWNEESENEENWWWWWNEENWWNWSSSSWSWNWWSWSWWWSW(SSEEN(W|EEEN(WWW|NE(SESWSSESWSWNWSSEEENESSWSSWWNENWWWSWSW(SEENE(SSWSWW(NEWS|)SW(NWES|)SESSENNNEEEN(W|ENN(WSNE|)EEE(ESSSWNNWWSSE(SWW(SWWS(WNNEEWWSSE|)EEENEEEN(W|EEES(EE(E(E|SSW(SEEESNWWWN|)N)|NWNWWWNEENNNESE(SWSNEN|)N)|WW))|N)|N)|NWNENENNEE(S(E|W)|NWWW(WNN(W|NNN(W|E(E|SS|N)))|SS))))|N)|NNNE(S|ENWWNNESENEN(ESNW|)W))|N)))|NW(NWSWNNEENWWWSSWNNNNW(NEEESWSEENNENNWWNWSWS(EEE|WNWN(NNNESSSENNNESENEESEEEEEENNNESENNEEESSWW(NEWS|)SWWSESSWWWWSESWWSEEESWSWSWNWW(N(WSNE|)E(NNW(S|NNWN(EEE(SSWNSENN|)EEEE|W(S|N|WW)))|EE)|SSE(N|ES(WW|ENENENESENE(S|NWWNEENN(WWS(WNSE|)E|NENEEESWWSWSEESENESSSEENWNNNENNWNENWWWNENWW(SSWWS(WSNE|)EEEESS(SWWEEN|)E|NENNNNENWNWSSWWNNE(NEEESEEESENNWWWNEEEESSSESEENWNNW(S|NEESSE(SSSWSESSSSSSWSWSWWNWW(SSSEN(N|ESENEENE(N|SSWSW(SESWSWSS(WSESWWNWWSSS(ENNSSW|)WWNENN(NEEENWNENWNN(WNSE|)ESEE(NW|SWSS)|WWS(SWEN|)E)|ENESENN(NNN|W))|N)))|NNNWNNEES(ENNWWNNN(WNWSSESSWW(SESSNNWN|)N(N|E)|EESWSEENESSESWW(N|SEESWS(E|WWN(WSSEE(E|S)|E))))|W))|NNNNNNNNWNENNWWWSWSEE(NEWS|)SWWWWSESESENN(W|EESSSW(WWS(EEE|WWWNNWWSS(ENSW|)SWWNNNWWWNNNWSSSSEESWWSWWNENWNWSSWSESSENEESWSWWSESWSWSWWSESESS(ENNN(EN(W|NENEN(NE(SSESENESSWWWW(WS|NE)|NNEN(ENNSSW|)W)|W))|W)|WWWNWNWWW(SEEWWN|)NWWNWNEN(WWSSNNEE|)NNENWNEEESSEEENENWWW(SEWN|)NEEEE(SSSSW(N|WWSWSWS(ES(W|ENNE(SSSESE|EEN(ENNNNSSSSW|)WW))|WWNNE(EN(E|W(W|NN))|S)))|NWNNNNNEEENWWNEEENNWNWSWNWSWNN(EEEEESESSSES(WWSESS(S|WNWSWW(SESW|NE))|ENNNENESSSSSSS(EE(NEEE(S(ESSENSWNNW|)WW|NWWNNNESSENEE(SWEN|)NWWNNESENN(WWWSWNWSS(SW(SESSW(N|S)|NNNWWWW(S(E|SS)|W))|EE)|ESEEN(EESWS(WWWSNEEE|)E|W)))|SSS)|WNNNNN))|WSWSESWWWWWNWWSSSEN(EESWSWWWSS(ENEEEEESSWWSESE(SWWWW(S|NNE(SEWN|)NWNEEE)|EN(NESSENNNWWNEENNWN(WSWS(W(NNEWSS|)W|EE)|ENE(EEE|SS))|W))|WNNNENNWNNN(EEES(WWSNEE|)EEN(W|ESE(NE|SWW))|WSWWN(E|WSSESENESS(E|S(WNSE|)S))))|N)))))|NN))))|S)))))))|W))|SW(N|SESWS(E|WSSE(SS(S|WNWNNW(SSW(S(W(W|N)|SSSWSSWN(SENNENSWSSWN|))|N)|NENENN))|N))))|S)))|SSS(WNWESE|)SS)|S)|SSSWW(SSSSENNNESSSSSWSSE(N|SSSWNNWWSESWWW(WW|SEEESWWSSESWWNWWSSE(N|EEESEENNW(NN(W|ESE(NNWNEWSESS|)SSSSWSESWSESWWNWSSESWSESWWNNWSWWNENNWSWSSWSEEEESSENEESWSSWSEESSWNWSWWWSWNNNNWWSESWSSWSWSSSESSSWWNENWNWNENNWSWNNWNWSWNNNNESSENESSENNNNWSWNNNENEENESSWS(SSEE(NN(WSNE|)EEES(WW|ESSSEENWNEN(WNNW(S|WWWNNW(SS|NENNE(ENWNWWS(E|SSWSWNNNNE(SS|NNENNWWNENEES(W|EE(NWN(WWNWWS(E|WWNENWNWNWSSWSSSENNE(N|SSSWWWSEEESSENNE(NWNEEWWSES|)SSE(NEWS|)SWWSESSSSSWWWNENNE(SS|NWWNWWNENWN(EESSES|WSSSSEESS(ENSW|)SWNWWN(NWWNEENNNNENWNENE(NWNENWNENE(SS|ENESEE(NWNENN(E|WWNWSSS(ENEWSW|)WNNNWSSWNWWN(EE|WNNWNNWW(WWSEEESWWWWSWWNNN(WWWWWNEENESENNWNN(E(NEN(ESENES(SWWWEEEN|)E|W|N)|S)|WWSESWWS(WNWSSSSE(NN|EESENESSWSSWSEEEESENNEEEENN(WWS(WWWW(NNN|S(WNSE|)E)|E)|EESWSSENESEESSE(NESEWNWS|)SWSWWNWSWNNWN(EESENESS(NNWSWNSENESS|)|NWSSWSEESWWWWSSEESENEN(WWW|EESESES(ENNNW(S|W)|WSSSSSE(NNNN|SWWSSSWNNWSWNNWSWWWWNNEES(ENNWWWNENNNEN(WWSSSWNWSSSE(N|SWWNWSSWWNENNENE(NWNNNWNENWWNNEES(EEEESSWWSSW(NNNEEWWSSS|)SEENNEENNNEN(E(NENWESWS|)S|WWWN(E|WSWNWWNENWWNNEN(ESS(ENSW|)W|WWSSWNNNNNW(NEE(N|SSS)|SWWWNW(SS(W|SENESSESSE(NNNNWS|EESWSSE(NENSWS|)SWSWSWNNWWSSSE(NN|EESEESWSSEE(ENNW(SWEN|)N(E|NWN(WSNE|)(N|E))|SWS(E|WNWNNNWNWWWSSSENNESSE(N|SSESWSEENESSESESWWWSSWNWSSWNWWWSSESWWSSSWNWNENWWNWNNWSWNWWWNNEENENNWNNESESEENEEEENESSSWSWSES(WWWSS(SEENNWS(NESSWWEENNWS|)|WNNNNWW(SWS(EENSWW|)WW|NEEESE(SWEN|)NN(E(E|S)|W)))|ENNESE(SWEN|)NEN(WWNNE(NNW(S|WWWWS(WWNWW(SESNWN|)NENESE(S|ENENNNWSSW(WNNE(NEEES(SSSSWENNNN|)ENNWWWNENN(WWWSE(SSWNWWSWSWNWNENNNWWSS(ENSW|)SSSESEEEE(SSWSWWWNEN(WWWN(E|NNWWSSSE(SWSSEEE(EES(ENSW|)WSSSS(E|WS(WNWNWNNN(WWWSEESSSSE(N|ESSSE(NN|SWSSEEENN(WSWENE|)ESSSENE(NWES|)SE(SE(N|SWWWSWNWWSESEEEEEN(E(EEESWSESSWSSSENNENNNESSEESENENEESEESSWNWSSSSSSENNEESESENESSESSWSWSS(EEEEENESENESEEENWWNEEESSEEENWWNNESEENWNNNWWSS(ENSW|)WWS(WWNWWSESWWNNWSWNNNEENENWNENWWSSWS(WW(SESSSSE(SWW(W|N)|E)|NWWNNNNEEEENEENEEENWNWWWNWSSE(EE|SWWSWWWWNENENNESE(SWSWENEN|)NNNNENESSS(WNSE|)EEENNWNNENESENNWWWWS(E|S(SSSEWNNN|)WNNWWSESWWNNWSSWWWSEEESWSEE(NNEWSS|)SWWSSWNNNWWSESWWWNENWWWNNEENWWN(WSWWSSW(NNNWESSS|)SWNWSSESSEENN(WSNE|)EN(W|NE(NWES|)SSEESSS(EEES(W|E(SSSE(N|SS(S|WWWNEE))|N(NWWWEEES|)E))|WWSWWNENEN(ESNW|)W))|EENESE(ENWN(WWWSNEEE|)NNEESS(WNSE|)E(SWSEWNEN|)NESEEEEN(NWSWNW(WWNWN(WSWWEENE|)E|S)|ESE(N|EEEE(NWES|)SSEE(NWES|)SWSSSENNENE(NWES|)E(SSSWW(NENSWS|)SWSSWWSESWSW(NNNNW(NEE(ESWENW|)NNWW(SEWN|)N(EENSWW|)W|S|WWW)|WSEESWSWSW(SEESSS(WWN(WSWW|NES)|S|EENWNNN(W|ESSENNNW(W|NNNEE(NWNENN|SENEESSW(SSWW(NENWWN|SES(W|ESSSESENNWNEE(NWWN(EENWN(WSNE|)N|W)|EEESSSESWWSWNW(SWW(NEWS|)S(WNSE|)EEEEENEENNNWNNNENWNNEEEESSWNW(W|SSEESSWSSW(SESWS(EEENEES(EENNNNE(SSSS|NNNWNWSSWSWNW(NEENWNNNESES(ENNNE(SSSS|NNW(WWSS(WNNWWSESWS(ESSSNNNW|)WWWWN(WSNE|)NE(EESWWEENWW|)NN|E(NEWS|)S)|NNNNWNEE(SSSS|NNNNNNWSSSSS(NNNNNEWSSSSS|))))|W)|SSWSS(S|EEENN(WSWENE|)E(NENSWS|)SSS)))|W)|WW)|NNWNEE))|NNNESE(SWEN|)N))))|N)))))|NN(WN(NESNWS|)WSW(N|WWSESW(WWNENW|S))|E)))|E)))|SWSS(E(N|EE)|WW))))))|E)|E)|WNNWNNN(W(SWNWWSSSEN(ESSWWS(EEEENWNN(SSESWWEENWNN|)|WNNWNNE(NNENWNNWNEE(SS|NW(NENSWS|)WWSSWNNNWSSSSWWN(ENNSSW|)WSWWNNWSSWWNENNNNNWN(WSSWSESWWWWSWWSESSSSWSSEESSS(ENENNW(S|NEESSENNNNWSWNNENE(SESSSSSSS(WNWSWENESE|)EEEEEEENNENWWWNWWSESWS(EENESNWSWW|)WNNW(NENEEENN(WWS(WW(NEWS|)S|E)|EEESWSS(WNNSSE|)EEN(W|NEE(SWSSWSSE(N|ESWWWN)|NNWSWN)))|SS)|NN(ENNNSSSW|)WSWW(NEWS|)S(W(SESSW(SWEN|)N|N)|E)))|WWWWNWNEE(SEENWESWWN|)NNNWWWNWWWNEEENNESESS(WNSE|)ENN(ESSNNW|)NNW(WWNWNENNWWWSE(SWWSSENESESWS(WNWWNNWSSSSEE(NWES|)SWSSWSEENNEESE(EES(ENSW|)WSSWWS(EEE|WNN(N(EESWENWW|)N|WSSWWWWNEN(EESWENWW|)NNNW(SSSWWEENNN|)NNNWNWSWSWS(EENESNWSWW|)W(WSSNNE|)NNN(NEE(SWSNEN|)NNESES(W|ESE(SSSESNWNNN|)NNWNENNNWWSWW(NNE(NEENESS(WW|ENNESESWSE(SWW(SSENEWSWNN|)N|ENNNESEESWS(WNSE|)EESSSES(W|EEENWNENENE(SE(ENWESW|)SWS(WNSE|)E|NWWSWSWS(WNNNWNENWNNWNNENNWWS(E|SWSESWS(EESWENWW|)WW(S|WNWWNNNN(WSSSSS(EE|WSWWW(SEWN|)WNN(WSWNSENE|)NENEESE(SWW(WSEEWWNE|)N|NNNWWN(WW(SESEEWWNWN|)N(WSWWN(W(SSE|NE)|E)|E)|EE)))|EESSW(N|SEENNNENE(SSWSSSW(ENNNENSWSSSW|)|NWWNENWNWN(WSSESSSE(WNNNWNSESSSE|)|EENESESW(W|SES(ESS(WNSE|)EEN(EESSW(WSSEE(NWES|)SSSENEES(WSSWWSW(S|NN(NNW(N(E|W)|S)|EE))|E(EEE|N))|N)|NW(NENWW(S|N(EE|NWNNW(S|NN(W(NE|WSE)|EEEENWNNNESE(NNEENWNWNEESE(SS|NNEEEEESE(SWS(E|W(NN|S))|EN(ESNW|)WN(E|NNWSSWWWWWNENWWSW(N|WSS(EENWESWW|)WWSSS(WNSE|)E(SWEN|)(NN|E)))))|S(W|SSSSWNWSW(NWES|)S))))))|S))|W))))))))|S)))))|S)|WS(SSWENN|)EEE(ENSW|)S))|W)))|N)|E)|E)|S))|EEENESS(E|SWW(NEWS|)SES(W|E(SS|N)))))|S))|N)|N(N|E))|ESE(SWEN|)(N|E)))|N)|WW))|N)))|ESES(W|E(NNW|SW)))|E))|NW(NEWS|)W)|NN))|E(S|E))|N(N|W|E))|E)|E(EES(WWSEWNEE|)ENEE(NWES|)S(W|S)|N))|S)|S))|E))|S)|EES(WSWENE|)E))))))))|N)))))|W)|S))|ESSSEESSS(WNNWWNN(SSEESSNNWWNN|)|EE(SWEN|)NWNENNE(SSSS|NNW(WS(E|S(WNWSNESE|)S)|N))))|W)))))))|E))|ES(ENNSSW|)S)|NEN(W|N))))|S(SESENSWNWN|)W))|S)|EE)))))|E)|SWWSSENESESESENES(SW(SESWENWN|)WWNWNWWW(EEESESNWNWWW|)|EENWN(E|WWWN(W|EE)))))))|SS)))|E))|SWWSSE(SWW|ENW))|W(N|W)))|S))|NNE(S|NNESENNNE(WSSSWNSENNNE|))))|WN(WW|EENWWNN(SSEESWENWWNN|))))))|SSSWSW(N|SEENESENES(NWSWNWESENES|)))|S)))|E))|S))|N)|W))|NN(ESNW|)NNNNNNEN(E|WWSSSSW(WSSEE(NW|SWW)|NNNNWWWNNWNENWNE(NNWSNESS|)EESESWSES(WWNNNSSSEE|)ENE(NWN(NWES|)E|S))))|WWNNWWWWNENWWSWW(SESENSWNWN|)NEN(WW(SS|WWNWSW)|N))|WW(NEWS|)W))|N)|E)|EE)|ESSEESES(ENSW|)W))|NNNN))))|E))|W)|W)))|EEN(N|W))|N)))|S)))|W))|S(S|WW))|SE(S|N)))|E))))))|NENWNW))))|N)|E))|N)|E))|EE))))|WWWWSEE(WWNEEEWWWSEE|))|SSSSSSS(ENSW|)S))))))))))))|NNE(SS|EN(WWNWWSES(S|W)|E))))|SSSS))|ENN(W|N))|SS))))))|N)|E)|S)))|S)|S))|SSS))|E)|SS)|EEE))|NN)))|N)|N(NN|ESENEN))|ESEESWSEE(SWWEEN|)NN)|E))|NNWNNNWSSSWSE(E|SWWNNNENWWNN(NESE(SWEN|)N|WSSWSWWN(E|WSSEEEENESSWWW(EEENNWESSWWW|)))))|S)|SSW(WS(E|WNWWS(ESNW|)WNW(NEWS|)S)|NN))|E)))|EEN(WNEWSE|)E)|ENEENW)|E)|E))|S)$\";","export default \"77\\n10\\n143\\n46\\n79\\n97\\n54\\n116\\n60\\n91\\n80\\n132\\n20\\n154\\n53\\n14\\n103\\n31\\n65\\n110\\n43\\n38\\n47\\n120\\n112\\n87\\n24\\n95\\n33\\n104\\n73\\n22\\n66\\n137\\n21\\n109\\n118\\n63\\n55\\n124\\n146\\n148\\n84\\n86\\n147\\n125\\n23\\n85\\n117\\n71\\n48\\n136\\n151\\n130\\n83\\n56\\n140\\n9\\n49\\n113\\n131\\n133\\n74\\n37\\n127\\n34\\n32\\n106\\n1\\n78\\n11\\n72\\n40\\n96\\n17\\n64\\n92\\n102\\n123\\n126\\n90\\n105\\n57\\n99\\n27\\n70\\n98\\n111\\n30\\n50\\n67\\n2\\n155\\n5\\n119\\n8\\n39\";","export default \"1891\\n1975\\n1987\\n1923\\n1928\\n1993\\n1946\\n1947\\n2005\\n1897\\n1971\\n1929\\n1875\\n1945\\n1680\\n811\\n1901\\n1396\\n1942\\n1282\\n1941\\n1978\\n1884\\n1879\\n1230\\n2010\\n1881\\n1979\\n1996\\n1904\\n1934\\n1865\\n2003\\n2006\\n1966\\n1860\\n1259\\n1959\\n1931\\n1963\\n1878\\n1880\\n151\\n1925\\n1663\\n1908\\n1863\\n1391\\n1922\\n1968\\n1998\\n1084\\n1982\\n1960\\n1938\\n1876\\n1937\\n1882\\n1873\\n1926\\n1986\\n1416\\n1864\\n1862\\n1969\\n1913\\n532\\n1866\\n1242\\n1933\\n1903\\n965\\n1927\\n1890\\n1991\\n1388\\n1992\\n1902\\n1907\\n1964\\n1394\\n2009\\n1920\\n630\\n1932\\n1854\\n1951\\n1852\\n1983\\n1314\\n1855\\n1954\\n1921\\n1989\\n1871\\n1995\\n1885\\n1974\\n1915\\n1872\\n1251\\n1899\\n1985\\n1889\\n1935\\n1912\\n946\\n1965\\n1739\\n1973\\n1911\\n1910\\n1917\\n1918\\n1900\\n1886\\n1477\\n2000\\n1916\\n1077\\n2004\\n1456\\n1867\\n1970\\n1999\\n1919\\n1726\\n706\\n1930\\n1994\\n1988\\n1997\\n1870\\n1953\\n652\\n1893\\n1898\\n1883\\n1957\\n1972\\n1874\\n1977\\n1955\\n2001\\n1906\\n1389\\n1848\\n1940\\n1877\\n1962\\n1948\\n1887\\n1924\\n1403\\n1408\\n1861\\n1892\\n1990\\n1222\\n677\\n1392\\n1113\\n1085\\n1894\\n1106\\n1939\\n1961\\n1944\\n1952\\n1643\\n1404\\n1895\\n1958\\n1976\\n1206\\n1905\\n1076\\n1888\\n1896\\n1943\\n1950\\n2008\\n1967\\n164\\n1981\\n1868\\n1914\\n1909\\n1956\\n341\\n1379\\n2007\\n1563\\n1980\\n1072\\n1949\\n1250\\n1258\\n1092\\n2002\";","export default \"zihrtxagncfpbsnolxydujjmqv\\nzihrtxagwcfpbsoolnydukjyqv\\naihrtxagwcfpbsnoleybmkjmqv\\nzihrtxagwcfpbsnolgyduajmrv\\nzihrtxgmwcfpbunoleydukjmqv\\nzihqtxagwcfpbsnolesdukomqv\\nzihgtxagwcfpbsnoleydqkjqqv\\ndihrtxagwcqpbsnoleydpkjmqv\\nqihrtvagwcfpbsnollydukjmqv\\nzihrtgagwcfpbknoleyrukjmqv\\ncinrtxagwcfpbsnoleydukjaqv\\nzihrtxagwcfubsneleyvukjmqv\\nzihrtxagwcfpbsvoleydukvmtv\\nzihrtpagwcffbsnolfydukjmqv\\nzihrtxagwcfpbsxoleydtkjyqv\\nzohrvxugwcfpbsnoleydukjmqv\\nzyhrtxagdcfpbsnodeydukjmqv\\nzihrtxaghffpbsnoleyduojmqv\\noihrtbagwcfpbsnoleyduejmqv\\nzihrtnagwcvpjsnoleydukjmqv\\niihrtxagwcfpbsnoliyaukjmqv\\nziartxagwcfpbsnokeydukjmpv\\neibrtxagwccpbsnoleydukjmqv\\nzihrtxagwczwbsaoleydukjmqv\\nziiatuagwcfpbsnoleydukjmqv\\nzzhrtxagwckpbsnsleydukjmqv\\ncihrtxaqwcfpbsnoleydkkjmqv\\nzihrtxaywcfpbsnoleydukzdqv\\nzihrtxagwjfpbvnoleydukjmql\\nzihrtxagwcfpbsnoleuduksmql\\nzizrtxxgwcfpbsnoleydukzmqv\\nzihrteagwcfpbsnobeydukjmqe\\nzihrtxafwhfpbsgoleydukjmqv\\nzitrtxagwcfpbsnoleyduvymqv\\nzihrtxauwcfebsnoleygukjmqv\\nzihrtxagwcfpbsnoleydubjrqh\\nzihrtxauwmfpbsnoleydukjmqo\\nzihrtxagwcdpbsnoleydukxmov\\nzihrtmagwcfpbsnoleydukvmlv\\nziwrtxhgwcfpbsnoleodukjmqv\\nzihytxagacfpbsnoceydukjmqv\\nzihrtxagwcfpbsnolebdugjnqv\\nzihrzxagwcfpbsnjleyduktmqv\\nzihrtxygwcfpbinoleysukjmqv\\nzihrtxagwcfpbmnoveydujjmqv\\nzidrtxagwcfpbsnolexaukjmqv\\nzshrtxagwcepbsnoxeydukjmqv\\nyibrtxagwzfpbsnoleydukjmqv\\nzehrtxagwclpbsnoleymukjmqv\\nzihruxagwcfpbsnoleyhukwmqv\\nzihrwxagwcfpbszolesdukjmqv\\nzihrtpagwcfpbwnoleyuukjmqv\\nziortxagwcfpssnolewdukjmqv\\nzohrtxagwcfpbwnoleydukjmjv\\nzihrtxagwcfpbsnvleyduzcmqv\\nzihrvxaghcfpbswoleydukjmqv\\nzihrtxagwcfpssnolwydukzmqv\\nzjhrttagwcfpbsnolfydukjmqv\\nzihrtxagwjfpbsnoljydukpmqv\\nziwrtxagwczpbsnoljydukjmqv\\nzinrtxagwcfpbvfoleydukjmqv\\nzihrgragwcfpbsnoleydutjmqv\\nzihrtxagwcfpbsnozeydukffqv\\nzihrtxagwcfpbsmoleydxkumqv\\nrihwtxagwcfpbsxoleydukjmqv\\nziqrtxagwcfpbsnqlevdukjmqv\\nzihrtxagwchpbsnoleydufamqv\\nsihrtxagwcfpbsnoleldukjmqp\\nzihrtxagwcrpbsnoleydvojmqv\\nzihrtxacwcfpbsnoweyxukjmqv\\nzihrtxagwcfpbsnolajmukjmqv\\nzzfrtxagwcfpbsnoleydukjmvv\\nzixrtxagwcfpbqnoleydukjgqv\\nzihitxaqwcfpbsnoleadukjmqv\\nzilrtxagecfxbsnoleydukjmqv\\nzihrtxagwcfpbypoleycukjmqv\\nzidrtxagdtfpbsnoleydukjmqv\\nlehrtxagxcfpbsnoleydukjmqv\\nzihrlxagwcfpbsncneydukjmqv\\nzihroxagbcspbsnoleydukjmqv\\nzihrtxagwcfkzsnolemdukjmqv\\nzihrtxagwcfpbsqeleydukkmqv\\nzihrjxagwcfpesnolxydukjmqv\\nzifrtxagwcfpbsooleydukkmqv\\nzirwtxagwcfpbsnoleydukzmqv\\nzjhntxagwcfpbsnoleydunjmqv\\nziorexagwcfpbsnoyeydukjmqv\\nzhhrtlagwcfybsnoleydukjmqv\\nzirrtxagwvfsbsnoleydukjmqv\\nbihrtxagwofpbsnoleadukjmqv\\ndihrtxagwcfpksnoleydukjlqv\\nzihrrxagecfpbsnoleydukjmyv\\nzijrtxagwmfpbsnoleyduljmqv\\nzihrtxagwcfpbsnolecdukjpqs\\nzchrtxagwcfpbsnolehdukjmwv\\nrmhrtxagwcfpbsnoleydkkjmqv\\nzohrotagwcfpbsnoleydukjmqv\\nzihwtxagsifpbsnwleydukjmqv\\nzihrtxagicfpbsnoleydukjxqn\\nzihrtxsgwcfpbsntleydumjmqv\\nzihrlxagzgfpbsnoleydukjmqv\\naihjtxagwdfpbsnoleydukjmqv\\nzifrtxagwcfhbsnoleddukjmqv\\nzihrtyagwcfpbsooleydtkjmqv\\nzihrtxxgwcfpbsnolerhukjmqv\\nzihqtxalwcfppsnoleydukjmqv\\nzfkrvxagwcfpbsnoleydukjmqv\\nzihptxagwcfpbseoleydukjmdv\\nzihrtxagwcfpeonoleyiukjmqv\\nnidrtxagwcfpbsnoleyhukjmqv\\nzihrtxagwcfjbsnolsydukjmqg\\nzghryxagwcfgbsnoleydukjmqv\\nzihwtxagwcfpbsnoleydugjfqv\\nzihryxagwjfpbsnoleydujjmqv\\nzihrtxagwcfpbsnolekdukymql\\nzfhrtxaownfpbsnoleydukjmqv\\nzamrtxagwcfpbsnoleyduzjmqv\\nibhrtxagwcfpbsnoleydukjmfv\\nzihrtxagwcfpssnoseydukjmuv\\nzihrtxagwcfpbsnoljydukjhqs\\nzihrtxagwqfmbsnoleidukjmqv\\nzfdrtxagwchpbsnoleydukjmqv\\niihrtxagqcfpbsnoleydukjmqn\\nmihrtxagwcfpbsqoleydukjbqv\\nzihttxagwcfpbsnoleyduljmqk\\nzzhrtxagwcfpzseoleydukjmqv\\nzdhrtxagbcfpbsnoleyduyjmqv\\nzihxtxagwcfpbsnolwrdukjmqv\\nzghrtxagwcypbynoleydukjmqv\\nzihrtxaiwcfppsnoleydukgmqv\\nzitatxagwcfobsnoleydukjmqv\\nznhrtxagwcfpysnoleydukjqqv\\nzihrtxagwcfppsnoleoyukjmqv\\nziorgxagwcfpbsnolekdukjmqv\\nzihrtxagwcfpbfnoleydwkjpqv\\nzihrtxnrwcfpbsnolnydukjmqv\\nrihrtxagwcfpbsnolepdjkjmqv\\nzihrtxagwcfzbsnoceydukjmkv\\nzihrtxagwcfpysnoaeidukjmqv\\nzihrmxagwcfpbsnoleydukjmuq\\ngihrtxagwcvpbsnoleydukcmqv\\nzihrtxagocfpbsnoleydukqmnv\\nzihrtxagwcfpesnoleyluklmqv\\nzghrtxagwcfzbsnoleydukjmgv\\nzihrtxugqqfpbsnoleydukjmqv\\nzirrtcagwcfpbsnoleydfkjmqv\\nzihitxagwcfpjsnoleydnkjmqv\\nzihrtxqgwcfpbsnsleydukjmqy\\niihrtxagwyfpbsnoleydukjmqu\\nzihrsxagwcfpbsnsleydukzmqv\\nzihrtxawwcfpbsnoleydzkjmuv\\ndihrkxagwcfpbsfoleydukjmqv\\nzihrtxaqwcfpbvnoleydukjmqt\\nzihntxdgwcfpbsnogeydukjmqv\\nzihrtxagwcdpxsnolxydukjmqv\\nzihrtxagwcfpbsaoleydunjaqv\\nzihrtyagwcfpbsnoleyduqjmqt\\nzihrtxagwtfpbsnoleoyukjmqv\\nzihrjiagwcfpbsnobeydukjmqv\\nzihrtxqgwcfpbsnoleydykdmqv\\nzihrhxmgwcfpbsnmleydukjmqv\\nzihatxlgwcfpbsnoleydukpmqv\\nzihrtxcgwcspbsnoleypukjmqv\\nzihrtkagqcfpbsaoleydukjmqv\\nziqrtxagwcfabsnoleydukrmqv\\nzihwtxagwifpbsnwleydukjmqv\\nzitrtnagwcfpbsnoleddukjmqv\\nwihrtxagwcfpbsioyeydukjmqv\\nzihrtxagwclpystoleydukjmqv\\nzihmtxagwcfpbsnolfydukjmlv\\nzihrtxagechpbsnoleydutjmqv\\nzihrtxagwcfebsnolnydukjmuv\\nzihrtxagncmpbsnoleydukjmqs\\nzihrvxagocfpbsnoleydukcmqv\\nzihrtxagwcjcbsnolejdukjmqv\\nwihrtxagwcfpbogoleydukjmqv\\nkivrtxagwcfpgsnoleydukjmqv\\nzihrtxagwafpbhnoleydukjcqv\\nzihrtwagtcfpbsnolxydukjmqv\\nvihrtxagwcfpbsneletdukjmqv\\nzihlnxagwcfpbsnoleydukjmqb\\nzihrtxagwcfpbsnoleydukjuuc\\nzihrtxagwcfpbwntleadukjmqv\\nfihrtxagwcfpbsnoleydvkjmqw\\nzihrtxaowcfpbunoleyduljmqv\\nzthrtxagwcfpbtnoleydukomqv\\nxihltxagwcfpbsnoleydukjrqv\\nziyrnxagwcfpbsnoleydukjmhv\\nzihrtxazwcfpbsnileyduejmqv\\nzihrtxagwcfibsnoliydukjmsv\\nzihrtxggwcfpbsnoleydugjmqj\\nzrartxagwcffbsnoleydukjmqv\\nzidrtxaqwcfpbsnoleyduksmqv\\nzirrtxagwcypbsnoleydtkjmqv\\nrihrtxagwcrpbsnoheydukjmqv\\nzihrtxagwcfpbsnoleydpkjmzs\\nzihrtxagbcfpbsnodbydukjmqv\\nfihrtxaqwcfpbsnolaydukjmqv\\nvihrtxbgwcfpbsnolemdukjmqv\\nzihrtxapwcfubsnoleydukmmqv\\nzihrtxagwcfpbgnolfydunjmqv\\nzihrtxagwcypbsnokeyduvjmqv\\nzihntxagwcfpbsnoieydukbmqv\\nzihbtxagwkfpbsnolpydukjmqv\\nzihrtxagwcfibsnoleydikjmqb\\njihrtxvgwcfpbsnoleydukjmqp\\nzihrtxagwcfpbjnqleydukjmlv\\nzibrtxagwcfpbzvoleydukjmqv\\nzihrtxagwafgbsnbleydukjmqv\\nzihjctagwcfpbsnoleydukjmqv\\nzahrtxagwcepbsnoleddukjmqv\\nzihetxagwcfpbsnoleydumjmsv\\nzihrtvagwcfpbbnoleydukdmqv\\nzbhrxxagwkfpbsnoleydukjmqv\\njfhrtxagwcftbsnoleydukjmqv\\nyihrtxagwcfvbsnoleyduksmqv\\nziartxaewcfpbsnoleyduhjmqv\\nzihrtxagwcfpbsnoozyduzjmqv\\ncihotxagwcfpysnoleydukjmqv\\nzihrtxagwcfpusnolwydxkjmqv\\nzihrtxagwcfpbsnoleedmgjmqv\\nzihrtxaghcfpmsnoleydukqmqv\\nziortxagwcfpbsboleidukjmqv\\nzihrtxagwcfybsnoleyqxkjmqv\\nzihrtxamwcfpbsngleydukjmqx\\nzihrtxagwcfpbsnoleyduusmqu\\nzihftxagwcfpssnwleydukjmqv\\nzihrtxagwcfkbsnomeydukjmsv\\nzihrtxagwcvpbsnooeydwkjmqv\\nzihrtxagwcfpbsnoleycekumqv\\njahrtxagwcfpbsnoleydukjmmv\\nzihrtxabwcfpbsnzheydukjmqv\\nzihrtxagwctpbsnoleydwkjmhv\\nzihrtpagwcfpbsnoleydzkjmqh\\nzihwtxagwcfpbsnollydukjrqv\\nzihrtxagwcfpusnoleydsvjmqv\\nzibrtxagwcfpasnoleydukjmbv\\nzchrtmagwcfpbsnoleydukjmwv\\nziertxbgwyfpbsnoleydukjmqv\\nzitrtxagwcfpbhnoweydukjmqv\\nzisrtxkgwcfpbsnopeydukjmqv\\nzihrtxcgwdfpbynoleydukjmqv\\niihrtxajwcvpbsnoleydukjmqv\\nzihuwxapwcfpbsnoleydukjmqv\\nzihrtxngwcfqbsnoleyiukjmqv\\nziqrtxagjcfpbsnoleydukjmqi\\nzifrtxarwctpbsnoleydukjmqv\\nzihxgxagwcfpbpnoleydukjmqv\\ngiprtxagwcdpbsnoleydukjmqv\\nzihrtxagwmfpbsnodeydukjbqv\";","export default \"As you're walking to yet another connecting flight, you realize that one of the legs of your re-routed trip coming up is on a high-speed train. However, the train ticket you were given is in a language you don't understand. You should probably figure out what it says before you get to the train station after the next flight.\\n\\nUnfortunately, you can't actually **read** the words on the ticket. You can, however, read the numbers, and so you figure out **the fields these tickets must have** and **the valid ranges** for values in those fields.\\n\\nYou collect the **rules for ticket fields**, the **numbers on your ticket**, and the **numbers on other nearby tickets** for the same train service (via the airport security cameras) together into a single document you can reference (your puzzle input).\\n\\nThe **rules for ticket fields** specify a list of fields that exist **somewhere** on the ticket and the **valid ranges of values** for each field. For example, a rule like `class: 1-3 or 5-7` means that one of the fields in every ticket is named `class` and can be any value in the ranges `1-3` or `5-7` (inclusive, such that `3` and `5` are both valid in this field, but `4` is not).\\n\\nEach ticket is represented by a single line of comma-separated values. The values are the numbers on the ticket in the order they appear; every ticket has the same format. For example, consider this ticket:\\n\\n```\\n.--------------------------------------------------------.\\n| ????: 101    ?????: 102   ??????????: 103     ???: 104 |\\n|                                                        |\\n| ??: 301  ??: 302             ???????: 303      ??????? |\\n| ??: 401  ??: 402           ???? ????: 403    ????????? |\\n'--------------------------------------------------------'\\n```\\n\\nHere, `?` represents text in a language you don't understand. This ticket might be represented as `101,102,103,104,301,302,303,401,402,403`; of course, the actual train tickets you're looking at are **much** more complicated. In any case, you've extracted just the numbers in such a way that the first number is always the same specific field, the second number is always a different specific field, and so on - you just don't know what each position actually means!\\n\\nStart by determining which tickets are **completely invalid**; these are tickets that contain values which **aren't valid for any field**. Ignore **your ticket** for now.\\n\\nFor example, suppose you have the following notes:\\n\\n```\\nclass: 1-3 or 5-7\\nrow: 6-11 or 33-44\\nseat: 13-40 or 45-50\\n\\nyour ticket:\\n7,1,14\\n\\nnearby tickets:\\n7,3,47\\n40,4,50\\n55,2,20\\n38,6,12\\n```\\n\\nIt doesn't matter which position corresponds to which field; you can identify invalid **nearby tickets** by considering only whether tickets contain **values that are not valid for any field**. In this example, the values on the first **nearby ticket** are all valid for at least one field. This is not true of the other three **nearby tickets**: the values `4`, `55`, and `12` are are not valid for any field. Adding together all of the invalid values produces your **ticket scanning error rate**: `4 + 55 + 12` = **`71`**.\\n\\nConsider the validity of the **nearby tickets** you scanned. **What is your ticket scanning error rate?**\\n\\n[comment]: <> (PART 2)\\n\\nNow that you've identified which tickets contain invalid values, **discard those tickets entirely**. Use the remaining valid tickets to determine which field is which.\\n\\nUsing the valid ranges for each field, determine what order the fields appear on the tickets. The order is consistent between all tickets: if `seat` is the third field, it is the third field on every ticket, including **your ticket**.\\n\\nFor example, suppose you have the following notes:\\n\\n```\\nclass: 0-1 or 4-19\\nrow: 0-5 or 8-19\\nseat: 0-13 or 16-19\\n\\nyour ticket:\\n11,12,13\\n\\nnearby tickets:\\n3,9,18\\n15,1,5\\n5,14,9\\n```\\n\\nBased on the **nearby tickets** in the above example, the first position must be `row`, the second position must be `class`, and the third position must be `seat`; you can conclude that in **your ticket**, `class` is `12`, `row` is `11`, and `seat` is `13`.\\n\\nOnce you work out which field is which, look for the six fields on **your ticket** that start with the word `departure`. **What do you get if you multiply those six values together?**\";","export default \"You catch the airport shuttle and try to book a new flight to your vacation island. Due to the storm, all direct flights have been cancelled, but a route is available to get around the storm. You take it.\\n\\nWhile you wait for your flight, you decide to check in with the Elves back at the North Pole. They're playing a **memory game** and are ever so excited to explain the rules!\\n\\nIn this game, the players take turns saying **numbers**. They begin by taking turns reading from a list of **starting numbers** (your puzzle input). Then, each turn consists of considering the **most recently spoken number**:\\n\\n- If that was the **first** time the number has been spoken, the current player says **`0`**.\\n- Otherwise, the number had been spoken before; the current player announces **how many turns apart** the number is from when it was previously spoken.\\n\\nSo, after the starting numbers, each turn results in that player speaking aloud either **`0`** (if the last number is new) or an **age** (if the last number is a repeat).\\n\\nFor example, suppose the starting numbers are `0,3,6`:\\n\\n- **Turn 1**: The `1`st number spoken is a starting number, **`0`**.\\n- **Turn 2**: The `2`nd number spoken is a starting number, **`3`**.\\n- **Turn 3**: The `3`rd number spoken is a starting number, **`6`**.\\n- **Turn 4**: Now, consider the last number spoken, `6`. Since that was the first time the number had been spoken, the `4`th number spoken is **`0`**.\\n- **Turn 5**: Next, again consider the last number spoken, `0`. Since it **had** been spoken before, the next number to speak is the difference between the turn number when it was last spoken (the previous turn, `4`) and the turn number of the time it was most recently spoken before then (turn `1`). Thus, the `5`th number spoken is `4 - 1`, **`3`**.\\n- **Turn 6**: The last number spoken, `3` had also been spoken before, most recently on turns `5` and `2`. So, the `6`th number spoken is `5 - 2`, **`3`**.\\n- **Turn 7**: Since `3` was just spoken twice in a row, and the last two turns are `1` turn apart, the `7`th number spoken is **`1`**.\\n- **Turn 8**: Since `1` is new, the `8`th number spoken is **`0`**.\\n- **Turn 9**: `0` was last spoken on turns `8` and `4`, so the `9`th number spoken is the difference between them, **`4`**.\\n- **Turn 10**: `4` is new, so the `10`th number spoken is **`0`**.\\n\\n(The game ends when the Elves get sick of playing or dinner is ready, whichever comes first.)\\n\\nTheir question for you is: what will be the **`2020`th** number spoken? In the example above, the `2020`th number spoken will be **`436`**.\\n\\nHere are a few more examples:\\n\\n- Given the starting numbers `1,3,2`, the `2020`th number spoken is **`1`**.\\n- Given the starting numbers `2,1,3`, the `2020`th number spoken is **`10`**.\\n- Given the starting numbers `1,2,3`, the `2020`th number spoken is **`27`**.\\n- Given the starting numbers `2,3,1`, the `2020`th number spoken is **`78`**.\\n- Given the starting numbers `3,2,1`, the `2020`th number spoken is **`438`**.\\n- Given the starting numbers `3,1,2`, the `2020`th number spoken is **`1836`**.\\n\\nGiven your starting numbers, **what will be the `2020`th number spoken**?\\n\\n[comment]: <> (PART 2)\\n\\nImpressed, the Elves issue you a challenge: determine the `30000000`th number spoken. For example, given the same starting numbers as above:\\n\\n- Given `0,3,6`, the `30000000`th number spoken is **`175594`**.\\n- Given `1,3,2`, the `30000000`th number spoken is **`2578`**.\\n- Given `2,1,3`, the `30000000`th number spoken is **`3544142`**.\\n- Given `1,2,3`, the `30000000`th number spoken is **`261214`**.\\n- Given `2,3,1`, the `30000000`th number spoken is **`6895259`**.\\n- Given `3,2,1`, the `30000000`th number spoken is **`18`**.\\n- Given `3,1,2`, the `30000000`th number spoken is **`362`**.\\n\\nGiven your starting numbers, **what will be the `30000000`th number spoken?**\";","export default \"R2, L5, L4, L5, R4, R1, L4, R5, R3, R1, L1, L1, R4, L4, L1, R4, L4, R4, L3, R5, R4, R1, R3, L1, L1, R1, L2, R5, L4, L3, R1, L2, L2, R192, L3, R5, R48, R5, L2, R76, R4, R2, R1, L1, L5, L1, R185, L5, L1, R5, L4, R1, R3, L4, L3, R1, L5, R4, L4, R4, R5, L3, L1, L2, L4, L3, L4, R2, R2, L3, L5, R2, R5, L1, R1, L3, L5, L3, R4, L4, R3, L1, R5, L3, R2, R4, R2, L1, R3, L1, L3, L5, R4, R5, R2, R2, L5, L3, L1, L1, L5, L2, L3, R3, R3, L3, L4, L5, R2, L1, R1, R3, R4, L2, R1, L1, R3, R3, L4, L2, R5, R5, L1, R4, L5, L5, R1, L5, R4, R2, L1, L4, R1, L1, L1, L5, R3, R4, L2, R1, R2, R1, R1, R3, L5, R1, R4\";","export default \"Suddenly, whirling in the distance, you notice what looks like a massive, pixelated hurricane: a deadly [spinlock](https://en.wikipedia.org/wiki/Spinlock). This spinlock isn't just consuming computing power, but memory, too; vast, digital mountains are being ripped from the ground and consumed by the vortex.\\n\\nIf you don't move quickly, fixing that printer will be the least of your problems.\\n\\nThis spinlock's algorithm is simple but efficient, quickly consuming everything in its path. It starts with a circular buffer containing only the value `0`, which it marks as the **current position**. It then steps forward through the circular buffer some number of steps (your puzzle input) before inserting the first new value, `1`, after the value it stopped on. The inserted value becomes the **current position**. Then, it steps forward from there the same number of steps, and wherever it stops, inserts after it the second new value, 2, and uses that as the new **current position** again.\\n\\nIt repeats this process of **stepping forward**, **inserting a new value**, and **using the location of the inserted value as the new current position** a total of **`2017`** times, inserting `2017` as its final operation, and ending with a total of `2018` values (including `0`) in the circular buffer.\\n\\nFor example, if the spinlock were to step `3` times per insert, the circular buffer would begin to evolve like this (using parentheses to mark the current position after each iteration of the algorithm):\\n\\n- `(0)`, the initial state before any insertions.\\n- `0 (1)`: the spinlock steps forward three times (`0`, `0`, `0`), and then inserts the first value, `1`, after it. `1` becomes the current position.\\n- `0 (2) 1`: the spinlock steps forward three times (`0`, `1`, `0`), and then inserts the second value, `2`, after it. `2` becomes the current position.\\n- `0  2 (3) 1`: the spinlock steps forward three times (`1`, `0`, `2`), and then inserts the third value, `3`, after it. `3` becomes the current position.\\n\\nAnd so on:\\n\\n```\\n0  2 (4) 3  1\\n0 (5) 2  4  3  1\\n0  5  2  4  3 (6) 1\\n0  5 (7) 2  4  3  6  1\\n0  5  7  2  4  3 (8) 6  1\\n0 (9) 5  7  2  4  3  8  6  1\\n```\\n\\nEventually, after 2017 insertions, the section of the circular buffer near the last insertion looks like this:\\n\\n```\\n1512  1134  151 (2017) 638  1513  851\\n```\\n\\nPerhaps, if you can identify the value that will ultimately be **after** the last value written (`2017`), you can short-circuit the spinlock. In this example, that would be `638`.\\n\\n**What is the value after `2017`** in your completed circular buffer?\\n\\n[comment]: <> (PART 2)\\n\\nThe spinlock does not short-circuit. Instead, it gets **more** angry. At least, you assume that's what happened; it's spinning significantly faster than it was a moment ago.\\n\\nYou have good news and bad news.\\n\\nThe good news is that you have improved calculations for how to stop the spinlock. They indicate that you actually need to identify **the value after `0`** in the current state of the circular buffer.\\n\\nThe bad news is that while you were determining this, the spinlock has just finished inserting its fifty millionth value (`50000000`).\\n\\n**What is the value after `0`** the moment `50000000` is inserted?\";","export default \"BBFFBFBRLL\\nFFFFBFBRLR\\nBFFBBFBRLR\\nBFBBBFBLLL\\nFFBBFBBLRR\\nBFBFFFFRRL\\nBBBBFFFRLR\\nBFFFBBFRLL\\nFFFFBFBRRL\\nBFBBFFFRRL\\nBBFBBBFRLL\\nFBFFBFFRLL\\nFBBBBBBLRL\\nFFFBBFBLRL\\nFFBBFFFLLR\\nFBBFFFBLLL\\nFFBFBBBRRL\\nFBFBBBFRRL\\nFFBBBFFLRL\\nBFBBBBFRLR\\nFBBBFFBRRL\\nFBBFBFFRLL\\nFBFBFBBLLL\\nBFBFFFFLRR\\nFFFBBFFLLL\\nFFFFBFFRLL\\nFBBBBFBRRR\\nFBBFBBBLRL\\nBBBBFFFLLL\\nFFFFBFBLLR\\nBFFFFBBRLL\\nBFFFFBBRLR\\nBFFFFFBRLL\\nBFFBBBFRRL\\nFBFFBBBLRR\\nBFBFFBFRRR\\nBBBBFFBLRR\\nFFFFFBBRLR\\nBFFFBBBRLR\\nBBFBFFBRRL\\nFBBFBFBLRR\\nBFBBFBFRLR\\nFFFFFBFRRR\\nBFFFFFBLRL\\nFFFBFBBLLR\\nBFFFBBBLRR\\nFFBFFBBRRL\\nFBBBBBBLLL\\nFBBBBFBLRL\\nBBFFFBFRRL\\nBBFFFBBRRL\\nFFBFBFBLRL\\nFFFFBBBRLR\\nFBBFFBFLRL\\nFBBBBFBRLR\\nBBFBFBBLRL\\nBBBBFFFLRR\\nBFBBFFBRLL\\nBFBBFBBRLR\\nFFFBBFBRRR\\nBFFBBBFRRR\\nBFBBFBBLRR\\nFBBFFBBLRL\\nFFFBFBBRRL\\nBFFFBFBRRR\\nFBBBFFBLRR\\nBBFFBBBLLR\\nBFFBBBBRLR\\nBBBBFBFRRR\\nBBBBFFFRRL\\nBBFFBBBRRL\\nFFBBBBBRRL\\nFFFFBBFRRL\\nBFFFFFBLLL\\nFFBFFBBLRL\\nFFFBBFFLRL\\nBFBFBFFLLR\\nFFFFBFFRRL\\nFBBBBFFRLR\\nFBBBBFBRRL\\nFBBBFBFLLR\\nFBBBBBBRRR\\nFBBFFFFRRL\\nFBFBFFFRLL\\nBBFFFBFRLL\\nBFFBFFFRLL\\nFFFFBFFLRL\\nFBBFFFFLLR\\nBBBBFFBRLL\\nFBFBFBBRLL\\nBBFBBBFLLL\\nFFBFBBBRRR\\nBFBBFBFRRR\\nBFBFBBFLRR\\nBBFBBBFLRL\\nBBFFFBBLRL\\nFBFFFBFRLR\\nFFBFFBBRLL\\nFFBFFBFRLR\\nBBBFBFFLLR\\nBBFBFBBLRR\\nFBBBBFFLLR\\nBFFBFBFLRL\\nFFFBFFFLRR\\nFBBFBBBRRL\\nFBFBBBBRRL\\nBFBFBBFLLL\\nBFBFBBFRLL\\nFBFBFFBLLR\\nFBFFFFBRLR\\nBBFBBBFRRL\\nBBBFFFFLLL\\nFFFFBFBLRL\\nFFBFFFBLLR\\nFFFBBBBRRL\\nFFBFFFBLRL\\nBBBBFBFRRL\\nFFFBFFFLLR\\nBBBBFBBRLR\\nBBFBBBBRRL\\nFBFBFFBRLL\\nFBBBFBFRLL\\nBFFBFBBRLR\\nFBFBFBBLRR\\nFBBFFFBLRR\\nFFFBBFFRLR\\nBBBFFFBRLR\\nBBFFBFFLLL\\nBFFFFBBLLR\\nBFBFBBFLRL\\nFFBFBFBRLL\\nFBBFBFBRRL\\nBBBFBFFLLL\\nFFBBFFFRRR\\nBFFBBFBLLL\\nBBBFFBFLLR\\nFFFBFBBLLL\\nFFBFBFFRLL\\nBFFBBBBLRL\\nFBFBBFFLRL\\nFBFFBFBLRL\\nBFBBBBFLRR\\nBBBFBFFRRR\\nFBFBBFFRLR\\nBFBBFFFLLR\\nBFFFBFBLRR\\nFBFBFBBRLR\\nFFFFFBFRLR\\nFFFFBBBRRL\\nFBBFFBFLLL\\nFBBBBBBRLR\\nFBBFFFBRLR\\nFBBBFBBRLL\\nFFFBFBFRLL\\nBFBFBBFLLR\\nFFBFFBFRRL\\nBBFBBBFRLR\\nFFBBBBBLRL\\nBBFBBFBRLL\\nFFBFFFBRLL\\nFFBBBFFRLR\\nBFFBBBFLRL\\nFFBFBFBRRL\\nFBBFFFBRRR\\nBBFBBFFLLL\\nFBFFFFFRLL\\nFBFFFFBLRL\\nFFFBFFBRRR\\nBBBFBFBRLL\\nBBBBFBBRLL\\nBFFBFBBLLR\\nBBBFFFBLRL\\nBFFBFFBRLL\\nBFFBBFBRRL\\nFBFFFFFRRL\\nFFBBFBBRRR\\nBBFFBBFLLR\\nFFBFFBBLRR\\nBBBFBFFLRL\\nBBBBBFFLLL\\nFFBBBBBLRR\\nBFFBFFBRLR\\nBFFBBFBLRL\\nBBFFBBFRRL\\nFFFBFFBRLR\\nBFBFBBBLLR\\nBFFBFFFLLL\\nFBBFBBBRLR\\nBFBFBBBRRL\\nFBFBFFBRRL\\nBBBFBFBLRL\\nBFFFBBBLLR\\nFBBBFBFLRR\\nFFBBBBBRLR\\nFFBFFBBLLL\\nBBFFBFBLRL\\nBFBFBFBRRL\\nBFBFFBFLRR\\nFFBBBFBLLR\\nBFBFBBBRRR\\nFBFFBBFLRR\\nBBBFBFFRLR\\nBFFFFBFRLL\\nFFFFBBFLRL\\nFBBBBFBLLR\\nBFBFFFFLLR\\nFFBBFBBRLL\\nFBFBBFFRRL\\nBFFFBBFLRR\\nBBBFFBFLRR\\nFBBBFFFLRR\\nBBFFFBFRLR\\nFFFBFBBRLR\\nFFBBFBBLRL\\nFBFFBBBRRR\\nBBFBBBBLLR\\nBFFFFFBRLR\\nBBFBFBFRLR\\nFBFBBBFLRR\\nBBFFFBBLLL\\nBBBFBFBLLR\\nBFFBBFFLRL\\nFFBFFFFRLR\\nBFFFFFBRRR\\nFFBBBFBLRR\\nBBBFBBBLRR\\nBBBBBFFLRL\\nFBFFFBFRRR\\nBFFFFFBLLR\\nFFBBFBFLRL\\nBBFFFBFRRR\\nBBBFBFBRLR\\nBBFBBFBLRL\\nFFFBFFBLRL\\nFFFBFFBRLL\\nBBBBFFFRLL\\nFBBFFFFLRR\\nFFBBFFBLLR\\nFBFFBFBRLL\\nFFBFBFFLLL\\nBFBBFFBLRR\\nBFBFFFBRLR\\nBBBFFBFRRL\\nFFBBFBBRLR\\nBBFFFFBRLL\\nBBFFBFBLLR\\nBBFFBFBRRL\\nFBBBFBBRRL\\nFFFFFBBRLL\\nFBFFFBFRRL\\nFBBFBFFLRL\\nFBFBBBFRLL\\nBFFFBFFLRR\\nBFFBBFBRRR\\nBFBBFBBLLL\\nBBFBFFFLRL\\nBFBFFFFRRR\\nFBBFBBBLRR\\nFFBBBBBLLR\\nFFFFBBFRRR\\nFFBBFFBRRR\\nBBFFFBBLLR\\nBFFBFFBLLR\\nBBBFFFFRLL\\nFFFBFBFLLR\\nBBFBFFBLRL\\nFFBBBFBRRL\\nBBFBBBBRRR\\nBBFBBFBRRR\\nFFFFBFBRLL\\nFFFBFFBLLR\\nFFBFBBBLLR\\nFBBBFBFLRL\\nBFBBBBBLLL\\nBFBBFBFRLL\\nBFBFBBBLRR\\nFFBFBFBLLL\\nBFBFFFBLLR\\nBBBBFBBRRL\\nFFBFFBFLRR\\nFBFBBFFLLL\\nBFBFBBBRLL\\nBFBFFFBRRR\\nFBBFBBFRRR\\nBFFBFBFRLL\\nBBFFFFBRRL\\nBFBFBFBLRL\\nFBBBFFBRRR\\nFFFFBBBLLR\\nBBBFFFFRRR\\nBBBFFFFLRR\\nFFBFBBFLLL\\nBFBFBFFRRR\\nBBFFFBBRLR\\nFBBBBBFLRR\\nFBFFBFBLLR\\nFFBFFFBLLL\\nBFFFFBBLRL\\nBBBFBBBRRR\\nBBBFFFBRRL\\nBFFFFBBLRR\\nBBFFBBBRLL\\nBFBFFFFLRL\\nBBFFFFFLRR\\nBBFFFBFLRR\\nFBFFBBFRRL\\nBFFFBBBLLL\\nBFBBBFFRRL\\nBFFFBFBLRL\\nFBBBBFFRLL\\nBFBFBBBLLL\\nBFBBFFBLLR\\nBBBBFBBLLL\\nFBFBFBFLRR\\nFBBBFFFRLR\\nBFFBFBFRRL\\nBFBBFFFRLR\\nFBBBFFFLRL\\nFBBBBFFLRR\\nFBFFFFBLLL\\nBBBFFBBRLL\\nFBBFBFFLLL\\nBFFBBFBRLL\\nBFFFFBFRLR\\nFFFBBFFRRR\\nFFFBBBFRLR\\nFBBFFBFRRR\\nFBFFFFBRRR\\nBFBFBFBRLL\\nBBBBBFFRLL\\nBFFFFBFLLL\\nBBFFBBFRRR\\nBFBFFFBLLL\\nFFFBFBFRRR\\nFBFBBFBRRL\\nBFBFFFBRRL\\nFFFBBBBRRR\\nBFBFFBBLLR\\nFBBBFBBLLR\\nBBFBBFBLLR\\nBFFFFFFLLL\\nFBBFBFFRLR\\nFFBBBBFLLL\\nBFBBFBFLRL\\nBFBFBFBLLL\\nFBBBFBBLLL\\nBFBFBFBRRR\\nFBFBFFFLRR\\nFBFBBFBLLL\\nFBFFFFBLRR\\nBBBFFBFRLL\\nFFFBFFBRRL\\nBBFBFBFRRR\\nFBBFFBFRLL\\nBBBFBBFRRR\\nFBFBBFFLRR\\nBBFBBBBLLL\\nFFBFFBBLLR\\nFBBBFFFRRR\\nFFFFFBBLLL\\nFBFFBBBRRL\\nBFFBBBFRLL\\nBFFFBFFLLR\\nFBFFBBBLLL\\nFFFBBBBRLR\\nBFBBBFFLLR\\nFBFBBBBLLR\\nFBBFBFBRRR\\nBBFFBFFRRR\\nFBBFFFFLRL\\nFBFBBBBLRR\\nFFBBFBFRRR\\nFBFBBFBRLR\\nBBFBFBFRRL\\nFBBBBBFLLL\\nFBFFBFFLLR\\nFBFBFBFLLL\\nBFFBFBFLRR\\nFBBBBBFRLL\\nBFFBBBFRLR\\nBBFFFFFLLL\\nFFFFBBFRLR\\nBFBBBBBLLR\\nBBFFFBBRLL\\nFBFFFFFLRR\\nBBBFFBBRRR\\nFFFBFFBLRR\\nBFFFFFFRLL\\nBBFFFBFLLR\\nBFFBBFFLLL\\nFBBBFFFRRL\\nBBBBFBFLLL\\nFBBFFFFRLL\\nFBFBBFBRRR\\nBFFFFFFRLR\\nBFBFFFFLLL\\nFBFBBFBLLR\\nBFBBFBFLLR\\nBFBBFBBLRL\\nBFFFBFFRLR\\nBBFBBFFRRR\\nFBFBFBFRLL\\nFFBBFBFRRL\\nBFFFBFFLRL\\nFBFFBBBLRL\\nBBBFFBFLRL\\nFFBBBFBRRR\\nBFFFBFBRRL\\nFFBBFBFLLR\\nBFFBFFFLRL\\nBBBFFFFLRL\\nFFBBFFBRLR\\nBFFBFBBRRR\\nBFFBFFBLRR\\nBFFFBBBLRL\\nFFBFBFFRRR\\nFFBFBBFRRL\\nFFBBBBFRLR\\nBBBFBBFLRR\\nBFBBFFFLRL\\nBFBBBBFRRR\\nFFBFFFBLRR\\nFFBFBFFLLR\\nFBFFBFBRRL\\nBFFFFFFLRR\\nFBBBBBBLRR\\nBBFFBBFLLL\\nBFBBBBFRRL\\nFFBFFFFLLR\\nBBFFFBFLLL\\nFFBFBFFLRR\\nFFBBBBFLRL\\nFFFBBBFRRR\\nFBBFFBFLRR\\nFBFBBBBRLL\\nFFFBBBBLLL\\nFFBBBBFRRL\\nFBBBBBBLLR\\nFBBFBFFLLR\\nBFBBFBFRRL\\nBBFFBFBLRR\\nFBFFBFFRRR\\nFFFBBBBRLL\\nBFFFFFFLLR\\nBFFFFBFLLR\\nFFFBBBFRRL\\nBFFBFFFLLR\\nFBFFFFFLLL\\nBBBBFBBLRR\\nBBFFBFFRRL\\nBFBBFFBLRL\\nFBBBBFFRRR\\nFFFBBFBLLR\\nFBBFFFFRLR\\nFFFBFBBLRL\\nBFBBBBFLLR\\nBBFFFBBRRR\\nBFBFBBFRRR\\nFFFBFFFRRL\\nBBFBFBFRLL\\nFBFFBFFRLR\\nBFFBFFBLLL\\nFFFFBFBRRR\\nBFFBBFFRLR\\nFBBBFBBLRL\\nFBFFBBBRLL\\nFBBBBBFRLR\\nFBBBFFBLLR\\nFBFBBFFRLL\\nFFBBBFFRRL\\nBBFBBBBLRR\\nBFFFFBBRRL\\nBFFFBFFRRL\\nFBBFBBFRRL\\nBFBBFFBRLR\\nBFFFFBFLRL\\nBBFFFFBLLR\\nFBFFFFFRRR\\nFFFFBBBRLL\\nFFFFBBFLLR\\nBBBFBBBLLR\\nFFBFFFFRLL\\nFBBBFFFLLR\\nFFFFBBBLRL\\nFBFBBBFLLL\\nFBFFFBFLLL\\nBBBFFBBLRR\\nFBBBFFFLLL\\nBBFBBFFRLR\\nFFFFBFFLLL\\nBBFFBFFLLR\\nBFBBBBFRLL\\nBFFBBFFRLL\\nBBFFFFBRLR\\nFBBBBFBRLL\\nBFBBFFBLLL\\nFBBFFFFLLL\\nFFBFFBBRRR\\nFBFFBBBLLR\\nBFBBBFBLRL\\nBBFFBBFRLR\\nFFBBBFFRRR\\nBBBBFBFRLL\\nBFFFBBBRRR\\nBBFFFFFRLR\\nFBFBFFFLLR\\nBBFFBBFRLL\\nBFFBBFFLLR\\nFFFFBBBRRR\\nFFFBFBFRRL\\nBBBFBBFRRL\\nFBBBFBBRLR\\nFBFBFFFRRR\\nBFFBBBBLLR\\nBBBFBFBLRR\\nFBFBBFBLRR\\nBBBFFBBRLR\\nFBFBFBBLRL\\nBBBFFBBLLR\\nBBFBFBBRLL\\nFBBBFFBRLL\\nFFBBFFFRLL\\nFBFFBFFRRL\\nBBBBFFBRRR\\nFBFBFFFLLL\\nFFFFBBFRLL\\nBFFBFFFRRR\\nBBFFBFBRLR\\nFFBBBFBRLL\\nBBFBFFFLLL\\nFBBFBBFRLR\\nFFFBFFFRLL\\nFBBFFBFRRL\\nBFBFFBFLRL\\nBBBFFFFRRL\\nBBFFBBBRRR\\nFFBFBFFRLR\\nFFBBFFFRLR\\nFBFBFBBRRL\\nFFBBFBBLLR\\nFBFFFFFRLR\\nBBBBFBBLRL\\nBBFFBFFRLL\\nFBBBFBFLLL\\nBBBFBFBLLL\\nBFFBFFFLRR\\nBFBFFBFRLL\\nBFBBBBFLRL\\nBBBBFFFLRL\\nFFFBFFBLLL\\nFFFFBFBLRR\\nFFFFFBBRRR\\nFFFBFBBLRR\\nBFFFBBFRRL\\nFFBFBBFLRR\\nBBFBBBBRLL\\nFBBBBBFRRR\\nBFFFFBFLRR\\nBFBFFBBRRL\\nFBFBBFBLRL\\nBBBFFBBLLL\\nFFBBBFFLRR\\nBBBBFBFLRL\\nBBBBFFBLLL\\nBFFFBBBRLL\\nFBBFFFBLLR\\nBFBBBFFRLL\\nFBBFFBFRLR\\nBBFBBFBRRL\\nBFBBFBBRLL\\nBBFBFFFRRR\\nFBBBFFBRLR\\nBBFFBBBLLL\\nBFFFBFBLLR\\nBBFBFFBRLR\\nFFBFFFBRRL\\nFFBFBFBRLR\\nBBFFBFBLLL\\nBFBFBBBRLR\\nFBFFFBFLRL\\nBFBFFFFRLR\\nBBFFFFFRLL\\nBBBFFFBRRR\\nFBFFBBFRRR\\nFFFBBFFLLR\\nFFFBFBFRLR\\nFFBBBBFLRR\\nBFFFBFBRLR\\nFFBFFBBRLR\\nFBBFFFBRLL\\nFBBFBFFLRR\\nBFFFFFFRRR\\nBBBFBBBRLL\\nFBFFFBBRRL\\nFFBBBFBLRL\\nFBFFBFBLLL\\nFFFFBFFRLR\\nFBFFBFFLRL\\nFFBFBFFRRL\\nFBBBFFBLLL\\nBFFFFBBRRR\\nBBBBFFBLLR\\nFFFFFBBLRL\\nFFBBBFFLLR\\nFBBBFFFRLL\\nFFBFFBFRRR\\nBBBBFFBRLR\\nFFBBFBFLRR\\nBFBBBBBRLL\\nBFBBBBBLRL\\nFFBFBBFRLR\\nFFBFBBBRLL\\nBFFBBFBLLR\\nBFBFFFFRLL\\nBBFBBFFRRL\\nBFBFFBFRLR\\nFFBBFFFLRL\\nFFBBBFFLLL\\nBFFBFBFLLL\\nBFBFBFBRLR\\nFBBFBFBLLR\\nBFBFFBBLRR\\nFFFFBFFLRR\\nBBFBBFBLLL\\nFBFFFFFLRL\\nBBBBFBFRLR\\nBFFFBBFRRR\\nBBFBBFFLRR\\nBFBBBFBRLL\\nBFFBFFBLRL\\nBFBFFFBLRR\\nBFFFBFFRRR\\nFBFFFBBLLL\\nFBFBBBBLRL\\nFBFBFFFRLR\\nBBFFBBFLRL\\nBFBFBFBLLR\\nFBFFFBFLRR\\nBFFBFBBRRL\\nFBFBBBFLLR\\nFBFBFFBLRL\\nBBFBFBBRRR\\nFBBFFBBLRR\\nBBFFFFBLLL\\nFBFFBBBRLR\\nFBFFFBFLLR\\nBFBBFFFLLL\\nBBBBFBFLRR\\nBFFBFBBRLL\\nBFFFFFFRRL\\nBFBFBFFRRL\\nFFBFBFBLRR\\nFFFBFBFLRR\\nFFFBFBBRRR\\nFBFFFBBRLR\\nFFBBFFBRRL\\nBBFBBBBRLR\\nFFFBBFBRLR\\nFBFFBBFLRL\\nBBBFFFBRLL\\nBBBFBBBRLR\\nFFBFFFFRRR\\nFBBFBFBLLL\\nBFBBBFBRRR\\nBFBBFFBRRL\\nFFFBBBFLLL\\nFBBBBFBLLL\\nFFBFBFBLLR\\nBFFBFFFRLR\\nBBBBFBFLLR\\nFBBFBBFLLL\\nFBFFFBBLRR\\nFFBFBBFRRR\\nFBFBFBBRRR\\nFFBFBFBRRR\\nFFBBFBFRLL\\nFBFBBBBLLL\\nBFBFFBBLLL\\nBBBFFFFRLR\\nBBBFBFBRRR\\nBFBFBFBLRR\\nBFBFBBFRLR\\nBFBBBFFLLL\\nFBBFFBBRRR\\nBFFFFFBLRR\\nBFFBFBFRLR\\nBBFFBFFRLR\\nBFBBBBBLRR\\nFBFFFBBLRL\\nBFFBFBFRRR\\nBFFFFBFRRL\\nFFBFBBBLLL\\nFBBBFBFRLR\\nFFFBBFBLLL\\nFBFBBBFRLR\\nBFBFFFBRLL\\nBFFBBBBLRR\\nBBFFBFFLRL\\nBBBFBBFRLL\\nBBBFFFBLRR\\nFBBFFBBRLR\\nFBBFBBFLRR\\nBBFBFBBRRL\\nFFBBBBBLLL\\nBFBBFBBLLR\\nBFBBBFFLRR\\nBBBFFFBLLL\\nFBFBBBBRLR\\nFBFBFFBLRR\\nFFFBBBFLRL\\nBBBFFBBLRL\\nFBBFBFBRLL\\nBBBBFBBLLR\\nFFBBBBBRRR\\nBBBFBBFLRL\\nBFBBBFBRLR\\nFFFBFFFRRR\\nBFFFBBFRLR\\nFBFFFFBRLL\\nBFFBFFBRRL\\nBBBFBBBRRL\\nFFBFFBFRLL\\nFBFBBFFRRR\\nFFBFFFBRLR\\nFFFFBFFLLR\\nFFBBFFFLLL\\nFBFFFBBLLR\\nFFBFBBFLRL\\nBFFBFBBLLL\\nFBBBFBBLRR\\nFFFBFBFLLL\\nFBBFBFBLRL\\nFFBBFFFRRL\\nBFBFBFFRLL\\nBFFFFBFRRR\\nBBBBFFFRRR\\nBFFBFFBRRR\\nFFFFBFFRRR\\nFFBBFBBRRL\\nFBBFBBBRLL\\nBBBBFFBLRL\\nFBBFBBFRLL\\nBFFBBBBRLL\\nBFBBBFBRRL\\nBBFBFBFLLR\\nFFFBBBBLLR\\nBFFBBFFLRR\\nBBBFBBBLRL\\nFBBFBFFRRL\\nBBFBFFFRRL\\nBBFBFFBLRR\\nBBBFBBFRLR\\nFBBBFBFRRR\\nBBFBFBFLRL\\nFBBFBBFLRL\\nFFBFFFFLRR\\nBFBBFBBRRL\\nFBBBBFFRRL\\nFBFBFFBRRR\\nBBBFFBFLLL\\nFFFBFFFLRL\\nFBFBBBFRRR\\nBBBFBFFRRL\\nBFBFFFBLRL\\nBBBFBFFLRR\\nBFFFBFFLLL\\nFFBFBBFLLR\\nFFBFBBFRLL\\nFBFBBBFLRL\\nBFFBBBBRRL\\nFBBBFBFRRL\\nFFBBBFBLLL\\nBFBBBFFLRL\\nBBBBBFFLLR\\nFBFBFFFRRL\\nBFFBFBBLRR\\nBBFFFFBLRR\\nFBFFBFBLRR\\nFBFFBBFRLR\\nFFBBFFBLRL\\nFFFFFBBLRR\\nBBBBBFFLRR\\nBFBBBBFLLL\\nFBBFBFFRRR\\nFFFFFBBLLR\\nFFBFFBFLLL\\nFFBFBBBLRR\\nFFBBFBFRLR\\nBFBBBFFRRR\\nFBFFBFBRLR\\nBBBFBBFLLR\\nBFBBFBFLRR\\nFBBBFFBLRL\\nBFBBBBBRLR\\nFBBFBBFLLR\\nBFBBBFFRLR\\nFBBBBBFLRL\\nBFBBBBBRRR\\nBFFBBBBRRR\\nBBFBFBFLRR\\nBFFBBBBLLL\\nBBFFFBFLRL\\nBFBBFBFLLL\\nFBFFFFBRRL\\nFFBBBBFRRR\\nFFBFBBBRLR\\nBBFBFBFLLL\\nFBFFBFBRRR\\nFFFBBBFLLR\\nFFFBFBFLRL\\nBFBFBBBLRL\\nFBBFFBBLLL\\nBBBFBFBRRL\\nFBFFFBBRRR\\nBFFFBFBLLL\\nFFFFBFBLLL\\nFFFBBFBRLL\\nFBBFFFBRRL\\nFFBBFBFLLL\\nFFBBFFBRLL\\nFBFBFBFLLR\\nBBFFFFBLRL\\nBFBFBBFRRL\\nFFFBFBBRLL\\nFBBFFBBRLL\\nBBFBFBBLLR\\nBFFFBFFRLL\\nBFBFBFFLRR\\nFBFFFFBLLR\\nFFFBBFBRRL\\nFFFBBBBLRL\\nFFBBFFBLRR\\nBFFFBBFLLL\\nFFFBFFFLLL\\nFBFBFBFRRR\\nBFBBBFBLLR\\nBFFBFFFRRL\\nFFFFBBFLRR\\nFBFBFBFRRL\\nBFBBFBBRRR\\nBFBFFBBLRL\\nFBFBBFBRLL\\nFBBBBFFLRL\\nFFBFBFFLRL\\nFBBFBBBRRR\\nFBFBFBFRLR\\nFFBFFFFLRL\\nBBFBFBBRLR\\nBFBFFBBRLL\\nBBFFBFBRRR\\nBFBBBBBRRL\\nBBFBBBFLLR\\nBBFFBBBRLR\\nBBFBFFFLLR\\nFFFFBBFLLL\\nFBBFFFFRRR\\nBBFBFFBRLL\\nFFBBFBBLLL\\nBFBBFFFRRR\\nBFBBFFFRLL\\nBFFBBFFRRL\\nBBFBBBFRRR\\nBFFFBFBRLL\\nBFFFBBBRRL\\nFBFBBFFLLR\\nFBFFBBFRLL\\nBBFBBFBLRR\\nBBBFFFFLLR\\nFBBFBBBLLL\\nFBFFBBFLLL\\nBFFBFBBLRL\\nBBFFFFFRRL\\nFFBBBBBRLL\\nFBFFBFFLLL\\nFFFFFBFRRL\\nBBBBFFBRRL\\nFBBFBFBRLR\\nBBFBBFBRLR\\nBFFBBFBLRR\\nBFFFFBBLLL\\nBBBBFBBRRR\\nBBBFFFBLLR\\nFFBFFFFLLL\\nFBBFFBFLLR\\nBBFFFFFLRL\\nFFFFBBBLRR\\nFBBBBFFLLL\\nFFBBFFBLLL\\nBBFBFFBRRR\\nFBFBFBFLRL\\nFFFBBBFLRR\\nBFBBBFBLRR\\nFBBBBBFLLR\\nBBFFBBBLRL\\nFFBFFBFLLR\\nFFFBBBFRLL\\nFBFFFBBRLL\\nBFFBFBFLLR\\nFFBBBFBRLR\\nBBFFFBBLRR\\nBFFFBBFLRL\\nFFFBBFFLRR\\nBBBFBBBLLL\\nBBFBFFFRLL\\nFFFBBFFRRL\\nBFBBFFFLRR\\nBBFFFFBRRR\\nBBFFFFFLLR\\nBBFBBBBLRL\\nFFBFBBBLRL\\nBBFFFFFRRR\\nFBFBFFBLLL\\nBFFBBBFLRR\\nFFFFFBBRRL\\nBFFFFFBRRL\\nBBBFBFFRLL\\nFBFFBBFLLR\\nBBBFFBFRRR\\nBBFBFFFLRR\\nBBFFBBFLRR\\nBFBFFBFRRL\\nFBBBFBBRRR\\nBBFFBFFLRR\\nBBFBFFFRLR\\nFBBBBBFRRL\\nBFFFBBFLLR\\nBBFBBFFLLR\\nFBFFFFFLLR\\nFFFBBFFRLL\\nBBFBBFFRLL\\nFFFFBBBLLL\\nBFBFFBBRLR\\nFBBFBBBLLR\\nBFFBBBFLLR\\nBFFFFFFLRL\\nBFFBBBFLLL\\nBFBFFBFLLL\\nBBFBFFBLLL\\nFFBBBBFRLL\\nFBFFBFFLRR\\nBBBFFBBRRL\\nBFFBBFFRRR\\nBBBBFFFLLR\\nBFBBFFBRRR\\nFBFFFBFRLL\\nFFBBBFFRLL\\nFBBBBFBLRR\\nFFFBBFBLRR\\nFFBBFFFLRR\\nBBFBBBFLRR\\nFBFBFFBRLR\\nFBBFFBBLLR\\nBBFFBBBLRR\\nBBFBFFBLLR\\nFBBFFFBLRL\\nBFBFBFFLRL\\nFFFBFFFRLR\\nFBFBFFFLRL\\nBBBFFBFRLR\\nBBBFBBFLLL\\nFBFBFBBLLR\\nBFBFBFFLLL\\nFFBFFFBRRR\\nBFBFBFFRLR\\nFFFBBBBLRR\\nBBFBBFFLRL\\nFFBFFFFRRL\\nBFBFFBFLLR\\nFFBBBBFLLR\\nFBFBBBBRRR\\nFFBFFBFLRL\\nFBBBBBBRLL\\nBBFBFBBLLL\\nFBBFFBBRRL\\nFBBBBBBRRL\";","export default \"Your flight to the major airline hub reaches cruising altitude without incident. While you consider checking the in-flight menu for one of those drinks that come with a little umbrella, you are interrupted by the kid sitting next to you.\\n\\nTheir [handheld game console](https://en.wikipedia.org/wiki/Handheld_game_console) won't turn on! They ask if you can take a look.\\n\\nYou narrow the problem down to a strange **infinite loop** in the boot code (your puzzle input) of the device. You should be able to fix it, but first you need to be able to run the code in isolation.\\n\\nThe boot code is represented as a text file with one **instruction** per line of text. Each instruction consists of an **operation** (`acc`, `jmp`, or `nop`) and an **argument** (a signed number like `+4` or `-20`).\\n\\n- `acc` increases or decreases a single global value called the **accumulator** by the value given in the argument. For example, `acc +7` would increase the accumulator by 7. The accumulator starts at `0`. After an `acc` instruction, the instruction immediately below it is executed next.\\n- `jmp` **jumps** to a new instruction relative to itself. The next instruction to execute is found using the argument as an **offset** from the `jmp` instruction; for example, `jmp +2` would skip the next instruction, `jmp +1` would continue to the instruction immediately below it, and `jmp -20` would cause the instruction 20 lines above to be executed next.\\n- `nop` stands for **No OPeration** - it does nothing. The instruction immediately below it is executed next.\\n\\nFor example, consider the following program:\\n\\n```\\nnop +0\\nacc +1\\njmp +4\\nacc +3\\njmp -3\\nacc -99\\nacc +1\\njmp -4\\nacc +6\\n```\\n\\nThese instructions are visited in this order:\\n\\n```\\nnop +0  | 1\\nacc +1  | 2, 8(!)\\njmp +4  | 3\\nacc +3  | 6\\njmp -3  | 7\\nacc -99 |\\nacc +1  | 4\\njmp -4  | 5\\nacc +6  |\\n```\\n\\nFirst, the `nop +0` does nothing. Then, the accumulator is increased from 0 to 1 (`acc +1`) and `jmp +4` sets the next instruction to the other `acc +1` near the bottom. After it increases the accumulator from 1 to 2, `jmp -4` executes, setting the next instruction to the only `acc +3`. It sets the accumulator to 5, and `jmp -3` causes the program to continue back at the first `acc +1`.\\n\\nThis is an **infinite loop**: with this sequence of jumps, the program will run forever. The moment the program tries to run any instruction a second time, you know it will never terminate.\\n\\nImmediately **before** the program would run an instruction a second time, the value in the accumulator is **`5`**.\\n\\nRun your copy of the boot code. Immediately before any instruction is executed a second time, **what value is in the accumulator**?\\n\\n[comment]: <> (PART 2)\\n\\nAfter some careful analysis, you believe that **exactly one instruction is corrupted**.\\n\\nSomewhere in the program, **either** a `jmp` is supposed to be a `nop`, **or** a `nop` is supposed to be a `jmp`. (No `acc` instructions were harmed in the corruption of this boot code.)\\n\\nThe program is supposed to terminate by **attempting to execute an instruction immediately after the last instruction in the file**. By changing exactly one `jmp` or `nop`, you can repair the boot code and make it terminate correctly.\\n\\nFor example, consider the same program from above:\\n\\n```\\nnop +0\\nacc +1\\njmp +4\\nacc +3\\njmp -3\\nacc -99\\nacc +1\\njmp -4\\nacc +6\\n```\\n\\nIf you change the first instruction from `nop +0` to `jmp +0`, it would create a single-instruction infinite loop, never leaving that instruction. If you change almost any of the jmp instructions, the program will still eventually find another jmp instruction and loop forever.\\n\\nHowever, if you change the second-to-last instruction (from `jmp -4` to `nop -4`), the program terminates! The instructions are visited in this order:\\n\\n```\\nnop +0  | 1\\nacc +1  | 2\\njmp +4  | 3\\nacc +3  |\\njmp -3  |\\nacc -99 |\\nacc +1  | 4\\nnop -4  | 5\\nacc +6  | 6\\n```\\n\\nAfter the last instruction (`acc +6`), the program terminates by attempting to run the instruction below the last instruction in the file. With this change, after the program terminates, the accumulator contains the value **`8`** (`acc +1`, `acc +1`, `acc +6`).\\n\\nFix the program so that it terminates normally by changing exactly one `jmp` (to `nop`) or `nop` (to `jmp`). **What is the value of the accumulator after the program terminates?**\";","export default \"198\\n208\\n209\\n212\\n213\\n217\\n218\\n223\\n222\\n224\\n216\\n233\\n238\\n239\\n240\\n250\\n263\\n264\\n267\\n274\\n288\\n316\\n319\\n330\\n340\\n347\\n349\\n354\\n350\\n349\\n351\\n352\\n353\\n371\\n383\\n385\\n405\\n413\\n455\\n451\\n459\\n458\\n459\\n461\\n463\\n475\\n480\\n486\\n489\\n497\\n502\\n512\\n513\\n516\\n517\\n528\\n559\\n560\\n558\\n565\\n566\\n567\\n571\\n573\\n574\\n582\\n583\\n585\\n589\\n597\\n608\\n607\\n614\\n619\\n608\\n624\\n665\\n666\\n675\\n695\\n698\\n703\\n711\\n733\\n738\\n739\\n742\\n743\\n763\\n775\\n778\\n804\\n806\\n810\\n812\\n818\\n819\\n828\\n867\\n866\\n876\\n878\\n881\\n875\\n881\\n858\\n859\\n868\\n869\\n860\\n888\\n890\\n891\\n893\\n894\\n919\\n924\\n925\\n933\\n937\\n950\\n955\\n966\\n984\\n989\\n993\\n996\\n997\\n1015\\n1031\\n1035\\n1039\\n1055\\n1057\\n1058\\n1059\\n1060\\n1061\\n1067\\n1069\\n1070\\n1059\\n1060\\n1077\\n1079\\n1078\\n1080\\n1087\\n1088\\n1090\\n1097\\n1082\\n1102\\n1105\\n1106\\n1120\\n1125\\n1130\\n1132\\n1154\\n1141\\n1135\\n1131\\n1133\\n1134\\n1137\\n1138\\n1141\\n1142\\n1143\\n1166\\n1175\\n1193\\n1201\\n1236\\n1238\\n1234\\n1240\\n1242\\n1243\\n1271\\n1276\\n1277\\n1272\\n1286\\n1288\\n1290\\n1292\\n1317\\n1341\\n1361\\n1363\\n1375\\n1376\\n1377\\n1383\\n1387\\n1390\\n1402\\n1404\\n1412\\n1418\\n1426\\n1429\\n1466\\n1480\\n1483\\n1478\\n1484\\n1486\\n1488\\n1491\\n1486\\n1489\\n1492\\n1517\\n1520\\n1523\\n1539\\n1546\\n1551\\n1521\\n1517\\n1518\\n1522\\n1525\\n1526\\n1539\\n1540\\n1544\\n1545\\n1561\\n1571\\n1572\\n1574\\n1575\\n1568\\n1573\\n1587\\n1588\\n1600\\n1603\\n1627\\n1629\\n1633\\n1645\\n1670\\n1671\\n1685\\n1690\\n1696\\n1698\\n1703\\n1698\\n1699\\n1702\\n1714\\n1716\\n1709\\n1738\\n1753\\n1761\\n1766\\n1769\\n1772\\n1761\\n1763\\n1774\\n1781\\n1782\\n1799\\n1802\\n1816\\n1818\\n1819\\n1805\\n1810\\n1817\\n1819\\n1831\\n1834\\n1835\\n1852\\n1855\\n1858\\n1859\\n1856\\n1857\\n1868\\n1885\\n1891\\n1893\\n1890\\n1891\\n1892\\n1893\\n1896\\n1911\\n1912\\n1914\\n1916\\n1914\\n1918\\n1930\\n1932\\n1958\\n1966\\n1976\\n1982\\n1985\\n1986\\n1987\\n1992\\n1997\\n2031\\n2041\\n2042\\n2044\\n2058\\n2060\\n2075\\n2073\\n2084\\n2087\\n2090\\n2125\\n2128\\n2129\\n2130\\n2131\\n2136\\n2137\\n2145\\n2150\\n2152\\n2155\\n2161\\n2162\\n2165\\n2167\\n2189\\n2197\\n2199\\n2214\\n2226\\n2233\\n2234\\n2241\\n2242\\n2256\\n2259\\n2263\\n2257\\n2267\\n2270\\n2269\\n2272\\n2273\\n2275\\n2279\\n2284\\n2285\\n2266\\n2271\\n2287\\n2291\\n2310\\n2313\\n2314\\n2317\\n2311\\n2312\\n2311\\n2312\\n2326\\n2331\\n2332\\n2338\\n2340\\n2352\\n2355\\n2360\\n2361\\n2357\\n2371\\n2384\\n2380\\n2392\\n2393\\n2396\\n2397\\n2400\\n2417\\n2420\\n2421\\n2422\\n2444\\n2457\\n2458\\n2464\\n2467\\n2494\\n2495\\n2498\\n2510\\n2514\\n2521\\n2526\\n2525\\n2533\\n2536\\n2547\\n2544\\n2547\\n2556\\n2557\\n2558\\n2561\\n2570\\n2571\\n2573\\n2575\\n2583\\n2584\\n2585\\n2572\\n2574\\n2575\\n2587\\n2589\\n2590\\n2602\\n2603\\n2604\\n2605\\n2589\\n2603\\n2608\\n2611\\n2616\\n2613\\n2617\\n2618\\n2619\\n2628\\n2629\\n2630\\n2631\\n2639\\n2645\\n2649\\n2657\\n2665\\n2673\\n2680\\n2679\\n2680\\n2702\\n2703\\n2709\\n2711\\n2714\\n2715\\n2716\\n2715\\n2721\\n2720\\n2739\\n2745\\n2748\\n2752\\n2749\\n2748\\n2749\\n2751\\n2752\\n2750\\n2760\\n2777\\n2778\\n2779\\n2780\\n2787\\n2800\\n2805\\n2810\\n2812\\n2820\\n2821\\n2843\\n2846\\n2853\\n2862\\n2861\\n2867\\n2880\\n2890\\n2891\\n2892\\n2885\\n2887\\n2890\\n2894\\n2897\\n2925\\n2926\\n2931\\n2933\\n2940\\n2943\\n2941\\n2959\\n2971\\n2982\\n2984\\n3002\\n3006\\n3008\\n3012\\n3013\\n3034\\n3043\\n3059\\n3063\\n3064\\n3060\\n3075\\n3090\\n3091\\n3104\\n3108\\n3114\\n3117\\n3106\\n3104\\n3110\\n3113\\n3114\\n3126\\n3119\\n3138\\n3140\\n3141\\n3143\\n3139\\n3145\\n3147\\n3153\\n3161\\n3170\\n3168\\n3180\\n3181\\n3177\\n3196\\n3210\\n3216\\n3232\\n3233\\n3234\\n3235\\n3239\\n3240\\n3242\\n3243\\n3244\\n3243\\n3248\\n3249\\n3275\\n3276\\n3278\\n3280\\n3286\\n3291\\n3293\\n3294\\n3301\\n3310\\n3319\\n3326\\n3338\\n3339\\n3348\\n3366\\n3376\\n3371\\n3372\\n3404\\n3407\\n3408\\n3425\\n3444\\n3451\\n3457\\n3452\\n3459\\n3468\\n3491\\n3475\\n3476\\n3481\\n3505\\n3516\\n3519\\n3542\\n3543\\n3541\\n3542\\n3541\\n3551\\n3553\\n3552\\n3533\\n3542\\n3543\\n3561\\n3562\\n3563\\n3566\\n3571\\n3572\\n3596\\n3600\\n3603\\n3607\\n3608\\n3609\\n3613\\n3654\\n3665\\n3672\\n3661\\n3662\\n3663\\n3670\\n3676\\n3683\\n3707\\n3709\\n3714\\n3717\\n3709\\n3710\\n3713\\n3714\\n3715\\n3716\\n3735\\n3749\\n3763\\n3770\\n3784\\n3782\\n3786\\n3790\\n3792\\n3794\\n3803\\n3805\\n3819\\n3823\\n3826\\n3828\\n3838\\n3839\\n3843\\n3870\\n3877\\n3888\\n3889\\n3891\\n3892\\n3893\\n3894\\n3880\\n3860\\n3878\\n3880\\n3888\\n3893\\n3898\\n3904\\n3906\\n3907\\n3910\\n3918\\n3927\\n3946\\n3973\\n3982\\n3979\\n3980\\n3993\\n3984\\n3988\\n3986\\n3987\\n3988\\n3989\\n3997\\n4000\\n4001\\n4025\\n4030\\n4034\\n4038\\n4040\\n4044\\n4046\\n4048\\n4057\\n4067\\n4079\\n4092\\n4094\\n4122\\n4124\\n4128\\n4127\\n4128\\n4132\\n4136\\n4141\\n4146\\n4151\\n4153\\n4163\\n4167\\n4168\\n4170\\n4172\\n4176\\n4177\\n4178\\n4194\\n4198\\n4199\\n4201\\n4203\\n4204\\n4205\\n4204\\n4209\\n4211\\n4213\\n4224\\n4240\\n4242\\n4255\\n4266\\n4280\\n4284\\n4295\\n4310\\n4323\\n4343\\n4351\\n4359\\n4383\\n4387\\n4388\\n4397\\n4401\\n4403\\n4404\\n4405\\n4425\\n4431\\n4435\\n4439\\n4444\\n4452\\n4461\\n4470\\n4466\\n4467\\n4469\\n4481\\n4482\\n4498\\n4496\\n4504\\n4505\\n4512\\n4518\\n4520\\n4521\\n4523\\n4534\\n4516\\n4527\\n4525\\n4534\\n4535\\n4551\\n4565\\n4570\\n4571\\n4578\\n4584\\n4595\\n4609\\n4610\\n4618\\n4628\\n4629\\n4630\\n4634\\n4636\\n4637\\n4640\\n4659\\n4664\\n4669\\n4665\\n4673\\n4687\\n4688\\n4693\\n4694\\n4697\\n4667\\n4678\\n4679\\n4702\\n4707\\n4706\\n4709\\n4711\\n4718\\n4725\\n4716\\n4718\\n4723\\n4724\\n4726\\n4727\\n4729\\n4735\\n4736\\n4738\\n4739\\n4758\\n4763\\n4773\\n4774\\n4776\\n4777\\n4778\\n4777\\n4785\\n4786\\n4771\\n4773\\n4774\\n4777\\n4781\\n4783\\n4788\\n4791\\n4794\\n4807\\n4816\\n4818\\n4825\\n4828\\n4838\\n4822\\n4831\\n4837\\n4841\\n4851\\n4854\\n4870\\n4876\\n4888\\n4889\\n4900\\n4906\\n4909\\n4910\\n4917\\n4919\\n4920\\n4926\\n4928\\n4934\\n4941\\n4943\\n4945\\n4948\\n4950\\n4956\\n4951\\n4948\\n4954\\n4958\\n4960\\n4959\\n4962\\n4969\\n4982\\n4986\\n4994\\n5000\\n5009\\n5027\\n5025\\n5029\\n5033\\n5037\\n5036\\n5037\\n5040\\n5032\\n5033\\n5034\\n5039\\n5045\\n5050\\n5045\\n5076\\n5077\\n5082\\n5083\\n5106\\n5107\\n5114\\n5117\\n5137\\n5138\\n5143\\n5147\\n5153\\n5156\\n5171\\n5182\\n5183\\n5184\\n5185\\n5189\\n5182\\n5189\\n5194\\n5201\\n5205\\n5213\\n5218\\n5221\\n5223\\n5230\\n5231\\n5243\\n5255\\n5230\\n5228\\n5237\\n5245\\n5248\\n5259\\n5260\\n5272\\n5278\\n5281\\n5287\\n5286\\n5287\\n5298\\n5328\\n5329\\n5333\\n5335\\n5337\\n5339\\n5341\\n5346\\n5349\\n5350\\n5351\\n5358\\n5359\\n5360\\n5374\\n5376\\n5359\\n5360\\n5388\\n5401\\n5406\\n5410\\n5412\\n5413\\n5414\\n5415\\n5435\\n5436\\n5441\\n5443\\n5448\\n5446\\n5448\\n5449\\n5464\\n5465\\n5466\\n5469\\n5470\\n5492\\n5493\\n5494\\n5509\\n5520\\n5528\\n5530\\n5537\\n5541\\n5542\\n5559\\n5562\\n5563\\n5588\\n5595\\n5596\\n5601\\n5618\\n5626\\n5627\\n5641\\n5667\\n5679\\n5685\\n5693\\n5695\\n5717\\n5733\\n5734\\n5754\\n5755\\n5757\\n5758\\n5759\\n5760\\n5761\\n5771\\n5774\\n5780\\n5784\\n5785\\n5787\\n5788\\n5790\\n5800\\n5811\\n5814\\n5810\\n5811\\n5794\\n5792\\n5803\\n5804\\n5812\\n5814\\n5815\\n5836\\n5852\\n5853\\n5855\\n5878\\n5879\\n5880\\n5883\\n5889\\n5897\\n5911\\n5932\\n5934\\n5935\\n5936\\n5938\\n5939\\n5941\\n5951\\n5955\\n5950\\n5951\\n5954\\n5970\\n5971\\n5974\\n5977\\n5978\\n5985\\n5986\\n6013\\n6024\\n6031\\n6037\\n6043\\n6052\\n6051\\n6053\\n6076\\n6096\\n6101\\n6106\\n6108\\n6115\\n6125\\n6106\\n6107\\n6104\\n6114\\n6142\\n6143\\n6162\\n6169\\n6170\\n6171\\n6181\\n6198\\n6199\\n6202\\n6206\\n6207\\n6244\\n6246\\n6249\\n6250\\n6254\\n6264\\n6271\\n6276\\n6277\\n6268\\n6271\\n6288\\n6293\\n6308\\n6309\\n6326\\n6341\\n6345\\n6344\\n6341\\n6364\\n6365\\n6366\\n6370\\n6371\\n6373\\n6376\\n6377\\n6378\\n6377\\n6379\\n6386\\n6396\\n6397\\n6420\\n6422\\n6429\\n6433\\n6463\\n6472\\n6473\\n6490\\n6491\\n6492\\n6497\\n6522\\n6523\\n6524\\n6519\\n6520\\n6521\\n6525\\n6530\\n6531\\n6534\\n6535\\n6543\\n6552\\n6558\\n6584\\n6586\\n6587\\n6588\\n6606\\n6614\\n6618\\n6646\\n6650\\n6651\\n6654\\n6677\\n6663\\n6665\\n6676\\n6655\\n6653\\n6655\\n6665\\n6667\\n6682\\n6692\\n6703\\n6704\\n6707\\n6715\\n6719\\n6730\\n6731\\n6733\\n6743\\n6747\\n6748\\n6750\\n6759\\n6771\\n6772\\n6776\\n6775\\n6776\\n6782\\n6785\\n6812\\n6841\\n6858\\n6860\\n6859\\n6877\\n6886\\n6895\\n6914\\n6919\\n6922\\n6924\\n6933\\n6935\\n6936\\n6937\\n6938\\n6952\\n6962\\n6965\\n6984\\n6987\\n6986\\n6985\\n6977\\n6967\\n6968\\n6966\\n6980\\n6997\\n6994\\n7002\\n7008\\n7000\\n6975\\n7009\\n7014\\n7015\\n7026\\n7027\\n7034\\n7036\\n7041\\n7040\\n7041\\n7045\\n7048\\n7065\\n7074\\n7075\\n7082\\n7087\\n7092\\n7098\\n7097\\n7111\\n7127\\n7124\\n7135\\n7136\\n7137\\n7140\\n7153\\n7156\\n7158\\n7174\\n7176\\n7177\\n7163\\n7166\\n7159\\n7157\\n7158\\n7164\\n7165\\n7172\\n7190\\n7194\\n7199\\n7200\\n7205\\n7208\\n7207\\n7222\\n7227\\n7244\\n7249\\n7271\\n7272\\n7273\\n7274\\n7281\\n7286\\n7288\\n7314\\n7315\\n7317\\n7318\\n7319\\n7304\\n7307\\n7308\\n7309\\n7312\\n7319\\n7322\\n7337\\n7338\\n7345\\n7346\\n7350\\n7360\\n7361\\n7362\\n7360\\n7395\\n7400\\n7404\\n7405\\n7407\\n7406\\n7411\\n7420\\n7435\\n7440\\n7442\\n7446\\n7453\\n7446\\n7448\\n7467\\n7471\\n7469\\n7470\\n7482\\n7485\\n7492\\n7488\\n7489\\n7492\\n7493\\n7494\\n7497\\n7504\\n7520\\n7525\\n7547\\n7554\\n7543\\n7553\\n7560\\n7561\\n7577\\n7589\\n7591\\n7593\\n7587\\n7596\\n7597\\n7584\\n7590\\n7591\\n7599\\n7626\\n7627\\n7628\\n7630\\n7645\\n7639\\n7645\\n7652\\n7657\\n7662\\n7664\\n7674\\n7680\\n7681\\n7694\\n7698\\n7716\\n7704\\n7705\\n7706\\n7708\\n7712\\n7716\\n7715\\n7717\\n7722\\n7723\\n7728\\n7721\\n7722\\n7724\\n7727\\n7735\\n7737\\n7725\\n7746\\n7747\\n7750\\n7761\\n7762\\n7765\\n7777\\n7780\\n7776\\n7777\\n7778\\n7759\\n7769\\n7770\\n7787\\n7797\\n7798\\n7804\\n7803\\n7804\\n7805\\n7811\\n7825\\n7824\\n7826\\n7827\\n7828\\n7851\\n7867\\n7887\\n7889\\n7890\\n7900\\n7904\\n7917\\n7918\\n7935\\n7941\\n7942\\n7946\\n7947\\n7948\\n7949\\n7976\\n7979\\n7981\\n7983\\n7988\\n7999\\n8000\\n8009\\n8011\\n8012\\n8019\\n8021\\n8025\\n8027\\n8006\\n8011\\n8034\\n8036\\n8037\\n8038\\n8013\\n8024\\n8029\\n8032\\n8033\\n8034\\n8032\\n8034\\n8036\\n8059\\n8060\\n8063\\n8064\\n8081\\n8090\\n8097\\n8122\\n8135\\n8147\\n8149\\n8150\\n8151\\n8162\\n8174\\n8154\\n8158\\n8162\\n8170\\n8171\\n8188\\n8189\\n8190\\n8191\\n8196\\n8205\\n8216\\n8217\\n8222\\n8233\\n8239\\n8240\\n8242\\n8257\\n8249\\n8262\\n8264\\n8274\\n8309\\n8311\\n8328\\n8333\\n8335\\n8338\\n8344\\n8350\\n8349\\n8350\\n8363\\n8366\\n8370\\n8371\\n8395\\n8398\\n8401\\n8410\\n8425\\n8429\\n8430\\n8441\\n8443\\n8445\\n8451\\n8452\\n8455\\n8458\\n8431\\n8443\\n8453\\n8459\\n8477\\n8474\\n8479\\n8476\\n8487\\n8488\\n8489\\n8500\\n8501\\n8503\\n8504\\n8538\\n8523\\n8529\\n8530\\n8556\\n8573\\n8576\\n8589\\n8595\\n8624\\n8632\\n8634\\n8628\\n8636\\n8635\\n8636\\n8644\\n8659\\n8661\\n8641\\n8652\\n8659\\n8650\\n8664\\n8667\\n8674\\n8676\\n8678\\n8686\\n8696\\n8697\\n8735\\n8740\\n8749\\n8767\\n8769\\n8747\\n8751\\n8760\\n8755\\n8766\\n8768\\n8777\\n8782\\n8788\\n8796\\n8799\\n8801\\n8809\\n8807\\n8816\\n8827\\n8831\\n8835\\n8836\\n8843\\n8844\\n8845\\n8851\\n8858\\n8860\\n8862\\n8863\\n8889\\n8891\\n8912\\n8913\\n8924\\n8928\\n8929\\n8939\\n8955\\n8957\\n8958\\n8963\\n8988\\n8989\\n8997\\n8995\\n8999\\n8968\\n8990\\n8991\\n8992\\n8994\\n8996\\n9013\\n9024\\n9026\\n9035\\n9046\\n9047\\n9083\\n9084\\n9089\\n9096\\n9108\\n9107\\n9116\\n9123\\n9122\\n9128\\n9132\\n9151\\n9155\\n9163\\n9174\\n9178\\n9183\\n9199\\n9209\\n9217\\n9219\\n9232\\n9233\\n9232\\n9237\\n9241\\n9244\\n9245\\n9247\\n9251\\n9252\\n9266\\n9285\\n9284\\n9291\\n9294\\n9295\\n9296\\n9300\\n9322\\n9328\\n9333\\n9337\\n9345\\n9346\\n9347\\n9371\\n9375\\n9394\\n9397\\n9404\\n9406\\n9422\\n9425\\n9438\\n9440\\n9435\\n9442\\n9455\\n9473\\n9475\\n9496\\n9499\\n9500\\n9511\\n9512\\n9513\\n9539\\n9540\\n9543\\n9547\\n9550\\n9557\\n9571\\n9577\\n9593\\n9600\\n9609\\n9615\\n9620\\n9621\\n9616\\n9625\\n9626\\n9637\\n9638\\n9642\\n9648\\n9656\\n9654\\n9661\\n9665\\n9696\\n9705\\n9710\\n9719\\n9720\\n9717\\n9718\\n9717\\n9719\\n9724\\n9725\\n9738\\n9741\\n9743\\n9744\\n9745\\n9765\\n9778\\n9779\\n9789\\n9791\\n9773\\n9778\\n9780\\n9782\\n9783\\n9782\\n9797\\n9799\\n9800\\n9801\\n9823\\n9824\\n9834\\n9836\\n9841\\n9845\\n9847\\n9865\\n9868\\n9883\\n9884\\n9887\\n9890\\n9892\\n9899\\n9908\\n9910\\n9911\\n9915\\n9918\\n9922\\n9926\\n9923\\n9944\\n9947\\n9948\\n9949\\n9958\\n9959\\n9961\\n9973\\n9954\\n9976\\n9978\\n10001\\n10000\\n9992\\n9997\\n9985\\n9995\\n9996\\n10005\\n9999\\n10001\\n10002\\n10009\\n10041\\n10045\\n10051\\n10070\\n10071\\n10073\\n10100\\n10099\\n10100\\n10101\\n10102\\n10105\\n10082\\n10083\\n10082\\n10086\\n10112\\n10113\\n10114\\n10122\\n10124\\n10127\\n10140\\n10156\\n10157\\n10158\\n10159\\n10162\\n10163\\n10166\\n10177\\n10178\\n10180\\n10178\\n10179\\n10191\\n10186\\n10198\\n10201\\n10204\\n10227\\n10229\\n10232\\n10234\\n10246\\n10247\\n10248\\n10249\\n10250\\n10269\\n10277\\n10278\\n10279\\n10289\\n10291\\n10294\\n10292\\n10304\\n10324\\n10339\\n10342\\n10343\\n10349\\n10354\\n10371\\n10370\\n10374\\n10376\\n10379\\n10405\\n10406\\n10405\\n10403\\n10411\\n10412\\n10411\\n10419\\n10422\\n10435\\n10437\\n10438\\n10437\\n10440\\n10427\\n10421\\n10432\\n10434\\n10439\\n10449\\n10442\\n10469\\n10471\\n10476\\n10480\\n10481\\n10485\\n10507\\n10508\\n10511\\n10512\\n10513\\n10523\\n10524\\n10529\\n10536\\n10552\\n10563\\n10569\\n10573\\n10575\\n10576\\n10578\\n10596\\n10602\\n10630\\n10647\\n10657\\n10659\\n10684\\n10687\\n10692\\n10693\\n10700\\n10702\\n10703\\n10709\\n10714\\n10716\\n10727\\n10746\\n10744\\n10754\\n10753\\n10754\\n10755\\n10759\\n10763\\n10764\\n10765\\n10769\\n10770\\n10771\\n10777\\n10796\\n10807\\n10813\\n10818\\n10825\\n10830\\n10835\\n10836\\n10849\\n10858\\n10873\\n10882\\n10879\\n10882\\n10886\\n10902\\n10903\\n10931\\n10930\";","export default \"It's no use; your navigation system simply isn't capable of providing walking directions in the arctic circle, and certainly not in 1018.\\n\\nThe Elves suggest an alternative. In times like these, North Pole rescue operations will arrange points of light in the sky to guide missing Elves back to base. Unfortunately, the message is easy to miss: the points move slowly enough that it takes hours to align them, but have so much momentum that they only stay aligned for a second. If you blink at the wrong time, it might be hours before another message appears.\\n\\nYou can see these points of light floating in the distance, and record their position in the sky and their velocity, the relative change in position per second (your puzzle input). The coordinates are all given from your perspective; given enough time, those positions and velocities will move the points into a cohesive message!\\n\\nRather than wait, you decide to fast-forward the process and calculate what the points will eventually spell.\\n\\nFor example, suppose you note the following points:\\n\\n```\\nposition=< 9,  1> velocity=< 0,  2>\\nposition=< 7,  0> velocity=<-1,  0>\\nposition=< 3, -2> velocity=<-1,  1>\\nposition=< 6, 10> velocity=<-2, -1>\\nposition=< 2, -4> velocity=< 2,  2>\\nposition=<-6, 10> velocity=< 2, -2>\\nposition=< 1,  8> velocity=< 1, -1>\\nposition=< 1,  7> velocity=< 1,  0>\\nposition=<-3, 11> velocity=< 1, -2>\\nposition=< 7,  6> velocity=<-1, -1>\\nposition=<-2,  3> velocity=< 1,  0>\\nposition=<-4,  3> velocity=< 2,  0>\\nposition=<10, -3> velocity=<-1,  1>\\nposition=< 5, 11> velocity=< 1, -2>\\nposition=< 4,  7> velocity=< 0, -1>\\nposition=< 8, -2> velocity=< 0,  1>\\nposition=<15,  0> velocity=<-2,  0>\\nposition=< 1,  6> velocity=< 1,  0>\\nposition=< 8,  9> velocity=< 0, -1>\\nposition=< 3,  3> velocity=<-1,  1>\\nposition=< 0,  5> velocity=< 0, -1>\\nposition=<-2,  2> velocity=< 2,  0>\\nposition=< 5, -2> velocity=< 1,  2>\\nposition=< 1,  4> velocity=< 2,  1>\\nposition=<-2,  7> velocity=< 2, -2>\\nposition=< 3,  6> velocity=<-1, -1>\\nposition=< 5,  0> velocity=< 1,  0>\\nposition=<-6,  0> velocity=< 2,  0>\\nposition=< 5,  9> velocity=< 1, -2>\\nposition=<14,  7> velocity=<-2,  0>\\nposition=<-3,  6> velocity=< 2, -1>\\n```\\n\\nEach line represents one point. Positions are given as `<X, Y>` pairs: X represents how far left (negative) or right (positive) the point appears, while Y represents how far up (negative) or down (positive) the point appears.\\n\\nAt 0 seconds, each point has the position given. Each second, each point's velocity is added to its position. So, a point with velocity `<1, -2>` is moving to the right, but is moving upward twice as quickly. If this point's initial position were `<3, 9>`, after 3 seconds, its position would become `<6, 3>`.\\n\\nOver time, the points listed above would move like this:\\n\\n```\\nInitially:\\n........#.............\\n................#.....\\n.........#.#..#.......\\n......................\\n#..........#.#.......#\\n...............#......\\n....#.................\\n..#.#....#............\\n.......#..............\\n......#...............\\n...#...#.#...#........\\n....#..#..#.........#.\\n.......#..............\\n...........#..#.......\\n#...........#.........\\n...#.......#..........\\n\\nAfter 1 second:\\n......................\\n......................\\n..........#....#......\\n........#.....#.......\\n..#.........#......#..\\n......................\\n......#...............\\n....##.........#......\\n......#.#.............\\n.....##.##..#.........\\n........#.#...........\\n........#...#.....#...\\n..#...........#.......\\n....#.....#.#.........\\n......................\\n......................\\n\\nAfter 2 seconds:\\n......................\\n......................\\n......................\\n..............#.......\\n....#..#...####..#....\\n......................\\n........#....#........\\n......#.#.............\\n.......#...#..........\\n.......#..#..#.#......\\n....#....#.#..........\\n.....#...#...##.#.....\\n........#.............\\n......................\\n......................\\n......................\\n\\nAfter 3 seconds:\\n......................\\n......................\\n......................\\n......................\\n......#...#..###......\\n......#...#...#.......\\n......#...#...#.......\\n......#####...#.......\\n......#...#...#.......\\n......#...#...#.......\\n......#...#...#.......\\n......#...#..###......\\n......................\\n......................\\n......................\\n......................\\n\\nAfter 4 seconds:\\n......................\\n......................\\n......................\\n............#.........\\n........##...#.#......\\n......#.....#..#......\\n.....#..##.##.#.......\\n.......##.#....#......\\n...........#....#.....\\n..............#.......\\n....#......#...#......\\n.....#.....##.........\\n...............#......\\n...............#......\\n......................\\n......................\\n```\\n\\nAfter 3 seconds, the message appeared briefly: **`HI`**. Of course, your message will be much longer and will take many more seconds to appear.\\n\\n**What message will eventually appear in the sky?**\\n\\n[comment]: <> (PART 2)\\n\\nGood thing you didn't have to wait, because that would have taken a long time - much longer than the **`3`** seconds in the example above.\\n\\nImpressed by your sub-hour communication capabilities, the Elves are curious: **exactly how many seconds would they have needed to wait for that message to appear?**\";","export default \"Your plane lands with plenty of time to spare. The final leg of your journey is a ferry that goes directly to the tropical island where you can finally start your vacation. As you reach the waiting area to board the ferry, you realize you're so early, nobody else has even arrived yet!\\n\\nBy modeling the process people use to choose (or abandon) their seat in the waiting area, you're pretty sure you can predict the best place to sit. You make a quick map of the seat layout (your puzzle input).\\n\\nThe seat layout fits neatly on a grid. Each position is either floor (`.`), an empty seat (`L`), or an occupied seat (`#`). For example, the initial seat layout might look like this:\\n\\n```\\nL.LL.LL.LL\\nLLLLLLL.LL\\nL.L.L..L..\\nLLLL.LL.LL\\nL.LL.LL.LL\\nL.LLLLL.LL\\n..L.L.....\\nLLLLLLLLLL\\nL.LLLLLL.L\\nL.LLLLL.LL\\n```\\n\\nNow, you just need to model the people who will be arriving shortly. Fortunately, people are entirely predictable and always follow a simple set of rules. All decisions are based on the **number of occupied seats** adjacent to a given seat (one of the eight positions immediately up, down, left, right, or diagonal from the seat). The following rules are applied to every seat simultaneously:\\n\\n- If a seat is **empty** (`L`) and there are **no** occupied seats adjacent to it, the seat becomes occupied.\\n- If a seat is **occupied** (`#`) and **four or more** seats adjacent to it are also occupied, the seat becomes **empty**.\\n- Otherwise, the seat's state does not change.\\n\\nFloor (`.`) never changes; seats don't move, and nobody sits on the floor.\\n\\nAfter one round of these rules, every seat in the example layout becomes occupied:\\n\\n```\\n#.##.##.##\\n#######.##\\n#.#.#..#..\\n####.##.##\\n#.##.##.##\\n#.#####.##\\n..#.#.....\\n##########\\n#.######.#\\n#.#####.##\\n```\\n\\nAfter a second round, the seats with four or more occupied adjacent seats become empty again:\\n\\n```\\n#.LL.L#.##\\n#LLLLLL.L#\\nL.L.L..L..\\n#LLL.LL.L#\\n#.LL.LL.LL\\n#.LLLL#.##\\n..L.L.....\\n#LLLLLLLL#\\n#.LLLLLL.L\\n#.#LLLL.##\\n```\\n\\nThis process continues for three more rounds:\\n\\n```\\n#.##.L#.##\\n#L###LL.L#\\nL.#.#..#..\\n#L##.##.L#\\n#.##.LL.LL\\n#.###L#.##\\n..#.#.....\\n#L######L#\\n#.LL###L.L\\n#.#L###.##\\n```\\n\\n```\\n#.#L.L#.##\\n#LLL#LL.L#\\nL.L.L..#..\\n#LLL.##.L#\\n#.LL.LL.LL\\n#.LL#L#.##\\n..L.L.....\\n#L#LLLL#L#\\n#.LLLLLL.L\\n#.#L#L#.##\\n```\\n\\n```\\n#.#L.L#.##\\n#LLL#LL.L#\\nL.#.L..#..\\n#L##.##.L#\\n#.#L.LL.LL\\n#.#L#L#.##\\n..L.L.....\\n#L#L##L#L#\\n#.LLLLLL.L\\n#.#L#L#.##\\n```\\n\\nAt this point, something interesting happens: the chaos stabilizes and further applications of these rules cause no seats to change state! Once people stop moving around, you count **`37`** occupied seats.\\n\\nSimulate your seating area by applying the seating rules repeatedly until no seats change state. **How many seats end up occupied?**\\n\\n[comment]: <> (PART 2)\\n\\nAs soon as people start to arrive, you realize your mistake. People don't just care about adjacent seats - they care about **the first seat they can see** in each of those eight directions!\\n\\nNow, instead of considering just the eight immediately adjacent seats, consider the **first seat** in each of those eight directions. For example, the empty seat below would see **eight** occupied seats:\\n\\n```\\n.......#.\\n...#.....\\n.#.......\\n.........\\n..#L....#\\n....#....\\n.........\\n#........\\n...#.....\\n```\\n\\nThe leftmost empty seat below would only see **one** empty seat, but cannot see any of the occupied ones:\\n\\n```\\n.............\\n.L.L.#.#.#.#.\\n.............\\n```\\n\\nThe empty seat below would see **no** occupied seats:\\n\\n```\\n.##.##.\\n#.#.#.#\\n##...##\\n...L...\\n##...##\\n#.#.#.#\\n.##.##.\\n```\\n\\nAlso, people seem to be more tolerant than you expected: it now takes **five or more** visible occupied seats for an occupied seat to become empty (rather than **four or more** from the previous rules). The other rules still apply: empty seats that see no occupied seats become occupied, seats matching no rule don't change, and floor never changes.\\n\\nGiven the same starting layout as above, these new rules cause the seating area to shift around as follows:\\n\\n```\\nL.LL.LL.LL\\nLLLLLLL.LL\\nL.L.L..L..\\nLLLL.LL.LL\\nL.LL.LL.LL\\nL.LLLLL.LL\\n..L.L.....\\nLLLLLLLLLL\\nL.LLLLLL.L\\nL.LLLLL.LL\\n```\\n\\n```\\n#.##.##.##\\n#######.##\\n#.#.#..#..\\n####.##.##\\n#.##.##.##\\n#.#####.##\\n..#.#.....\\n##########\\n#.######.#\\n#.#####.##\\n```\\n\\n```\\n#.LL.LL.L#\\n#LLLLLL.LL\\nL.L.L..L..\\nLLLL.LL.LL\\nL.LL.LL.LL\\nL.LLLLL.LL\\n..L.L.....\\nLLLLLLLLL#\\n#.LLLLLL.L\\n#.LLLLL.L#\\n```\\n\\n```\\n#.L#.##.L#\\n#L#####.LL\\nL.#.#..#..\\n##L#.##.##\\n#.##.#L.##\\n#.#####.#L\\n..#.#.....\\nLLL####LL#\\n#.L#####.L\\n#.L####.L#\\n```\\n\\n```\\n#.L#.L#.L#\\n#LLLLLL.LL\\nL.L.L..#..\\n##LL.LL.L#\\nL.LL.LL.L#\\n#.LLLLL.LL\\n..L.L.....\\nLLLLLLLLL#\\n#.LLLLL#.L\\n#.L#LL#.L#\\n```\\n\\n```\\n#.L#.L#.L#\\n#LLLLLL.LL\\nL.L.L..#..\\n##L#.#L.L#\\nL.L#.#L.L#\\n#.L####.LL\\n..#.#.....\\nLLL###LLL#\\n#.LLLLL#.L\\n#.L#LL#.L#\\n```\\n\\n```\\n#.L#.L#.L#\\n#LLLLLL.LL\\nL.L.L..#..\\n##L#.#L.L#\\nL.L#.LL.L#\\n#.LLLL#.LL\\n..#.L.....\\nLLL###LLL#\\n#.LLLLL#.L\\n#.L#LL#.L#\\n```\\n\\nAgain, at this point, people stop shifting around and the seating area reaches equilibrium. Once this occurs, you count **`26`** occupied seats.\\n\\nGiven the new visibility method and the rule change for occupied seats becoming empty, once equilibrium is reached, **how many seats end up occupied?**\";","export default \"You discover a tablet containing some strange assembly code labeled simply \\\"[Duet](https://en.wikipedia.org/wiki/Duet)\\\". Rather than bother the sound card with it, you decide to run the code yourself. Unfortunately, you don't see any documentation, so you're left to figure out what the instructions mean on your own.\\n\\nIt seems like the assembly is meant to operate on a set of **registers** that are each named with a single letter and that can each hold a single [integer](https://en.wikipedia.org/wiki/Integer). You suppose each register should start with a value of `0`.\\n\\nThere aren't that many instructions, so it shouldn't be hard to figure out what they do. Here's what you determine:\\n\\n- `snd X` **plays a sound** with a frequency equal to the value of `X`.\\n- `set X Y` **sets** register `X` to the value of `Y`.\\n- `add X Y` **increases** register `X` by the value of `Y`.\\n- `mul X Y` sets register `X` to the result of **multiplying** the value contained in register `X` by the value of `Y`.\\n- `mod X Y` sets register `X` to the **remainder** of dividing the value contained in register `X` by the value of `Y` (that is, it sets `X` to the result of `X` [modulo](https://en.wikipedia.org/wiki/Modulo_operation) `Y`).\\n- `rcv X` **recovers** the frequency of the last sound played, but only when the value of `X` is not zero. (If it is zero, the command does nothing.)\\n- `jgz X Y` **jumps** with an offset of the value of `Y`, but only if the value of `X` is greater than zero. (An offset of `2` skips the next instruction, an offset of `-1` jumps to the previous instruction, and so on.)\\n\\nMany of the instructions can take either a register (a single letter) or a number. The value of a register is the integer it contains; the value of a number is that number.\\n\\nAfter each **jump** instruction, the program continues with the instruction to which the **jump** jumped. After any other instruction, the program continues with the next instruction. Continuing (or jumping) off either end of the program terminates it.\\n\\nFor example:\\n\\n```\\nset a 1\\nadd a 2\\nmul a a\\nmod a 5\\nsnd a\\nset a 0\\nrcv a\\njgz a -1\\nset a 1\\njgz a -2\\n```\\n\\n- The first four instructions set `a` to `1`, add `2` to it, square it, and then set it to itself modulo `5`, resulting in a value of `4`.\\n- Then, a sound with frequency `4` (the value of `a`) is played.\\n- After that, `a` is set to `0`, causing the subsequent `rcv` and `jgz` instructions to both be skipped (`rcv` because `a` is `0`, and `jgz` because `a` is not greater than `0`).\\n- Finally, `a` is set to `1`, causing the next `jgz` instruction to activate, jumping back two instructions to another jump, which jumps again to the `rcv`, which ultimately triggers the **recover** operation.\\n\\nAt the time the **recover** operation is executed, the frequency of the last sound played is `4`.\\n\\n**What is the value of the recovered frequency** (the value of the most recently played sound) the **first** time a `rcv` instruction is executed with a non-zero value?\\n\\n[comment]: <> (PART 2)\\n\\nAs you congratulate yourself for a job well done, you notice that the documentation has been on the back of the tablet this entire time. While you actually got most of the instructions correct, there are a few key differences. This assembly code isn't about sound at all - it's meant to be run **twice at the same time**.\\n\\nEach running copy of the program has its own set of registers and follows the code independently - in fact, the programs don't even necessarily run at the same speed. To coordinate, they use the **send** (`snd`) and **receive** (`rcv`) instructions:\\n\\n- `snd X` **sends** the value of `X` to the other program. These values wait in a queue until that program is ready to receive them. Each program has its own message queue, so a program can never receive a message it sent.\\n- `rcv X` **receives** the next value and stores it in register `X`. If no values are in the queue, the program **waits for a value to be sent to it**. Programs do not continue to the next instruction until they have received a value. Values are received in the order they are sent.\\nEach program also has its own **program ID** (one `0` and the other `1`); the register `p` should begin with this value.\\n\\nFor example:\\n\\n```\\nsnd 1\\nsnd 2\\nsnd p\\nrcv a\\nrcv b\\nrcv c\\nrcv d\\n```\\n\\nBoth programs begin by sending three values to the other. Program `0` sends `1, 2, 0`; program `1` sends `1, 2, 1`. Then, each program receives a value (both `1`) and stores it in `a`, receives another value (both `2`) and stores it in `b`, and then each receives the program ID of the other program (program `0` receives `1`; program `1` receives `0`) and stores it in `c`. Each program now sees a different value in its own copy of register `c`.\\n\\nFinally, both programs try to `rcv` a **fourth** time, but no data is waiting for either of them, and they reach a **deadlock**. When this happens, both programs terminate.\\n\\nIt should be noted that it would be equally valid for the programs to run at different speeds; for example, program `0` might have sent all three values and then stopped at the first `rcv` before program `1` executed even its first instruction.\\n\\nOnce both of your programs have terminated (regardless of what caused them to do so), **how many times did program `1` send a value**?\";","export default \"The sea floor is getting steeper. Maybe the sleigh keys got carried this way?\\n\\nA massive school of glowing [lanternfish](https://en.wikipedia.org/wiki/Lanternfish) swims past. They must spawn quickly to reach such large numbers - maybe **exponentially** quickly? You should model their growth rate to be sure.\\n\\nAlthough you know nothing about this specific species of lanternfish, you make some guesses about their attributes. Surely, each lanternfish creates a new lanternfish once every 7 days.\\n\\nHowever, this process isn't necessarily synchronized between every lanternfish - one lanternfish might have 2 days left until it creates another lanternfish, while another might have 4. So, you can model each fish as a single number that represents **the number of days until it creates a new lanternfish**.\\n\\nFurthermore, you reason, a **new** lanternfish would surely need slightly longer before it's capable of producing more lanternfish: two more days for its first cycle.\\n\\nSo, suppose you have a lanternfish with an internal timer value of 3:\\n\\n- After one day, its internal timer would become `2`.\\n- After another day, its internal timer would become `1`.\\n- After another day, its internal timer would become `0`.\\n- After another day, its internal timer would reset to `6`, and it would create a **new** lanternfish with an internal timer of `8`.\\n- After another day, the first lanternfish would have an internal timer of `5`, and the second lanternfish would have an internal timer of `7`.\\n\\nA lanternfish that creates a new fish resets its timer to `6`, **not** **`7`** (because `0` is included as a valid timer value). The new lanternfish starts with an internal timer of `8` and does not start counting down until the next day.\\n\\nRealizing what you're trying to do, the submarine automatically produces a list of the ages of several hundred nearby lanternfish (your puzzle input). For example, suppose you were given the following list:\\n\\n```\\n3,4,3,1,2\\n```\\n\\nThis list means that the first fish has an internal timer of `3`, the second fish has an internal timer of `4`, and so on until the fifth fish, which has an internal timer of `2`. Simulating these fish over several days would proceed as follows:\\n\\n```\\nInitial state: 3,4,3,1,2\\nAfter  1 day:  2,3,2,0,1\\nAfter  2 days: 1,2,1,6,0,8\\nAfter  3 days: 0,1,0,5,6,7,8\\nAfter  4 days: 6,0,6,4,5,6,7,8,8\\nAfter  5 days: 5,6,5,3,4,5,6,7,7,8\\nAfter  6 days: 4,5,4,2,3,4,5,6,6,7\\nAfter  7 days: 3,4,3,1,2,3,4,5,5,6\\nAfter  8 days: 2,3,2,0,1,2,3,4,4,5\\nAfter  9 days: 1,2,1,6,0,1,2,3,3,4,8\\nAfter 10 days: 0,1,0,5,6,0,1,2,2,3,7,8\\nAfter 11 days: 6,0,6,4,5,6,0,1,1,2,6,7,8,8,8\\nAfter 12 days: 5,6,5,3,4,5,6,0,0,1,5,6,7,7,7,8,8\\nAfter 13 days: 4,5,4,2,3,4,5,6,6,0,4,5,6,6,6,7,7,8,8\\nAfter 14 days: 3,4,3,1,2,3,4,5,5,6,3,4,5,5,5,6,6,7,7,8\\nAfter 15 days: 2,3,2,0,1,2,3,4,4,5,2,3,4,4,4,5,5,6,6,7\\nAfter 16 days: 1,2,1,6,0,1,2,3,3,4,1,2,3,3,3,4,4,5,5,6,8\\nAfter 17 days: 0,1,0,5,6,0,1,2,2,3,0,1,2,2,2,3,3,4,4,5,7,8\\nAfter 18 days: 6,0,6,4,5,6,0,1,1,2,6,0,1,1,1,2,2,3,3,4,6,7,8,8,8,8\\n```\\n\\nEach day, a `0` becomes a `6` and adds a new `8` to the end of the list, while each other number decreases by 1 if it was present at the start of the day.\\n\\nIn this example, after 18 days, there are a total of `26` fish. After 80 days, there would be a total of **`5934`**.\\n\\nFind a way to simulate lanternfish. **How many lanternfish would there be after `80` days?**\\n\\n[comment]: <> (PART 2)\\n\\nSuppose the lanternfish live forever and have unlimited food and space. Would they take over the entire ocean?\\n\\nAfter 256 days in the example above, there would be a total of **`26984457539`** lanternfish!\\n\\n**How many lanternfish would there be after 256 days?**\";","export default \"acc -7\\nacc +2\\nacc +20\\nacc +14\\njmp +191\\nacc +47\\nnop +339\\nacc +49\\njmp +104\\njmp +629\\njmp +374\\nacc +24\\njmp +220\\nnop +474\\nacc +25\\njmp +340\\nacc +16\\nacc +3\\nacc +41\\njmp +566\\njmp +296\\nacc +15\\njmp +452\\nacc +21\\njmp +129\\nacc +10\\nacc -8\\nacc +39\\njmp +396\\nacc +5\\nacc -4\\nacc +0\\njmp +496\\nnop +181\\nacc +48\\nacc +7\\njmp +1\\njmp +370\\nacc +16\\nacc -18\\nacc +47\\nacc +48\\njmp +99\\nnop +17\\nacc +25\\nacc -15\\njmp +285\\nnop +545\\nnop +147\\nnop +479\\nacc -4\\njmp +386\\nacc +36\\nacc -12\\njmp +50\\nacc +37\\nnop +133\\nacc +11\\nacc +20\\njmp +32\\njmp +1\\nnop +210\\nacc -15\\nacc -6\\njmp +446\\nacc +25\\nacc +1\\nacc +17\\nacc -4\\njmp +355\\nacc -4\\njmp +292\\nacc +16\\nacc +44\\nacc +26\\njmp +157\\nacc -18\\nacc +15\\nacc -8\\nacc -3\\njmp +46\\nacc +30\\nacc +16\\njmp -7\\nacc +34\\njmp +515\\nacc +11\\nacc -8\\nacc -9\\nacc -3\\njmp +548\\njmp +278\\nnop +332\\nacc -19\\nacc +49\\njmp +536\\nacc -9\\nacc +46\\njmp +124\\nacc +41\\nacc +47\\nacc -5\\nacc -13\\njmp +41\\nnop +178\\nacc +12\\nacc +45\\njmp +461\\nacc +37\\nacc +12\\nacc +38\\njmp -68\\nacc -6\\nnop +494\\nacc -9\\njmp -63\\nacc +42\\nacc +16\\nacc +30\\njmp +70\\nacc +13\\njmp +1\\nacc -18\\njmp +528\\nacc +48\\njmp +493\\nnop +402\\njmp +381\\nacc -8\\njmp +372\\nacc +20\\nacc +25\\njmp +425\\nacc -10\\njmp +510\\njmp +439\\nnop +78\\nacc +36\\nacc +7\\nnop +281\\njmp +504\\njmp -108\\nacc +40\\njmp -122\\nacc +23\\nacc -2\\nacc +7\\njmp +370\\nacc +25\\nnop -5\\nacc +33\\nacc +37\\njmp +70\\nacc -6\\nnop +336\\njmp +34\\njmp +1\\nacc -18\\njmp +473\\njmp +1\\nacc +20\\nacc +4\\nacc +25\\njmp -87\\nacc -12\\nacc +47\\nacc +49\\njmp +323\\njmp +1\\njmp +1\\njmp +167\\nacc -10\\nacc +45\\njmp +355\\nacc +32\\nacc +38\\nacc +2\\njmp -93\\nacc +8\\nacc +20\\nacc +4\\nacc -1\\njmp +108\\nnop +164\\nacc +41\\njmp +440\\nacc -16\\nacc +47\\njmp +355\\nacc -13\\nacc +29\\nacc +50\\njmp -101\\nacc -8\\njmp +316\\nacc +27\\nacc +31\\nnop -29\\njmp +1\\njmp +250\\nacc +12\\nacc -13\\njmp +73\\njmp +72\\nacc +36\\nacc +44\\njmp +1\\njmp -33\\nacc -18\\nacc +16\\nacc -8\\nacc +6\\njmp +104\\njmp +295\\nacc +10\\nnop -80\\njmp +74\\nacc -13\\njmp +1\\nacc +22\\nacc +50\\njmp +280\\njmp +265\\njmp +278\\nacc +46\\nacc -14\\nacc -17\\njmp -19\\nacc +39\\nacc +31\\nacc -11\\njmp +400\\njmp +80\\nacc +0\\nacc +27\\nnop +209\\njmp -184\\nacc +12\\nacc +21\\nacc +23\\njmp +352\\nacc +29\\njmp -5\\nacc +15\\nacc +7\\njmp +6\\nacc +31\\nacc -5\\nnop +83\\nacc +31\\njmp -239\\nacc +8\\nacc -2\\nacc +49\\nacc -12\\njmp -52\\nacc -15\\nacc -14\\njmp +126\\njmp +385\\nacc +30\\nacc -5\\nacc +6\\njmp -187\\nacc +39\\nacc +40\\nacc +0\\nacc +6\\njmp +24\\nacc +20\\njmp +131\\njmp -127\\nacc +8\\nacc +30\\njmp -265\\nacc -2\\njmp -265\\nacc +22\\nacc -19\\nacc -9\\nnop +10\\njmp +148\\nacc -14\\nacc +38\\nacc +50\\nacc -7\\njmp +197\\nacc +11\\nacc +22\\njmp +201\\njmp -155\\njmp -32\\nacc +48\\nnop -50\\njmp -99\\njmp -5\\nacc +11\\nacc -18\\njmp -186\\nacc +6\\nacc +43\\njmp +159\\njmp +249\\nacc +44\\nacc +29\\nnop +313\\nacc +23\\njmp +311\\njmp +152\\nacc +0\\nacc +41\\njmp -251\\njmp +102\\nnop -17\\nnop +176\\njmp +40\\nacc +28\\njmp -21\\nacc -4\\nacc -10\\nacc -19\\nacc -15\\njmp +23\\nnop +144\\nacc +9\\nacc +18\\njmp +141\\nacc -19\\nacc -10\\nacc +48\\njmp -7\\nacc +46\\nacc -9\\njmp -174\\nacc +30\\nacc +30\\njmp -201\\nacc +34\\nacc +24\\nacc +37\\nacc +44\\njmp -158\\nacc +4\\nacc +39\\njmp -52\\njmp -329\\njmp +68\\nacc +25\\nnop -105\\nacc -15\\nacc +34\\njmp -6\\njmp +1\\nacc +1\\njmp +163\\nnop -285\\nacc +8\\nacc +48\\njmp +143\\nacc -3\\nnop -269\\nacc -16\\njmp -310\\nacc -5\\njmp -304\\nacc +45\\nnop -231\\njmp +1\\njmp +245\\nnop -243\\njmp +187\\nacc -6\\nacc +7\\nacc +17\\nacc +6\\njmp -111\\nacc +24\\nacc -10\\nacc +21\\njmp -97\\njmp +1\\nacc -12\\nacc +10\\njmp +127\\nacc +0\\njmp -211\\nacc -11\\nacc +36\\nacc +45\\nacc -19\\njmp -182\\njmp -366\\nacc +38\\nacc -11\\nacc +32\\njmp -260\\nacc +6\\nacc +31\\njmp +3\\nacc +5\\njmp +101\\njmp -64\\nacc +48\\nacc +5\\nnop +40\\nacc -13\\njmp +95\\nnop +76\\nacc +44\\nacc +43\\nacc +43\\njmp +196\\nacc +34\\njmp +161\\nacc +5\\nacc +45\\nacc +7\\njmp +20\\nacc +13\\njmp -127\\nacc +5\\nacc +18\\njmp -239\\njmp -76\\nnop +214\\njmp -284\\nacc +10\\nacc -8\\njmp -81\\nacc +48\\nacc -3\\njmp -55\\nnop -288\\nacc +37\\nacc +1\\nacc -12\\njmp +1\\nnop +91\\nacc +20\\nacc +18\\njmp +4\\nacc -7\\nacc -10\\njmp -229\\nnop -230\\nnop +45\\nacc +37\\njmp +127\\njmp +69\\njmp -153\\nacc -15\\nacc -19\\nacc +32\\njmp -33\\nnop +164\\nacc +32\\njmp -133\\nacc +20\\nacc -8\\njmp +8\\nacc -11\\nnop +82\\nacc +7\\nacc +40\\njmp +79\\nacc +0\\njmp +159\\nacc +4\\nacc -8\\nacc +20\\nnop +143\\njmp -351\\nacc -7\\njmp +78\\nacc +0\\nacc +4\\njmp +20\\njmp -3\\nacc +2\\nacc +23\\njmp -256\\nacc +33\\njmp -473\\nacc +29\\nacc -13\\njmp +77\\njmp +158\\nacc -16\\njmp -10\\njmp -181\\njmp -135\\nnop -95\\nacc +46\\nacc +39\\nacc -3\\njmp -94\\njmp -67\\nacc +49\\nnop -78\\nnop -9\\njmp +107\\nacc -19\\nacc -1\\nacc +0\\nacc -4\\njmp -189\\nacc +11\\njmp -106\\njmp -200\\njmp +122\\nacc +8\\nacc +48\\nacc +15\\nacc +0\\njmp -493\\nacc +13\\njmp -8\\nacc +36\\nacc -10\\njmp +1\\nacc +9\\njmp +7\\njmp +85\\nacc +22\\nacc -8\\nnop -124\\njmp -517\\njmp -338\\nacc +39\\nnop -438\\nacc -11\\njmp +69\\nacc +8\\nacc +34\\nacc +34\\nacc -9\\njmp -205\\nnop -528\\njmp -495\\nacc +47\\nacc +40\\nacc +30\\njmp -328\\nacc -2\\nacc +41\\njmp -475\\nacc +42\\nacc +48\\nacc +2\\nacc +7\\njmp -415\\nnop -249\\nacc -3\\njmp +65\\nacc +23\\nnop -4\\njmp -254\\nacc -12\\nacc +22\\nacc +27\\njmp -176\\njmp -408\\nacc -15\\nacc +14\\nacc +30\\nacc +0\\njmp -363\\njmp -426\\nacc +38\\nnop -425\\njmp -440\\njmp +1\\nacc +22\\njmp -63\\njmp -406\\nnop -445\\nacc -5\\nacc +34\\nnop -425\\njmp +65\\nacc +33\\njmp -91\\nacc -12\\njmp +1\\njmp -541\\nnop -489\\njmp -490\\nacc +20\\nacc +20\\nacc +38\\nacc -18\\njmp -548\\nacc +43\\nacc -7\\njmp -351\\nacc -9\\nacc +50\\nacc +1\\nnop -587\\njmp -230\\njmp +1\\nnop +43\\njmp -65\\nacc +31\\nacc +5\\nacc +1\\njmp -105\\nnop -477\\nacc +21\\nnop -92\\njmp -263\\nacc +28\\njmp -265\\njmp -311\\nacc +2\\nacc +23\\nacc +50\\njmp -4\\nacc +42\\nacc +42\\nacc +31\\njmp -167\\nacc +49\\nacc +46\\njmp -73\\nnop -135\\nacc +43\\njmp -236\\nacc -14\\nacc -3\\njmp -406\\nacc +2\\nacc -3\\nacc +47\\njmp -420\\nacc -8\\nacc +18\\njmp -604\\njmp -218\\nacc +37\\nacc -16\\nnop -278\\nacc -15\\njmp -214\\nacc -6\\nacc +18\\nacc +7\\nacc +0\\njmp -252\\nacc +14\\njmp -266\\nacc +27\\nacc -16\\nnop -533\\nnop -534\\njmp +1\";","export default \"Having perfected their hot chocolate, the Elves have a new problem: the [Goblins](https://en.wikipedia.org/wiki/Goblin) that live in these caves will do anything to steal it. Looks like they're here for a fight.\\n\\nYou scan the area, generating a map of the walls (`#`), open cavern (`.`), and starting position of every Goblin (`G`) and Elf (`E`) (your puzzle input).\\n\\nCombat proceeds in **rounds**; in each round, each unit that is still alive takes a **turn**, resolving all of its actions before the next unit's turn begins. On each unit's turn, it tries to **move** into range of an enemy (if it isn't already) and then **attack** (if it is in range).\\n\\nAll units are very disciplined and always follow very strict combat rules. Units never move or attack diagonally, as doing so would be dishonorable. When multiple choices are equally valid, ties are broken in **reading order**: top-to-bottom, then left-to-right. For instance, the order in which units take their turns within a round is the **reading order of their starting positions** in that round, regardless of the type of unit or whether other units have moved after the round started. For example:\\n\\n```\\n                 would take their\\nThese units:   turns in this order:\\n  #######           #######\\n  #.G.E.#           #.1.2.#\\n  #E.G.E#           #3.4.5#\\n  #.G.E.#           #.6.7.#\\n  #######           #######\\n```\\n\\nEach unit begins its turn by identifying all possible **targets** (enemy units). If no targets remain, combat ends.\\n\\nThen, the unit identifies all of the open squares (`.`) that are **in range** of each target; these are the squares which are **adjacent** (immediately up, down, left, or right) to any target and which aren't **already** occupied by a wall or another unit. Alternatively, the unit might already be in range of a target. If the unit is not already in range of a target, and there are no open squares which are in range of a target, the unit ends its turn.\\n\\nIf the unit is already in range of a target, it does not **move**, but continues its turn with an **attack**. Otherwise, since it is not in range of a target, it **moves**.\\n\\nTo **move**, the unit first considers the squares that are **in range** and determines **which of those squares it could reach in the fewest steps**. A **step** is a single movement to any **adjacent** (immediately up, down, left, or right) open (`.`) square. Units cannot move into walls or other units. The unit does this while considering the **current positions of units** and does not do any prediction about where units will be later. If the unit cannot reach (find an open path to) any of the squares that are in range, it ends its turn. If multiple squares are in range and **tied** for being reachable in the fewest steps, the square which is first in **reading order** is chosen. For example:\\n\\n```\\nTargets:      In range:     Reachable:    Nearest:      Chosen:\\n#######       #######       #######       #######       #######\\n#E..G.#       #E.?G?#       #E.@G.#       #E.!G.#       #E.+G.#\\n#...#.#  -->  #.?.#?#  -->  #.@.#.#  -->  #.!.#.#  -->  #...#.#\\n#.G.#G#       #?G?#G#       #@G@#G#       #!G.#G#       #.G.#G#\\n#######       #######       #######       #######       #######\\n```\\n\\nIn the above scenario, the Elf has three targets (the three Goblins):\\n\\n- Each of the Goblins has open, adjacent squares which are in **range** (marked with a `?` on the map).\\n- Of those squares, four are **reachable** (marked `@`); the other two (on the right) would require moving through a wall or unit to reach.\\n- Three of these reachable squares are **nearest**, requiring the fewest steps (only `2`) to reach (marked `!`).\\n- Of those, the square which is first in reading order is **chosen** (`+`).\\n\\nThe unit then takes a single **step** toward the chosen square along the **shortest path** to that square. If multiple steps would put the unit equally closer to its destination, the unit chooses the step which is first in reading order. (This requires knowing when there is **more than one shortest path** so that you can consider the first step of each such path.) For example:\\n\\n```\\nIn range:     Nearest:      Chosen:       Distance:     Step:\\n#######       #######       #######       #######       #######\\n#.E...#       #.E...#       #.E...#       #4E212#       #..E..#\\n#...?.#  -->  #...!.#  -->  #...+.#  -->  #32101#  -->  #.....#\\n#..?G?#       #..!G.#       #...G.#       #432G2#       #...G.#\\n#######       #######       #######       #######       #######\\n```\\n\\nThe Elf sees three squares in range of a target (`?`), two of which are nearest (`!`), and so the first in reading order is chosen (`+`). Under \\\"Distance\\\", each open square is marked with its distance from the destination square; the two squares to which the Elf could move on this turn (down and to the right) are both equally good moves and would leave the Elf `2` steps from being in range of the Goblin. Because the step which is first in reading order is chosen, the Elf moves **right** one square.\\n\\nHere's a larger example of movement:\\n\\n```\\nInitially:\\n#########\\n#G..G..G#\\n#.......#\\n#.......#\\n#G..E..G#\\n#.......#\\n#.......#\\n#G..G..G#\\n#########\\n\\nAfter 1 round:\\n#########\\n#.G...G.#\\n#...G...#\\n#...E..G#\\n#.G.....#\\n#.......#\\n#G..G..G#\\n#.......#\\n#########\\n\\nAfter 2 rounds:\\n#########\\n#..G.G..#\\n#...G...#\\n#.G.E.G.#\\n#.......#\\n#G..G..G#\\n#.......#\\n#.......#\\n#########\\n\\nAfter 3 rounds:\\n#########\\n#.......#\\n#..GGG..#\\n#..GEG..#\\n#G..G...#\\n#......G#\\n#.......#\\n#.......#\\n#########\\n```\\n\\nOnce the Goblins and Elf reach the positions above, they all are either in range of a target or cannot find any square in range of a target, and so none of the units can move until a unit dies.\\n\\nAfter moving (or if the unit began its turn in range of a target), the unit **attacks**.\\n\\nTo **attack**, the unit first determines **all** of the targets that are **in range** of it by being immediately **adjacent** to it. If there are no such targets, the unit ends its turn. Otherwise, the adjacent target with the **fewest hit points** is selected; in a tie, the adjacent target with the fewest hit points which is first in reading order is selected.\\n\\nThe unit deals damage equal to its **attack power** to the selected target, reducing its hit points by that amount. If this reduces its hit points to 0 or fewer, the selected target **dies**: its square becomes . and it takes no further turns.\\n\\nEach **unit**, either Goblin or Elf, has `3` **attack power** and starts with `200` **hit points**.\\n\\nFor example, suppose the only Elf is about to attack:\\n\\n```\\n       HP:            HP:\\nG....  9       G....  9  \\n..G..  4       ..G..  4  \\n..EG.  2  -->  ..E..     \\n..G..  2       ..G..  2  \\n...G.  1       ...G.  1  \\n```\\n\\nThe \\\"HP\\\" column shows the hit points of the Goblin to the left in the corresponding row. The Elf is in range of three targets: the Goblin above it (with `4` hit points), the Goblin to its right (with `2` hit points), and the Goblin below it (also with `2` hit points). Because three targets are in range, the ones with the lowest hit points are selected: the two Goblins with `2` hit points each (one to the right of the Elf and one below the Elf). Of those, the Goblin first in reading order (the one to the right of the Elf) is selected. The selected Goblin's hit points (`2`) are reduced by the Elf's attack power (`3`), reducing its hit points to -1, killing it.\\n\\nAfter attacking, the unit's turn ends. Regardless of how the unit's turn ends, the next unit in the round takes its turn. If all units have taken turns in this round, the round ends, and a new round begins.\\n\\nThe Elves look quite outnumbered. You need to determine the **outcome** of the battle: **the number of full rounds that were completed** (not counting the round in which combat ends) multiplied by **the sum of the hit points of all remaining units** at the moment combat ends. (Combat only ends when a unit finds no targets during its turn.)\\n\\nBelow is an entire sample combat. Next to each map, each row's units' hit points are listed from left to right.\\n\\n```\\nInitially:\\n#######   \\n#.G...#   G(200)\\n#...EG#   E(200), G(200)\\n#.#.#G#   G(200)\\n#..G#E#   G(200), E(200)\\n#.....#   \\n#######   \\n\\nAfter 1 round:\\n#######   \\n#..G..#   G(200)\\n#...EG#   E(197), G(197)\\n#.#G#G#   G(200), G(197)\\n#...#E#   E(197)\\n#.....#   \\n#######   \\n\\nAfter 2 rounds:\\n#######   \\n#...G.#   G(200)\\n#..GEG#   G(200), E(188), G(194)\\n#.#.#G#   G(194)\\n#...#E#   E(194)\\n#.....#   \\n#######   \\n\\nCombat ensues; eventually, the top Elf dies:\\n\\nAfter 23 rounds:\\n#######   \\n#...G.#   G(200)\\n#..G.G#   G(200), G(131)\\n#.#.#G#   G(131)\\n#...#E#   E(131)\\n#.....#   \\n#######   \\n\\nAfter 24 rounds:\\n#######   \\n#..G..#   G(200)\\n#...G.#   G(131)\\n#.#G#G#   G(200), G(128)\\n#...#E#   E(128)\\n#.....#   \\n#######   \\n\\nAfter 25 rounds:\\n#######   \\n#.G...#   G(200)\\n#..G..#   G(131)\\n#.#.#G#   G(125)\\n#..G#E#   G(200), E(125)\\n#.....#   \\n#######   \\n\\nAfter 26 rounds:\\n#######   \\n#G....#   G(200)\\n#.G...#   G(131)\\n#.#.#G#   G(122)\\n#...#E#   E(122)\\n#..G..#   G(200)\\n#######   \\n\\nAfter 27 rounds:\\n#######   \\n#G....#   G(200)\\n#.G...#   G(131)\\n#.#.#G#   G(119)\\n#...#E#   E(119)\\n#...G.#   G(200)\\n#######   \\n\\nAfter 28 rounds:\\n#######   \\n#G....#   G(200)\\n#.G...#   G(131)\\n#.#.#G#   G(116)\\n#...#E#   E(113)\\n#....G#   G(200)\\n#######   \\n\\nMore combat ensues; eventually, the bottom Elf dies:\\n\\nAfter 47 rounds:\\n#######   \\n#G....#   G(200)\\n#.G...#   G(131)\\n#.#.#G#   G(59)\\n#...#.#   \\n#....G#   G(200)\\n#######  \\n```\\n\\nBefore the 48th round can finish, the top-left Goblin finds that there are no targets remaining, and so combat ends. So, the number of **full rounds** that were completed is **`47`**, and the sum of the hit points of all remaining units is `200+131+59+200 =` **`590`**. From these, the **outcome** of the battle is `47 * 590 =` **`27730`**.\\n\\nHere are a few example summarized combats:\\n\\n```\\n#######       #######\\n#G..#E#       #...#E#   E(200)\\n#E#E.E#       #E#...#   E(197)\\n#G.##.#  -->  #.E##.#   E(185)\\n#...#E#       #E..#E#   E(200), E(200)\\n#...E.#       #.....#\\n#######       #######\\n\\nCombat ends after 37 full rounds\\nElves win with 982 total hit points left\\nOutcome: 37 * 982 = 36334\\n```\\n\\n```\\n#######       #######   \\n#E..EG#       #.E.E.#   E(164), E(197)\\n#.#G.E#       #.#E..#   E(200)\\n#E.##E#  -->  #E.##.#   E(98)\\n#G..#.#       #.E.#.#   E(200)\\n#..E#.#       #...#.#   \\n#######       #######   \\n\\nCombat ends after 46 full rounds\\nElves win with 859 total hit points left\\nOutcome: 46 * 859 = 39514\\n```\\n\\n```\\n#######       #######   \\n#E.G#.#       #G.G#.#   G(200), G(98)\\n#.#G..#       #.#G..#   G(200)\\n#G.#.G#  -->  #..#..#   \\n#G..#.#       #...#G#   G(95)\\n#...E.#       #...G.#   G(200)\\n#######       #######   \\n\\nCombat ends after 35 full rounds\\nGoblins win with 793 total hit points left\\nOutcome: 35 * 793 = 27755\\n```\\n\\n```\\n#######       #######   \\n#.E...#       #.....#   \\n#.#..G#       #.#G..#   G(200)\\n#.###.#  -->  #.###.#   \\n#E#G#G#       #.#.#.#   \\n#...#G#       #G.G#G#   G(98), G(38), G(200)\\n#######       #######   \\n\\nCombat ends after 54 full rounds\\nGoblins win with 536 total hit points left\\nOutcome: 54 * 536 = 28944\\n```\\n\\n```\\n#########       #########   \\n#G......#       #.G.....#   G(137)\\n#.E.#...#       #G.G#...#   G(200), G(200)\\n#..##..G#       #.G##...#   G(200)\\n#...##..#  -->  #...##..#   \\n#...#...#       #.G.#...#   G(200)\\n#.G...G.#       #.......#   \\n#.....G.#       #.......#   \\n#########       #########   \\n\\nCombat ends after 20 full rounds\\nGoblins win with 937 total hit points left\\nOutcome: 20 * 937 = 18740\\n```\\n\\n**What is the outcome** of the combat described in your puzzle input?\\n\\n[comment]: <> (PART 2)\\n\\nAccording to your calculations, the Elves are going to lose badly. Surely, you won't mess up the timeline too much if you give them just a little advanced technology, right?\\n\\nYou need to make sure the Elves not only **win**, but also suffer **no losses**: even the death of a single Elf is unacceptable.\\n\\nHowever, you can't go too far: larger changes will be more likely to permanently alter spacetime.\\n\\nSo, you need to **find the outcome** of the battle in which the Elves have the **lowest integer attack power** (at least `4`) that allows them to **win without a single death**. The Goblins always have an attack power of `3`.\\n\\nIn the first summarized example above, the lowest attack power the Elves need to win without losses is `15`:\\n\\n```\\n#######       #######\\n#.G...#       #..E..#   E(158)\\n#...EG#       #...E.#   E(14)\\n#.#.#G#  -->  #.#.#.#\\n#..G#E#       #...#.#\\n#.....#       #.....#\\n#######       #######\\n\\nCombat ends after 29 full rounds\\nElves win with 172 total hit points left\\nOutcome: 29 * 172 = 4988\\n```\\n\\nIn the second example above, the Elves need only `4` attack power:\\n\\n```\\n#######       #######\\n#E..EG#       #.E.E.#   E(200), E(23)\\n#.#G.E#       #.#E..#   E(200)\\n#E.##E#  -->  #E.##E#   E(125), E(200)\\n#G..#.#       #.E.#.#   E(200)\\n#..E#.#       #...#.#\\n#######       #######\\n\\nCombat ends after 33 full rounds\\nElves win with 948 total hit points left\\nOutcome: 33 * 948 = 31284\\n```\\n\\nIn the third example above, the Elves need `15` attack power:\\n\\n```\\n#######       #######\\n#E.G#.#       #.E.#.#   E(8)\\n#.#G..#       #.#E..#   E(86)\\n#G.#.G#  -->  #..#..#\\n#G..#.#       #...#.#\\n#...E.#       #.....#\\n#######       #######\\n\\nCombat ends after 37 full rounds\\nElves win with 94 total hit points left\\nOutcome: 37 * 94 = 3478\\n```\\n\\nIn the fourth example above, the Elves need `12` attack power:\\n\\n```\\n#######       #######\\n#.E...#       #...E.#   E(14)\\n#.#..G#       #.#..E#   E(152)\\n#.###.#  -->  #.###.#\\n#E#G#G#       #.#.#.#\\n#...#G#       #...#.#\\n#######       #######\\n\\nCombat ends after 39 full rounds\\nElves win with 166 total hit points left\\nOutcome: 39 * 166 = 6474\\n```\\n\\nIn the last example above, the lone Elf needs `34` attack power:\\n\\n```\\n#########       #########   \\n#G......#       #.......#   \\n#.E.#...#       #.E.#...#   E(38)\\n#..##..G#       #..##...#   \\n#...##..#  -->  #...##..#   \\n#...#...#       #...#...#   \\n#.G...G.#       #.......#   \\n#.....G.#       #.......#   \\n#########       #########   \\n\\nCombat ends after 30 full rounds\\nElves win with 38 total hit points left\\nOutcome: 30 * 38 = 1140\\n```\\n\\nAfter increasing the Elves' attack power until it is just barely enough for them to win without any Elves dying, **what is the outcome** of the combat described in your puzzle input?\";","export default \"As you look out the window and notice a heavily-forested continent slowly appear over the horizon, you are interrupted by the child sitting next to you. They're curious if you could help them with their math homework.\\n\\nUnfortunately, it seems like this \\\"math\\\" [follows different rules](https://www.youtube.com/watch?v=3QtRK7Y2pPU&t=15) than you remember.\\n\\nThe homework (your puzzle input) consists of a series of expressions that consist of addition (`+`), multiplication (`*`), and parentheses (`(...)`). Just like normal math, parentheses indicate that the expression inside must be evaluated before it can be used by the surrounding expression. Addition still finds the sum of the numbers on both sides of the operator, and multiplication still finds the product.\\n\\nHowever, the rules of **operator precedence** have changed. Rather than evaluating multiplication before addition, the operators have the **same precedence**, and are evaluated left-to-right regardless of the order in which they appear.\\n\\nFor example, the steps to evaluate the expression `1 + 2 * 3 + 4 * 5 + 6` are as follows:\\n\\n```\\n1 + 2 * 3 + 4 * 5 + 6\\n  3   * 3 + 4 * 5 + 6\\n      9   + 4 * 5 + 6\\n         13   * 5 + 6\\n             65   + 6\\n                 71\\n```\\n\\nParentheses can override this order; for example, here is what happens if parentheses are added to form `1 + (2 * 3) + (4 * (5 + 6))`:\\n\\n```\\n1 + (2 * 3) + (4 * (5 + 6))\\n1 +    6    + (4 * (5 + 6))\\n     7      + (4 * (5 + 6))\\n     7      + (4 *   11   )\\n     7      +     44\\n            51\\n```\\n\\nHere are a few more examples:\\n\\n- `2 * 3 + (4 * 5)` becomes **`26`**.\\n- `5 + (8 * 3 + 9 + 3 * 4 * 3)` becomes **`437`**.\\n- `5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))` becomes **`12240`**.\\n- `((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2` becomes **`13632`**.\\n\\nBefore you can help with the homework, you need to understand it yourself. **Evaluate the expression on each line of the homework; what is the sum of the resulting values?**\\n\\n[comment]: <> (PART 2)\\n\\nYou manage to answer the child's questions and they finish part 1 of their homework, but get stuck when they reach the next section: **advanced** math.\\n\\nNow, addition and multiplication have **different** precedence levels, but they're not the ones you're familiar with. Instead, addition is evaluated **before** multiplication.\\n\\nFor example, the steps to evaluate the expression `1 + 2 * 3 + 4 * 5 + 6` are now as follows:\\n\\n```\\n1 + 2 * 3 + 4 * 5 + 6\\n  3   * 3 + 4 * 5 + 6\\n  3   *   7   * 5 + 6\\n  3   *   7   *  11\\n     21       *  11\\n         231\\n```\\n\\nHere are the other examples from above:\\n\\n- `1 + (2 * 3) + (4 * (5 + 6))` still becomes **`51`**.\\n- `2 * 3 + (4 * 5)` becomes **`46`**.\\n- `5 + (8 * 3 + 9 + 3 * 4 * 3)` becomes **`1445`**.\\n- `5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))` becomes **`669060`**.\\n- `((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2` becomes **`23340`**.\\n\\n\\n**What do you get if you add up the results of evaluating the homework problems using these new rules?**\";","export default \"The CPU itself is a large, black building surrounded by a bottomless pit. Enormous metal tubes extend outward from the side of the building at regular intervals and descend down into the void. There's no way to cross, but you need to get inside.\\n\\nNo way, of course, other than building a **bridge** out of the magnetic components strewn about nearby.\\n\\nEach component has two **ports**, one on each end. The ports come in all different types, and only matching types can be connected. You take an inventory of the components by their port types (your puzzle input). Each port is identified by the number of **pins** it uses; more pins mean a stronger connection for your bridge. A `3/7` component, for example, has a type-`3` port on one side, and a type-`7` port on the other.\\n\\nYour side of the pit is metallic; a perfect surface to connect a magnetic, **zero-pin port**. Because of this, the first port you use must be of type 0. It doesn't matter what type of port you end with; your goal is just to make the bridge as strong as possible.\\n\\nThe **strength** of a bridge is the sum of the port types in each component. For example, if your bridge is made of components `0/3`, `3/7`, and `7/4`, your bridge has a strength of `0+3 + 3+7 + 7+4 = 24`.\\n\\nFor example, suppose you had the following components:\\n\\n```\\n0/2\\n2/2\\n2/3\\n3/4\\n3/5\\n0/1\\n10/1\\n9/10\\n```\\n\\nWith them, you could make the following valid bridges:\\n\\n- `0/1`\\n- `0/1`--`10/1`\\n- `0/1`--`10/1`--`9/1`0\\n- `0/2`\\n- `0/2`--`2/3`\\n- `0/2`--`2/3`--`3/4`\\n- `0/2`--`2/3`--`3/5`\\n- `0/2`--`2/2`\\n- `0/2`--`2/2`--`2/3`\\n- `0/2`--`2/2`--`2/3`--`3/4`\\n- `0/2`--`2/2`--`2/3`--`3/5`\\n\\n(Note how, as shown by `10/1`, order of ports within a component doesn't matter. However, you may only use each port on a component once.)\\n\\nOf these bridges, the **strongest** one is `0/1`--`10/1`--`9/10`; it has a strength of `0+1 + 1+10 + 10+9 = ` **`31`**.\\n\\n**What is the strength of the strongest bridge you can make** with the components you have available?\\n\\n[comment]: <> (PART 2)\\n\\nThe bridge you've built isn't long enough; you can't jump the rest of the way.\\n\\nIn the example above, there are two longest bridges:\\n\\n- `0/2`--`2/2`--`2/3`--`3/4`\\n- `0/2`--`2/2`--`2/3`--`3/5`\\n\\nOf them, the one which uses the `3/5` component is stronger; its strength is `0+2 + 2+2 + 2+3 + 3+5 = ` **`19`**.\\n\\n**What is the strength of the longest bridge you can make?** If you can make multiple bridges of the longest length, pick the **strongest** one.\";","export default \"\\\"We've detected some temporal anomalies,\\\" one of Santa's Elves at the Temporal Anomaly Research and Detection Instrument Station tells you. She sounded pretty worried when she called you down here. \\\"At 500-year intervals into the past, someone has been changing Santa's history!\\\"\\n\\n\\\"The good news is that the changes won't propagate to our time stream for another 25 days, and we have a device\\\" - she attaches something to your wrist - \\\"that will let you fix the changes with no such propagation delay. It's configured to send you 500 years further into the past every few days; that was the best we could do on such short notice.\\\"\\n\\n\\\"The bad news is that we are detecting roughly **fifty** anomalies throughout time; the device will indicate fixed anomalies with *stars*. The other bad news is that we only have one device and you're the best person for the job! Good lu--\\\" She taps a button on the device and you suddenly feel like you're falling. To save Christmas, you need to get all *fifty stars* by December 25th.\\n\\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants *one star*. Good luck!\\n\\nAfter feeling like you've been falling for a few minutes, you look at the device's tiny screen. \\\"Error: Device must be calibrated before first use. Frequency drift detected. Cannot maintain destination lock.\\\" Below the message, the device shows a sequence of changes in frequency (your puzzle input). A value like `+6` means the current frequency increases by `6`; a value like `-3` means the current frequency decreases by `3`.\\n\\nFor example, if the device displays frequency changes of `+1`, `-2`, `+3`, `+1`, then starting from a frequency of zero, the following changes would occur:\\n\\n- Current frequency  `0`, change of `+1`; resulting frequency  `1`.\\n- Current frequency  `1`, change of `-2`; resulting frequency `-1`.\\n- Current frequency `-1`, change of `+3`; resulting frequency  `2`.\\n- Current frequency  `2`, change of `+1`; resulting frequency  `3`.\\n\\nIn this example, the resulting frequency is `3`.\\n\\nHere are other example situations:\\n\\n- `+1, +1, +1` results in ` 3`\\n- `+1, +1, -2` results in ` 0`\\n- `-1, -2, -3` results in `-6`\\n\\nStarting with a frequency of zero, **what is the resulting frequency** after all of the changes in frequency have been applied?\\n\\n[comment]: <> (PART 2)\\n\\nYou notice that the device repeats the same frequency change list over and over. To calibrate the device, you need to find the first frequency it reaches **twice**.\\n\\nFor example, using the same list of changes above, the device would loop as follows:\\n\\n- Current frequency  `0`, change of `+1`; resulting frequency ` 1`.\\n- Current frequency  `1`, change of `-2`; resulting frequency `-1`.\\n- Current frequency `-1`, change of `+3`; resulting frequency ` 2`.\\n- Current frequency  `2`, change of `+1`; resulting frequency ` 3`.\\n- (At this point, the device continues from the start of the list.)\\n- Current frequency  `3`, change of `+1`; resulting frequency ` 4`.\\n- Current frequency  `4`, change of `-2`; resulting frequency  `2`, which has already been seen.\\n\\nIn this example, the first frequency reached twice is `2`. Note that your device might need to repeat its list of frequency changes many times before a duplicate frequency is found, and that duplicates might be found while in the middle of processing the list.\\n\\nHere are other examples:\\n\\n- `+1, -1` first reaches `0` twice.\\n- `+3, +3, +4, -2, -4` first reaches `10` twice.\\n- `-6, +3, +8, +5, -6` first reaches `5` twice.\\n- `+7, +7, -2, -7, -4` first reaches `14` twice.\\n\\n**What is the first frequency your device reaches twice?**\";","export default \"You're minding your own business on a ship at sea when the overboard alarm goes off! You rush to see if you can help. Apparently, one of the Elves tripped and accidentally sent the sleigh keys flying into the ocean!\\n\\nBefore you know it, you're inside a submarine the Elves keep ready for situations like this. It's covered in Christmas lights (because of course it is), and it even has an experimental antenna that should be able to track the keys if you can boost its signal strength high enough; there's a little meter that indicates the antenna's signal strength by displaying 0-50 **stars**.\\n\\nYour instincts tell you that in order to save Christmas, you'll need to get all **fifty stars** by December 25th.\\n\\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants **one star**. Good luck!\\n\\nAs the submarine drops below the surface of the ocean, it automatically performs a sonar sweep of the nearby sea floor. On a small screen, the sonar sweep report (your puzzle input) appears: each line is a measurement of the sea floor depth as the sweep looks further and further away from the submarine.\\n\\nFor example, suppose you had the following report:\\n\\n```\\n199\\n200\\n208\\n210\\n200\\n207\\n240\\n269\\n260\\n263\\n```\\n\\nThis report indicates that, scanning outward from the submarine, the sonar sweep found depths of `199`, `200`, `208`, `210`, and so on.\\n\\nThe first order of business is to figure out how quickly the depth increases, just so you know what you're dealing with - you never know if the keys will get carried into deeper water by an ocean current or a fish or something.\\n\\nTo do this, count **the number of times a depth measurement increases** from the previous measurement. (There is no measurement before the first measurement.) In the example above, the changes are as follows:\\n\\n<pre>\\n199 (N/A - no previous measurement)\\n200 (<b>increased</b>)\\n208 (<b>increased</b>)\\n210 (<b>increased</b>)\\n200 (decreased)\\n207 (<b>increased</b>)\\n240 (<b>increased</b>)\\n269 (<b>increased</b>)\\n260 (decreased)\\n263 (<b>increased</b>)\\n</pre>\\n\\nIn this example, there are **`7`** measurements that are larger than the previous measurement.\\n\\n**How many measurements are larger than the previous measurement?**\\n\\n[comment]: <> (PART 2)\\n\\nConsidering every single measurement isn't as useful as you expected: there's just too much noise in the data.\\n\\nInstead, consider sums of a **three-measurement** sliding window. Again considering the above example:\\n\\n```\\n199  A      \\n200  A B    \\n208  A B C  \\n210    B C D\\n200  E   C D\\n207  E F   D\\n240  E F G  \\n269    F G H\\n260      G H\\n263        H\\n```\\n\\nStart by comparing the first and second three-measurement windows. The measurements in the first window are marked `A` (`199`, `200`, `208`); their sum is `199 + 200 + 208 = 607`. The second window is marked `B` (`200`, `208`, `210`); its sum is `618`. The sum of measurements in the second window is larger than the sum of the first, so this first comparison **increased**.\\n\\nYour goal now is to count the **number of times the sum of measurements in this sliding window increases** from the previous sum. So, compare A with B, then compare B with C, then C with D, and so on. Stop when there aren't enough measurements left to create a new three-measurement sum.\\n\\nIn the above example, the sum of each three-measurement window is as follows:\\n\\n<pre>\\nA: 607 (N/A - no previous sum)\\nB: 618 (<b>increased</b>)\\nC: 618 (no change)\\nD: 617 (decreased)\\nE: 647 (<b>increased</b>)\\nF: 716 (<b>increased</b>)\\nG: 769 (<b>increased</b>)\\nH: 792 (<b>increased</b>)\\n</pre>\\n\\nIn this example, there are **`5`** sums that are larger than the previous sum.\\n\\nConsider sums of a three-measurement sliding window. **How many sums are larger than the previous sum?**\";","export default \"1000508\\n29,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,37,x,x,x,x,x,467,x,x,x,x,x,x,x,23,x,x,x,x,13,x,x,x,17,x,19,x,x,x,x,x,x,x,x,x,x,x,443,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,41\";","export default \"Walking along the memory banks of the stream, you find a small village that is experiencing a little confusion: some programs can't communicate with each other.\\n\\nPrograms in this village communicate using a fixed system of **pipes**. Messages are passed between programs using these pipes, but most programs aren't connected to each other directly. Instead, programs pass messages between each other until the message reaches the intended recipient.\\n\\nFor some reason, though, some of these messages aren't ever reaching their intended recipient, and the programs suspect that some pipes are missing. They would like you to investigate.\\n\\nYou walk through the village and record the ID of each program and the IDs with which it can communicate directly (your puzzle input). Each program has one or more programs with which it can communicate, and these pipes are bidirectional; if `8` says it can communicate with `11`, then `11` will say it can communicate with `8`.\\n\\nYou need to figure out how many programs are in the group that contains program ID `0`.\\n\\nFor example, suppose you go door-to-door like a travelling salesman and record the following list:\\n\\n```\\n0 <-> 2\\n1 <-> 1\\n2 <-> 0, 3, 4\\n3 <-> 2, 4\\n4 <-> 2, 3, 6\\n5 <-> 6\\n6 <-> 4, 5\\n```\\n\\nIn this example, the following programs are in the group that contains program ID `0`:\\n\\n- Program `0` by definition.\\n- Program `2`, directly connected to program `0`.\\n- Program `3` via program `2`.\\n- Program `4` via program `2`.\\n- Program `5` via programs `6`, then `4`, then `2`.\\n- Program `6` via programs `4`, then `2`.\\n\\nTherefore, a total of `6` programs are in this group; all but program `1`, which has a pipe that connects it to itself.\\n\\n**How many programs** are in the group that contains program ID `0`?\\n\\n[comment]: <> (PART 2)\\n\\nThere are more programs than just the ones in the group containing program ID 0. The rest of them have no way of reaching that group, and still might have no way of reaching each other.\\n\\nA **group** is a collection of programs that can all communicate via pipes either directly or indirectly. The programs you identified just a moment ago are all part of the same group. Now, they would like you to determine the total number of groups.\\n\\nIn the example above, there were `2` groups: one consisting of programs `0,2,3,4,5,6`, and the other consisting solely of program `1`.\\n\\n**How many groups are there** in total?\";","export default \"You've sneaked into another supply closet - this time, it's across from the prototype suit manufacturing lab. You need to sneak inside and fix the issues with the suit, but there's a guard stationed outside the lab, so this is as close as you can safely get.\\n\\nAs you search the closet for anything that might help, you discover that you're not the first person to want to sneak in. Covering the walls, someone has spent an hour starting every midnight for the past few months secretly observing this guard post! They've been writing down the ID of **the one guard on duty that night** - the Elves seem to have decided that one guard was enough for the overnight shift - as well as when they fall asleep or wake up while at their post (your puzzle input).\\n\\nFor example, consider the following records, which have already been organized into chronological order:\\n\\n```\\n[1518-11-01 00:00] Guard #10 begins shift\\n[1518-11-01 00:05] falls asleep\\n[1518-11-01 00:25] wakes up\\n[1518-11-01 00:30] falls asleep\\n[1518-11-01 00:55] wakes up\\n[1518-11-01 23:58] Guard #99 begins shift\\n[1518-11-02 00:40] falls asleep\\n[1518-11-02 00:50] wakes up\\n[1518-11-03 00:05] Guard #10 begins shift\\n[1518-11-03 00:24] falls asleep\\n[1518-11-03 00:29] wakes up\\n[1518-11-04 00:02] Guard #99 begins shift\\n[1518-11-04 00:36] falls asleep\\n[1518-11-04 00:46] wakes up\\n[1518-11-05 00:03] Guard #99 begins shift\\n[1518-11-05 00:45] falls asleep\\n[1518-11-05 00:55] wakes up\\n```\\n\\nTimestamps are written using `year-month-day hour:minute` format. The guard falling asleep or waking up is always the one whose shift most recently started. Because all asleep/awake times are during the midnight hour (`00:00` - `00:59`), only the minute portion (`00` - `59`) is relevant for those events.\\n\\nVisually, these records show that the guards are asleep at these times:\\n\\n```\\nDate   ID   Minute\\n            000000000011111111112222222222333333333344444444445555555555\\n            012345678901234567890123456789012345678901234567890123456789\\n11-01  #10  .....####################.....#########################.....\\n11-02  #99  ........................................##########..........\\n11-03  #10  ........................#####...............................\\n11-04  #99  ....................................##########..............\\n11-05  #99  .............................................##########.....\\n```\\n\\nThe columns are Date, which shows the month-day portion of the relevant day; ID, which shows the guard on duty that day; and Minute, which shows the minutes during which the guard was asleep within the midnight hour. (The Minute column's header shows the minute's ten's digit in the first row and the one's digit in the second row.) Awake is shown as `.`, and asleep is shown as `#`.\\n\\nNote that guards count as asleep on the minute they fall asleep, and they count as awake on the minute they wake up. For example, because Guard #10 wakes up at 00:25 on 1518-11-01, minute 25 is marked as awake.\\n\\nIf you can figure out the guard most likely to be asleep at a specific time, you might be able to trick that guard into working tonight so you can have the best chance of sneaking in. You have two strategies for choosing the best guard/minute combination.\\n\\n**Strategy 1**: Find the guard that has the most minutes asleep. What minute does that guard spend asleep the most?\\n\\nIn the example above, Guard #10 spent the most minutes asleep, a total of 50 minutes (20+25+5), while Guard #99 only slept for a total of 30 minutes (10+10+10). Guard #**10** was asleep most during minute **24** (on two days, whereas any other minute the guard was asleep was only seen on one day).\\n\\nWhile this example listed the entries in chronological order, your entries are in the order you found them. You'll need to organize them before they can be analyzed.\\n\\n**What is the ID of the guard you chose multiplied by the minute you chose?** (In the above example, the answer would be `10 * 24 = 240`.)\\n\\n[comment]: <> (PART 2)\\n\\n**Strategy 2**: Of all guards, which guard is most frequently asleep on the same minute?\\n\\nIn the example above, Guard #**99** spent minute **45** asleep more than any other guard or minute - three times in total. (In all other cases, any guard spent any minute asleep at most twice.)\\n\\n**What is the ID of the guard you chose multiplied by the minute you chose?** (In the above example, the answer would be `99 * 45 = 4455`.)\";","export default \"position=< 52484, -20780> velocity=<-5,  2>\\nposition=<-52068,  31483> velocity=< 5, -3>\\nposition=< 21120,  52398> velocity=<-2, -5>\\nposition=<-10264, -31236> velocity=< 1,  3>\\nposition=< 52501,  52392> velocity=<-5, -5>\\nposition=<-31144,  52394> velocity=< 3, -5>\\nposition=<-41603,  21031> velocity=< 4, -2>\\nposition=<-41630, -31239> velocity=< 4,  3>\\nposition=< 21126, -20780> velocity=<-2,  2>\\nposition=<-31150, -10326> velocity=< 3,  1>\\nposition=<-41598,  21033> velocity=< 4, -2>\\nposition=<-10252, -20787> velocity=< 1,  2>\\nposition=<-20677, -52149> velocity=< 2,  5>\\nposition=< 21102, -31236> velocity=<-2,  3>\\nposition=<-20734,  41942> velocity=< 2, -4>\\nposition=< 42018, -41696> velocity=<-4,  4>\\nposition=<-52071, -41691> velocity=< 5,  4>\\nposition=<-20720, -41693> velocity=< 2,  4>\\nposition=<-20710,  10574> velocity=< 2, -1>\\nposition=< 31540,  10578> velocity=<-3, -1>\\nposition=< 31581, -41693> velocity=<-3,  4>\\nposition=< 31540,  10576> velocity=<-3, -1>\\nposition=<-31184,  31490> velocity=< 3, -3>\\nposition=<-31168, -41689> velocity=< 3,  4>\\nposition=<-41641,  10575> velocity=< 4, -1>\\nposition=<-41590,  41940> velocity=< 4, -4>\\nposition=<-31179, -41695> velocity=< 3,  4>\\nposition=<-10232,  31481> velocity=< 1, -3>\\nposition=< 42012,  31481> velocity=<-4, -3>\\nposition=<-31192,  31486> velocity=< 3, -3>\\nposition=< 10685,  21029> velocity=<-1, -2>\\nposition=< 31535, -41692> velocity=<-3,  4>\\nposition=< 31561,  41942> velocity=<-3, -4>\\nposition=<-20719,  31481> velocity=< 2, -3>\\nposition=< 42007,  10581> velocity=<-4, -1>\\nposition=<-20726,  21027> velocity=< 2, -2>\\nposition=<-31136,  21034> velocity=< 3, -2>\\nposition=< 10680, -31241> velocity=<-1,  3>\\nposition=< 31559,  21027> velocity=<-3, -2>\\nposition=< 21088, -20780> velocity=<-2,  2>\\nposition=< 52472,  41939> velocity=<-5, -4>\\nposition=< 21126, -41692> velocity=<-2,  4>\\nposition=<-10268,  41937> velocity=< 1, -4>\\nposition=< 31551,  52393> velocity=<-3, -5>\\nposition=<-52097,  10578> velocity=< 5, -1>\\nposition=<-52087, -52145> velocity=< 5,  5>\\nposition=<-10223,  21034> velocity=< 1, -2>\\nposition=< 52483, -20785> velocity=<-5,  2>\\nposition=< 10660, -20780> velocity=<-1,  2>\\nposition=< 10648, -41694> velocity=<-1,  4>\\nposition=< 41988, -31239> velocity=<-4,  3>\\nposition=< 42010, -52149> velocity=<-4,  5>\\nposition=< 52440, -10327> velocity=<-5,  1>\\nposition=< 41991,  41943> velocity=<-4, -4>\\nposition=< 10636, -52142> velocity=<-1,  5>\\nposition=<-52071, -52146> velocity=< 5,  5>\\nposition=< 10672, -31237> velocity=<-1,  3>\\nposition=<-52095,  31484> velocity=< 5, -3>\\nposition=< 31568, -41688> velocity=<-3,  4>\\nposition=<-10236, -10331> velocity=< 1,  1>\\nposition=<-52095,  21031> velocity=< 5, -2>\\nposition=<-31187,  21027> velocity=< 3, -2>\\nposition=< 31577,  21036> velocity=<-3, -2>\\nposition=<-10284, -20784> velocity=< 1,  2>\\nposition=<-10271, -20783> velocity=< 1,  2>\\nposition=< 10650, -10335> velocity=<-1,  1>\\nposition=<-20706, -41694> velocity=< 2,  4>\\nposition=< 10636,  31490> velocity=<-1, -3>\\nposition=<-41590,  21028> velocity=< 4, -2>\\nposition=< 52480, -52142> velocity=<-5,  5>\\nposition=<-52050, -31239> velocity=< 5,  3>\\nposition=<-31183, -10326> velocity=< 3,  1>\\nposition=< 42038,  52393> velocity=<-4, -5>\\nposition=<-31176,  31486> velocity=< 3, -3>\\nposition=<-10276,  10581> velocity=< 1, -1>\\nposition=<-31168, -31236> velocity=< 3,  3>\\nposition=< 41986, -52151> velocity=<-4,  5>\\nposition=< 10656,  52398> velocity=<-1, -5>\\nposition=< 42046,  52393> velocity=<-4, -5>\\nposition=<-31139,  41936> velocity=< 3, -4>\\nposition=< 41991, -20786> velocity=<-4,  2>\\nposition=<-10243,  21033> velocity=< 1, -2>\\nposition=<-41641,  31488> velocity=< 4, -3>\\nposition=<-52095,  21032> velocity=< 5, -2>\\nposition=<-20728,  31490> velocity=< 2, -3>\\nposition=<-31163, -31237> velocity=< 3,  3>\\nposition=< 41999,  52392> velocity=<-4, -5>\\nposition=<-10279,  31485> velocity=< 1, -3>\\nposition=<-10275,  31481> velocity=< 1, -3>\\nposition=< 52484,  21030> velocity=<-5, -2>\\nposition=< 31537, -20785> velocity=<-3,  2>\\nposition=< 52493, -52148> velocity=<-5,  5>\\nposition=< 21129, -52147> velocity=<-2,  5>\\nposition=<-10241,  52398> velocity=< 1, -5>\\nposition=<-10279,  31489> velocity=< 1, -3>\\nposition=< 52496, -10330> velocity=<-5,  1>\\nposition=< 10651, -41692> velocity=<-1,  4>\\nposition=< 52480, -10326> velocity=<-5,  1>\\nposition=<-41596,  41939> velocity=< 4, -4>\\nposition=<-31174, -52151> velocity=< 3,  5>\\nposition=< 42014, -41692> velocity=<-4,  4>\\nposition=< 41986, -10334> velocity=<-4,  1>\\nposition=< 10656, -20781> velocity=<-1,  2>\\nposition=< 31564,  41935> velocity=<-3, -4>\\nposition=<-20717, -20787> velocity=< 2,  2>\\nposition=< 31540, -20789> velocity=<-3,  2>\\nposition=<-10265, -41692> velocity=< 1,  4>\\nposition=<-10260,  41940> velocity=< 1, -4>\\nposition=<-10247, -10326> velocity=< 1,  1>\\nposition=< 21094, -10328> velocity=<-2,  1>\\nposition=<-41646, -52142> velocity=< 4,  5>\\nposition=<-10284,  52395> velocity=< 1, -5>\\nposition=< 21086,  52394> velocity=<-2, -5>\\nposition=< 52500, -31239> velocity=<-5,  3>\\nposition=<-20689, -41697> velocity=< 2,  4>\\nposition=<-41636,  52389> velocity=< 4, -5>\\nposition=< 42026,  41943> velocity=<-4, -4>\\nposition=< 31549, -31239> velocity=<-3,  3>\\nposition=< 52488,  52398> velocity=<-5, -5>\\nposition=< 21086, -52145> velocity=<-2,  5>\\nposition=< 31573, -31237> velocity=<-3,  3>\\nposition=< 21139,  10573> velocity=<-2, -1>\\nposition=<-31188, -20781> velocity=< 3,  2>\\nposition=< 52488,  21035> velocity=<-5, -2>\\nposition=<-10273,  52398> velocity=< 1, -5>\\nposition=<-41642,  10581> velocity=< 4, -1>\\nposition=< 42034, -10328> velocity=<-4,  1>\\nposition=<-31187,  31489> velocity=< 3, -3>\\nposition=< 41994, -10328> velocity=<-4,  1>\\nposition=< 21110, -41692> velocity=<-2,  4>\\nposition=< 41994, -31236> velocity=<-4,  3>\\nposition=< 31532, -41692> velocity=<-3,  4>\\nposition=<-41645, -41696> velocity=< 4,  4>\\nposition=<-41617, -52148> velocity=< 4,  5>\\nposition=< 42027,  21036> velocity=<-4, -2>\\nposition=<-10268,  21029> velocity=< 1, -2>\\nposition=<-41614, -20785> velocity=< 4,  2>\\nposition=< 21097, -31238> velocity=<-2,  3>\\nposition=< 10645,  10575> velocity=<-1, -1>\\nposition=<-10243,  41944> velocity=< 1, -4>\\nposition=< 21118,  21034> velocity=<-2, -2>\\nposition=< 41994, -41691> velocity=<-4,  4>\\nposition=< 21083, -31240> velocity=<-2,  3>\\nposition=<-41596,  52389> velocity=< 4, -5>\\nposition=<-31172, -10328> velocity=< 3,  1>\\nposition=< 52464,  41944> velocity=<-5, -4>\\nposition=<-31176,  52398> velocity=< 3, -5>\\nposition=< 10669, -10326> velocity=<-1,  1>\\nposition=<-31172, -10328> velocity=< 3,  1>\\nposition=< 10653,  41940> velocity=<-1, -4>\\nposition=<-10242, -20784> velocity=< 1,  2>\\nposition=<-10279, -31234> velocity=< 1,  3>\\nposition=< 21134,  10573> velocity=<-2, -1>\\nposition=<-31160, -31239> velocity=< 3,  3>\\nposition=< 21126,  41935> velocity=<-2, -4>\\nposition=<-41617,  31485> velocity=< 4, -3>\\nposition=<-10279,  10574> velocity=< 1, -1>\\nposition=< 10672,  21027> velocity=<-1, -2>\\nposition=< 42022, -20780> velocity=<-4,  2>\\nposition=<-52100,  10573> velocity=< 5, -1>\\nposition=<-52052, -20788> velocity=< 5,  2>\\nposition=< 52461,  31489> velocity=<-5, -3>\\nposition=< 10672,  10577> velocity=<-1, -1>\\nposition=< 21094, -10334> velocity=<-2,  1>\\nposition=<-52074, -31238> velocity=< 5,  3>\\nposition=<-10249,  10582> velocity=< 1, -1>\\nposition=< 52480, -31235> velocity=<-5,  3>\\nposition=< 42042,  10582> velocity=<-4, -1>\\nposition=< 52496,  31481> velocity=<-5, -3>\\nposition=<-31136,  10578> velocity=< 3, -1>\\nposition=<-52095, -41695> velocity=< 5,  4>\\nposition=< 52460,  21027> velocity=<-5, -2>\\nposition=< 21107, -41695> velocity=<-2,  4>\\nposition=<-52051, -52147> velocity=< 5,  5>\\nposition=< 31564,  31487> velocity=<-3, -3>\\nposition=< 52481, -31237> velocity=<-5,  3>\\nposition=<-20722, -31241> velocity=< 2,  3>\\nposition=<-20735, -41692> velocity=< 2,  4>\\nposition=<-52079,  52390> velocity=< 5, -5>\\nposition=< 41994, -52142> velocity=<-4,  5>\\nposition=< 52497, -20785> velocity=<-5,  2>\\nposition=<-41638,  10577> velocity=< 4, -1>\\nposition=<-31175, -20789> velocity=< 3,  2>\\nposition=<-20719,  21031> velocity=< 2, -2>\\nposition=< 52460,  52389> velocity=<-5, -5>\\nposition=<-31136, -31237> velocity=< 3,  3>\\nposition=< 21086,  52397> velocity=<-2, -5>\\nposition=<-52084,  21027> velocity=< 5, -2>\\nposition=< 41994, -41694> velocity=<-4,  4>\\nposition=<-20706,  31486> velocity=< 2, -3>\\nposition=<-20682, -52147> velocity=< 2,  5>\\nposition=< 41999,  41942> velocity=<-4, -4>\\nposition=< 41994, -52151> velocity=<-4,  5>\\nposition=< 41986,  41943> velocity=<-4, -4>\\nposition=<-20738, -20788> velocity=< 2,  2>\\nposition=< 52464, -20780> velocity=<-5,  2>\\nposition=< 31543,  31485> velocity=<-3, -3>\\nposition=< 52448, -10334> velocity=<-5,  1>\\nposition=<-20713,  31486> velocity=< 2, -3>\\nposition=< 21099,  10576> velocity=<-2, -1>\\nposition=< 52440,  31490> velocity=<-5, -3>\\nposition=< 52441, -31241> velocity=<-5,  3>\\nposition=< 42002, -52147> velocity=<-4,  5>\\nposition=< 52469,  31483> velocity=<-5, -3>\\nposition=< 10658, -41688> velocity=<-1,  4>\\nposition=<-10273,  21031> velocity=< 1, -2>\\nposition=<-52083, -10331> velocity=< 5,  1>\\nposition=<-52044, -31234> velocity=< 5,  3>\\nposition=< 21110,  31482> velocity=<-2, -3>\\nposition=<-41590, -52145> velocity=< 4,  5>\\nposition=<-20689,  10577> velocity=< 2, -1>\\nposition=< 31593, -41697> velocity=<-3,  4>\\nposition=< 10673,  41935> velocity=<-1, -4>\\nposition=<-20677, -10331> velocity=< 2,  1>\\nposition=< 52469,  41940> velocity=<-5, -4>\\nposition=< 31593, -31242> velocity=<-3,  3>\\nposition=< 52467, -41697> velocity=<-5,  4>\\nposition=< 42007,  10582> velocity=<-4, -1>\\nposition=<-31173, -41692> velocity=< 3,  4>\\nposition=< 21083,  21032> velocity=<-2, -2>\\nposition=<-20730,  41939> velocity=< 2, -4>\\nposition=< 31574, -10335> velocity=<-3,  1>\\nposition=< 21139, -52143> velocity=<-2,  5>\\nposition=<-52099, -52150> velocity=< 5,  5>\\nposition=<-10252,  52398> velocity=< 1, -5>\\nposition=< 42047,  21029> velocity=<-4, -2>\\nposition=< 42030,  31484> velocity=<-4, -3>\\nposition=<-10268, -41697> velocity=< 1,  4>\\nposition=< 21080,  31484> velocity=<-2, -3>\\nposition=< 41997,  41935> velocity=<-4, -4>\\nposition=< 10653, -41693> velocity=<-1,  4>\\nposition=< 21089, -52142> velocity=<-2,  5>\\nposition=< 10652,  31486> velocity=<-1, -3>\\nposition=< 21107, -52145> velocity=<-2,  5>\\nposition=<-20718, -10335> velocity=< 2,  1>\\nposition=< 21094,  41941> velocity=<-2, -4>\\nposition=< 21097,  41935> velocity=<-2, -4>\\nposition=< 10624, -20785> velocity=<-1,  2>\\nposition=< 21078, -10328> velocity=<-2,  1>\\nposition=< 52464,  41938> velocity=<-5, -4>\\nposition=< 42006,  21031> velocity=<-4, -2>\\nposition=< 10675, -20789> velocity=<-1,  2>\\nposition=<-20677,  52396> velocity=< 2, -5>\\nposition=<-52095,  52396> velocity=< 5, -5>\\nposition=< 21079, -10333> velocity=<-2,  1>\\nposition=<-41589,  10577> velocity=< 4, -1>\\nposition=< 31556, -41691> velocity=<-3,  4>\\nposition=< 31545,  31482> velocity=<-3, -3>\\nposition=< 10644,  31487> velocity=<-1, -3>\\nposition=<-20706, -41690> velocity=< 2,  4>\\nposition=<-10266,  31481> velocity=< 1, -3>\\nposition=< 21087, -41693> velocity=<-2,  4>\\nposition=<-10239, -41695> velocity=< 1,  4>\\nposition=<-52090,  21031> velocity=< 5, -2>\\nposition=<-10236,  10578> velocity=< 1, -1>\\nposition=<-10236,  41942> velocity=< 1, -4>\\nposition=< 21086,  31483> velocity=<-2, -3>\\nposition=<-31176, -10330> velocity=< 3,  1>\\nposition=< 31574, -10330> velocity=<-3,  1>\\nposition=<-41598,  31482> velocity=< 4, -3>\\nposition=<-52087, -52144> velocity=< 5,  5>\\nposition=< 21090, -31243> velocity=<-2,  3>\\nposition=<-20695, -41693> velocity=< 2,  4>\\nposition=< 31574, -41692> velocity=<-3,  4>\\nposition=<-10240, -52148> velocity=< 1,  5>\\nposition=< 42042,  31481> velocity=<-4, -3>\\nposition=< 41986,  31481> velocity=<-4, -3>\\nposition=< 52484, -10326> velocity=<-5,  1>\\nposition=< 31593, -10330> velocity=<-3,  1>\\nposition=< 31548,  52398> velocity=<-3, -5>\\nposition=<-20719,  21027> velocity=< 2, -2>\\nposition=<-20697, -31243> velocity=< 2,  3>\\nposition=< 10680, -20781> velocity=<-1,  2>\\nposition=<-52088,  21031> velocity=< 5, -2>\\nposition=<-31176,  41943> velocity=< 3, -4>\\nposition=< 41996, -52147> velocity=<-4,  5>\\nposition=<-31176,  41944> velocity=< 3, -4>\\nposition=<-52056, -41697> velocity=< 5,  4>\\nposition=< 31593,  41944> velocity=<-3, -4>\\nposition=< 21099, -41695> velocity=<-2,  4>\\nposition=<-20697, -31243> velocity=< 2,  3>\\nposition=< 31588,  41938> velocity=<-3, -4>\\nposition=<-20728,  21031> velocity=< 2, -2>\\nposition=<-31149,  21027> velocity=< 3, -2>\\nposition=<-10223, -10329> velocity=< 1,  1>\\nposition=<-10236,  21034> velocity=< 1, -2>\\nposition=< 10632, -10333> velocity=<-1,  1>\\nposition=< 10680,  10581> velocity=<-1, -1>\\nposition=<-41641, -41688> velocity=< 4,  4>\\nposition=< 31545, -41696> velocity=<-3,  4>\\nposition=<-31139,  41937> velocity=< 3, -4>\\nposition=<-31189,  52395> velocity=< 3, -5>\\nposition=< 42036, -10335> velocity=<-4,  1>\\nposition=< 41998,  31485> velocity=<-4, -3>\\nposition=<-41637, -10326> velocity=< 4,  1>\\nposition=<-20682, -20787> velocity=< 2,  2>\\nposition=<-10241,  31490> velocity=< 1, -3>\\nposition=< 21135, -31239> velocity=<-2,  3>\\nposition=< 31561, -31240> velocity=<-3,  3>\\nposition=<-31192, -20786> velocity=< 3,  2>\\nposition=<-10236,  41944> velocity=< 1, -4>\\nposition=<-52059, -41697> velocity=< 5,  4>\\nposition=<-20733, -20787> velocity=< 2,  2>\\nposition=< 31540, -20781> velocity=<-3,  2>\\nposition=<-52055,  10573> velocity=< 5, -1>\\nposition=<-31152, -31236> velocity=< 3,  3>\\nposition=< 52496, -31240> velocity=<-5,  3>\\nposition=<-52052,  31484> velocity=< 5, -3>\\nposition=< 52453,  41940> velocity=<-5, -4>\\nposition=<-41646, -10333> velocity=< 4,  1>\\nposition=< 42042,  41941> velocity=<-4, -4>\\nposition=<-31131,  21036> velocity=< 3, -2>\\nposition=<-10281, -52145> velocity=< 1,  5>\\nposition=<-41598,  31485> velocity=< 4, -3>\\nposition=<-31179, -10327> velocity=< 3,  1>\\nposition=< 41988, -10332> velocity=<-4,  1>\\nposition=< 52456,  41936> velocity=<-5, -4>\\nposition=<-41595, -10335> velocity=< 4,  1>\\nposition=< 52445,  52390> velocity=<-5, -5>\\nposition=<-20693,  31483> velocity=< 2, -3>\\nposition=<-41630,  31484> velocity=< 4, -3>\\nposition=< 41986,  10581> velocity=<-4, -1>\\nposition=<-20734,  21035> velocity=< 2, -2>\\nposition=<-10223,  52395> velocity=< 1, -5>\\nposition=< 42012, -31238> velocity=<-4,  3>\\nposition=< 52445, -31237> velocity=<-5,  3>\\nposition=< 21110, -20784> velocity=<-2,  2>\\nposition=<-31179, -10328> velocity=< 3,  1>\\nposition=<-10251,  41944> velocity=< 1, -4>\\nposition=< 31593,  21028> velocity=<-3, -2>\\nposition=<-31167, -52150> velocity=< 3,  5>\\nposition=< 42003, -52151> velocity=<-4,  5>\\nposition=< 52485, -10334> velocity=<-5,  1>\\nposition=<-20690, -20786> velocity=< 2,  2>\\nposition=< 10625, -31242> velocity=<-1,  3>\\nposition=<-52087, -10332> velocity=< 5,  1>\\nposition=< 10672, -20783> velocity=<-1,  2>\\nposition=< 42026,  31489> velocity=<-4, -3>\\nposition=< 10672,  41937> velocity=<-1, -4>\\nposition=< 41995, -41697> velocity=<-4,  4>\\nposition=< 31572,  31481> velocity=<-3, -3>\\nposition=<-20688,  52389> velocity=< 2, -5>\\nposition=<-20725,  10574> velocity=< 2, -1>\\nposition=<-10260, -10328> velocity=< 1,  1>\\nposition=< 10685,  21034> velocity=<-1, -2>\\nposition=< 52499,  10577> velocity=<-5, -1>\\nposition=< 31536,  31488> velocity=<-3, -3>\\nposition=<-10260,  41941> velocity=< 1, -4>\\nposition=<-52089, -20789> velocity=< 5,  2>\\nposition=< 41994,  21034> velocity=<-4, -2>\\nposition=< 31549, -52147> velocity=<-3,  5>\\nposition=< 31564, -10328> velocity=<-3,  1>\\nposition=< 10645,  41943> velocity=<-1, -4>\\nposition=<-31168, -52147> velocity=< 3,  5>\\nposition=<-31187,  21034> velocity=< 3, -2>\\nposition=<-41598, -31241> velocity=< 4,  3>\\nposition=< 10653,  21035> velocity=<-1, -2>\\nposition=< 31576,  52398> velocity=<-3, -5>\\nposition=<-10249,  10582> velocity=< 1, -1>\\nposition=<-31136, -31240> velocity=< 3,  3>\\nposition=<-20712, -52151> velocity=< 2,  5>\\nposition=<-10279,  10579> velocity=< 1, -1>\\nposition=< 52469, -10326> velocity=<-5,  1>\\nposition=< 21103, -20784> velocity=<-2,  2>\\nposition=< 21136, -20785> velocity=<-2,  2>\\nposition=<-41605, -52142> velocity=< 4,  5>\\nposition=< 31551, -52147> velocity=<-3,  5>\";","export default \"...#.##.#.#.#.#..##.###.#\\n......##.....#####..#.#.#\\n#..####.######.#.#.##...#\\n...##..####........#.#.#.\\n.#.#####..#.....#######..\\n.#...#.#.##.#.#.....#....\\n.#.#.#.#.#####.#.#..#...#\\n###..##.###.#.....#...#.#\\n#####..#.....###.....####\\n#.##............###.#.###\\n#...###.....#.#.##.#..#.#\\n.#.###.##..#####.....####\\n.#...#..#..###.##..#....#\\n##.##...###....##.###.##.\\n#.##.###.#.#........#.#..\\n##......#..###.#######.##\\n.#####.##..#..#....##.##.\\n###..#...#..#.##..#.....#\\n##..#.###.###.#...##...#.\\n##..##..##.###..#.##..#..\\n...#.#.###..#....##.##.#.\\n##.##..####..##.##.##.##.\\n#...####.######.#...##...\\n.###..##.##..##.####....#\\n#.##....#.#.#..#.###..##.\";","export default \"9717666\\n20089533\";","export default \"....#...##.#.........#....#....\\n#.......#...#...#.#............\\n#..#..#.#.##....#.#........#...\\n........##...................#.\\n........#...##...#.#.###.......\\n##............#...#.....#.##...\\n...........#....###...#.....#..\\n.......#......#..##..#.....#...\\n..#.#..#....#.........#...#..#.\\n.........##......#.....##..##..\\n........#.....#....#..##......#\\n..#..#.......#..............#..\\n.....#.#.......................\\n.#.#....#.........#............\\n.......#.....#.###.............\\n......##......#...........#..#.\\n.#...............##...#........\\n.....#..##........###.........#\\n#...........#..#............#..\\n.........#....#..#.#......#....\\n.......#.........#..##.........\\n.##.....#..................#...\\n....#............#.#....#.....#\\n..#....#...##....#...#.#...#...\\n..........#................#.#.\\n#...#.#.#.####..#.#..........#.\\n..#...#.##......#...........#..\\n..#.....#...#.......#......#..#\\n..............#.......#........\\n.#..#..........#.....#...#..#.#\\n#........#...#......#.......#..\\n#..................#...........\\n..#...#........#...#..#........\\n..............#.....#.....#..#.\\n#.#.......#..............##.##.\\n....#.#.....##....#...........#\\n......#....#...#..#.......#....\\n....#..#.#.....#..##.....#....#\\n...........#.......#.#.#.......\\n#.......#..##........#..#......\\n.........#.##..#..............#\\n...........#............###.#..\\n..#.....#.....##...#.........#.\\n....##............##........#..\\n.....###..........#......##....\\n#...##..#..#..........#........\\n....#.....#.......#..#.#...##..\\n.#....#........#.#.........#.#.\\n##...#.#.....#......#..........\\n.....##.....#....#.....###.#..#\\n..............#..###..#...#..#.\\n....#...#....#.............#.#.\\n.#.........#.....#........#.##.\\n....#.........#..........#.....\\n.......#........#.#.#..........\\n#........##....#.........#.....\\n..##..........#....#.#...#....#\\n#...#.#......#..##..........#.#\\n.....#..#...#..#...............\\n#...#..............#...........\\n.#...#....#..##.....#....#.#...\\n.#...#.......#...#..#.##....#..\\n#....#........#....#...#.......\\n#..#......#.....#.....#..##....\\n......#.#....##....##..#...#...\\n..#....#.#.###..............#..\\n.#.##.......#.#.#..#...#..#....\\n..#..........#.#....#..#.#....#\\n..........#...#...#..........#.\\n..........#.....#.#..#..#....##\\n.#.#...##...#...........####...\\n........##..#.#..........#.##.#\\n#......###...........#...#.....\\n..#.#....##.........##....#....\\n#....#.##..##..#..#.....#.....#\\n.##.....##....##....#.......#..\\n#...#.....##....#..........#...\\n............#.#.##....#....#...\\n....#............#.....#......#\\n....................#..........\\n..#....................#..#....\\n....#.....#........#..##...#...\\n#.....#.#....................##\\n.#....#.#.#...#..........#....#\\n....#...#......#...#.....##...#\\n.....#.........................\\n.......#..#.#...#...#...#.....#\\n...#......#.##.#...#..#...##.#.\\n...........................#..#\\n..#.#.....#........##..........\\n....#...##........#.#.#..#...##\\n..##.....#..###.........##.##..\\n.#..#.....#...#.............#..\\n#..............##...#....##....\\n.##......#.#............#......\\n.............##...#.#.......#..\\n.........#..#..#...............\\n........##......#....##........\\n...#.........#.#.#.............\\n#..........#......#......#..#..\\n.............##.#.#..#.#.#...#.\\n.....#.........#...............\\n..##.#..#.....##..#........#.#.\\n.#..........#.#.......#......##\\n.#........................#....\\n#....#....#...#..#......#......\\n........#.......#......#.....#.\\n.....#....##..#...###...#....#.\\n....#.........#....#......#....\\n.............#...#....#.......#\\n.....#.........#..#.#..........\\n.........#..#........#.#.#.....\\n......#.##......#....#.#.##.#..\\n.#...#.#...#...#.#......#....##\\n.#................#......#.....\\n#.#.#...............#..........\\n.....#.#.......#...#........#..\\n#...#.#.#.##..#...........#..#.\\n.............###.........#....#\\n.#.....#.......##....##.......#\\n....#...#.......#.##.....#.....\\n...........##.........#...#....\\n..............#.#..#.....#..#..\\n#.#...#..#.#.........#......#.#\\n#.##.....##....#........#.#.#.#\\n##.#.###.........##.......#..#.\\n#.....#.....................#..\\n.........##........#...........\\n.###........##....#...#........\\n....#.#........##...........#..\\n..........#.....#..........#..#\\n......#..............#......#..\\n.....#...#......#...#...#......\\n..........#.#..#....#...#..###.\\n#..##........#................#\\n..#............................\\n.....#.........#.#.............\\n........#...#.....#...##......#\\n..#........#................#..\\n......#....#..#......#.........\\n...........##....#..#.#........\\n.....#.............###.........\\n#............#......#..#.......\\n..#..#.................#..#..##\\n.......#......#.....#........#.\\n....................#..#.##...#\\n.#..##...............##...#....\\n...#...#....#........#.........\\n.....##...#.....###............\\n.###.........#........#.....##.\\n.............#...#.............\\n...#.#...............#..##..#.#\\n...#...............#..#.....#..\\n....#.#..................#...#.\\n..........#...........#.#...###\\n#...#......#................#..\\n...#.#.......#...#......#.##...\\n......#..........#.............\\n##.......#.##.#...........#....\\n......#...#.#.....#............\\n.#.....#.....#.....#.........#.\\n..................#............\\n.#.#.#.....#......#.##.........\\n.......#..##.##......#..#....#.\\n...#.#.#......#...#........#...\\n..#............#......#.......#\\n..#......#........#.........#..\\n..#..#.#.#.....#.............#.\\n..#.#..##......#...#...##......\\n.##...#....##.#.#...........#..\\n..............#..#...#....#....\\n.......#.#........#............\\n.....##..###........#..........\\n......................#........\\n..##....#....#.................\\n.##.#.###.#........#.##..#...#.\\n##................#...........#\\n....#..##.....##...............\\n.#.....#..#............#.....#.\\n#.........#..............#.....\\n...##.#......#...#.............\\n................#..............\\n...#.....#....##...#..#....#...\\n..............##..#...#.##..#..\\n......................#..#....#\\n.......#....#..#.##.........#.#\\n#...#........##.......#........\\n...##...............#.....#....\\n.##...##...#...................\\n.........##.#...#.........#....\\n............#............#..#..\\n.............................#.\\n....#.#....#...................\\n......#......#...#..##.........\\n#........#.#.#.#.#......#....#.\\n.#.........#.#...#......#..#.#.\\n..............#....##.........#\\n.#.......#..#....#.#.#....#....\\n...###.#.#..#...#....#....#....\\n#........#....................#\\n......#...##.###..#..##...#....\\n.....#........#.......#........\\n#..#...........#.#.............\\n....##.#...#..##............##.\\n#.#..##..#...#...#.....#.......\\n..#.............#.##..#...#.##.\\n.#.....##.#..#...#...........#.\\n....#...#....................##\\n....##......#.###......#......#\\n...#...#.........#..#.##....#..\\n#......#..#....###.........#...\\n#...........##.............#.#.\\n#..............##....#......#..\\n.........#...#.#...#...#.......\\n....#....#............#.......#\\n........#...#....#......##.....\\n..........#.#..#.........#.....\\n#........#.##....##......#.....\\n...#.......#...................\\n###...#...#..#.##....#.....#...\\n........##..........#.##..#....\\n.....#......#..#.....#.....#.#.\\n...#..#..##..###.....##.#......\\n#..#......##...#............#..\\n#............#....#..#.........\\n#........#.......#......#..##.#\\n...#.#.........#.#.............\\n#..............#..............#\\n#.#......#..........##.........\\n#..##...........#..##...#......\\n.....#.#.....#......#.....#.#.#\\n.#.##...#...##...........#....#\\n#.............#........#.......\\n..##.............#...#.........\\n....#.#......###....#..........\\n...#..#.....#..##.#....#...#.#.\\n.............##................\\n#.#............#........#..#.#.\\n.#......#.....#...........#....\\n...#.........#...........#.##..\\n.....#...#.....#..#..........#.\\n........#.#...............#.#..\\n.......#..#..#.....#.......##..\\n.#...#...#..#...##...#.........\\n..........##....#..#.##..#.....\\n....#.................#...#....\\n.........#...#......#....#....#\\n.........#..#...#.##........##.\\n#.#....##.......#.#............\\n##.......##..................#.\\n......#...#......##............\\n##.#...#.#...........#..#......\\n.........#.........#..#.#...#..\\n.#...#.......#.#...###.........\\n................#.#.....#......\\n..#...#.....#........#.........\\n.........##.###.#.#.....#...#..\\n#..#..........#....#.#...#...##\\n##.#.#....#..##.............#.#\\n.###....#..#...............##..\\n............#......#.#.#....#..\\n........#...#..#...#...........\\n##.........#................#..\\n...###...#.#..#...#..........##\\n...#......#......##........#...\\n.......#............#..........\\n.....#.....##....#.....###.....\\n.#...#...#.....#..#..#....#..#.\\n#.#........#..#.......##...#.##\\n.....#.....##..#.##........#..#\\n.....#...#...........#.........\\n..#....#.#...#..#....##...#...#\\n...........#...##.........#....\\n..#....#....##........#.####...\\n#.............#.#.............#\\n...................#.....#.#..#\\n.#....#.#.............#.#......\\n#...........#............#.#...\\n..#.........#.#....#.......##..\\n#....####......#...#......#....\\n....##....#...................#\\n....#.##....#.............#....\\n.........##........#.....#..#..\\n............#...#..............\\n............#..##....#.....##.#\\n............#.....#......#.....\\n........#..#........##.#.......\\n...#.#........#..............#.\\n............#.........#..#.#...\\n................#.............#\\n..##..........##......#.#......\\n..#..#.##....#.........#...#...\\n...........##...#.#.#..........\\n.#.#.......#.#...#.........#...\\n.........#..#........#..#.#....\\n..........##..#.##....#....#...\\n....#...............#.......#..\\n##..........##.................\\n....#.#.#.....#..........##.#..\\n..............#.##..........##.\\n##...............#...#..#......\\n..#..#..........#......#.......\\n#...#..##.#.#..................\\n....#....##......##.#...#....##\\n.#...#.#....##.............#..#\\n................#......###.....\\n..#..#.............#.#.......#.\\n..#..................#.......#.\\n.....#.......#....#.##...#.##..\\n.....##.......#......#..#......\\n#..#.......#........#..........\\n..#...#..#....#.........#......\\n#..#..#......##..#.##....####..\\n......##.#.....#..#.......#....\\n.##...#.....#..#...#.#.........\\n#.....#........###....#...#..#.\\n.#....#.#..#......#............\\n.........#..#..#.....#........#\\n..#.......#..........#..#......\\n......#.......##.#....#.#.#....\\n.#............#.....#.......#..\\n...#..#...............#........\\n.....#.........................\";","export default \"Patched into the aircraft's data port, you discover weather forecasts of a massive tropical storm. Before you can figure out whether it will impact your vacation plans, however, your device suddenly turns off!\\n\\nIts battery is dead.\\n\\nYou'll need to plug it in. There's only one problem: the charging outlet near your seat produces the wrong number of **jolts**. Always prepared, you make a list of all of the joltage adapters in your bag.\\n\\nEach of your joltage adapters is rated for a specific **output joltage** (your puzzle input). Any given adapter can take an input `1`, `2`, or `3` jolts **lower** than its rating and still produce its rated output joltage.\\n\\nIn addition, your device has a built-in joltage adapter rated for `3` **jolts higher** than the highest-rated adapter in your bag. (If your adapter list were `3`, `9`, and `6`, your device's built-in adapter would be rated for `12` jolts.)\\n\\nTreat the charging outlet near your seat as having an effective joltage rating of `0`.\\n\\nSince you have some time to kill, you might as well test all of your adapters. Wouldn't want to get to your resort and realize you can't even charge your device!\\n\\nIf you **use every adapter in your bag** at once, what is the distribution of joltage differences between the charging outlet, the adapters, and your device?\\n\\nFor example, suppose that in your bag, you have adapters with the following joltage ratings:\\n\\n```\\n16\\n10\\n15\\n5\\n1\\n11\\n7\\n19\\n6\\n12\\n4\\n```\\n\\nWith these adapters, your device's built-in joltage adapter would be rated for `19 + 3 =` **`22`** jolts, 3 higher than the highest-rated adapter.\\n\\nBecause adapters can only connect to a source 1-3 jolts lower than its rating, in order to use every adapter, you'd need to choose them like this:\\n\\n- The charging outlet has an effective rating of `0` jolts, so the only adapters that could connect to it directly would need to have a joltage rating of `1`, `2`, or `3` jolts. Of these, only one you have is an adapter rated `1` jolt (difference of **`1`**).\\n- From your `1`-jolt rated adapter, the only choice is your `4`-jolt rated adapter (difference of **`3`**).\\n- From the `4`-jolt rated adapter, the adapters rated `5`, `6`, or `7` are valid choices. However, in order to not skip any adapters, you have to pick the adapter rated `5` jolts (difference of **`1`**).\\n- Similarly, the next choices would need to be the adapter rated `6` and then the adapter rated `7` (with difference of **`1`** and **`1`**).\\n- The only adapter that works with the `7`-jolt rated adapter is the one rated `10` jolts (difference of **`3`**).\\n- From `10`, the choices are `11` or `12`; choose `11` (difference of **`1`**) and then `12` (difference of **`1`**).\\n- After `12`, only valid adapter has a rating of `15` (difference of **`3`**), then `16` (difference of **`1`**), then `19` (difference of **`3`**).\\n- Finally, your device's built-in adapter is always `3` higher than the highest adapter, so its rating is `22` jolts (always a difference of **`3`**).\\n\\nIn this example, when using every adapter, there are **`7`** differences of 1 jolt and **`5`** differences of 3 jolts.\\n\\nHere is a larger example:\\n\\n```\\n28\\n33\\n18\\n42\\n31\\n14\\n46\\n20\\n48\\n47\\n24\\n23\\n49\\n45\\n19\\n38\\n39\\n11\\n1\\n32\\n25\\n35\\n8\\n17\\n7\\n9\\n4\\n2\\n34\\n10\\n3\\n```\\n\\nIn this larger example, in a chain that uses all of the adapters, there are **`22`** differences of 1 jolt and **`10`** differences of 3 jolts.\\n\\nFind a chain that uses all of your adapters to connect the charging outlet to your device's built-in adapter and count the joltage differences between the charging outlet, the adapters, and your device. **What is the number of 1-jolt differences multiplied by the number of 3-jolt differences?**\\n\\n[comment]: <> (PART 2)\\n\\nTo completely determine whether you have enough adapters, you'll need to figure out how many different ways they can be arranged. Every arrangement needs to connect the charging outlet to your device. The previous rules about when adapters can successfully connect still apply.\\n\\nThe first example above (the one that starts with `16`, `10`, `15`) supports the following arrangements:\\n\\n```\\n(0), 1, 4, 5, 6, 7, 10, 11, 12, 15, 16, 19, (22)\\n(0), 1, 4, 5, 6, 7, 10, 12, 15, 16, 19, (22)\\n(0), 1, 4, 5, 7, 10, 11, 12, 15, 16, 19, (22)\\n(0), 1, 4, 5, 7, 10, 12, 15, 16, 19, (22)\\n(0), 1, 4, 6, 7, 10, 11, 12, 15, 16, 19, (22)\\n(0), 1, 4, 6, 7, 10, 12, 15, 16, 19, (22)\\n(0), 1, 4, 7, 10, 11, 12, 15, 16, 19, (22)\\n(0), 1, 4, 7, 10, 12, 15, 16, 19, (22)\\n```\\n\\n(The charging outlet and your device's built-in adapter are shown in parentheses.) Given the adapters from the first example, the total number of arrangements that connect the charging outlet to your device is **`8`**.\\n\\nThe second example above (the one that starts with `28`, `33`, `18`) has many arrangements. Here are a few:\\n\\n```\\n(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,\\n32, 33, 34, 35, 38, 39, 42, 45, 46, 47, 48, 49, (52)\\n\\n(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,\\n32, 33, 34, 35, 38, 39, 42, 45, 46, 47, 49, (52)\\n\\n(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,\\n32, 33, 34, 35, 38, 39, 42, 45, 46, 48, 49, (52)\\n\\n(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,\\n32, 33, 34, 35, 38, 39, 42, 45, 46, 49, (52)\\n\\n(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,\\n32, 33, 34, 35, 38, 39, 42, 45, 47, 48, 49, (52)\\n\\n(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,\\n46, 48, 49, (52)\\n\\n(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,\\n46, 49, (52)\\n\\n(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,\\n47, 48, 49, (52)\\n\\n(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,\\n47, 49, (52)\\n\\n(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,\\n48, 49, (52)\\n```\\n\\nIn total, this set of adapters can connect the charging outlet to your device in **`19208`** distinct arrangements.\\n\\nYou glance back down at your bag and try to remember why you brought so many adapters; there must be **more than a trillion** valid ways to arrange them! Surely, there must be an efficient way to count the arrangements.\\n\\n**What is the total number of distinct ways you can arrange the adapters to connect the charging outlet to your device?**\";","export default \"111010111011\\n001011110010\\n000110111100\\n110101110001\\n101110011111\\n110011111001\\n100000110011\\n011100101100\\n111111000111\\n010100001000\\n010111000100\\n100001000110\\n110000011011\\n011001101110\\n001010001101\\n010001010010\\n000011011101\\n000110100001\\n000100111000\\n011101000100\\n011000101001\\n110111000110\\n011001010111\\n011110101110\\n010001111111\\n010110001011\\n001110010111\\n000110000101\\n110011110000\\n010010101000\\n101010011001\\n010000000000\\n101110000001\\n001111101010\\n000011000110\\n101100100001\\n000001110011\\n100110011111\\n111011111000\\n010010001101\\n000000001111\\n101011100011\\n010110001001\\n101101101001\\n101000001101\\n100111111100\\n100001011101\\n110100111101\\n010110000111\\n110000001010\\n010001000111\\n001010110010\\n000000101011\\n001111011000\\n011000010100\\n000101110011\\n011000010011\\n001000101100\\n100110000010\\n000100110110\\n011010010000\\n101101010100\\n111101101011\\n101101000100\\n001001010011\\n001011000011\\n101100100010\\n010001110001\\n000101111010\\n010110001110\\n000111000011\\n011111111000\\n011001100101\\n111000111111\\n101001001001\\n010000001000\\n010101100100\\n101001011100\\n010111001001\\n110100011010\\n000011111111\\n000011111101\\n000000111011\\n010101000111\\n110100001111\\n110010101000\\n011011111101\\n110001111011\\n110011011110\\n001110011100\\n101001110010\\n111110100101\\n101110110000\\n101100000100\\n101110100010\\n111000111110\\n010010100010\\n111111101000\\n001110001101\\n000001110110\\n000100111100\\n111000001010\\n100001010100\\n000100001010\\n000010100101\\n100011110110\\n111000011111\\n111100111110\\n000101101011\\n001010000100\\n011011111011\\n100000111001\\n010101100000\\n101100111010\\n100100011011\\n110000101000\\n000011111110\\n000110010000\\n110110100100\\n100110100100\\n110101100011\\n011011000101\\n110000000010\\n001111100001\\n000000111001\\n100111001000\\n000110000000\\n011111001001\\n100111111000\\n110010000111\\n101000101100\\n100011011110\\n100100011100\\n000011001100\\n000000110111\\n001011100110\\n000000100001\\n110000010110\\n001111001000\\n111111111011\\n000001010001\\n010010011100\\n011100001110\\n100010000010\\n101000010001\\n110000110101\\n010011110010\\n110000111111\\n100011111100\\n101100110100\\n010001110110\\n000000110110\\n111001000101\\n111011011011\\n101010111011\\n001111011101\\n111011000000\\n010101110101\\n101010000111\\n111101000110\\n110111000101\\n001110111110\\n101100001101\\n101111010001\\n001111000110\\n011100110110\\n001110100111\\n000101100010\\n111100010010\\n010101010011\\n000010001011\\n010101011110\\n110000001000\\n011110000111\\n100001111100\\n011011111100\\n011000001111\\n101100011101\\n111100010000\\n111010110011\\n110001010100\\n111010110010\\n100010101110\\n111101110111\\n001011101010\\n100111100001\\n001011100100\\n110001000111\\n001111111100\\n100100011000\\n111100011110\\n011110011111\\n001110100010\\n010010011101\\n001001101101\\n100101011111\\n100100110111\\n001001000000\\n111001011000\\n000110000010\\n000111000111\\n000101001100\\n011011100001\\n010000100110\\n011100011111\\n110010100110\\n101101100111\\n101101001110\\n101100011011\\n111100101100\\n011001110101\\n110101111000\\n111011010001\\n011110111011\\n110100011001\\n101101011000\\n101101111110\\n111101101001\\n111011011101\\n001100001000\\n001101111010\\n001001010001\\n001111110000\\n000001000111\\n010101000100\\n111100100101\\n100001011000\\n000101111001\\n101111001010\\n100000110111\\n111010000101\\n110110101111\\n011000110001\\n111101010011\\n111001110100\\n000010000110\\n001100001101\\n001111110101\\n001000011011\\n011101100000\\n111011101100\\n001100111100\\n101111001111\\n110010001001\\n000100011101\\n000111011111\\n001100011011\\n100110000000\\n011010110001\\n110000010010\\n011011101111\\n110011101011\\n100110101010\\n111011110100\\n010011000000\\n111110011000\\n000111010111\\n101001100010\\n101110010100\\n101000010011\\n001110001100\\n011110000011\\n110001001010\\n001010110111\\n011001101001\\n110001110011\\n100101011011\\n101010100110\\n010011001101\\n010000001111\\n110111011110\\n110011100011\\n100011101001\\n011111000000\\n010001001001\\n110001011110\\n011000101011\\n001000001111\\n010110111101\\n110001100100\\n101101111111\\n001101010100\\n000001011010\\n011010110010\\n110011101000\\n000001111000\\n111001100111\\n001011000010\\n000000011000\\n000101010101\\n111100001001\\n011000001010\\n101010101011\\n011101001111\\n010101110010\\n100101100000\\n110000110000\\n011000110010\\n100101001000\\n100101011001\\n100110001001\\n011010010001\\n001011111001\\n001111100111\\n101000101101\\n010111111001\\n011100001000\\n100111111111\\n011110111000\\n110101101111\\n100001001000\\n101100101001\\n000001011000\\n101010101001\\n010011000100\\n101100011111\\n000111100110\\n111010101100\\n010011111101\\n011010110100\\n011101100011\\n001101001001\\n111110001101\\n011010010110\\n011000001110\\n001010011001\\n111111101011\\n011100111010\\n001111000001\\n101111100100\\n101000110000\\n010101100111\\n100100000101\\n110100101000\\n011010011101\\n111110000110\\n011001000111\\n101101000000\\n110111010110\\n011100111111\\n101101110101\\n000000000100\\n100100010001\\n000000110011\\n011110100000\\n010111010010\\n001010010101\\n110111100101\\n100011100001\\n011011010111\\n100001001100\\n101101000001\\n000111010011\\n101001100100\\n001010011101\\n010000100100\\n101011111101\\n010110000011\\n110010110111\\n111100110001\\n100010011011\\n000000101001\\n010011110011\\n110111011111\\n100111000000\\n001111111110\\n111100100111\\n100010011001\\n110011010110\\n110000110011\\n101001001000\\n111010000011\\n010010011000\\n100000000111\\n001011011101\\n100010111001\\n000011101101\\n100001100001\\n011011100110\\n101001010001\\n110001011101\\n101101010111\\n010001111010\\n111011001110\\n010001100111\\n011000000011\\n101000001001\\n010100000111\\n000011000001\\n011001110001\\n111010001110\\n010011111110\\n011100100110\\n111111110001\\n010110101110\\n100010010001\\n100100100111\\n100111010011\\n001101111111\\n111100011101\\n011101010101\\n100111010100\\n101011101101\\n011001000110\\n100110010111\\n110101001110\\n101000101110\\n001001000100\\n001100111111\\n111110111001\\n000011101100\\n001001100010\\n001101001111\\n001111110011\\n011000110011\\n111110110100\\n000111001110\\n001101110101\\n001011010000\\n001100011111\\n010010101001\\n110000011100\\n010010010101\\n001110001000\\n000011010000\\n001011011100\\n100111010000\\n101110000101\\n100111110000\\n000001011100\\n101000110100\\n010111011001\\n000001001111\\n110110001100\\n111110011111\\n011010000100\\n010110111011\\n011101000111\\n010100011010\\n011110111111\\n000011001010\\n011101001001\\n101010011011\\n000011111100\\n101011010000\\n001101010101\\n101011010111\\n111000011010\\n110101011101\\n110111010100\\n110100101100\\n110110001001\\n011000001001\\n111100000100\\n000100110101\\n001101101110\\n001011111100\\n000000010001\\n100011011001\\n001000100111\\n111111000001\\n000111110101\\n001000101001\\n110111111010\\n110010011000\\n010100010110\\n000111001001\\n100000111010\\n110011011100\\n011101000010\\n010100010111\\n001001000101\\n001010110011\\n100000101110\\n100110000011\\n110011111100\\n110111001001\\n001000111101\\n011000100000\\n000100101111\\n010111110111\\n110111001101\\n110001001111\\n001000010101\\n001111001001\\n001001100100\\n011110100111\\n001100100000\\n010111100011\\n001000001011\\n010010011110\\n000011110110\\n110101011010\\n011101100010\\n011111111001\\n111001100000\\n010100110101\\n011010110111\\n101011110001\\n011001010011\\n100011000011\\n011010101011\\n000100100111\\n010110010001\\n010100010000\\n101101110001\\n011100011100\\n001101001011\\n101110111111\\n100101000010\\n111001111101\\n111110110111\\n010111110100\\n101000100010\\n101010001000\\n010000001110\\n001000101011\\n100011111101\\n001100010010\\n011111110011\\n100101001110\\n000110011110\\n000001011001\\n001000100001\\n111100000000\\n010101100001\\n011100111000\\n110100000011\\n110011010001\\n001010000001\\n000100011010\\n111010010110\\n010000001100\\n011011011011\\n100011111110\\n101101000110\\n111000010100\\n011011001100\\n101000111111\\n000101101101\\n111010101010\\n011010010011\\n111001001100\\n001101001000\\n110101100101\\n011000010101\\n000100000101\\n011101111111\\n000101001001\\n110101100111\\n111000001100\\n110001111010\\n100110010100\\n010100010010\\n010000110110\\n100111101101\\n101110101000\\n101001011101\\n110101010101\\n100111011000\\n100001011011\\n100100100011\\n100110100011\\n100000010001\\n110110101100\\n001010001111\\n101001111000\\n010011110111\\n011100100101\\n000111010110\\n101010100001\\n100101001101\\n100001010011\\n000000011011\\n110010000100\\n010011010101\\n101110011100\\n101101011110\\n101110110110\\n101111001101\\n001001111011\\n011100100011\\n000100110001\\n000110011101\\n011011000100\\n100011101110\\n010101111111\\n011110000100\\n101001101111\\n110100111010\\n011011110011\\n001010010110\\n110010000101\\n001100010011\\n000100110011\\n101110110010\\n011101010111\\n001000000101\\n101101011101\\n110001011011\\n110011001100\\n011101111101\\n000111101011\\n011111001000\\n010100101100\\n100001010001\\n010000010101\\n101100101110\\n000010101000\\n010001001111\\n100001001111\\n000101001110\\n011111100100\\n110110111000\\n001010110001\\n100111001101\\n111100010101\\n000101111000\\n010001110100\\n111001111100\\n110111010101\\n000011001001\\n100010000001\\n000011110000\\n101110001000\\n101110000010\\n100010110110\\n001011100011\\n011010111111\\n101100000111\\n100000011110\\n100100101001\\n111100111000\\n101100000011\\n000000000010\\n001100101010\\n010111111010\\n001101100010\\n000110011011\\n001001000110\\n111010100000\\n100111100100\\n000110101110\\n010100011000\\n110100100101\\n111100101101\\n100011111001\\n011001010101\\n001100110000\\n111010101001\\n001000011000\\n000100101010\\n101000110010\\n111011001100\\n110111101000\\n010101011001\\n011001111110\\n000101100001\\n011100000111\\n011101111110\\n000101000001\\n110011000010\\n011110111110\\n101110001101\\n010100101110\\n000100001100\\n001100010001\\n100100101111\\n111110000011\\n010011011111\\n100110001000\\n100000001100\\n001001010110\\n001010000111\\n010111000110\\n110100000101\\n000101110100\\n010110110111\\n010000100111\\n101001000110\\n111010001100\\n000000111111\\n101100000010\\n101011001110\\n111001000110\\n111110010011\\n001010000010\\n000101010011\\n011111101000\\n011010011011\\n010011100011\\n011100010011\\n100001100101\\n000011110100\\n110001010000\\n111111010011\\n100010100010\\n101111111010\\n001100100011\\n011100000001\\n010110110001\\n011011011100\\n010011110100\\n110110110001\\n111111101111\\n001010101010\\n011010101101\\n011000110000\\n010111100001\\n011011111000\\n010110100110\\n110011100111\\n011011001110\\n011010111001\\n010111010110\\n011101100001\\n101000101010\\n010010101011\\n111100011111\\n110001101111\\n010011010010\\n111000100011\\n000100010001\\n100001111101\\n001010001000\\n001001100101\\n010000001010\\n011011010100\\n110110111111\\n000010110010\\n000010011100\\n010001000001\\n110010110010\\n000010011011\\n111001001011\\n110100110011\\n101100001001\\n000100000000\\n101010110010\\n110111100011\\n000110111110\\n111000011001\\n001000101101\\n101000011010\\n101110100001\\n011010100010\\n001001110101\\n011001011000\\n100110001100\\n110110011011\\n111101101000\\n001110101011\\n000010000111\\n101110100110\\n000110010110\\n001011111011\\n000010001000\\n011110111100\\n000011101011\\n100010001101\\n001011000000\\n011000000100\\n110101101101\\n000001101110\\n000111011001\\n011101011000\\n000000101111\\n000101111101\\n101011011110\\n100010000011\\n111001110000\\n110011110011\\n000101011001\\n110101010001\\n010101100110\\n010011000110\\n111111110101\\n100101010110\\n001001100001\\n001110011111\\n000000000111\\n110100001101\\n101110011110\\n101101110000\\n100101000011\\n111011000001\\n100011001110\\n010111011111\\n000000001100\\n100110001111\\n110100101111\\n101010111010\\n110000001100\\n010100101101\\n110101001010\\n000001100101\\n111011000011\\n101110100100\\n110000101110\\n110111000100\\n101001011010\\n011010010100\\n101110100101\\n111110100111\\n101100111011\\n110000100000\\n111101110001\\n001100011001\\n001000010001\\n010101001100\\n110110100011\\n011000100110\\n111001001001\\n110010110100\\n010000100101\\n111101111100\\n101001101110\\n110110011111\\n100000001011\\n100011011011\\n101110000100\\n011110010110\\n101011100000\\n011101101111\\n001011101000\\n011101011010\\n110001001101\\n110111101111\\n100011011111\\n100001100100\\n111111101101\\n011110000000\\n101000011110\\n000110001000\\n000100010010\\n100100010000\\n111001101000\\n001101101011\\n110001111111\\n000111000101\\n100001000101\\n111111111001\\n000010111011\\n001100000110\\n110101011001\\n110110000110\\n100010101101\\n010110010111\\n011101010110\\n011111101011\\n111111110000\\n110110100110\\n111001101111\\n001000001110\\n111100111100\\n000110110101\\n000100001001\\n011101110010\\n111010011011\\n001101111011\\n110110000101\\n000110110111\\n111111100110\\n010001110011\\n100010101111\\n011110010011\\n111011111001\\n101010110110\\n110101101001\\n010001011001\\n101101101010\\n011110101001\\n001100011100\\n101001000001\\n000011011001\\n101101100101\\n011001110011\\n110101000111\\n001110000101\\n100111011110\\n011101010010\\n110000101001\\n010110010110\\n011100110000\\n110010111100\\n110101001111\\n111110111110\\n101100001110\\n111000110010\\n110100111110\\n101001100000\\n111111100001\\n011000100111\\n101010001111\\n010010011011\\n000101011110\\n011000101100\\n110111101001\\n110100001100\\n100000011101\\n110110100111\\n111011011110\\n100011001011\\n001100100111\\n001110011011\\n100101111101\\n111011010111\\n111101111101\\n010110001101\\n011010101100\\n111000011011\\n011110000010\\n110111010011\\n101101001100\\n100111011010\\n011111111101\\n101011000000\\n100100101101\\n111111011000\\n000100101000\\n100010100001\\n010010100100\\n001010001100\\n111001010001\\n010101101100\\n111111110111\\n000010111101\\n100000001111\\n110111101010\\n101111100110\\n010100000110\\n000111011010\\n111011101110\\n111001001101\\n011100010110\\n100001100110\\n011111010011\\n000011100111\\n010011101111\\n010010000101\\n100001011010\\n100110111011\\n010110101001\\n011110011011\\n011001010010\\n011010011110\\n110011100001\\n010101001000\\n111101110000\\n100001100111\\n011111010111\\n010000011011\\n111111000011\\n010111111111\\n100001101101\\n010000100010\\n110000101101\\n100110101000\\n111011011111\\n110000010100\\n111101011001\\n001111100010\\n000001011011\\n010000010001\\n111101010001\\n001101000000\\n000011010111\\n011011010010\\n001110100011\\n111100010100\\n110001101010\\n001001111010\\n111001110111\\n100001101000\\n110010110001\\n011001101100\\n011110010001\\n110111011000\\n110011011101\\n110001010011\\n111111111101\\n010001010100\\n110000010011\\n111010110001\\n011000010001\\n011101111011\\n101100010010\\n010100111100\\n011001001000\\n110010010001\\n000101100000\\n100011101010\\n100000110001\\n010101101010\\n000001111111\\n011110011100\\n111011111010\\n110100101001\\n001100100100\\n011100101000\";","'use strict';\n// TODO: Remove from `core-js@4` since it's moved to entry points\nrequire('../modules/es.regexp.exec');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar redefine = require('../internals/redefine');\nvar regexpExec = require('../internals/regexp-exec');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar SPECIES = wellKnownSymbol('species');\nvar RegExpPrototype = RegExp.prototype;\n\nmodule.exports = function (KEY, exec, FORCED, SHAM) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    FORCED\n  ) {\n    var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      var uncurriedNativeMethod = uncurryThis(nativeMethod);\n      var $exec = regexp.exec;\n      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };\n        }\n        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };\n      }\n      return { done: false };\n    });\n\n    redefine(String.prototype, KEY, methods[0]);\n    redefine(RegExpPrototype, SYMBOL, methods[1]);\n  }\n\n  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);\n};\n","export default \"You come across a field of [hydrothermal vents](https://en.wikipedia.org/wiki/Hydrothermal_vent) on the ocean floor! These vents constantly produce large, opaque clouds, so it would be best to avoid them if possible.\\n\\nThey tend to form in **lines**; the submarine helpfully produces a list of nearby lines of vents (your puzzle input) for you to review. For example:\\n\\n```\\n0,9 -> 5,9\\n8,0 -> 0,8\\n9,4 -> 3,4\\n2,2 -> 2,1\\n7,0 -> 7,4\\n6,4 -> 2,0\\n0,9 -> 2,9\\n3,4 -> 1,4\\n0,0 -> 8,8\\n5,5 -> 8,2\\n```\\n\\nEach line of vents is given as a line segment in the format `x1,y1 -> x2,y2` where `x1,y1` are the coordinates of one end the line segment and `x2,y2` are the coordinates of the other end. These line segments include the points at both ends. In other words:\\n\\n- An entry like `1,1 -> 1,3` covers points `1,1`, `1,2`, and `1,3`.\\n- An entry like `9,7 -> 7,7` covers points `9,7`, `8,7`, and `7,7`.\\n\\nFor now, **only consider horizontal and vertical lines**: lines where either `x1 = x2` or `y1 = y2`.\\n\\nSo, the horizontal and vertical lines from the above list would produce the following diagram:\\n\\n```\\n.......1..\\n..1....1..\\n..1....1..\\n.......1..\\n.112111211\\n..........\\n..........\\n..........\\n..........\\n222111....\\n```\\n\\nIn this diagram, the top left corner is `0,0` and the bottom right corner is `9,9`. Each position is shown as **the number of lines which cover that point** or `.` if no line covers that point. The top-left pair of 1s, for example, comes from `2,2 -> 2,1`; the very bottom row is formed by the overlapping lines `0,9 -> 5,9` and `0,9 -> 2,9`.\\n\\nTo avoid the most dangerous areas, you need to determine **the number of points where at least two lines overlap**. In the above example, this is anywhere in the diagram with a `2` or larger - a total of **`5`** points.\\n\\nConsider only horizontal and vertical lines. **At how many points do at least two lines overlap?**\\n\\n[comment]: <> (PART 2)\\n\\nUnfortunately, considering only horizontal and vertical lines doesn't give you the full picture; you need to also consider **diagonal lines**.\\n\\nBecause of the limits of the hydrothermal vent mapping system, the lines in your list will only ever be horizontal, vertical, or a diagonal line at exactly 45 degrees. In other words:\\n\\n- An entry like `1,1 -> 3,3` covers points `1,1`, `2,2`, and `3,3`.\\n- An entry like `9,7 -> 7,9` covers points `9,7`, `8,8`, and `7,9`.\\n\\nConsidering all lines from the above example would now produce the following diagram:\\n\\n```\\n1.1....11.\\n.111...2..\\n..2.1.111.\\n...1.2.2..\\n.112313211\\n...1.2....\\n..1...1...\\n.1.....1..\\n1.......1.\\n222111....\\n```\\n\\nYou still need to determine **the number of points where at least two lines overlap**. In the above example, this is still anywhere in the diagram with a `2` or larger - now a total of **`12`** points.\\n\\nConsider all of the lines. **At how many points do at least two lines overlap?**\";","export default \"As your ferry approaches the sea port, the captain asks for your help again. The computer system that runs this port isn't compatible with the docking program on the ferry, so the docking parameters aren't being correctly initialized in the docking program's memory.\\n\\nAfter a brief inspection, you discover that the sea port's computer system uses a strange [bitmask](https://en.wikipedia.org/wiki/Mask_(computing)) system in its initialization program. Although you don't have the correct decoder chip handy, you can emulate it in software!\\n\\nThe initialization program (your puzzle input) can either update the bitmask or write a value to memory. Values and memory addresses are both 36-bit unsigned integers. For example, ignoring bitmasks for a moment, a line like `mem[8] = 11` would write the value `11` to memory address `8`.\\n\\nThe bitmask is always given as a string of 36 bits, written with the most significant bit (representing `2^35`) on the left and the least significant bit (`2^0`, that is, the `1`s bit) on the right. The current bitmask is applied to values immediately before they are written to memory: a `0` or `1` overwrites the corresponding bit in the value, while an `X` leaves the bit in the value unchanged.\\n\\nFor example, consider the following program:\\n\\n```\\nmask = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\\nmem[8] = 11\\nmem[7] = 101\\nmem[8] = 0\\n```\\n\\nThis program starts by specifying a bitmask (`mask = ....`). The mask it specifies will overwrite two bits in every written value: the `2`s bit is overwritten with `0`, and the `64`s bit is overwritten with `1`.\\n\\nThe program then attempts to write the value `11` to memory address `8`. By expanding everything out to individual bits, the mask is applied as follows:\\n\\n```\\nvalue:  000000000000000000000000000000001011  (decimal 11)\\nmask:   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\\nresult: 000000000000000000000000000001001001  (decimal 73)\\n```\\n\\nSo, because of the mask, the value `73` is written to memory address `8` instead. Then, the program tries to write `101` to address `7`:\\n\\n```\\nvalue:  000000000000000000000000000001100101  (decimal 101)\\nmask:   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\\nresult: 000000000000000000000000000001100101  (decimal 101)\\n```\\n\\nThis time, the mask has no effect, as the bits it overwrote were already the values the mask tried to set. Finally, the program tries to write `0` to address `8`:\\n\\n```\\nvalue:  000000000000000000000000000000000000  (decimal 0)\\nmask:   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\\nresult: 000000000000000000000000000001000000  (decimal 64)\\n```\\n\\n`64` is written to address `8` instead, overwriting the value that was there previously.\\n\\nTo initialize your ferry's docking program, you need the sum of all values left in memory after the initialization program completes. (The entire 36-bit address space begins initialized to the value `0` at every address.) In the above example, only two values in memory are not zero - `101` (at address `7`) and `64` (at address `8`) - producing a sum of **`165`**.\\n\\nExecute the initialization program. **What is the sum of all values left in memory after it completes?**\\n\\n[comment]: <> (PART 2)\\n\\nFor some reason, the sea port's computer system still can't communicate with your ferry's docking program. It must be using **version 2** of the decoder chip!\\n\\nA version 2 decoder chip doesn't modify the values being written at all. Instead, it acts as a [memory address decoder](https://www.youtube.com/watch?v=PvfhANgLrm4). Immediately before a value is written to memory, each bit in the bitmask modifies the corresponding bit of the destination **memory address** in the following way:\\n\\n- If the bitmask bit is `0`, the corresponding memory address bit is **unchanged**.\\n- If the bitmask bit is `1`, the corresponding memory address bit is **overwritten with `1`**.\\n- If the bitmask bit is `X`, the corresponding memory address bit is **floating**.\\n\\nA **floating** bit is not connected to anything and instead fluctuates unpredictably. In practice, this means the floating bits will take on **all possible values**, potentially causing many memory addresses to be written all at once!\\n\\nFor example, consider the following program:\\n\\n```\\nmask = 000000000000000000000000000000X1001X\\nmem[42] = 100\\nmask = 00000000000000000000000000000000X0XX\\nmem[26] = 1\\n```\\n\\nWhen this program goes to write to memory address `42`, it first applies the bitmask:\\n\\n```\\naddress: 000000000000000000000000000000101010  (decimal 42)\\nmask:    000000000000000000000000000000X1001X\\nresult:  000000000000000000000000000000X1101X\\n```\\n\\nAfter applying the mask, four bits are overwritten, three of which are different, and two of which are **floating**. Floating bits take on every possible combination of values; with two floating bits, four actual memory addresses are written:\\n\\n```\\n000000000000000000000000000000011010  (decimal 26)\\n000000000000000000000000000000011011  (decimal 27)\\n000000000000000000000000000000111010  (decimal 58)\\n000000000000000000000000000000111011  (decimal 59)\\n```\\n\\nNext, the program is about to write to memory address `26` with a different bitmask:\\n\\n```\\naddress: 000000000000000000000000000000011010  (decimal 26)\\nmask:    00000000000000000000000000000000X0XX\\nresult:  00000000000000000000000000000001X0XX\\n```\\n\\nThis results in an address with three floating bits, causing writes to **eight** memory addresses:\\n```\\n000000000000000000000000000000010000  (decimal 16)\\n000000000000000000000000000000010001  (decimal 17)\\n000000000000000000000000000000010010  (decimal 18)\\n000000000000000000000000000000010011  (decimal 19)\\n000000000000000000000000000000011000  (decimal 24)\\n000000000000000000000000000000011001  (decimal 25)\\n000000000000000000000000000000011010  (decimal 26)\\n000000000000000000000000000000011011  (decimal 27)\\n```\\n\\nThe entire 36-bit address space still begins initialized to the value 0 at every address, and you still need the sum of all values left in memory at the end of the program. In this example, the sum is `208`.\\n\\nExecute the initialization program using an emulator for a version 2 decoder chip. **What is the sum of all values left in memory after it completes?**\";","export default \"You come across an experimental new kind of memory stored on an infinite two-dimensional grid.\\n\\nEach square on the grid is allocated in a spiral pattern starting at a location marked `1` and then counting up while spiraling outward. For example, the first few squares are allocated like this:\\n\\n```\\n17  16  15  14  13\\n18   5   4   3  12\\n19   6   1   2  11\\n20   7   8   9  10\\n21  22  23---> ...\\n```\\n\\nWhile this is very space-efficient (no squares are skipped), requested data must be carried back to square `1` (the location of the only access port for this memory system) by programs that can only move up, down, left, or right. They always take the shortest path: the [Manhattan Distance](https://en.wikipedia.org/wiki/Taxicab_geometry) between the location of the data and square `1`.\\n\\nFor example:\\n\\n- Data from square `1` is carried `0` steps, since it's at the access port.\\n- Data from square `12` is carried `3` steps, such as: down, left, left.\\n- Data from square `23` is carried only `2` steps: up twice.\\n- Data from square `1024` must be carried `31` steps.\\n\\n**How many steps** are required to carry the data from the square identified in your puzzle input all the way to the access port?\\n\\n[comment]: <> (PART 2)\\n\\nAs a stress test on the system, the programs here clear the grid and then store the value `1` in square `1`. Then, in the same allocation order as shown above, they store the sum of the values in all adjacent squares, including diagonals.\\n\\nSo, the first few squares' values are chosen as follows:\\n\\n- Square `1` starts with the value `1`.\\n- Square `2` has only one adjacent filled square (with value `1`), so it also stores `1`.\\n- Square `3` has both of the above squares as neighbors and stores the sum of their values, `2`.\\n- Square `4` has all three of the aforementioned squares as neighbors and stores the sum of their values, `4`.\\n- Square `5` only has the first and fourth squares as neighbors, so it gets the value `5`.\\n\\nOnce a square is written, its value does not change. Therefore, the first few squares would receive the following values:\\n\\n```\\n147  142  133  122   59\\n304    5    4    2   57\\n330   10    1    1   54\\n351   11   23   25   26\\n362  747  806--->   ...\\n```\\n\\nWhat is the **first value written** that is **larger** than your puzzle input?\";","export default \"Begin in state A.\\nPerform a diagnostic checksum after 12629077 steps.\\n\\nIn state A:\\n  If the current value is 0:\\n    - Write the value 1.\\n    - Move one slot to the right.\\n    - Continue with state B.\\n  If the current value is 1:\\n    - Write the value 0.\\n    - Move one slot to the left.\\n    - Continue with state B.\\n\\nIn state B:\\n  If the current value is 0:\\n    - Write the value 0.\\n    - Move one slot to the right.\\n    - Continue with state C.\\n  If the current value is 1:\\n    - Write the value 1.\\n    - Move one slot to the left.\\n    - Continue with state B.\\n\\nIn state C:\\n  If the current value is 0:\\n    - Write the value 1.\\n    - Move one slot to the right.\\n    - Continue with state D.\\n  If the current value is 1:\\n    - Write the value 0.\\n    - Move one slot to the left.\\n    - Continue with state A.\\n\\nIn state D:\\n  If the current value is 0:\\n    - Write the value 1.\\n    - Move one slot to the left.\\n    - Continue with state E.\\n  If the current value is 1:\\n    - Write the value 1.\\n    - Move one slot to the left.\\n    - Continue with state F.\\n\\nIn state E:\\n  If the current value is 0:\\n    - Write the value 1.\\n    - Move one slot to the left.\\n    - Continue with state A.\\n  If the current value is 1:\\n    - Write the value 0.\\n    - Move one slot to the left.\\n    - Continue with state D.\\n\\nIn state F:\\n  If the current value is 0:\\n    - Write the value 1.\\n    - Move one slot to the right.\\n    - Continue with state A.\\n  If the current value is 1:\\n    - Write the value 1.\\n    - Move one slot to the left.\\n    - Continue with state E.\";","export default \"You've managed to sneak in to the prototype suit manufacturing lab. The Elves are making decent progress, but are still struggling with the suit's size reduction capabilities.\\n\\nWhile the very latest in 1518 alchemical technology might have solved their problem eventually, you can do better. You scan the chemical composition of the suit's material and discover that it is formed by extremely long [polymers](https://en.wikipedia.org/wiki/Polymer) (one of which is available as your puzzle input).\\n\\nThe polymer is formed by smaller **units** which, when triggered, react with each other such that two adjacent units of the same type and opposite polarity are destroyed. Units' types are represented by letters; units' polarity is represented by capitalization. For instance, r and R are units with the same type but opposite polarity, whereas r and s are entirely different types and do not react.\\n\\nFor example:\\n\\n- In `aA`, `a` and `A` react, leaving nothing behind.\\n- In `abBA`, `bB` destroys itself, leaving `aA`. As above, this then destroys itself, leaving nothing.\\n- In `abAB`, no two adjacent units are of the same type, and so nothing happens.\\n- In `aabAAB`, even though `aa` and `AA` are of the same type, their polarities match, and so nothing happens.\\n\\nNow, consider a larger example, `dabAcCaCBAcCcaDA`:\\n\\n```\\ndabAcCaCBAcCcaDA  The first 'cC' is removed.\\ndabAaCBAcCcaDA    This creates 'Aa', which is removed.\\ndabCBAcCcaDA      Either 'cC' or 'Cc' are removed (the result is the same).\\ndabCBAcaDA        No further actions can be taken.\\n```\\n\\nAfter all possible reactions, the resulting polymer contains **10 units**.\\n\\n**How many units remain after fully reacting the polymer you scanned?** *(Note: in this puzzle and others, the input is large; if you copy/paste your input, make sure you get the whole thing.)*\\n\\n[comment]: <> (PART 2)\\n\\nTime to improve the polymer.\\n\\nOne of the unit types is causing problems; it's preventing the polymer from collapsing as much as it should. Your goal is to figure out which unit type is causing the most problems, remove all instances of it (regardless of polarity), fully react the remaining polymer, and measure its length.\\n\\nFor example, again using the polymer `dabAcCaCBAcCcaDA` from above:\\n\\n- Removing all `A/a` units produces `dbcCCBcCcD`. Fully reacting this polymer produces `dbCBcD`, which has length 6.\\n- Removing all `B/b` units produces `daAcCaCAcCcaDA`. Fully reacting this polymer produces `daCAcaDA`, which has length 8.\\n- Removing all `C/c` units produces `dabAaBAaDA`. Fully reacting this polymer produces `daDA`, which has length 4.\\n- Removing all `D/d` units produces `abAcCaCBAcCcaA`. Fully reacting this polymer produces `abCBAc`, which has length 6.\\nIn this example, removing all `C`/`c` units was best, producing the answer **4**.\\n\\n**What is the length of the shortest polymer you can produce** by removing all units of exactly one type and fully reacting the result?\";","export default \"Wandering further through the circuits of the computer, you come upon a tower of programs that have gotten themselves into a bit of trouble. A recursive algorithm has gotten out of hand, and now they're balanced precariously in a large tower.\\n\\nOne program at the bottom supports the entire tower. It's holding a large disc, and on the disc are balanced several more sub-towers. At the bottom of these sub-towers, standing on the bottom disc, are other programs, each holding **their** own disc, and so on. At the very tops of these sub-sub-sub-...-towers, many programs stand simply keeping the disc below them balanced but with no disc of their own.\\n\\nYou offer to help, but first you need to understand the structure of these towers. You ask each program to yell out their **name**, their **weight**, and (if they're holding a disc) the **names of the programs immediately above them** balancing on that disc. You write this information down (your puzzle input). Unfortunately, in their panic, they don't do this in an orderly fashion; by the time you're done, you're not sure which program gave which information.\\n\\nFor example, if your list is the following:\\n\\n```\\npbga (66)\\nxhth (57)\\nebii (61)\\nhavc (66)\\nktlj (57)\\nfwft (72) -> ktlj, cntj, xhth\\nqoyq (66)\\npadx (45) -> pbga, havc, qoyq\\ntknk (41) -> ugml, padx, fwft\\njptl (61)\\nugml (68) -> gyxo, ebii, jptl\\ngyxo (61)\\ncntj (57)\\n```\\n\\n...then you would be able to recreate the structure of the towers that looks like this:\\n\\n```\\n                gyxo\\n              /     \\n         ugml - ebii\\n       /      \\\\     \\n      |         jptl\\n      |        \\n      |         pbga\\n     /        /\\ntknk --- padx - havc\\n     \\\\        \\\\\\n      |         qoyq\\n      |             \\n      |         ktlj\\n       \\\\      /     \\n         fwft - cntj\\n              \\\\     \\n                xhth\\n```\\n\\nIn this example, `tknk` is at the bottom of the tower (the **bottom program**), and is holding up `ugml`, `padx`, and `fwft`. Those programs are, in turn, holding up other programs; in this example, none of those programs are holding up any other programs, and are all the tops of their own towers. (The actual tower balancing in front of you is much larger.)\\n\\nBefore you're ready to help them, you need to make sure your information is correct. **What is the name of the bottom program?**\\n\\n[comment]: <> (PART 2)\\n\\nThe programs explain the situation: they can't get down. Rather, they **could** get down, if they weren't expending all of their energy trying to keep the tower balanced. Apparently, one program has the **wrong weight**, and until it's fixed, they're stuck here.\\n\\nFor any program holding a disc, each program standing on that disc forms a sub-tower. Each of those sub-towers are supposed to be the same weight, or the disc itself isn't balanced. The weight of a tower is the sum of the weights of the programs in that tower.\\n\\nIn the example above, this means that for `ugml`'s disc to be balanced, `gyxo`, `ebii`, and `jptl` must all have the same weight, and they do: `61`.\\n\\nHowever, for `tknk` to be balanced, each of the programs standing on its disc **and all programs above it** must each match. This means that the following sums must all be the same:\\n\\n- `ugml` + (`gyxo` + `ebii` + `jptl`) = 68 + (61 + 61 + 61) = 251\\n- `padx` + (`pbga` + `havc` + `qoyq`) = 45 + (66 + 66 + 66) = 243\\n- `fwft` + (`ktlj` + `cntj` + `xhth`) = 72 + (57 + 57 + 57) = 243\\n\\nAs you can see, tknk's disc is unbalanced: `ugml`'s stack is heavier than the other two. Even though the nodes above `ugml` are balanced, `ugml` itself is too heavy: it needs to be `8` units lighter for its stack to weigh `243` and keep the towers balanced. If this change were made, its weight would be `60`.\\n\\nGiven that exactly one program is the wrong weight, **what would its weight need to be** to balance the entire tower?\";","export default \"forward 6\\ndown 8\\ndown 5\\ndown 9\\nforward 2\\ndown 5\\ndown 5\\nforward 1\\nforward 7\\ndown 8\\nup 2\\ndown 4\\nup 8\\ndown 8\\nforward 3\\nforward 4\\ndown 1\\nforward 5\\nup 7\\ndown 7\\ndown 8\\nforward 2\\nup 3\\nforward 1\\nforward 6\\nforward 9\\nforward 7\\nforward 8\\nforward 2\\nforward 3\\nup 2\\nup 8\\ndown 1\\nforward 7\\ndown 7\\ndown 2\\nforward 6\\ndown 1\\nforward 5\\ndown 3\\nforward 6\\ndown 7\\nup 1\\nup 3\\nforward 7\\nforward 6\\nforward 8\\ndown 4\\ndown 2\\nup 5\\ndown 2\\nforward 2\\nup 5\\nforward 6\\ndown 3\\ndown 1\\ndown 5\\nforward 6\\nup 6\\ndown 7\\ndown 8\\ndown 2\\nforward 3\\ndown 5\\ndown 4\\nforward 7\\nforward 9\\nup 9\\nup 8\\nup 4\\nforward 8\\nforward 5\\ndown 4\\nup 2\\nforward 9\\nup 5\\ndown 5\\nup 9\\nforward 2\\nforward 3\\ndown 6\\ndown 8\\nforward 8\\nup 5\\ndown 5\\nforward 7\\nforward 6\\nforward 8\\nup 3\\nforward 3\\nforward 1\\nup 8\\ndown 8\\ndown 2\\ndown 4\\nup 7\\nup 2\\nup 9\\nup 4\\nforward 6\\ndown 8\\ndown 1\\nforward 6\\nforward 6\\ndown 4\\ndown 2\\nup 7\\ndown 9\\ndown 9\\nup 2\\nup 7\\ndown 4\\ndown 2\\nforward 1\\ndown 1\\nup 5\\nup 5\\nforward 9\\nup 3\\ndown 7\\nforward 7\\ndown 4\\ndown 8\\nup 1\\ndown 4\\ndown 7\\nforward 5\\nup 9\\nforward 5\\nforward 1\\nforward 8\\nforward 6\\nforward 5\\nforward 1\\ndown 4\\ndown 6\\nforward 5\\nforward 2\\nforward 3\\ndown 1\\nup 2\\nup 9\\nforward 4\\nup 8\\ndown 7\\ndown 8\\nup 7\\ndown 2\\nforward 7\\nup 1\\nforward 5\\nforward 1\\nforward 8\\nforward 1\\nup 8\\ndown 6\\ndown 7\\nforward 2\\ndown 8\\ndown 8\\nforward 8\\nup 8\\ndown 6\\ndown 7\\ndown 4\\ndown 7\\nforward 6\\nup 3\\nforward 3\\ndown 2\\ndown 8\\ndown 3\\ndown 9\\nforward 9\\nforward 7\\ndown 6\\ndown 4\\nforward 6\\ndown 2\\ndown 7\\nup 7\\nup 8\\nforward 2\\nforward 8\\ndown 3\\nup 2\\nforward 9\\ndown 2\\nup 3\\ndown 1\\ndown 1\\ndown 4\\ndown 8\\nup 2\\nup 8\\nforward 2\\nforward 1\\nup 1\\nforward 7\\ndown 8\\ndown 1\\ndown 7\\nup 3\\ndown 3\\nforward 8\\nforward 2\\nforward 7\\ndown 2\\nup 9\\nup 3\\nup 5\\ndown 4\\nup 3\\nforward 4\\nup 5\\ndown 9\\ndown 9\\nforward 2\\nforward 2\\ndown 2\\ndown 8\\ndown 3\\ndown 5\\nforward 6\\ndown 6\\nup 5\\ndown 2\\ndown 4\\ndown 9\\ndown 3\\nforward 7\\ndown 1\\nforward 1\\ndown 4\\nup 1\\ndown 9\\nforward 5\\nup 2\\ndown 3\\nforward 8\\nforward 9\\nup 9\\ndown 2\\nforward 8\\ndown 4\\ndown 5\\nforward 6\\nforward 5\\nforward 4\\ndown 6\\ndown 9\\ndown 2\\nforward 9\\ndown 4\\nup 8\\nup 9\\nup 2\\nup 5\\nup 5\\nforward 9\\nup 1\\nforward 6\\nforward 7\\nforward 8\\nforward 9\\nup 2\\nforward 3\\nforward 4\\nforward 6\\nforward 9\\nup 5\\nup 5\\ndown 3\\nforward 1\\nforward 3\\nforward 2\\nforward 3\\nforward 6\\nforward 7\\ndown 4\\ndown 2\\ndown 1\\nforward 2\\ndown 5\\nforward 3\\nforward 6\\ndown 8\\ndown 9\\nforward 4\\nforward 6\\ndown 6\\ndown 6\\nforward 3\\ndown 6\\ndown 8\\ndown 1\\nforward 7\\nforward 9\\ndown 2\\ndown 5\\nforward 1\\nforward 3\\ndown 2\\nforward 1\\ndown 8\\ndown 1\\nforward 4\\ndown 8\\nforward 5\\nforward 1\\ndown 7\\ndown 7\\nforward 3\\nforward 1\\nforward 6\\nforward 7\\nforward 5\\nup 1\\nforward 2\\ndown 9\\nforward 3\\nup 1\\nforward 2\\ndown 1\\ndown 6\\ndown 3\\nforward 7\\ndown 5\\ndown 4\\ndown 1\\nforward 9\\nforward 9\\ndown 5\\nforward 7\\nforward 3\\nforward 5\\ndown 1\\nforward 6\\ndown 8\\nup 2\\nforward 6\\ndown 3\\nforward 2\\nforward 9\\nforward 4\\ndown 1\\ndown 3\\nforward 9\\nforward 3\\nforward 8\\nforward 9\\nup 3\\nup 1\\nforward 1\\nforward 2\\ndown 8\\ndown 9\\ndown 2\\ndown 1\\ndown 3\\ndown 2\\nforward 9\\nforward 7\\ndown 5\\nforward 1\\nforward 6\\nforward 3\\nforward 9\\ndown 2\\nforward 8\\ndown 5\\ndown 1\\nforward 5\\nforward 3\\ndown 6\\nforward 6\\ndown 8\\nforward 2\\nup 5\\nforward 1\\ndown 2\\ndown 6\\nforward 9\\nforward 7\\ndown 1\\ndown 3\\ndown 6\\nup 3\\ndown 4\\nforward 8\\nforward 1\\nforward 7\\ndown 2\\ndown 5\\ndown 9\\nforward 6\\ndown 5\\nforward 5\\nup 1\\ndown 5\\nforward 8\\nup 9\\nforward 2\\ndown 6\\nforward 2\\nforward 7\\nup 2\\ndown 9\\ndown 7\\nup 7\\ndown 6\\nup 5\\nforward 1\\ndown 8\\nforward 8\\nforward 1\\nforward 7\\ndown 9\\ndown 6\\nforward 3\\ndown 6\\ndown 1\\ndown 1\\ndown 1\\ndown 3\\ndown 7\\ndown 7\\ndown 3\\ndown 5\\nforward 4\\ndown 4\\nforward 7\\nforward 5\\ndown 9\\ndown 9\\nforward 7\\ndown 3\\ndown 9\\ndown 4\\nforward 3\\ndown 7\\ndown 2\\nforward 2\\ndown 6\\nforward 9\\nforward 9\\nforward 5\\nup 4\\ndown 7\\ndown 2\\nup 9\\nup 4\\nforward 8\\nforward 1\\ndown 8\\nup 5\\ndown 4\\ndown 3\\nforward 2\\ndown 7\\ndown 2\\ndown 1\\ndown 9\\nforward 7\\nforward 7\\nup 8\\nup 4\\ndown 3\\ndown 8\\nforward 6\\nforward 5\\nforward 5\\nforward 5\\ndown 3\\ndown 8\\nforward 4\\nforward 7\\nforward 1\\nup 3\\nup 9\\ndown 6\\nup 4\\ndown 7\\nforward 8\\nforward 4\\nforward 3\\nup 8\\nup 3\\ndown 3\\nforward 6\\ndown 2\\nforward 7\\nforward 4\\nforward 8\\ndown 3\\ndown 9\\ndown 9\\ndown 2\\nforward 8\\nup 4\\ndown 3\\nforward 8\\nforward 5\\nforward 7\\ndown 6\\nup 9\\nforward 3\\ndown 2\\nforward 5\\nforward 2\\ndown 7\\nforward 6\\nforward 2\\nup 9\\ndown 1\\ndown 1\\nforward 4\\nup 1\\nforward 9\\ndown 3\\ndown 4\\ndown 2\\nforward 3\\nforward 3\\nforward 3\\nup 7\\nup 8\\ndown 5\\nforward 1\\nforward 7\\nup 9\\nup 3\\ndown 3\\ndown 8\\nforward 6\\nup 5\\nup 5\\nforward 4\\ndown 2\\ndown 8\\ndown 1\\nforward 6\\ndown 3\\nforward 3\\nforward 6\\nforward 1\\nup 3\\nup 1\\ndown 5\\ndown 2\\ndown 7\\ndown 1\\nforward 9\\ndown 4\\ndown 8\\nforward 9\\nforward 7\\nforward 8\\ndown 1\\ndown 2\\nup 7\\ndown 5\\ndown 2\\ndown 1\\nup 4\\nup 8\\nup 7\\ndown 4\\nforward 3\\ndown 2\\ndown 2\\nforward 5\\nforward 4\\ndown 8\\nup 4\\nforward 4\\nup 1\\ndown 3\\ndown 9\\ndown 9\\ndown 3\\nup 8\\nforward 1\\nforward 6\\ndown 6\\ndown 2\\nforward 8\\ndown 3\\nforward 8\\nforward 2\\nforward 9\\nup 3\\nforward 6\\ndown 5\\nforward 6\\nforward 2\\nup 7\\ndown 9\\nforward 2\\nup 2\\nforward 7\\ndown 1\\ndown 5\\ndown 6\\nforward 8\\ndown 6\\nforward 4\\nforward 1\\nforward 3\\nforward 4\\nup 4\\nforward 4\\ndown 4\\nforward 2\\nforward 5\\nforward 2\\nforward 5\\ndown 9\\nup 2\\nup 1\\ndown 2\\nup 4\\nup 5\\nforward 2\\ndown 3\\ndown 9\\nforward 3\\ndown 8\\ndown 9\\nforward 5\\ndown 3\\nforward 5\\ndown 3\\nup 8\\nforward 7\\nforward 1\\ndown 2\\ndown 7\\nforward 3\\ndown 8\\nforward 9\\ndown 4\\ndown 1\\ndown 7\\ndown 4\\nup 5\\nforward 1\\ndown 4\\nforward 1\\nforward 8\\nup 1\\nup 5\\nup 2\\nup 2\\ndown 4\\ndown 7\\nforward 2\\ndown 8\\nup 8\\ndown 9\\ndown 3\\ndown 6\\ndown 3\\ndown 1\\nforward 7\\nup 8\\nforward 5\\nup 5\\ndown 8\\ndown 1\\ndown 8\\ndown 6\\ndown 5\\nforward 2\\nup 5\\ndown 6\\nforward 9\\nup 6\\ndown 5\\ndown 7\\nup 9\\ndown 1\\nforward 4\\nup 6\\nforward 2\\ndown 5\\ndown 5\\nforward 2\\nup 6\\nforward 1\\ndown 8\\nforward 4\\nup 8\\ndown 3\\nforward 8\\ndown 8\\nforward 5\\ndown 6\\ndown 3\\nforward 1\\ndown 4\\ndown 8\\nup 1\\ndown 1\\ndown 2\\nup 9\\nforward 2\\nforward 3\\ndown 7\\ndown 2\\nforward 7\\nup 8\\ndown 2\\ndown 8\\ndown 9\\nup 1\\ndown 5\\ndown 5\\ndown 4\\ndown 8\\ndown 9\\nup 5\\nforward 2\\ndown 4\\ndown 3\\ndown 2\\nforward 5\\nforward 8\\ndown 8\\ndown 1\\nforward 9\\ndown 5\\nforward 5\\ndown 2\\nup 3\\nup 9\\ndown 1\\ndown 9\\nforward 7\\nup 7\\nforward 3\\nup 6\\nforward 8\\ndown 2\\ndown 1\\ndown 7\\nforward 5\\ndown 8\\ndown 4\\nforward 7\\nforward 4\\ndown 6\\nforward 9\\ndown 3\\nforward 2\\ndown 3\\ndown 1\\ndown 1\\nup 1\\nup 3\\ndown 6\\nforward 3\\nup 9\\ndown 4\\nup 2\\ndown 3\\nup 1\\ndown 8\\ndown 5\\nforward 7\\nforward 2\\nforward 9\\ndown 8\\ndown 5\\ndown 6\\nup 3\\nforward 2\\nup 8\\ndown 4\\nforward 7\\ndown 8\\ndown 6\\ndown 4\\nforward 7\\nup 9\\ndown 4\\nforward 2\\nforward 5\\ndown 3\\nup 6\\nup 6\\ndown 2\\ndown 4\\nforward 8\\nforward 5\\nforward 3\\nforward 5\\ndown 5\\ndown 5\\ndown 6\\nforward 3\\nforward 7\\nforward 1\\ndown 8\\ndown 5\\nforward 7\\nup 7\\ndown 9\\ndown 9\\ndown 9\\nup 6\\ndown 2\\ndown 3\\nforward 1\\nup 7\\nup 8\\nforward 5\\ndown 1\\ndown 3\\ndown 3\\nforward 5\\ndown 7\\ndown 1\\nup 2\\ndown 2\\ndown 3\\nforward 7\\ndown 9\\nforward 6\\ndown 5\\nforward 2\\ndown 5\\nforward 6\\nup 3\\ndown 8\\nup 2\\nforward 5\\nforward 1\\nforward 5\\nforward 8\\nforward 6\\nforward 9\\nforward 6\\nup 6\\nup 5\\ndown 8\\ndown 3\\ndown 5\\ndown 2\\nforward 9\\nforward 8\\ndown 1\\nup 1\\nup 6\\ndown 6\\nforward 4\\ndown 3\\nforward 6\\nforward 1\\nup 5\\ndown 6\\nup 9\\ndown 7\\ndown 2\\ndown 9\\ndown 5\\nforward 5\\nup 2\\nforward 8\\ndown 2\\ndown 8\\nforward 6\\ndown 4\\nforward 8\\ndown 7\\ndown 8\\ndown 1\\nforward 3\\ndown 6\\ndown 9\\ndown 3\\nforward 3\\ndown 8\\nforward 8\\ndown 7\\nforward 6\\nforward 8\\ndown 8\\nup 7\\ndown 1\\nforward 2\\nforward 3\\ndown 5\\nup 8\\ndown 3\\ndown 4\\ndown 7\\nforward 9\\nforward 7\\nforward 1\\ndown 3\\nforward 9\\ndown 8\\nforward 2\\ndown 2\\ndown 9\\ndown 4\\ndown 3\\nup 6\\nup 9\\ndown 3\\ndown 2\\nforward 5\\ndown 3\\ndown 2\\ndown 8\\nforward 6\\nforward 5\\nup 4\\nforward 9\\nforward 8\\nforward 9\\ndown 2\\nforward 2\\nup 6\\nforward 1\\ndown 5\\nforward 2\\ndown 8\\nup 2\\nup 3\\ndown 3\\nup 2\\nup 1\\nup 5\\nforward 1\\nforward 2\\ndown 8\\nup 3\\ndown 9\\nforward 7\\nup 5\\ndown 4\\ndown 4\\nup 3\\nforward 2\\nup 5\\ndown 4\\ndown 4\\nup 5\\nforward 8\\ndown 8\\ndown 6\\nforward 7\\ndown 1\\ndown 3\\ndown 1\\nforward 3\\ndown 5\\ndown 3\\nforward 3\\nup 2\\nforward 2\\ndown 9\\nup 8\\nforward 8\\nup 8\\nforward 1\\nforward 9\\nforward 3\\ndown 8\\ndown 3\\nforward 8\\nforward 4\\ndown 2\\nforward 2\\ndown 2\\ndown 5\\ndown 7\\ndown 5\\nforward 8\\nup 3\\nforward 1\\ndown 1\\nforward 3\\ndown 9\\nforward 2\\nforward 2\\nforward 7\\ndown 7\\ndown 2\\nforward 9\\nup 5\\nup 7\\nforward 8\\nforward 1\\ndown 7\\ndown 8\\ndown 3\\nforward 6\";","export default \"#1 @ 179,662: 16x27\\n#2 @ 609,961: 25x21\\n#3 @ 73,376: 23x28\\n#4 @ 599,405: 26x25\\n#5 @ 28,933: 19x29\\n#6 @ 441,852: 29x23\\n#7 @ 512,396: 15x17\\n#8 @ 702,415: 14x10\\n#9 @ 730,587: 27x21\\n#10 @ 252,715: 17x27\\n#11 @ 541,822: 21x13\\n#12 @ 901,802: 12x24\\n#13 @ 759,349: 15x26\\n#14 @ 862,839: 22x25\\n#15 @ 862,576: 17x16\\n#16 @ 265,967: 11x25\\n#17 @ 124,444: 23x25\\n#18 @ 971,141: 25x15\\n#19 @ 864,246: 22x27\\n#20 @ 841,34: 17x15\\n#21 @ 173,462: 19x22\\n#22 @ 122,22: 27x20\\n#23 @ 327,178: 12x19\\n#24 @ 576,663: 21x10\\n#25 @ 410,958: 11x12\\n#26 @ 676,145: 14x10\\n#27 @ 177,676: 10x22\\n#28 @ 663,60: 23x15\\n#29 @ 686,352: 24x19\\n#30 @ 68,618: 18x12\\n#31 @ 20,643: 19x18\\n#32 @ 683,128: 19x22\\n#33 @ 88,45: 28x25\\n#34 @ 442,736: 20x29\\n#35 @ 824,825: 13x13\\n#36 @ 668,253: 25x27\\n#37 @ 254,404: 27x25\\n#38 @ 712,260: 26x17\\n#39 @ 588,470: 21x20\\n#40 @ 114,148: 11x26\\n#41 @ 242,409: 17x26\\n#42 @ 342,481: 24x21\\n#43 @ 104,187: 27x12\\n#44 @ 440,919: 13x22\\n#45 @ 177,312: 22x15\\n#46 @ 249,925: 29x15\\n#47 @ 376,750: 19x20\\n#48 @ 157,760: 21x21\\n#49 @ 760,833: 28x15\\n#50 @ 955,909: 26x12\\n#51 @ 941,896: 17x25\\n#52 @ 154,33: 29x20\\n#53 @ 236,275: 27x29\\n#54 @ 848,800: 11x18\\n#55 @ 950,130: 28x24\\n#56 @ 351,564: 21x11\\n#57 @ 32,70: 17x11\\n#58 @ 215,219: 22x18\\n#59 @ 816,714: 15x21\\n#60 @ 738,879: 16x27\\n#61 @ 218,896: 26x27\\n#62 @ 953,363: 16x19\\n#63 @ 836,508: 28x13\\n#64 @ 839,14: 12x21\\n#65 @ 831,683: 24x15\\n#66 @ 809,698: 12x26\\n#67 @ 887,296: 23x11\\n#68 @ 770,771: 29x21\\n#69 @ 383,762: 14x25\\n#70 @ 542,962: 28x14\\n#71 @ 236,286: 18x10\\n#72 @ 517,363: 12x18\\n#73 @ 171,753: 16x17\\n#74 @ 272,910: 18x20\\n#75 @ 658,202: 25x14\\n#76 @ 534,906: 18x25\\n#77 @ 468,342: 27x12\\n#78 @ 426,350: 28x26\\n#79 @ 277,968: 12x20\\n#80 @ 390,877: 10x27\\n#81 @ 859,603: 26x12\\n#82 @ 491,937: 13x16\\n#83 @ 19,883: 20x15\\n#84 @ 47,400: 27x15\\n#85 @ 627,191: 14x26\\n#86 @ 164,326: 17x28\\n#87 @ 768,216: 20x24\\n#88 @ 947,765: 15x19\\n#89 @ 917,142: 11x20\\n#90 @ 351,87: 24x29\\n#91 @ 872,451: 29x10\\n#92 @ 749,900: 20x26\\n#93 @ 935,30: 25x12\\n#94 @ 221,943: 15x10\\n#95 @ 344,602: 12x24\\n#96 @ 677,578: 16x26\\n#97 @ 452,606: 21x10\\n#98 @ 2,722: 19x22\\n#99 @ 310,605: 17x29\\n#100 @ 262,390: 26x23\\n#101 @ 640,499: 19x13\\n#102 @ 852,924: 26x16\\n#103 @ 309,81: 20x16\\n#104 @ 108,918: 18x11\\n#105 @ 249,160: 9x17\\n#106 @ 26,62: 26x25\\n#107 @ 407,587: 14x24\\n#108 @ 956,98: 18x27\\n#109 @ 944,459: 16x26\\n#110 @ 209,699: 28x25\\n#111 @ 710,856: 12x22\\n#112 @ 744,288: 27x25\\n#113 @ 489,344: 20x21\\n#114 @ 438,488: 12x16\\n#115 @ 884,95: 15x22\\n#116 @ 60,617: 24x24\\n#117 @ 957,191: 10x11\\n#118 @ 315,527: 22x23\\n#119 @ 199,117: 18x26\\n#120 @ 255,642: 10x15\\n#121 @ 957,962: 11x14\\n#122 @ 193,131: 10x13\\n#123 @ 2,931: 21x11\\n#124 @ 36,961: 27x23\\n#125 @ 863,38: 29x14\\n#126 @ 31,731: 13x15\\n#127 @ 357,741: 28x15\\n#128 @ 209,354: 27x23\\n#129 @ 524,8: 22x20\\n#130 @ 302,247: 15x12\\n#131 @ 76,857: 10x16\\n#132 @ 531,502: 24x10\\n#133 @ 559,962: 17x15\\n#134 @ 233,710: 29x15\\n#135 @ 762,70: 15x24\\n#136 @ 934,186: 25x20\\n#137 @ 808,252: 29x29\\n#138 @ 550,694: 22x19\\n#139 @ 265,368: 23x25\\n#140 @ 640,637: 11x14\\n#141 @ 736,484: 15x10\\n#142 @ 946,571: 27x17\\n#143 @ 332,174: 20x20\\n#144 @ 797,775: 11x23\\n#145 @ 684,63: 22x13\\n#146 @ 932,36: 20x12\\n#147 @ 375,882: 19x17\\n#148 @ 656,227: 12x20\\n#149 @ 455,223: 12x15\\n#150 @ 732,619: 20x20\\n#151 @ 292,615: 19x29\\n#152 @ 615,0: 15x28\\n#153 @ 463,174: 16x15\\n#154 @ 322,456: 27x15\\n#155 @ 352,224: 10x15\\n#156 @ 966,673: 29x21\\n#157 @ 527,42: 23x27\\n#158 @ 632,775: 15x15\\n#159 @ 871,805: 22x15\\n#160 @ 667,240: 15x27\\n#161 @ 607,880: 25x25\\n#162 @ 447,44: 10x21\\n#163 @ 445,126: 17x15\\n#164 @ 844,933: 11x29\\n#165 @ 471,423: 24x27\\n#166 @ 715,867: 16x16\\n#167 @ 778,279: 10x18\\n#168 @ 490,630: 23x16\\n#169 @ 687,301: 28x13\\n#170 @ 476,432: 11x18\\n#171 @ 123,794: 23x26\\n#172 @ 738,256: 22x25\\n#173 @ 336,60: 26x28\\n#174 @ 698,766: 4x10\\n#175 @ 511,10: 13x10\\n#176 @ 580,702: 18x20\\n#177 @ 218,620: 13x22\\n#178 @ 476,488: 13x25\\n#179 @ 154,617: 14x29\\n#180 @ 620,563: 11x6\\n#181 @ 168,433: 28x10\\n#182 @ 60,685: 10x24\\n#183 @ 880,680: 18x18\\n#184 @ 859,616: 17x25\\n#185 @ 114,80: 26x19\\n#186 @ 236,868: 25x10\\n#187 @ 135,13: 26x29\\n#188 @ 810,677: 22x10\\n#189 @ 938,932: 16x14\\n#190 @ 427,434: 14x11\\n#191 @ 83,731: 29x23\\n#192 @ 960,148: 25x16\\n#193 @ 577,669: 24x16\\n#194 @ 67,267: 18x29\\n#195 @ 603,928: 15x26\\n#196 @ 881,39: 29x11\\n#197 @ 963,957: 19x23\\n#198 @ 891,868: 12x13\\n#199 @ 799,34: 14x12\\n#200 @ 529,785: 24x27\\n#201 @ 596,936: 12x21\\n#202 @ 832,289: 13x10\\n#203 @ 664,232: 17x22\\n#204 @ 171,345: 24x26\\n#205 @ 283,521: 28x22\\n#206 @ 702,469: 14x10\\n#207 @ 490,531: 21x27\\n#208 @ 411,388: 26x21\\n#209 @ 120,780: 13x28\\n#210 @ 711,391: 24x12\\n#211 @ 347,848: 22x13\\n#212 @ 956,507: 20x18\\n#213 @ 844,696: 20x26\\n#214 @ 550,230: 28x25\\n#215 @ 71,625: 14x26\\n#216 @ 701,305: 29x23\\n#217 @ 629,488: 21x14\\n#218 @ 966,362: 10x26\\n#219 @ 802,763: 17x19\\n#220 @ 631,858: 22x17\\n#221 @ 175,656: 24x26\\n#222 @ 822,185: 17x15\\n#223 @ 110,390: 11x19\\n#224 @ 328,13: 28x26\\n#225 @ 479,262: 22x12\\n#226 @ 178,796: 25x25\\n#227 @ 23,782: 18x21\\n#228 @ 597,578: 10x12\\n#229 @ 692,683: 26x29\\n#230 @ 268,713: 21x28\\n#231 @ 112,197: 21x15\\n#232 @ 619,282: 21x19\\n#233 @ 765,56: 21x29\\n#234 @ 96,163: 29x11\\n#235 @ 229,927: 18x29\\n#236 @ 588,775: 27x29\\n#237 @ 498,293: 23x15\\n#238 @ 311,166: 14x25\\n#239 @ 134,371: 27x28\\n#240 @ 450,173: 24x16\\n#241 @ 700,398: 28x12\\n#242 @ 216,282: 25x10\\n#243 @ 886,817: 16x15\\n#244 @ 291,967: 29x25\\n#245 @ 406,283: 14x20\\n#246 @ 601,779: 26x28\\n#247 @ 767,213: 20x10\\n#248 @ 802,36: 15x17\\n#249 @ 264,361: 19x27\\n#250 @ 565,236: 23x28\\n#251 @ 260,394: 21x18\\n#252 @ 506,427: 17x26\\n#253 @ 479,946: 28x10\\n#254 @ 463,505: 24x19\\n#255 @ 42,314: 27x27\\n#256 @ 901,709: 26x14\\n#257 @ 716,194: 21x29\\n#258 @ 404,285: 18x21\\n#259 @ 838,243: 29x28\\n#260 @ 276,510: 23x11\\n#261 @ 66,605: 29x16\\n#262 @ 225,3: 26x16\\n#263 @ 451,355: 22x21\\n#264 @ 423,41: 19x17\\n#265 @ 942,912: 14x11\\n#266 @ 915,613: 22x11\\n#267 @ 316,786: 25x24\\n#268 @ 640,185: 24x17\\n#269 @ 4,564: 29x18\\n#270 @ 535,912: 21x16\\n#271 @ 95,633: 13x17\\n#272 @ 517,170: 21x19\\n#273 @ 857,812: 14x23\\n#274 @ 682,515: 12x21\\n#275 @ 615,847: 22x14\\n#276 @ 547,47: 26x18\\n#277 @ 461,552: 19x28\\n#278 @ 866,29: 28x28\\n#279 @ 725,878: 17x15\\n#280 @ 604,454: 19x24\\n#281 @ 529,452: 28x12\\n#282 @ 731,633: 23x22\\n#283 @ 505,447: 27x18\\n#284 @ 75,694: 12x16\\n#285 @ 212,909: 29x13\\n#286 @ 96,630: 15x29\\n#287 @ 168,34: 28x18\\n#288 @ 935,481: 23x26\\n#289 @ 892,235: 27x16\\n#290 @ 942,945: 13x15\\n#291 @ 759,221: 13x25\\n#292 @ 604,339: 10x27\\n#293 @ 699,313: 17x23\\n#294 @ 319,716: 22x24\\n#295 @ 718,219: 26x26\\n#296 @ 11,917: 13x19\\n#297 @ 666,632: 13x24\\n#298 @ 85,791: 25x29\\n#299 @ 179,204: 20x17\\n#300 @ 292,234: 27x11\\n#301 @ 527,488: 15x19\\n#302 @ 651,158: 22x10\\n#303 @ 727,98: 25x25\\n#304 @ 452,9: 23x26\\n#305 @ 520,386: 23x22\\n#306 @ 755,196: 26x11\\n#307 @ 321,107: 13x25\\n#308 @ 654,563: 20x25\\n#309 @ 188,228: 11x23\\n#310 @ 416,355: 22x19\\n#311 @ 679,567: 12x8\\n#312 @ 319,282: 17x27\\n#313 @ 276,620: 23x23\\n#314 @ 50,242: 11x19\\n#315 @ 759,918: 23x19\\n#316 @ 599,84: 18x21\\n#317 @ 675,230: 15x28\\n#318 @ 96,480: 13x13\\n#319 @ 386,254: 24x19\\n#320 @ 682,199: 22x19\\n#321 @ 14,819: 12x14\\n#322 @ 231,451: 19x17\\n#323 @ 36,396: 27x13\\n#324 @ 459,917: 18x26\\n#325 @ 149,874: 11x10\\n#326 @ 182,325: 11x25\\n#327 @ 142,279: 17x12\\n#328 @ 954,276: 27x24\\n#329 @ 512,263: 16x19\\n#330 @ 446,841: 25x25\\n#331 @ 79,247: 15x11\\n#332 @ 378,881: 20x17\\n#333 @ 958,324: 18x22\\n#334 @ 583,501: 13x23\\n#335 @ 966,133: 16x20\\n#336 @ 236,395: 19x19\\n#337 @ 588,910: 18x10\\n#338 @ 35,406: 20x25\\n#339 @ 326,404: 20x29\\n#340 @ 293,761: 16x24\\n#341 @ 420,371: 5x5\\n#342 @ 694,764: 12x17\\n#343 @ 617,15: 10x14\\n#344 @ 859,915: 11x15\\n#345 @ 522,430: 20x17\\n#346 @ 727,180: 15x14\\n#347 @ 208,679: 11x16\\n#348 @ 523,670: 28x22\\n#349 @ 512,436: 15x13\\n#350 @ 170,11: 25x18\\n#351 @ 353,588: 23x12\\n#352 @ 201,605: 26x12\\n#353 @ 561,681: 15x12\\n#354 @ 500,357: 12x12\\n#355 @ 813,438: 26x26\\n#356 @ 759,853: 14x28\\n#357 @ 152,737: 27x27\\n#358 @ 646,721: 11x13\\n#359 @ 588,446: 15x21\\n#360 @ 713,927: 21x28\\n#361 @ 189,43: 21x29\\n#362 @ 655,722: 29x22\\n#363 @ 614,184: 17x14\\n#364 @ 465,10: 12x19\\n#365 @ 493,612: 11x24\\n#366 @ 594,442: 13x18\\n#367 @ 392,893: 11x16\\n#368 @ 77,740: 12x21\\n#369 @ 628,138: 12x27\\n#370 @ 173,500: 20x11\\n#371 @ 363,587: 13x27\\n#372 @ 852,276: 25x19\\n#373 @ 410,949: 13x10\\n#374 @ 359,948: 25x25\\n#375 @ 546,677: 11x29\\n#376 @ 854,582: 23x19\\n#377 @ 761,145: 11x10\\n#378 @ 300,888: 22x17\\n#379 @ 284,791: 27x16\\n#380 @ 758,255: 13x20\\n#381 @ 453,16: 21x16\\n#382 @ 525,183: 21x22\\n#383 @ 114,307: 18x15\\n#384 @ 556,225: 28x20\\n#385 @ 463,19: 19x13\\n#386 @ 601,579: 24x14\\n#387 @ 314,870: 19x21\\n#388 @ 541,438: 22x17\\n#389 @ 704,543: 26x11\\n#390 @ 420,537: 21x22\\n#391 @ 728,211: 10x17\\n#392 @ 232,822: 25x16\\n#393 @ 482,339: 16x17\\n#394 @ 460,129: 22x18\\n#395 @ 223,181: 24x28\\n#396 @ 270,740: 25x24\\n#397 @ 220,22: 16x17\\n#398 @ 416,414: 15x21\\n#399 @ 391,524: 10x20\\n#400 @ 448,282: 12x29\\n#401 @ 247,862: 16x13\\n#402 @ 967,527: 17x20\\n#403 @ 279,637: 12x15\\n#404 @ 792,166: 16x29\\n#405 @ 597,902: 21x12\\n#406 @ 375,729: 11x13\\n#407 @ 404,395: 15x27\\n#408 @ 852,581: 27x17\\n#409 @ 97,859: 14x19\\n#410 @ 867,477: 23x24\\n#411 @ 419,139: 20x23\\n#412 @ 395,956: 23x15\\n#413 @ 498,388: 22x24\\n#414 @ 880,814: 13x19\\n#415 @ 845,417: 12x25\\n#416 @ 498,357: 27x29\\n#417 @ 366,739: 24x29\\n#418 @ 86,66: 20x23\\n#419 @ 619,871: 17x4\\n#420 @ 896,449: 25x24\\n#421 @ 414,64: 13x27\\n#422 @ 308,77: 27x10\\n#423 @ 105,927: 15x12\\n#424 @ 213,110: 18x26\\n#425 @ 912,820: 12x15\\n#426 @ 755,643: 22x13\\n#427 @ 850,256: 17x12\\n#428 @ 581,456: 18x29\\n#429 @ 881,461: 28x22\\n#430 @ 204,903: 27x19\\n#431 @ 12,578: 22x13\\n#432 @ 69,762: 22x27\\n#433 @ 140,879: 15x18\\n#434 @ 548,924: 20x23\\n#435 @ 256,293: 28x22\\n#436 @ 583,438: 29x27\\n#437 @ 31,936: 17x11\\n#438 @ 53,289: 23x26\\n#439 @ 753,871: 16x27\\n#440 @ 64,856: 21x28\\n#441 @ 832,962: 11x15\\n#442 @ 305,969: 17x29\\n#443 @ 562,103: 24x24\\n#444 @ 243,231: 18x11\\n#445 @ 210,19: 10x29\\n#446 @ 62,702: 28x18\\n#447 @ 167,127: 13x29\\n#448 @ 751,334: 12x20\\n#449 @ 404,236: 27x28\\n#450 @ 869,107: 20x18\\n#451 @ 167,687: 22x22\\n#452 @ 79,449: 29x19\\n#453 @ 821,288: 15x26\\n#454 @ 235,926: 18x10\\n#455 @ 902,705: 16x18\\n#456 @ 777,189: 23x25\\n#457 @ 560,141: 23x17\\n#458 @ 711,900: 28x12\\n#459 @ 650,864: 23x19\\n#460 @ 965,91: 25x29\\n#461 @ 366,589: 24x18\\n#462 @ 262,423: 25x21\\n#463 @ 775,176: 25x10\\n#464 @ 634,899: 24x15\\n#465 @ 330,489: 21x16\\n#466 @ 711,668: 28x14\\n#467 @ 283,699: 17x15\\n#468 @ 12,741: 14x11\\n#469 @ 10,532: 17x19\\n#470 @ 763,148: 12x17\\n#471 @ 630,884: 13x26\\n#472 @ 39,381: 12x19\\n#473 @ 313,382: 4x17\\n#474 @ 617,862: 22x18\\n#475 @ 113,120: 20x21\\n#476 @ 913,322: 26x17\\n#477 @ 197,33: 22x15\\n#478 @ 760,220: 22x29\\n#479 @ 395,195: 17x4\\n#480 @ 25,469: 16x19\\n#481 @ 289,620: 13x20\\n#482 @ 41,395: 15x21\\n#483 @ 50,148: 24x22\\n#484 @ 787,117: 29x24\\n#485 @ 456,623: 28x15\\n#486 @ 938,37: 19x10\\n#487 @ 475,340: 16x22\\n#488 @ 221,808: 28x22\\n#489 @ 387,452: 17x19\\n#490 @ 835,789: 21x23\\n#491 @ 153,456: 29x20\\n#492 @ 462,344: 19x13\\n#493 @ 927,8: 16x27\\n#494 @ 172,734: 19x15\\n#495 @ 562,52: 27x15\\n#496 @ 781,826: 19x26\\n#497 @ 204,123: 17x13\\n#498 @ 839,514: 26x25\\n#499 @ 324,417: 29x11\\n#500 @ 746,828: 19x11\\n#501 @ 737,580: 18x14\\n#502 @ 802,22: 28x20\\n#503 @ 974,392: 19x17\\n#504 @ 426,55: 16x14\\n#505 @ 845,795: 19x13\\n#506 @ 261,102: 10x27\\n#507 @ 415,400: 14x22\\n#508 @ 62,0: 19x29\\n#509 @ 643,429: 28x10\\n#510 @ 713,121: 18x19\\n#511 @ 829,23: 17x16\\n#512 @ 268,80: 10x11\\n#513 @ 826,654: 28x29\\n#514 @ 73,96: 19x18\\n#515 @ 696,417: 22x13\\n#516 @ 253,437: 26x29\\n#517 @ 842,523: 16x10\\n#518 @ 274,960: 28x10\\n#519 @ 410,317: 16x22\\n#520 @ 334,981: 26x18\\n#521 @ 183,480: 25x29\\n#522 @ 794,659: 26x26\\n#523 @ 416,188: 25x10\\n#524 @ 735,400: 17x21\\n#525 @ 836,779: 15x26\\n#526 @ 913,298: 12x15\\n#527 @ 28,507: 10x18\\n#528 @ 596,697: 20x20\\n#529 @ 322,163: 12x20\\n#530 @ 626,94: 21x10\\n#531 @ 39,391: 14x10\\n#532 @ 894,108: 11x29\\n#533 @ 384,173: 25x18\\n#534 @ 557,974: 11x23\\n#535 @ 780,805: 10x11\\n#536 @ 448,734: 27x14\\n#537 @ 68,349: 27x17\\n#538 @ 215,700: 15x13\\n#539 @ 921,309: 26x16\\n#540 @ 312,665: 15x3\\n#541 @ 301,946: 16x22\\n#542 @ 798,747: 11x22\\n#543 @ 850,675: 28x28\\n#544 @ 438,425: 11x18\\n#545 @ 477,537: 16x25\\n#546 @ 869,878: 22x22\\n#547 @ 830,106: 26x15\\n#548 @ 16,880: 23x28\\n#549 @ 89,598: 25x10\\n#550 @ 911,746: 25x20\\n#551 @ 132,268: 27x14\\n#552 @ 107,54: 22x16\\n#553 @ 617,920: 17x25\\n#554 @ 888,796: 17x17\\n#555 @ 911,21: 21x13\\n#556 @ 901,126: 12x28\\n#557 @ 501,378: 25x26\\n#558 @ 231,749: 28x10\\n#559 @ 534,889: 12x24\\n#560 @ 388,923: 17x14\\n#561 @ 113,84: 15x28\\n#562 @ 924,424: 19x27\\n#563 @ 669,933: 29x22\\n#564 @ 317,796: 22x24\\n#565 @ 149,894: 18x11\\n#566 @ 815,914: 21x17\\n#567 @ 686,540: 28x10\\n#568 @ 531,331: 20x24\\n#569 @ 459,576: 15x28\\n#570 @ 127,520: 15x24\\n#571 @ 466,572: 13x26\\n#572 @ 935,555: 18x19\\n#573 @ 461,946: 12x20\\n#574 @ 918,162: 11x12\\n#575 @ 279,305: 21x15\\n#576 @ 650,714: 15x13\\n#577 @ 486,776: 12x27\\n#578 @ 81,253: 20x17\\n#579 @ 906,18: 22x14\\n#580 @ 306,26: 16x16\\n#581 @ 184,724: 17x28\\n#582 @ 751,225: 15x10\\n#583 @ 26,783: 21x11\\n#584 @ 103,41: 21x26\\n#585 @ 283,5: 12x24\\n#586 @ 733,375: 13x27\\n#587 @ 193,973: 11x21\\n#588 @ 47,306: 19x14\\n#589 @ 964,124: 11x19\\n#590 @ 856,321: 19x12\\n#591 @ 437,655: 29x14\\n#592 @ 368,437: 25x24\\n#593 @ 537,154: 28x17\\n#594 @ 574,451: 11x13\\n#595 @ 963,342: 21x26\\n#596 @ 250,492: 22x18\\n#597 @ 962,740: 22x14\\n#598 @ 697,784: 29x22\\n#599 @ 153,323: 23x23\\n#600 @ 534,713: 13x12\\n#601 @ 75,73: 22x18\\n#602 @ 166,755: 15x12\\n#603 @ 273,622: 22x12\\n#604 @ 660,432: 10x24\\n#605 @ 119,965: 25x25\\n#606 @ 751,294: 28x14\\n#607 @ 676,358: 13x11\\n#608 @ 204,588: 17x29\\n#609 @ 792,828: 21x14\\n#610 @ 163,141: 27x12\\n#611 @ 159,33: 22x19\\n#612 @ 158,364: 13x15\\n#613 @ 711,929: 16x14\\n#614 @ 811,654: 18x29\\n#615 @ 903,828: 24x20\\n#616 @ 323,111: 23x26\\n#617 @ 891,258: 28x28\\n#618 @ 551,826: 25x12\\n#619 @ 660,935: 29x19\\n#620 @ 41,27: 28x19\\n#621 @ 590,491: 26x24\\n#622 @ 174,31: 10x25\\n#623 @ 563,817: 21x25\\n#624 @ 961,746: 13x27\\n#625 @ 599,403: 13x11\\n#626 @ 852,661: 22x27\\n#627 @ 84,473: 18x19\\n#628 @ 580,98: 28x27\\n#629 @ 138,506: 28x15\\n#630 @ 981,544: 16x26\\n#631 @ 418,908: 23x24\\n#632 @ 371,926: 22x25\\n#633 @ 701,291: 11x20\\n#634 @ 66,889: 28x25\\n#635 @ 641,689: 14x26\\n#636 @ 177,960: 10x16\\n#637 @ 60,39: 20x18\\n#638 @ 378,445: 14x25\\n#639 @ 113,794: 17x16\\n#640 @ 197,627: 22x16\\n#641 @ 324,530: 12x25\\n#642 @ 8,206: 18x29\\n#643 @ 359,893: 23x15\\n#644 @ 795,198: 19x17\\n#645 @ 239,900: 12x20\\n#646 @ 504,343: 19x10\\n#647 @ 708,677: 29x10\\n#648 @ 63,697: 14x12\\n#649 @ 403,203: 25x18\\n#650 @ 305,183: 16x18\\n#651 @ 609,447: 20x22\\n#652 @ 508,394: 16x29\\n#653 @ 178,144: 29x27\\n#654 @ 870,490: 23x19\\n#655 @ 130,855: 27x14\\n#656 @ 333,563: 25x14\\n#657 @ 862,252: 18x16\\n#658 @ 40,384: 20x29\\n#659 @ 639,299: 13x10\\n#660 @ 869,856: 12x23\\n#661 @ 35,495: 13x28\\n#662 @ 545,322: 16x26\\n#663 @ 671,566: 11x12\\n#664 @ 342,10: 10x17\\n#665 @ 932,940: 21x14\\n#666 @ 726,480: 11x11\\n#667 @ 249,632: 17x21\\n#668 @ 939,830: 11x14\\n#669 @ 812,241: 19x25\\n#670 @ 739,641: 15x21\\n#671 @ 307,873: 21x25\\n#672 @ 845,687: 13x11\\n#673 @ 953,676: 26x17\\n#674 @ 137,960: 26x13\\n#675 @ 853,498: 29x13\\n#676 @ 396,599: 17x17\\n#677 @ 431,839: 27x27\\n#678 @ 745,290: 23x16\\n#679 @ 336,849: 12x23\\n#680 @ 852,492: 28x15\\n#681 @ 467,781: 25x23\\n#682 @ 525,668: 18x15\\n#683 @ 941,189: 25x24\\n#684 @ 130,323: 17x26\\n#685 @ 410,612: 12x20\\n#686 @ 967,499: 13x23\\n#687 @ 947,263: 16x22\\n#688 @ 158,434: 13x13\\n#689 @ 920,298: 13x15\\n#690 @ 361,415: 16x21\\n#691 @ 302,600: 21x20\\n#692 @ 65,356: 20x24\\n#693 @ 855,427: 13x12\\n#694 @ 877,366: 10x10\\n#695 @ 138,415: 20x14\\n#696 @ 818,653: 27x12\\n#697 @ 829,540: 15x29\\n#698 @ 636,121: 19x28\\n#699 @ 324,960: 16x23\\n#700 @ 680,614: 10x11\\n#701 @ 380,819: 21x21\\n#702 @ 873,107: 11x15\\n#703 @ 42,644: 11x17\\n#704 @ 62,860: 17x21\\n#705 @ 728,704: 27x27\\n#706 @ 604,488: 17x25\\n#707 @ 418,252: 28x14\\n#708 @ 715,408: 28x17\\n#709 @ 747,225: 21x13\\n#710 @ 124,787: 18x18\\n#711 @ 394,376: 29x18\\n#712 @ 182,552: 13x16\\n#713 @ 129,424: 19x23\\n#714 @ 852,526: 18x12\\n#715 @ 849,634: 21x19\\n#716 @ 220,22: 14x21\\n#717 @ 327,870: 18x15\\n#718 @ 627,170: 10x13\\n#719 @ 108,768: 17x22\\n#720 @ 870,303: 11x28\\n#721 @ 616,917: 19x18\\n#722 @ 118,316: 10x11\\n#723 @ 476,355: 12x13\\n#724 @ 235,946: 23x12\\n#725 @ 310,723: 24x21\\n#726 @ 28,483: 14x28\\n#727 @ 746,202: 26x12\\n#728 @ 736,404: 19x28\\n#729 @ 973,143: 21x26\\n#730 @ 226,9: 18x24\\n#731 @ 717,746: 29x26\\n#732 @ 793,668: 28x19\\n#733 @ 446,177: 11x25\\n#734 @ 86,243: 27x11\\n#735 @ 73,13: 15x25\\n#736 @ 225,706: 13x13\\n#737 @ 852,950: 25x10\\n#738 @ 502,427: 13x15\\n#739 @ 950,504: 26x17\\n#740 @ 761,290: 21x24\\n#741 @ 90,378: 28x29\\n#742 @ 431,457: 27x13\\n#743 @ 196,666: 15x29\\n#744 @ 439,105: 10x29\\n#745 @ 788,261: 28x10\\n#746 @ 947,904: 13x12\\n#747 @ 328,973: 17x25\\n#748 @ 255,758: 22x26\\n#749 @ 320,426: 21x21\\n#750 @ 735,258: 16x24\\n#751 @ 883,333: 21x25\\n#752 @ 5,510: 10x23\\n#753 @ 389,972: 20x14\\n#754 @ 671,937: 18x10\\n#755 @ 728,342: 20x18\\n#756 @ 247,617: 26x13\\n#757 @ 301,241: 25x19\\n#758 @ 971,653: 18x25\\n#759 @ 807,30: 25x14\\n#760 @ 318,525: 14x12\\n#761 @ 640,618: 26x24\\n#762 @ 788,253: 25x26\\n#763 @ 393,192: 23x12\\n#764 @ 522,920: 13x26\\n#765 @ 232,204: 14x18\\n#766 @ 953,862: 22x25\\n#767 @ 41,239: 22x18\\n#768 @ 760,535: 11x25\\n#769 @ 84,868: 28x26\\n#770 @ 920,703: 19x26\\n#771 @ 678,544: 27x17\\n#772 @ 814,591: 18x11\\n#773 @ 15,181: 18x10\\n#774 @ 725,661: 22x11\\n#775 @ 241,691: 18x17\\n#776 @ 84,81: 14x29\\n#777 @ 909,818: 14x23\\n#778 @ 357,478: 27x25\\n#779 @ 537,878: 24x15\\n#780 @ 812,832: 16x18\\n#781 @ 528,394: 24x29\\n#782 @ 411,603: 15x12\\n#783 @ 94,727: 10x16\\n#784 @ 968,146: 24x27\\n#785 @ 755,195: 22x11\\n#786 @ 948,802: 21x13\\n#787 @ 509,266: 10x28\\n#788 @ 626,463: 21x19\\n#789 @ 766,203: 19x22\\n#790 @ 450,28: 12x24\\n#791 @ 290,589: 25x12\\n#792 @ 294,195: 22x28\\n#793 @ 481,949: 22x20\\n#794 @ 732,708: 25x13\\n#795 @ 292,706: 17x20\\n#796 @ 502,6: 13x10\\n#797 @ 119,382: 29x23\\n#798 @ 300,953: 16x22\\n#799 @ 978,231: 18x16\\n#800 @ 119,409: 23x12\\n#801 @ 390,634: 27x13\\n#802 @ 958,124: 19x21\\n#803 @ 423,437: 27x13\\n#804 @ 394,299: 27x19\\n#805 @ 973,910: 24x10\\n#806 @ 462,133: 29x11\\n#807 @ 529,750: 17x15\\n#808 @ 80,744: 12x17\\n#809 @ 56,99: 19x17\\n#810 @ 926,721: 12x28\\n#811 @ 916,569: 27x15\\n#812 @ 723,376: 13x27\\n#813 @ 852,824: 26x23\\n#814 @ 953,944: 17x10\\n#815 @ 786,937: 28x17\\n#816 @ 188,705: 17x24\\n#817 @ 543,456: 13x18\\n#818 @ 676,918: 20x10\\n#819 @ 97,706: 24x29\\n#820 @ 722,656: 29x18\\n#821 @ 182,328: 24x15\\n#822 @ 490,397: 28x20\\n#823 @ 247,217: 19x20\\n#824 @ 217,592: 12x21\\n#825 @ 452,201: 14x25\\n#826 @ 348,612: 11x26\\n#827 @ 652,935: 22x21\\n#828 @ 650,925: 29x21\\n#829 @ 495,247: 15x29\\n#830 @ 594,561: 20x15\\n#831 @ 220,460: 29x25\\n#832 @ 642,117: 12x20\\n#833 @ 235,533: 24x13\\n#834 @ 285,755: 14x11\\n#835 @ 739,473: 23x21\\n#836 @ 268,387: 20x16\\n#837 @ 459,275: 28x10\\n#838 @ 493,572: 13x21\\n#839 @ 320,720: 18x20\\n#840 @ 168,757: 5x6\\n#841 @ 496,368: 29x18\\n#842 @ 419,45: 15x22\\n#843 @ 749,524: 23x19\\n#844 @ 413,68: 25x19\\n#845 @ 250,698: 16x27\\n#846 @ 101,697: 26x13\\n#847 @ 968,332: 11x19\\n#848 @ 953,137: 19x11\\n#849 @ 134,396: 27x19\\n#850 @ 891,465: 13x28\\n#851 @ 40,931: 24x18\\n#852 @ 170,775: 25x10\\n#853 @ 187,26: 18x15\\n#854 @ 677,28: 19x17\\n#855 @ 752,274: 22x16\\n#856 @ 217,376: 15x17\\n#857 @ 379,249: 15x28\\n#858 @ 308,661: 25x16\\n#859 @ 514,704: 28x16\\n#860 @ 281,235: 26x23\\n#861 @ 430,650: 15x28\\n#862 @ 784,125: 26x25\\n#863 @ 212,123: 19x14\\n#864 @ 946,191: 15x8\\n#865 @ 405,399: 21x27\\n#866 @ 443,484: 19x16\\n#867 @ 769,626: 17x25\\n#868 @ 119,786: 29x19\\n#869 @ 890,20: 26x28\\n#870 @ 12,161: 11x24\\n#871 @ 957,869: 11x12\\n#872 @ 332,736: 28x15\\n#873 @ 178,967: 27x10\\n#874 @ 323,441: 23x10\\n#875 @ 229,436: 28x16\\n#876 @ 734,578: 23x17\\n#877 @ 433,614: 25x27\\n#878 @ 30,160: 28x18\\n#879 @ 217,279: 26x21\\n#880 @ 621,130: 27x15\\n#881 @ 465,601: 26x28\\n#882 @ 231,580: 25x11\\n#883 @ 300,512: 25x23\\n#884 @ 422,258: 22x19\\n#885 @ 308,530: 15x13\\n#886 @ 164,202: 10x12\\n#887 @ 412,181: 18x21\\n#888 @ 121,766: 25x18\\n#889 @ 177,945: 14x16\\n#890 @ 30,162: 13x26\\n#891 @ 437,565: 23x27\\n#892 @ 454,280: 26x27\\n#893 @ 379,526: 23x12\\n#894 @ 834,707: 13x5\\n#895 @ 859,357: 24x28\\n#896 @ 891,303: 16x14\\n#897 @ 385,116: 28x20\\n#898 @ 53,12: 24x22\\n#899 @ 428,979: 24x20\\n#900 @ 916,602: 28x17\\n#901 @ 19,739: 16x21\\n#902 @ 871,32: 18x22\\n#903 @ 207,110: 12x16\\n#904 @ 932,15: 26x19\\n#905 @ 691,232: 11x18\\n#906 @ 965,799: 20x20\\n#907 @ 241,526: 24x23\\n#908 @ 931,915: 18x14\\n#909 @ 662,584: 24x14\\n#910 @ 30,148: 10x17\\n#911 @ 50,466: 24x29\\n#912 @ 265,504: 22x10\\n#913 @ 59,857: 28x24\\n#914 @ 170,780: 18x27\\n#915 @ 436,51: 27x12\\n#916 @ 921,139: 16x17\\n#917 @ 532,377: 16x23\\n#918 @ 237,188: 20x27\\n#919 @ 672,653: 11x20\\n#920 @ 333,546: 13x18\\n#921 @ 830,191: 25x27\\n#922 @ 745,644: 24x23\\n#923 @ 877,371: 17x28\\n#924 @ 926,426: 12x19\\n#925 @ 731,977: 13x21\\n#926 @ 12,122: 14x14\\n#927 @ 65,896: 17x28\\n#928 @ 126,609: 29x13\\n#929 @ 557,244: 24x22\\n#930 @ 80,21: 14x24\\n#931 @ 725,184: 18x28\\n#932 @ 654,181: 18x12\\n#933 @ 439,283: 14x21\\n#934 @ 974,95: 26x15\\n#935 @ 235,9: 10x17\\n#936 @ 306,422: 24x21\\n#937 @ 383,952: 29x10\\n#938 @ 738,201: 23x15\\n#939 @ 254,624: 26x19\\n#940 @ 421,672: 17x14\\n#941 @ 221,751: 12x28\\n#942 @ 730,768: 13x18\\n#943 @ 342,13: 17x18\\n#944 @ 594,639: 24x17\\n#945 @ 127,323: 16x12\\n#946 @ 861,701: 13x10\\n#947 @ 696,541: 28x24\\n#948 @ 804,363: 12x25\\n#949 @ 958,296: 29x13\\n#950 @ 126,868: 16x20\\n#951 @ 916,483: 26x15\\n#952 @ 318,52: 19x22\\n#953 @ 240,938: 18x11\\n#954 @ 849,275: 16x11\\n#955 @ 712,412: 27x26\\n#956 @ 913,613: 14x15\\n#957 @ 756,476: 20x18\\n#958 @ 656,906: 14x11\\n#959 @ 461,633: 12x26\\n#960 @ 398,208: 19x12\\n#961 @ 490,333: 14x14\\n#962 @ 816,658: 16x27\\n#963 @ 579,562: 17x19\\n#964 @ 961,552: 16x29\\n#965 @ 393,947: 27x19\\n#966 @ 68,464: 18x13\\n#967 @ 318,537: 21x13\\n#968 @ 904,171: 28x13\\n#969 @ 629,974: 23x22\\n#970 @ 415,366: 15x19\\n#971 @ 401,976: 26x13\\n#972 @ 18,44: 26x12\\n#973 @ 18,804: 27x26\\n#974 @ 134,446: 25x22\\n#975 @ 158,464: 19x13\\n#976 @ 623,437: 9x3\\n#977 @ 376,181: 19x15\\n#978 @ 738,397: 26x27\\n#979 @ 338,207: 20x23\\n#980 @ 218,403: 27x17\\n#981 @ 530,937: 27x10\\n#982 @ 134,958: 11x19\\n#983 @ 675,514: 13x17\\n#984 @ 891,383: 10x27\\n#985 @ 935,748: 15x11\\n#986 @ 943,956: 25x22\\n#987 @ 18,649: 11x14\\n#988 @ 740,243: 21x10\\n#989 @ 404,309: 14x22\\n#990 @ 134,19: 13x19\\n#991 @ 406,381: 14x23\\n#992 @ 428,395: 18x13\\n#993 @ 121,971: 18x15\\n#994 @ 62,794: 25x17\\n#995 @ 134,403: 20x13\\n#996 @ 347,567: 20x29\\n#997 @ 615,358: 3x18\\n#998 @ 852,28: 15x16\\n#999 @ 259,379: 27x24\\n#1000 @ 268,617: 20x20\\n#1001 @ 956,657: 20x22\\n#1002 @ 924,876: 26x18\\n#1003 @ 748,411: 12x14\\n#1004 @ 882,249: 29x10\\n#1005 @ 979,25: 21x17\\n#1006 @ 559,126: 25x28\\n#1007 @ 569,712: 28x13\\n#1008 @ 623,781: 25x16\\n#1009 @ 422,607: 25x10\\n#1010 @ 613,904: 11x26\\n#1011 @ 128,411: 16x17\\n#1012 @ 9,195: 22x12\\n#1013 @ 83,362: 14x23\\n#1014 @ 617,149: 26x18\\n#1015 @ 382,436: 12x21\\n#1016 @ 613,855: 23x16\\n#1017 @ 956,222: 24x17\\n#1018 @ 400,977: 12x15\\n#1019 @ 181,333: 18x17\\n#1020 @ 610,174: 25x14\\n#1021 @ 825,26: 13x24\\n#1022 @ 296,778: 26x14\\n#1023 @ 465,135: 24x16\\n#1024 @ 638,807: 10x14\\n#1025 @ 547,697: 19x15\\n#1026 @ 103,663: 15x21\\n#1027 @ 71,113: 20x28\\n#1028 @ 325,498: 27x28\\n#1029 @ 525,808: 23x19\\n#1030 @ 828,949: 15x27\\n#1031 @ 46,699: 11x18\\n#1032 @ 676,396: 29x29\\n#1033 @ 552,889: 25x27\\n#1034 @ 943,865: 15x22\\n#1035 @ 480,310: 27x20\\n#1036 @ 714,270: 29x17\\n#1037 @ 647,711: 18x15\\n#1038 @ 590,431: 24x16\\n#1039 @ 675,554: 20x26\\n#1040 @ 287,13: 17x20\\n#1041 @ 886,310: 16x28\\n#1042 @ 219,353: 15x22\\n#1043 @ 215,12: 14x17\\n#1044 @ 307,541: 29x22\\n#1045 @ 151,734: 22x22\\n#1046 @ 517,785: 14x24\\n#1047 @ 617,89: 15x26\\n#1048 @ 726,978: 13x22\\n#1049 @ 404,546: 25x29\\n#1050 @ 395,372: 23x15\\n#1051 @ 249,583: 21x21\\n#1052 @ 941,455: 23x15\\n#1053 @ 801,651: 19x11\\n#1054 @ 186,120: 10x22\\n#1055 @ 562,177: 11x10\\n#1056 @ 504,441: 14x29\\n#1057 @ 401,274: 11x16\\n#1058 @ 69,463: 24x28\\n#1059 @ 409,955: 20x27\\n#1060 @ 856,263: 26x20\\n#1061 @ 747,821: 23x11\\n#1062 @ 243,158: 20x22\\n#1063 @ 694,957: 27x10\\n#1064 @ 370,666: 29x23\\n#1065 @ 74,640: 14x24\\n#1066 @ 330,223: 11x21\\n#1067 @ 93,659: 27x10\\n#1068 @ 916,571: 20x24\\n#1069 @ 681,208: 10x26\\n#1070 @ 62,125: 27x28\\n#1071 @ 163,527: 14x24\\n#1072 @ 353,71: 23x22\\n#1073 @ 938,1: 12x27\\n#1074 @ 561,956: 20x26\\n#1075 @ 850,491: 29x23\\n#1076 @ 762,231: 16x28\\n#1077 @ 391,96: 13x24\\n#1078 @ 359,435: 14x17\\n#1079 @ 150,326: 15x20\\n#1080 @ 615,695: 29x17\\n#1081 @ 477,123: 24x14\\n#1082 @ 851,99: 12x26\\n#1083 @ 328,627: 22x29\\n#1084 @ 925,616: 14x23\\n#1085 @ 59,897: 23x19\\n#1086 @ 152,379: 23x15\\n#1087 @ 255,415: 19x22\\n#1088 @ 921,476: 19x24\\n#1089 @ 946,215: 23x16\\n#1090 @ 384,725: 23x11\\n#1091 @ 612,353: 18x29\\n#1092 @ 443,193: 22x20\\n#1093 @ 41,141: 18x10\\n#1094 @ 288,10: 24x19\\n#1095 @ 623,908: 11x20\\n#1096 @ 424,159: 27x19\\n#1097 @ 896,878: 16x29\\n#1098 @ 466,334: 27x18\\n#1099 @ 589,755: 23x25\\n#1100 @ 341,592: 13x27\\n#1101 @ 220,387: 16x12\\n#1102 @ 958,510: 15x9\\n#1103 @ 252,435: 11x23\\n#1104 @ 143,853: 15x10\\n#1105 @ 841,205: 14x29\\n#1106 @ 439,456: 11x19\\n#1107 @ 937,828: 18x21\\n#1108 @ 725,650: 24x26\\n#1109 @ 851,222: 19x26\\n#1110 @ 248,423: 5x4\\n#1111 @ 740,325: 10x23\\n#1112 @ 474,960: 20x22\\n#1113 @ 943,946: 11x26\\n#1114 @ 590,580: 18x25\\n#1115 @ 472,370: 19x17\\n#1116 @ 804,427: 29x16\\n#1117 @ 679,42: 16x14\\n#1118 @ 318,272: 12x28\\n#1119 @ 372,878: 10x12\\n#1120 @ 685,223: 16x26\\n#1121 @ 853,19: 23x12\\n#1122 @ 532,63: 27x18\\n#1123 @ 456,320: 28x19\\n#1124 @ 888,828: 25x24\\n#1125 @ 348,461: 19x25\\n#1126 @ 873,395: 15x13\\n#1127 @ 705,451: 27x28\\n#1128 @ 730,589: 11x26\\n#1129 @ 667,727: 20x24\\n#1130 @ 101,130: 24x23\\n#1131 @ 563,688: 28x21\\n#1132 @ 5,143: 26x19\\n#1133 @ 522,671: 19x23\\n#1134 @ 481,350: 19x23\\n#1135 @ 4,125: 25x18\\n#1136 @ 118,943: 26x24\\n#1137 @ 371,834: 20x26\\n#1138 @ 523,751: 22x10\\n#1139 @ 92,181: 18x16\\n#1140 @ 904,145: 20x17\\n#1141 @ 280,513: 25x28\\n#1142 @ 43,61: 17x19\\n#1143 @ 602,643: 12x9\\n#1144 @ 499,293: 12x10\\n#1145 @ 155,345: 28x25\\n#1146 @ 572,503: 17x21\\n#1147 @ 537,595: 28x12\\n#1148 @ 256,841: 18x25\\n#1149 @ 621,431: 16x14\\n#1150 @ 657,258: 23x12\\n#1151 @ 305,436: 24x18\\n#1152 @ 907,820: 12x15\\n#1153 @ 65,744: 26x23\\n#1154 @ 230,861: 18x17\\n#1155 @ 333,12: 23x24\\n#1156 @ 248,418: 23x27\\n#1157 @ 469,958: 19x12\\n#1158 @ 35,931: 11x14\\n#1159 @ 288,563: 10x29\\n#1160 @ 43,378: 14x11\\n#1161 @ 88,739: 12x25\\n#1162 @ 804,900: 21x29\\n#1163 @ 381,76: 22x24\\n#1164 @ 30,502: 16x14\\n#1165 @ 527,603: 12x14\\n#1166 @ 956,209: 15x19\\n#1167 @ 960,546: 29x14\\n#1168 @ 188,744: 10x19\\n#1169 @ 175,744: 12x29\\n#1170 @ 133,778: 22x21\\n#1171 @ 174,205: 14x20\\n#1172 @ 690,959: 21x12\\n#1173 @ 619,491: 13x22\\n#1174 @ 813,594: 18x12\\n#1175 @ 876,607: 29x13\\n#1176 @ 900,6: 19x18\\n#1177 @ 967,721: 13x25\\n#1178 @ 189,232: 19x26\\n#1179 @ 827,553: 24x18\\n#1180 @ 402,245: 28x17\\n#1181 @ 162,896: 14x17\\n#1182 @ 914,1: 22x27\\n#1183 @ 208,134: 22x19\\n#1184 @ 526,331: 29x22\\n#1185 @ 145,202: 22x13\\n#1186 @ 409,861: 25x13\\n#1187 @ 801,730: 28x18\\n#1188 @ 624,487: 20x15\\n#1189 @ 393,687: 15x29\\n#1190 @ 279,958: 15x29\\n#1191 @ 653,395: 26x27\\n#1192 @ 179,26: 10x19\\n#1193 @ 260,76: 29x25\\n#1194 @ 859,406: 18x10\\n#1195 @ 296,932: 21x23\\n#1196 @ 301,974: 16x26\\n#1197 @ 727,757: 29x10\\n#1198 @ 657,397: 17x20\\n#1199 @ 442,937: 18x26\\n#1200 @ 29,508: 19x15\\n#1201 @ 636,245: 24x12\\n#1202 @ 960,402: 28x12\\n#1203 @ 139,256: 17x29\\n#1204 @ 168,117: 23x15\\n#1205 @ 770,785: 27x29\\n#1206 @ 752,276: 21x21\\n#1207 @ 883,889: 13x13\\n#1208 @ 62,918: 21x10\\n#1209 @ 163,517: 17x12\\n#1210 @ 470,613: 19x11\\n#1211 @ 451,661: 26x29\\n#1212 @ 211,38: 19x13\\n#1213 @ 539,439: 19x28\\n#1214 @ 339,229: 23x21\\n#1215 @ 591,542: 26x25\\n#1216 @ 41,643: 29x21\\n#1217 @ 806,823: 14x19\\n#1218 @ 628,245: 11x18\\n#1219 @ 378,619: 20x19\\n#1220 @ 250,444: 14x22\\n#1221 @ 713,891: 17x12\\n#1222 @ 144,430: 27x21\\n#1223 @ 125,200: 27x29\\n#1224 @ 525,664: 15x22\\n#1225 @ 369,485: 23x27\\n#1226 @ 868,564: 29x20\\n#1227 @ 642,700: 11x12\\n#1228 @ 951,6: 14x25\\n#1229 @ 532,331: 24x13\\n#1230 @ 937,480: 15x12\\n#1231 @ 81,65: 27x25\\n#1232 @ 153,263: 11x26\\n#1233 @ 970,364: 14x19\\n#1234 @ 143,454: 26x27\\n#1235 @ 495,574: 7x15\\n#1236 @ 850,209: 20x17\\n#1237 @ 126,965: 23x29\\n#1238 @ 870,675: 23x28\\n#1239 @ 308,376: 14x28\\n#1240 @ 578,755: 14x24\\n#1241 @ 844,481: 23x22\\n#1242 @ 734,769: 25x16\\n#1243 @ 723,219: 22x27\\n#1244 @ 159,695: 23x18\\n#1245 @ 754,285: 26x22\\n#1246 @ 345,974: 26x23\\n#1247 @ 29,69: 27x12\\n#1248 @ 181,784: 15x12\\n#1249 @ 682,616: 5x6\\n#1250 @ 208,28: 27x28\\n#1251 @ 665,234: 18x23\\n#1252 @ 961,288: 11x22\\n#1253 @ 363,57: 19x21\\n#1254 @ 662,137: 25x24\\n#1255 @ 7,41: 21x15\\n#1256 @ 693,784: 12x28\\n#1257 @ 186,543: 29x13\\n#1258 @ 596,354: 13x10\\n#1259 @ 824,705: 28x16\\n#1260 @ 468,614: 25x20\\n#1261 @ 542,10: 28x18\\n#1262 @ 231,942: 18x29\\n#1263 @ 979,39: 12x13\\n#1264 @ 345,77: 16x25\\n#1265 @ 715,127: 14x28\\n#1266 @ 618,560: 16x16\\n#1267 @ 687,397: 22x25\\n#1268 @ 880,229: 16x18\\n#1269 @ 806,358: 29x16\\n#1270 @ 106,846: 23x29\\n#1271 @ 61,299: 16x14\\n#1272 @ 644,818: 19x22\\n#1273 @ 557,157: 29x24\\n#1274 @ 29,710: 25x28\\n#1275 @ 207,585: 21x27\\n#1276 @ 83,715: 26x14\\n#1277 @ 325,51: 13x10\\n#1278 @ 717,97: 16x12\\n#1279 @ 602,139: 26x11\\n#1280 @ 26,933: 29x12\\n#1281 @ 815,755: 13x22\\n#1282 @ 786,950: 23x21\\n#1283 @ 403,978: 29x19\";","export default \"Your raft makes it to the tropical island; it turns out that the small crab was an excellent navigator. You make your way to the resort.\\n\\nAs you enter the lobby, you discover a small problem: the floor is being renovated. You can't even reach the check-in desk until they've finished installing the **new tile floor**.\\n\\nThe tiles are all **hexagonal**; they need to be arranged in a [hex grid](https://en.wikipedia.org/wiki/Hexagonal_tiling) with a very specific color pattern. Not in the mood to wait, you offer to help figure out the pattern.\\n\\nThe tiles are all **white** on one side and **black** on the other. They start with the white side facing up. The lobby is large enough to fit whatever pattern might need to appear there.\\n\\nA member of the renovation crew gives you a **list of the tiles that need to be flipped over** (your puzzle input). Each line in the list identifies a single tile that needs to be flipped by giving a series of steps starting from a **reference tile** in the very center of the room. (Every line starts from the same reference tile.)\\n\\nBecause the tiles are hexagonal, every tile has six **neighbors**: east, southeast, southwest, west, northwest, and northeast. These directions are given in your list, respectively, as `e`, `se`, `sw`, `w`, `nw`, and `ne`. A tile is identified by a series of these directions with **no delimiters**; for example, `esenee` identifies the tile you land on if you start at the reference tile and then move one tile east, one tile southeast, one tile northeast, and one tile east.\\n\\nEach time a tile is identified, it flips from white to black or from black to white. Tiles might be flipped more than once. For example, a line like `esew` flips a tile immediately adjacent to the reference tile, and a line like `nwwswee` flips the reference tile itself.\\n\\nHere is a larger example:\\n\\n```\\nsesenwnenenewseeswwswswwnenewsewsw\\nneeenesenwnwwswnenewnwwsewnenwseswesw\\nseswneswswsenwwnwse\\nnwnwneseeswswnenewneswwnewseswneseene\\nswweswneswnenwsewnwneneseenw\\neesenwseswswnenwswnwnwsewwnwsene\\nsewnenenenesenwsewnenwwwse\\nwenwwweseeeweswwwnwwe\\nwsweesenenewnwwnwsenewsenwwsesesenwne\\nneeswseenwwswnwswswnw\\nnenwswwsewswnenenewsenwsenwnesesenew\\nenewnwewneswsewnwswenweswnenwsenwsw\\nsweneswneswneneenwnewenewwneswswnese\\nswwesenesewenwneswnwwneseswwne\\nenesenwswwswneneswsenwnewswseenwsese\\nwnwnesenesenenwwnenwsewesewsesesew\\nnenewswnwewswnenesenwnesewesw\\neneswnwswnwsenenwnwnwwseeswneewsenese\\nneswnwewnwnwseenwseesewsenwsweewe\\nwseweeenwnesenwwwswnew\\n```\\n\\nIn the above example, 10 tiles are flipped once (to black), and 5 more are flipped twice (to black, then back to white). After all of these instructions have been followed, a total of **`10`** tiles are **black**.\\n\\nGo through the renovation crew's list and determine which tiles they need to flip. After all of the instructions have been followed, **how many tiles are left with the black side up?**\\n\\n[comment]: <> (PART 2)\\n\\nThe tile floor in the lobby is meant to be a living art exhibit. Every day, the tiles are all flipped according to the following rules:\\n\\n- Any **black** tile with **zero** or **more than 2** black tiles immediately adjacent to it is flipped to **white**.\\n- Any **white** tile with **exactly 2** black tiles immediately adjacent to it is flipped to **black**.\\n\\nHere, **tiles immediately adjacent** means the six tiles directly touching the tile in question.\\n\\nThe rules are applied simultaneously to every tile; put another way, it is first determined which tiles need to be flipped, then they are all flipped at the same time.\\n\\nIn the above example, the number of black tiles that are facing up after the given number of days has passed is as follows:\\n\\n```\\nDay 1: 15\\nDay 2: 12\\nDay 3: 25\\nDay 4: 14\\nDay 5: 23\\nDay 6: 28\\nDay 7: 41\\nDay 8: 37\\nDay 9: 49\\nDay 10: 37\\n\\nDay 20: 132\\nDay 30: 259\\nDay 40: 406\\nDay 50: 566\\nDay 60: 788\\nDay 70: 1106\\nDay 80: 1373\\nDay 90: 1844\\nDay 100: 2208\\n```\\n\\nAfter executing this process a total of 100 times, there would be **`2208`** black tiles facing up.\\n\\n**How many tiles will be black after 100 days?**\";","export default \"You land in an airport surrounded by dense forest. As you walk to your high-speed train, the Elves at the Mythical Information Bureau contact you again. They think their satellite has collected an image of a **sea monster**! Unfortunately, the connection to the satellite is having problems, and many of the messages sent back from the satellite have been corrupted.\\n\\nThey sent you a list of **the rules valid messages should obey** and a list of **received messages** they've collected so far (your puzzle input).\\n\\nThe **rules for valid messages** (the top part of your puzzle input) are numbered and build upon each other. For example:\\n\\n```\\n0: 1 2\\n1: \\\"a\\\"\\n2: 1 3 | 3 1\\n3: \\\"b\\\"\\n```\\n\\nSome rules, like `3: \\\"b\\\"`, simply match a single character (in this case, `b`).\\n\\nThe remaining rules list the sub-rules that must be followed; for example, the rule `0: 1 2` means that to match rule `0`, the text being checked must match rule `1`, and the text after the part that matched rule `1` must then match rule `2`.\\n\\nSome of the rules have multiple lists of sub-rules separated by a pipe (|). This means that **at least one** list of sub-rules must match. (The ones that match might be different each time the rule is encountered.) For example, the rule `2: 1 3 | 3 1` means that to match rule `2`, the text being checked must match rule `1` followed by rule `3` or it must match rule `3` followed by rule `1`.\\n\\nFortunately, there are no loops in the rules, so the list of possible matches will be finite. Since rule `1` matches `a` and rule `3` matches `b`, rule `2` matches either `ab` or `ba`. Therefore, rule `0` matches `aab` or `aba`.\\n\\nHere's a more interesting example:\\n\\n```\\n0: 4 1 5\\n1: 2 3 | 3 2\\n2: 4 4 | 5 5\\n3: 4 5 | 5 4\\n4: \\\"a\\\"\\n5: \\\"b\\\"\\n```\\n\\nHere, because rule `4` matches `a` and rule `5` matches `b`, rule 2 matches two letters that are the same (`aa` or `bb`), and rule `3` matches two letters that are different (`ab` or `ba`).\\n\\nSince rule `1` matches rules `2` and `3` once each in either order, it must match two pairs of letters, one pair with matching letters and one pair with different letters. This leaves eight possibilities: `aaab`, `aaba`, `bbab`, `bbba`, `abaa`, `abbb`, `baaa`, or `babb`.\\n\\nRule `0`, therefore, matches `a` (rule `4`), then any of the eight options from rule `1`, then `b` (rule `5`): `aaaabb`, `aaabab`, `abbabb`, `abbbab`, `aabaab`, `aabbbb`, `abaaab`, or `ababbb`.\\n\\nThe **received messages** (the bottom part of your puzzle input) need to be checked against the rules so you can determine which are valid and which are corrupted. Including the rules and the messages together, this might look like:\\n\\n```\\n0: 4 1 5\\n1: 2 3 | 3 2\\n2: 4 4 | 5 5\\n3: 4 5 | 5 4\\n4: \\\"a\\\"\\n5: \\\"b\\\"\\n\\nababbb\\nbababa\\nabbbab\\naaabbb\\naaaabbb\\n```\\n\\nYour goal is to determine **the number of messages that completely match rule `0`**. In the above example, `ababbb` and `abbbab` match, but `bababa`, `aaabbb`, and `aaaabbb` do not, producing the answer **`2`**. The whole message must match all of rule `0`; there can't be extra unmatched characters in the message. (For example, `aaaabbb` might appear to match rule `0` above, but it has an extra unmatched `b` on the end.)\\n\\n**How many messages completely match rule `0`?**\\n\\n[comment]: <> (PART 2)\\n\\nAs you look over the list of messages, you realize your matching rules aren't quite right. To fix them, completely replace rules `8: 42` and `11: 42 31` with the following:\\n\\n```\\n8: 42 | 42 8\\n11: 42 31 | 42 11 31\\n```\\n\\nThis small change has a big impact: now, the rules **do** contain loops, and the list of messages they could hypothetically match is infinite. You'll need to determine how these changes affect which messages are valid.\\n\\nFortunately, many of the rules are unaffected by this change; it might help to start by looking at which rules always match the same set of values and how **those** rules (especially rules `42` and `31`) are used by the new versions of rules `8` and `11`.\\n\\n(Remember, **you only need to handle the rules you have**; building a solution that could handle any hypothetical combination of rules would be [significantly more difficult](https://en.wikipedia.org/wiki/Formal_grammar).)\\n\\nFor example:\\n\\n```\\n42: 9 14 | 10 1\\n9: 14 27 | 1 26\\n10: 23 14 | 28 1\\n1: \\\"a\\\"\\n11: 42 31\\n5: 1 14 | 15 1\\n19: 14 1 | 14 14\\n12: 24 14 | 19 1\\n16: 15 1 | 14 14\\n31: 14 17 | 1 13\\n6: 14 14 | 1 14\\n2: 1 24 | 14 4\\n0: 8 11\\n13: 14 3 | 1 12\\n15: 1 | 14\\n17: 14 2 | 1 7\\n23: 25 1 | 22 14\\n28: 16 1\\n4: 1 1\\n20: 14 14 | 1 15\\n3: 5 14 | 16 1\\n27: 1 6 | 14 18\\n14: \\\"b\\\"\\n21: 14 1 | 1 14\\n25: 1 1 | 1 14\\n22: 14 14\\n8: 42\\n26: 14 22 | 1 20\\n18: 15 15\\n7: 14 5 | 1 21\\n24: 14 1\\n\\nabbbbbabbbaaaababbaabbbbabababbbabbbbbbabaaaa\\nbbabbbbaabaabba\\nbabbbbaabbbbbabbbbbbaabaaabaaa\\naaabbbbbbaaaabaababaabababbabaaabbababababaaa\\nbbbbbbbaaaabbbbaaabbabaaa\\nbbbababbbbaaaaaaaabbababaaababaabab\\nababaaaaaabaaab\\nababaaaaabbbaba\\nbaabbaaaabbaaaababbaababb\\nabbbbabbbbaaaababbbbbbaaaababb\\naaaaabbaabaaaaababaa\\naaaabbaaaabbaaa\\naaaabbaabbaaaaaaabbbabbbaaabbaabaaa\\nbabaaabbbaaabaababbaabababaaab\\naabbbbbaabbbaaaaaabbbbbababaaaaabbaaabba\\n```\\n\\nWithout updating rules `8` and `11`, these rules only match three messages: `bbabbbbaabaabba`, `ababaaaaaabaaab`, and `ababaaaaabbbaba`.\\n\\nHowever, after updating rules `8` and `11`, a total of **`12`** messages match:\\n\\n- `bbabbbbaabaabba`\\n- `babbbbaabbbbbabbbbbbaabaaabaaa`\\n- `aaabbbbbbaaaabaababaabababbabaaabbababababaaa`\\n- `bbbbbbbaaaabbbbaaabbabaaa`\\n- `bbbababbbbaaaaaaaabbababaaababaabab`\\n- `ababaaaaaabaaab`\\n- `ababaaaaabbbaba`\\n- `baabbaaaabbaaaababbaababb`\\n- `abbbbabbbbaaaababbbbbbaaaababb`\\n- `aaaaabbaabaaaaababaa`\\n- `aaaabbaabbaaaaaaabbbabbbaaabbaabaaa`\\n- `aabbbbbaabbbaaaaaabbbbbababaaaaabbaaabba`\\n\\n**After updating rules `8` and `11`, how many messages completely match rule `0`?**\";","export default \"pos=<64962278,33699509,27360131>, r=60979411\\npos=<29493380,-1618140,15012849>, r=73175380\\npos=<69509207,40096168,24054965>, r=62434715\\npos=<60705741,42791910,3414302>, r=74721636\\npos=<-11999029,16837080,26579357>, r=62408926\\npos=<-33519571,46247375,19754377>, r=71400573\\npos=<-60784566,36169734,27332372>, r=91108812\\npos=<-43550296,39728575,18818549>, r=78829582\\npos=<505148,39978085,29911944>, r=87738609\\npos=<-50401391,42257281,25145913>, r=78900707\\npos=<48871848,29210727,-7804593>, r=84542419\\npos=<-19444484,28525954,55545785>, r=71826044\\npos=<20160160,-32945464,25415226>, r=84767036\\npos=<15927180,32588359,-15987687>, r=61298631\\npos=<-180077362,46268455,22444210>, r=65829649\\npos=<-21673235,26221488,26875961>, r=62402398\\npos=<200125,-5524355,30829683>, r=68321056\\npos=<51376824,20621751,19730582>, r=68101239\\npos=<-21137941,36673745,2290335>, r=76000154\\npos=<-36068318,38231364,5397046>, r=86266212\\npos=<-13271734,50707706,16639112>, r=58728827\\npos=<22586908,17998548,-27551688>, r=89216757\\npos=<7380323,24395085,72783739>, r=66370052\\npos=<-29190031,25416717,35666685>, r=64801770\\npos=<116790786,-16925965,-10177510>, r=81967679\\npos=<6649440,1076902,26153379>, r=59946601\\npos=<-844654,14265703,41115815>, r=53056592\\npos=<118724722,-32274137,-2229095>, r=92493737\\npos=<78065409,34851686,30153250>, r=70137390\\npos=<173322,15783756,23456179>, r=54413074\\npos=<-28207718,26265251,-2093743>, r=97862503\\npos=<11421385,38360454,-52534358>, r=96578933\\npos=<50982999,33206055,56304583>, r=62693717\\npos=<-32084439,37296060,33027410>, r=55587577\\npos=<32445115,33667362,5819999>, r=50034532\\npos=<17348155,31455020,-36217607>, r=81240833\\npos=<37123778,21525469,-22573158>, r=95248488\\npos=<16041106,-26145162,22013324>, r=81917124\\npos=<15142080,27608451,92125859>, r=74737041\\npos=<15466073,-19214378,29020752>, r=68553913\\npos=<-27852902,35603057,37052238>, r=54664194\\npos=<-71903353,38966141,32498176>, r=94265334\\npos=<8852416,19602085,11587987>, r=53783902\\npos=<-24048371,36077656,-1334296>, r=83131712\\npos=<49863134,28264803,-5646891>, r=84321887\\npos=<-42981778,38384437,18895966>, r=79527685\\npos=<-10720679,18662085,25694592>, r=60190498\\npos=<-31466122,52063805,48514120>, r=74967511\\npos=<-15216046,24231635,-12554944>, r=97365727\\npos=<2939772,35099972,20516641>, r=93339705\\npos=<13534883,-24319804,10777292>, r=93833924\\npos=<13152102,30561540,18228707>, r=84055235\\npos=<-48442178,33144848,31900483>, r=77223158\\npos=<30650955,24595078,4737723>, r=58395037\\npos=<-18446429,6549115,9717877>, r=96006296\\npos=<16005577,32115253,30046476>, r=52433467\\npos=<6175151,34430640,25891848>, r=93443464\\npos=<11778495,27731518,82599050>, r=68450888\\npos=<-20875379,3982098,14649884>, r=96070075\\npos=<10929679,2230907,-3154492>, r=83820238\\npos=<-18641287,35229219,-1579738>, r=78818423\\npos=<1586742,45267497,27888623>, r=66314490\\npos=<-34568390,19286148,44251470>, r=84895992\\npos=<7828150,18334152,-16550261>, r=84214933\\npos=<46910004,12430834,5729112>, r=85826721\\npos=<-26143002,25845830,10837533>, r=83285972\\npos=<-31780208,39533568,31905566>, r=54167370\\npos=<-48236585,20337104,31486344>, r=90239464\\npos=<-42156009,64976729,36384455>, r=86440558\\npos=<41215981,53051654,-9468000>, r=78373935\\npos=<-43903966,39751192,35984057>, r=65498658\\npos=<-32759909,34911865,29836376>, r=61838010\\npos=<-138193932,7395355,62804269>, r=64643275\\npos=<-33867242,33114669,32334714>, r=62244232\\npos=<-17869299,78614548,32961795>, r=74910017\\npos=<-23784774,14257017,30622639>, r=72731413\\npos=<-26787767,37700775,-2493088>, r=85406383\\npos=<-28419523,38385357,-9151414>, r=93011956\\npos=<-44661446,38551759,30039394>, r=69896919\\npos=<40980118,89299022,30121438>, r=74796339\\npos=<-47119329,44550740,59415133>, r=94009072\\npos=<6644655,-6288359,4177199>, r=89292825\\npos=<-31236616,23270352,16031826>, r=85760914\\npos=<-1229623,-3650216,1960826>, r=96745503\\npos=<82074634,47697401,8845719>, r=95564762\\npos=<-21152456,26943956,28162227>, r=59872862\\npos=<-5883185,88445607,8173856>, r=97543033\\npos=<-10458066,30038636,16956701>, r=57289158\\npos=<1262950,42778652,-7019029>, r=59922685\\npos=<-127951856,8197916,75764813>, r=96669527\\npos=<-24692826,39260989,24831468>, r=54426802\\npos=<24009414,33365888,-14976089>, r=62696265\\npos=<-1473036,97465403,32234260>, r=78092455\\npos=<80817628,34883801,38764070>, r=73310145\\npos=<-42901981,30272420,23382573>, r=83073362\\npos=<27529862,16083137,59901893>, r=59960779\\npos=<-17339429,26183030,16320173>, r=68662580\\npos=<-22258385,2280424,27011662>, r=86792661\\npos=<-35076107,49286130,32780235>, r=62969985\\npos=<1593557,52867565,-16584097>, r=79246085\\npos=<11036942,-7801541,1466243>, r=89124943\\npos=<-22163120,29361860,1612627>, r=85014946\\npos=<-38361813,33317171,65987696>, r=96394051\\npos=<17085180,38963882,21570444>, r=93107283\\npos=<-21291566,30377080,31519369>, r=53221440\\npos=<-1061659,43321978,-4008804>, r=59780469\\npos=<-53238972,24812645,32884194>, r=89368450\\npos=<12448154,37780055,-32849721>, r=76448104\\npos=<-49804505,13107162,35665245>, r=97724314\\npos=<607749,37632719,2717911>, r=52867916\\npos=<-22918330,17761014,37211593>, r=67730758\\npos=<16871879,65344055,5026627>, r=54833814\\npos=<-35348693,26939695,24564346>, r=77670984\\npos=<-16760830,-14920980,35803862>, r=92847715\\npos=<-325635,27067522,-9736508>, r=76820928\\npos=<-14121994,22396825,7920878>, r=77630645\\npos=<5106947,32795347,-8780181>, r=64704308\\npos=<11912589,28408476,75006930>, r=60047768\\npos=<-3978680,37005914,25484899>, r=65950653\\npos=<-20335145,38776931,20505764>, r=54878792\\npos=<-32212365,36096797,-3890474>, r=93832353\\npos=<-24693292,27167704,17998070>, r=73354072\\npos=<-17400954,29985932,-9284364>, r=90525748\\npos=<-74832901,40157374,32219723>, r=96282331\\npos=<-27508947,38532243,28837583>, r=53965419\\npos=<-21114386,36292838,23012451>, r=55635398\\npos=<-20299388,38780568,17252771>, r=58092387\\npos=<-5585175,74525074,17592829>, r=73905407\\npos=<-19726273,34303673,15775322>, r=63473592\\npos=<58431460,18868470,4297136>, r=92342603\\npos=<-5812057,60939579,16255889>, r=61883750\\npos=<-33590826,32151634,64262515>, r=91063459\\npos=<-54279477,39233352,32473192>, r=76399231\\npos=<16362226,32317267,79038006>, r=55720265\\npos=<-59657804,36084921,26956041>, r=90443301\\npos=<-37068659,20713952,29563687>, r=80617330\\npos=<44078357,29252344,49903392>, r=53341500\\npos=<9545195,-13921113,21275958>, r=76926417\\npos=<-39797986,24324664,36792867>, r=77628157\\npos=<-28726637,63205131,49940011>, r=84795152\\npos=<-5917127,-1662172,32553476>, r=68852117\\npos=<-25852797,38825583,25949330>, r=54904177\\npos=<31889005,19969913,93206807>, r=93738153\\npos=<1075541,14930641,14652371>, r=63167812\\npos=<66005815,36005132,17600401>, r=69477181\\npos=<-37442702,27535946,46381355>, r=81649868\\npos=<3356294,31572368,-12014024>, r=70911713\\npos=<-13757129,24582269,32667864>, r=50333296\\npos=<37633911,36255238,27484223>, r=74799576\\npos=<-8176642,76784660,26311936>, r=70037324\\npos=<-4319727,-6720230,14656784>, r=90209651\\npos=<92646624,39255800,32817515>, r=77649961\\npos=<-14540944,3338214,37396819>, r=73961353\\npos=<15298852,31927704,29741600>, r=72229544\\npos=<36085740,32205550,71305641>, r=63798202\\npos=<-23152140,27821821,24061261>, r=65095416\\npos=<6165979,-12850213,31745979>, r=68764617\\npos=<-39232163,33318224,27047129>, r=72693219\\npos=<-36433216,42697299,32962812>, r=57555666\\npos=<2094207,24995515,13612356>, r=53124299\\npos=<9319535,16203421,-1093351>, r=69396792\\npos=<-23182152,28289357,52107631>, r=72362223\\npos=<-55861368,34559751,20509022>, r=94619038\\npos=<44717137,19197632,41359583>, r=55491213\\npos=<-30025513,37373729,22624825>, r=63853428\\npos=<-33941794,52164599,24813892>, r=72680687\\npos=<-48716737,39730301,29381838>, r=73431390\\npos=<14585039,36145951,-27683661>, r=70779320\\npos=<16482481,663844,67855122>, r=76070510\\npos=<-8556915,11440101,67938385>, r=90416970\\npos=<-15394065,38409080,17978049>, r=52833233\\npos=<-22782672,39498152,64364382>, r=73010615\\npos=<-46060809,34840446,17435034>, r=87611790\\npos=<7182276,63419381,14070490>, r=53554685\\npos=<9708569,-35185554,22882184>, r=96421170\\npos=<95081749,37338632,46412119>, r=92767429\\npos=<-2188119,11859471,27916648>, r=56238339\\npos=<-20992095,37048498,25211910>, r=52558058\\npos=<6715507,34217755,32725871>, r=94868252\\npos=<-57630195,49637336,30219301>, r=88436194\\npos=<-1289631,25664468,18731248>, r=50720295\\npos=<-4707940,86441538,20352413>, r=82185197\\npos=<-41601573,21198418,20809565>, r=93419943\\npos=<12179442,36433565,32661604>, r=72715733\\npos=<4691823,31275647,-4863190>, r=62722102\\npos=<-31626195,65519061,51509865>, r=91578868\\npos=<-17352996,51201735,14432319>, r=65510361\\npos=<-7438843,20332746,-14140581>, r=95073040\\npos=<8415205,9054980,56807788>, r=64699342\\npos=<-15859049,30240456,-17315126>, r=96760048\\npos=<-61403433,39561178,27128689>, r=88539944\\npos=<21743331,30209315,30319332>, r=80397843\\npos=<-61748299,27656140,37754838>, r=97208733\\npos=<-15043548,28794501,-3332106>, r=83407521\\npos=<-18943169,39015502,17929869>, r=55824093\\npos=<54508603,13735827,48599294>, r=77984192\\npos=<-29766872,25828175,18445337>, r=79319836\\npos=<-15291538,38434453,-153207>, r=70836609\\npos=<1582618,88459526,29514229>, r=68750713\\npos=<64541729,17043799,44875196>, r=80985212\\npos=<-1855319,13415003,353193>, r=81913518\\npos=<11915567,-24711784,23115779>, r=83506822\\npos=<-62226964,36131328,29564226>, r=90357713\\npos=<23707688,33887505,26151965>, r=97186530\\npos=<-25699977,18458167,33168694>, r=67899450\\npos=<-5104940,9460043,13791788>, r=75679498\\npos=<-26554788,37402906,23047085>, r=59931264\\npos=<5913829,9638265,28620391>, r=49654241\\npos=<-30630877,14610767,17099238>, r=92747269\\npos=<9659544,55703674,30481522>, r=85785722\\npos=<12465695,37589564,-34077631>, r=77848679\\npos=<-47461356,44834152,22733142>, r=80950452\\npos=<-22636174,29622217,8002232>, r=78838354\\npos=<62482313,57906363,30758084>, r=64269070\\npos=<10765616,78743330,-773086>, r=80138927\\npos=<-44180804,44168304,32894376>, r=66842795\\npos=<-51133863,36586170,29108976>, r=79265093\\npos=<-127866013,-15000225,14059055>, r=91120776\\npos=<-10513703,33068199,52303428>, r=55110684\\npos=<-10144519,39841725,29081834>, r=64355749\\npos=<-36567462,14846393,17743966>, r=97803500\\npos=<-36408114,36348125,16087909>, r=77798387\\npos=<-24147414,47290862,18773278>, r=64053319\\npos=<26373701,36186193,30810461>, r=84184002\\npos=<-12125606,30633767,24101507>, r=51216657\\npos=<-38169632,36690167,33130110>, r=62175774\\npos=<16966914,-50115904,32409607>, r=94565697\\npos=<19675641,-11326453,-3283417>, r=91362383\\npos=<7663914,21428906,-7058412>, r=71791958\\npos=<5660291,39595518,-21000355>, r=69570841\\npos=<15289484,-2619092,30537896>, r=50618026\\npos=<-12684242,26692247,8031704>, r=71786777\\npos=<-20244146,10949600,32426968>, r=70693952\\npos=<-44373957,39720674,29975729>, r=68503856\\npos=<9516592,39302333,-34313875>, r=79321389\\npos=<-7703967,33561963,9573324>, r=58395019\\npos=<12974924,30873864,28603147>, r=51841602\\npos=<-35078745,12100815,29480930>, r=87323414\\npos=<128771129,35802902,-53166442>, r=73542460\\npos=<-34676129,27939802,17402326>, r=83160343\\npos=<-6891762,58202114,-13247537>, r=89729385\\npos=<-56049615,22033972,32654400>, r=95187548\\npos=<-25555291,-10341011,32236933>, r=97485693\\npos=<-24882566,39281360,20512470>, r=58915038\\npos=<-36027407,51199479,20855481>, r=77759482\\npos=<58777106,32828352,31241845>, r=51783550\\npos=<-30007157,69255264,32534890>, r=78115508\\npos=<31482358,25371176,10291740>, r=52896089\\npos=<5064560,23610521,8824392>, r=56327049\\npos=<-65730619,50603777,37489846>, r=96747610\\npos=<-43126968,34870439,32637366>, r=69445502\\npos=<31081115,57264721,-30184499>, r=93168803\\npos=<-2271512,6766343,28476893>, r=60854680\\npos=<24346023,39050518,-47109667>, r=89481909\\npos=<103709068,40056481,32888321>, r=87841032\\npos=<35943999,90779926,8538782>, r=92823467\\npos=<-49119118,34522926,19623543>, r=88799089\\npos=<-8562161,61350549,24069820>, r=57230895\\npos=<-24474116,46048876,-13803425>, r=95714387\\npos=<-35969246,45354768,15506779>, r=77205341\\npos=<-39091837,19785590,15096128>, r=98036497\\npos=<2775602,39670036,-4278170>, r=55658886\\npos=<-31656288,67620458,21754750>, r=88910115\\npos=<5930608,-19962885,28175814>, r=79683354\\npos=<6516862,23432827,-4687251>, r=68564113\\npos=<-39629646,30648195,4910673>, r=97897079\\npos=<-45196151,29191044,15187808>, r=94643638\\npos=<-29820398,43271576,29116986>, r=55363189\\npos=<-17698926,17206926,26384735>, r=67933648\\npos=<-112523511,83737750,-12315337>, r=83821037\\npos=<-27020677,22686740,24734857>, r=73425449\\npos=<-8121064,33078096,4721296>, r=64147965\\npos=<-690334,94918297,39146268>, r=77678394\\npos=<-18419087,39246702,7050100>, r=65948805\\npos=<-33686977,22781772,26477110>, r=78254390\\npos=<-12465204,28154300,-6536426>, r=84673804\\npos=<15547707,24286280,-11256101>, r=65248505\\npos=<-4672095,28437912,-18409650>, r=88470287\\npos=<-127493080,36911765,-14261753>, r=96308298\\npos=<-69668723,36377971,28602634>, r=98514574\\npos=<34760614,14693598,-4311537>, r=81455252\\npos=<-12505937,8278580,17703639>, r=80350150\\npos=<11381840,85026569,43067987>, r=59636211\\npos=<-17210403,37535480,75767975>, r=80804611\\npos=<-9417150,-14407381,26748362>, r=90902614\\npos=<-8231710,86134334,47319494>, r=84608903\\npos=<7695050,27874105,-29127898>, r=87385154\\npos=<75063483,191154542,32325231>, r=77626626\\npos=<-14640126,55333998,16703352>, r=64658720\\npos=<-15955276,1453581,24458582>, r=83869583\\npos=<-40437645,35134398,21379639>, r=77749954\\npos=<-27944659,39982475,30756876>, r=51031669\\npos=<-29340422,27587736,32772355>, r=62806634\\npos=<-19865303,34550593,44393041>, r=55069475\\npos=<54215161,32625114,13140953>, r=65525784\\npos=<-37524289,67078935,25518057>, r=90473423\\npos=<-28744113,39850811,19431135>, r=63288621\\npos=<14493431,33730514,-9886361>, r=55488771\\npos=<-46906030,25621066,51800985>, r=98447918\\npos=<-49936639,21394236,30753144>, r=91615578\\npos=<13905315,37797710,8906379>, r=75912056\\npos=<49072725,-71717,30955466>, r=75265857\\npos=<-43612472,18934879,33143356>, r=85360535\\npos=<54764792,62768823,30801462>, r=61370472\\npos=<-17354514,-8647462,25652222>, r=94176403\\npos=<-30004907,22709643,39324677>, r=71981699\\npos=<-48348492,38596629,30030703>, r=73547469\\npos=<-45464373,9416862,32122750>, r=97751308\\npos=<-50629935,38905201,28192881>, r=77358157\\npos=<-7696937,22758619,13029136>, r=65735478\\npos=<-14456863,69432279,38464843>, r=65277400\\npos=<-2792092,37426035,-15312090>, r=74504822\\npos=<8647260,3909673,15401712>, r=65867684\\npos=<51898896,69335686,23963120>, r=71909761\\npos=<-45862007,32896553,39215554>, r=77542785\\npos=<-12295779,21692885,29945581>, r=54483826\\npos=<17314200,27369177,-16474399>, r=65617451\\npos=<-5610791,11019720,41725580>, r=61678421\\npos=<-30633381,38989342,32400312>, r=53070032\\npos=<3596065,37405033,-41969702>, r=94794940\\npos=<20748851,-4794254,49334933>, r=63490096\\npos=<-4198807,52181924,-13576452>, r=81345157\\npos=<-48992767,36169328,20495732>, r=86154033\\npos=<-12818476,-131398,31467412>, r=75308918\\npos=<-19382154,21777717,11891730>, r=79539050\\npos=<69515532,20552921,26787890>, r=79251470\\npos=<-12847815,42544188,-2757456>, r=69537883\\npos=<-50675525,44173186,33054945>, r=73181713\\npos=<-5653448,90742287,56137599>, r=95456723\\npos=<-7156558,28300317,10693374>, r=61989306\\npos=<-34951471,37143372,75129986>, r=98299956\\npos=<15132285,-36051857,32346297>, r=82399568\\npos=<-19651508,39948217,22832978>, r=50696651\\npos=<51592103,13353452,57128654>, r=83979363\\npos=<-18134592,24479702,31485744>, r=55995439\\npos=<-46865299,50879378,31911209>, r=77221577\\npos=<-52880897,37262064,29467881>, r=79977366\\npos=<3242487,46821744,90657677>, r=77160417\\npos=<-61960197,48892933,35296386>, r=89072882\\npos=<12609150,4930237,-4809074>, r=81095984\\npos=<13783970,50042996,12476829>, r=50866866\\npos=<-59595943,27572776,33045609>, r=92803904\\npos=<-21756174,19542888,19106532>, r=76933112\\npos=<-6725924,80641415,16811873>, r=81943959\\npos=<-8258311,36739034,10106891>, r=55238756\\npos=<13665043,37909829,-13470217>, r=55722045\\npos=<-34666625,38729658,9297958>, r=80465323\\npos=<8831996,-10421147,3221663>, r=92193802\\npos=<-9578261,30169862,69198601>, r=73969214\\npos=<2757758,10991411,23920944>, r=56156182\\npos=<72413336,45666661,48732306>, r=72986035\\npos=<-18275627,36242747,16261723>, r=59597564\\npos=<-7275380,26559699,1848835>, r=72693437\\npos=<31349928,29210026,-34279110>, r=93495719\\npos=<25243589,64812372,-16489208>, r=81183715\\npos=<-6727756,22771753,18947613>, r=58834772\\npos=<49125756,24024989,21910656>, r=60267092\\npos=<-46200422,25441295,31193366>, r=83392250\\npos=<-125964302,-12885695,15281781>, r=86430466\\npos=<-17838889,36405789,23321635>, r=51937895\\npos=<-7876695,38300594,32334113>, r=78305254\\npos=<-14478212,4053808,45992534>, r=81778694\\npos=<-7210793,25058770,19230816>, r=56747680\\npos=<69399475,22928967,25879498>, r=77667654\\npos=<11769768,106080398,31435278>, r=74263319\\npos=<22491109,47708767,47430176>, r=77274849\\npos=<5163234,12112154,52224450>, r=60311005\\npos=<21388193,112121996,23950535>, r=84198107\\npos=<11854618,7810724,3608585>, r=70552585\\npos=<-19465221,27555138,37498757>, r=54770688\\npos=<-16981867,47338620,8779155>, r=66929287\\npos=<-48517070,38044252,27486963>, r=76812167\\npos=<-23463118,43188329,15332352>, r=62707183\\npos=<-29090769,37238995,11456947>, r=74221271\\npos=<-26969053,36892310,35461872>, r=50900328\\npos=<4855461,7631793,49230789>, r=62105250\\npos=<16164053,56250061,-14778787>, r=66252890\\npos=<-12696990,74060913,18632912>, r=79512939\\npos=<-11158090,85825316,55169330>, r=95076278\\npos=<-58370839,37743065,33217954>, r=81236204\\npos=<-8040074,-21916336,24991131>, r=98791727\\npos=<-22746454,39894155,24726542>, r=51952052\\npos=<3611870,-22827397,21513477>, r=91528417\\npos=<9409502,-12830593,5371281>, r=91876210\\npos=<24743389,58307069,-18347292>, r=76036065\\npos=<-1514831,29926646,35359950>, r=73490702\\npos=<9692885,38912405,28037256>, r=73474380\\npos=<-11092612,23279532,12660604>, r=68978965\\npos=<5941846,31414890,48686324>, r=89543177\\npos=<-22967110,29357734,15613213>, r=71822460\\npos=<-4811838,22733015,23539193>, r=52366141\\npos=<-869682,40064915,76584165>, r=62750806\\npos=<87003962,37172222,18599177>, r=88309205\\npos=<1089299,-10803784,17879925>, r=85660872\\npos=<-60322,1038943,27716027>, r=65131898\\npos=<9799922,68787421,9826473>, r=60549195\\npos=<1538456,6569311,29627734>, r=56090808\\npos=<-15052605,36767963,67758205>, r=71404869\\npos=<-34777889,11279075,24822792>, r=92502474\\npos=<-42169366,28402008,11807997>, r=95785852\\npos=<-31208197,27756010,27616390>, r=69662172\\npos=<12381103,30910309,27270987>, r=96971309\\npos=<13274419,14484279,11339598>, r=54728242\\npos=<16752242,-5015397,26610838>, r=55478930\\npos=<-4591506,20932600,4465546>, r=73019733\\npos=<33742502,-8192258,23554566>, r=75456862\\npos=<-53885736,39610476,26837138>, r=81264450\\npos=<42144414,39100551,33173136>, r=79015831\\npos=<-62427847,53277793,29324039>, r=97769553\\npos=<186834,65169609,56706904>, r=64613207\\npos=<-6758637,31068299,7149579>, r=62367054\\npos=<12872357,37307706,21999182>, r=91269220\\npos=<-19717465,28634118,4192340>, r=80717325\\npos=<10172328,14882657,-29601515>, r=98372914\\npos=<-27156460,39128743,25830853>, r=56023179\\npos=<9795339,262575,26550461>, r=57218036\\npos=<42804662,9970105,32477225>, r=57433969\\npos=<-35466284,39491226,28058467>, r=61742936\\npos=<-42484012,51046543,40528656>, r=76982651\\npos=<-26277314,18338722,13622261>, r=88142728\\npos=<-27479154,33541048,29996215>, r=57768317\\npos=<27487196,-16183974,6607678>, r=94140198\\npos=<-43408483,30362754,22396647>, r=84475404\\npos=<-34083865,-16341298,-69437961>, r=68862509\\npos=<-55448360,37606041,20263000>, r=91405693\\npos=<1561297,38509698,-19963998>, r=73719327\\npos=<-12072990,57036169,28335042>, r=52162268\\npos=<49401983,32502946,60994262>, r=66505388\\npos=<-49749390,24096181,25512279>, r=93967226\\npos=<-35041339,44524044,2061410>, r=88891949\\npos=<74639855,19665171,25936035>, r=86115291\\npos=<-16830209,25196663,32785811>, r=52674046\\npos=<94672300,34785583,29948872>, r=87014708\\npos=<-16937760,62852205,15940667>, r=75237380\\npos=<-19537455,32504711,24736966>, r=56122227\\npos=<16210907,-16275399,22276986>, r=71614095\\npos=<-51021572,-91305724,28512534>, r=68196275\\npos=<1039446,35921137,-29435748>, r=86301480\\npos=<-34461758,63619514,30182866>, r=79286351\\npos=<2190558,28612266,-14499241>, r=77522820\\npos=<14322447,42270530,-14933759>, r=54269871\\npos=<-11203566,-58600593,-38741287>, r=80610262\\npos=<-50014629,-65172864,3628921>, r=57729130\\npos=<-14885681,84590341,26305560>, r=84558455\\npos=<-5315915,12927742,19497613>, r=66716856\\npos=<-47875413,39165223,29061799>, r=73474788\\npos=<-30375283,29702373,29418502>, r=65081001\\npos=<-40044760,25420812,39783028>, r=79768691\\npos=<841949,12791908,4023493>, r=76169061\\npos=<-1845951,17065691,24932959>, r=53673650\\npos=<67836102,39922223,17914079>, r=67076447\\npos=<5419521,-11177727,18042891>, r=81541615\\npos=<-18694788,63859170,15298129>, r=78643775\\npos=<40391578,37786396,94204042>, r=85421291\\npos=<3816605,36246616,2521481>, r=51241842\\npos=<-10643901,33366623,16345322>, r=54758292\\npos=<-12075294,33191150,-428438>, r=73138902\\npos=<39383011,29361402,81867629>, r=80501707\\npos=<-24593822,37004019,-4494796>, r=85911004\\npos=<-18329948,8369367,50708366>, r=86030681\\npos=<-25865690,39651675,41049779>, r=52626159\\npos=<-32692746,9166804,46243447>, r=95131102\\npos=<62080857,289005,27104118>, r=91764636\\npos=<-19174968,23951806,-92547>, r=89142151\\npos=<-25394919,32798246,-10181971>, r=96605275\\npos=<1627413,40070822,27971360>, r=80568987\\npos=<-1686893,25447176,-27668018>, r=97734134\\npos=<11172510,-17262185,45156681>, r=76608118\\npos=<-35392997,37877158,11683281>, r=79658928\\npos=<-8373115,9053291,20741371>, r=72404865\\npos=<-8043894,76688239,13707751>, r=82412469\\npos=<13592704,-20361,24294757>, r=55959522\\npos=<-40071674,36100385,29646874>, r=68150741\\npos=<15280219,-49424744,30961043>, r=97009908\\npos=<-12098948,26286956,19062697>, r=60575668\\npos=<-15130779,29360795,-19105890>, r=98702359\\npos=<8897876,38588524,32166255>, r=82457788\\npos=<-72101838,55873793,-60905134>, r=98715596\\npos=<101888411,32279588,27948241>, r=98737376\\npos=<-8469122,28229158,50878216>, r=56479908\\npos=<-1939276,148212,32373209>, r=63244261\\npos=<69804284,39279598,24850525>, r=62750987\\npos=<-40673983,39744713,17847834>, r=76908094\\npos=<37241320,39874614,-3031896>, r=57475287\\npos=<48897665,20334592,22693331>, r=62946494\\npos=<-19581513,-1962677,24772646>, r=90597839\\npos=<-40211555,36818947,40092546>, r=68847003\\npos=<-65501447,32844422,39241382>, r=97260132\\npos=<-21020172,14092815,17749163>, r=83004672\\npos=<22172577,-26966933,22739119>, r=83477082\\npos=<8544015,-8063259,13792200>, r=79553365\\npos=<-13503605,20024888,28468063>, r=58837189\\npos=<82125193,47768276,37107063>, r=73174599\\npos=<-46415871,40113392,31057527>, r=69071260\\npos=<23872883,39554395,-24622937>, r=66018067\\npos=<6345801,6452153,-6630829>, r=87659236\\npos=<62206726,35183223,25152050>, r=58948191\\npos=<-14577552,15601993,46408545>, r=70745990\\npos=<20991049,-32068081,15230006>, r=94905986\\npos=<-16282312,20519412,7908107>, r=81681092\\npos=<-10982170,18319292,38353503>, r=56378114\\npos=<-13213386,36315571,-7885671>, r=78609842\\npos=<129087377,89359257,-13030272>, r=68261739\\npos=<-32274885,45583202,32456025>, r=56790022\\npos=<-26841734,34304955,25484758>, r=60878399\\npos=<-28861528,55634881,9045196>, r=86839182\\npos=<17044124,49811159,79591916>, r=55282334\\npos=<-22284603,26171655,9443796>, r=80495453\\npos=<-20642245,34717724,2181818>, r=77569065\\npos=<70042045,46588603,42464760>, r=65269509\\npos=<41521600,30801999,-18091087>, r=85887326\\npos=<-41530186,39775809,32586039>, r=62994632\\npos=<73736718,39355164,37208295>, r=60201906\\npos=<-24954216,58498414,10194340>, r=84646268\\npos=<94405086,39999976,14236169>, r=97245585\\npos=<-13253115,-1205928,32769840>, r=75515497\\npos=<60537,-7588288,29935576>, r=71418799\\npos=<-29426968,13926820,20887196>, r=88439272\\npos=<161391131,31058761,-18629913>, r=75712334\\npos=<45592800,88969641,-93884561>, r=77927392\\npos=<-41832124,18047996,23565480>, r=94044965\\npos=<-43359453,31904171,12091759>, r=93189837\\npos=<9612195,-11643997,17676023>, r=78182182\\npos=<13623250,44901575,94339310>, r=68541244\\npos=<-7697886,37744634,12322120>, r=51457884\\npos=<-15183037,25683621,32926722>, r=50398987\\npos=<-16020678,39154927,17065177>, r=53627235\\npos=<-5066604,90041923,10417192>, r=96079304\\npos=<-61509640,34171803,27206287>, r=93957848\\npos=<19519464,34483356,-25661506>, r=67774301\\npos=<14629463,58754370,22693109>, r=65131685\\npos=<-2621164,48969315,-35307781>, r=98286240\\npos=<-328069,23568597,48842410>, r=50964115\\npos=<-19970916,33371223,3542502>, r=76883536\\npos=<4510759,24888011,-26261143>, r=90688673\\npos=<-1961452,14217405,72570423>, r=85676539\\npos=<-31323585,38298789,-3269911>, r=90121041\\npos=<15154149,34122409,-6604222>, r=51153968\\npos=<-38487803,31457097,31393893>, r=69463335\\npos=<-161670843,32657983,13480550>, r=79364585\\npos=<-1953071,4666263,63398461>, r=86047241\\npos=<25154749,30192805,-740145>, r=52778962\\npos=<44782710,19851671,11353158>, r=70655033\\npos=<14038643,20093435,-31811232>, r=91505798\\npos=<-7978010,22207627,15708115>, r=63888577\\npos=<5579674,43379297,29219910>, r=61456697\\npos=<-35280064,49036257,1426972>, r=94277336\\npos=<-31096827,15523488,27971278>, r=81428630\\npos=<2320615,46879887,-24093316>, r=80040604\\npos=<-2213605,24240064,9691585>, r=62108395\\npos=<15337828,104412216,24077249>, r=76385407\\npos=<-51847987,32210147,29546315>, r=83918209\\npos=<-7235404,29758016,92750482>, r=95589672\\npos=<76784750,26519426,42851735>, r=81729434\\npos=<-14043721,72661109,24007474>, r=74085314\\npos=<10216494,20923516,-8680756>, r=71367574\\npos=<-65843811,37309794,32306411>, r=90054476\\npos=<-6725881,99569933,25618773>, r=92065032\\npos=<-30799618,39233665,28992033>, r=56400785\\npos=<-15463,-3812760,48169328>, r=77359677\\npos=<-30659412,29244796,26441675>, r=68799342\\npos=<3275538,73816505,7442248>, r=74486729\\npos=<21517455,93010879,25834505>, r=63332318\\npos=<79912924,38904325,35926528>, r=65547580\\npos=<-29613052,25777829,20580696>, r=77080849\\npos=<14534407,-14105424,39755233>, r=64688006\\npos=<-3491203,23240373,13544953>, r=60532175\\npos=<-47979788,39002981,33043786>, r=69759701\\npos=<4728796,72696731,57047157>, r=67938473\\npos=<-48357028,45423038,32877155>, r=72291054\\npos=<96396869,35667249,27312355>, r=90493922\\npos=<-4529551,-11870527,20224390>, r=90002043\\npos=<-53015124,45727943,25209460>, r=84921697\\npos=<-23914823,31707927,27476394>, r=58556886\\npos=<49869121,16991249,29964238>, r=59990328\\npos=<-45824827,52960987,41815753>, r=83524934\\npos=<-13829562,-7950622,40679728>, r=87821626\\npos=<56243793,37472522,-22759323>, r=98607235\\npos=<-22556619,77616865,17460104>, r=94101657\\npos=<13482377,-5048532,30710111>, r=54682657\\npos=<-126097606,-15286203,47137229>, r=69568614\\npos=<88583527,34612152,56178649>, r=98762106\\npos=<7065163,31804333,2246618>, r=52710353\\npos=<-595279,31113625,28167392>, r=66330782\\npos=<-9842389,17124905,37226437>, r=55305642\\npos=<-35133070,57039458,29856045>, r=73704453\\npos=<27200617,39716259,37472102>, r=81112113\\npos=<-14699048,39047866,15294845>, r=54182661\\npos=<29559235,6925859,5923265>, r=73786853\\npos=<10590771,34331297,-29972938>, r=78877164\\npos=<-9410881,18965248,44581520>, r=60388943\\npos=<-21658644,75559773,49501925>, r=89643744\\npos=<22536783,38643654,-44400895>, r=85370752\\npos=<55817127,12924605,17055445>, r=82913735\\npos=<-3433833,33737891,-17771176>, r=81293433\\npos=<-10048821,21183772,37339109>, r=51565924\\npos=<-37183026,60309986,55698649>, r=96115111\\npos=<-38977396,28490079,28838434>, r=75475560\\npos=<-22556848,50963229,39101555>, r=55545071\\npos=<-28756376,13278366,17916174>, r=91388323\\npos=<-4402954,43206292,-7499986>, r=66497307\\npos=<-12484555,21398166,31927256>, r=52985456\\npos=<6002816,38389566,14771520>, r=77540883\\npos=<-1976449,37840510,4313804>, r=53648434\\npos=<86914133,45671271,11063502>, r=96160310\\npos=<-32842178,7835988,20818615>, r=98014035\\npos=<-24580654,37719318,-8602635>, r=89290322\\npos=<-39708711,37809491,28726464>, r=66999058\\npos=<-35294112,36818322,24716802>, r=67585641\\npos=<-63686278,39214632,28166862>, r=90131103\\npos=<-28073806,38290757,8052976>, r=75556591\\npos=<-7421544,32217936,18497478>, r=50532432\\npos=<14884574,-8906675,68413333>, r=87797195\\npos=<24281813,117113026,21572165>, r=94461098\\npos=<-23243472,39805387,17478590>, r=59785832\\npos=<-43495187,38137840,28819867>, r=70363847\\npos=<80370057,27807817,18693682>, r=90945322\\npos=<45451937,36300811,-31461660>, r=97689434\\npos=<-17312099,38319715,14967602>, r=57851144\\npos=<27542932,-2683483,23474149>, r=63829241\\npos=<-7195319,28426727,-20521169>, r=93116237\\npos=<-17496348,51409980,76999681>, r=88829543\\npos=<41685935,17835350,25777220>, r=55150003\\npos=<-42755650,64207191,26782260>, r=91568587\\npos=<-37551882,38731767,32395187>, r=60251360\\npos=<-10519751,34551893,4302405>, r=65491752\\npos=<67962712,39190376,38493458>, r=55878061\\npos=<20657323,33944622,-22944995>, r=66734334\\npos=<-807717,54007475,6824825>, r=59378506\\npos=<30047726,29053475,31366873>, r=85533079\\npos=<11251941,77381158,53778557>, r=62831223\\npos=<67710636,17037235,49743686>, r=89029582\\npos=<6085430,15081215,8285351>, r=64374351\\npos=<-31451876,47195055,27507881>, r=62527028\\npos=<-54725948,45220046,18647797>, r=92686152\\npos=<-28436594,29758099,65097841>, r=89138340\\npos=<-17889547,36430039,12725848>, r=62559957\\npos=<40063875,7326498,24691820>, r=65122390\\npos=<14410903,48175215,-5904535>, r=51056825\\npos=<92990006,31008211,23512447>, r=95546201\\npos=<-6708490,16279171,17938426>, r=66317186\\npos=<-2946522,37446775,1040579>, r=58285877\\npos=<7932370,-15829314,8823517>, r=92899736\\npos=<-23565632,-94707392,635137>, r=56861494\\npos=<2354469,14853131,2821508>, r=73797408\\npos=<6842560,9688960,26646239>, r=50648783\\npos=<24477545,39806952,93861618>, r=67144675\\npos=<843072,36060138,5154651>, r=51768444\\npos=<-51667078,21989609,32339683>, r=91164240\\npos=<-25807016,64296675,27731532>, r=73760137\\npos=<-49585819,33690244,31179149>, r=78542761\\npos=<12824453,30214478,32652560>, r=78437477\\npos=<3256038,31534801,39806725>, r=65584361\\npos=<-514005,79069772,-7811948>, r=98783793\\npos=<20966700,74252038,20158521>, r=49698972\\npos=<-47056301,55885219,30850041>, r=83479491\\npos=<-50578185,25345147,38512194>, r=89106955\\npos=<58188164,37782684,14105804>, r=63376322\\npos=<-8876719,17313896,37360320>, r=54284870\\npos=<-21302441,50880304,27289221>, r=56281597\\npos=<-2780397,39907458,-5818300>, r=62517536\\npos=<13732584,-34224578,51636702>, r=97490485\\npos=<-6486591,15545412,-2861389>, r=87628901\\npos=<-72098967,39168506,36379942>, r=94672253\\npos=<-29900972,43056249,32391990>, r=51953192\\npos=<-10208698,20946100,36050398>, r=50674956\\npos=<-13947241,24737355,23206829>, r=59829596\\npos=<-1334860,13267484,31851274>, r=50042439\\npos=<-28808597,36193743,49369203>, r=67346074\\npos=<15049356,9718689,8255893>, r=60802389\\npos=<51710618,27147564,44054616>, r=57229739\\npos=<51421729,-4372841,30941516>, r=81929700\\npos=<9342992,59428469,-9976197>, r=71449800\\npos=<-1360662,36515747,62021260>, r=52228089\\npos=<-36935753,39987287,33072066>, r=57703096\\npos=<-34148809,35925023,30814640>, r=61235515\\npos=<-30981494,34698612,23450657>, r=66658523\\npos=<-47392323,28652854,25150827>, r=87414960\\npos=<-59981816,26749204,28922101>, r=98136807\\npos=<-54621741,33854414,25707556>, r=88886086\\npos=<12294348,1274230,27678263>, r=52579571\\npos=<14679454,35662917,31007112>, r=63540592\\npos=<-44313460,36983180,6637006>, r=94519605\\npos=<10753343,36667136,28477350>, r=86701498\\npos=<-57840572,35699062,29888027>, r=86079793\\npos=<13742682,33180438,28833760>, r=89756878\\npos=<-31289863,36269842,28348202>, r=60498367\\npos=<10905373,66359985,-5972349>, r=72814991\\npos=<-4161447,67597514,25288023>, r=57859024\\npos=<-27645864,43876224,23931557>, r=58978478\\npos=<8271509,121523465,29599691>, r=95040236\\npos=<-2782401,-511343,24722053>, r=72397994\\npos=<5051173,25236510,10634931>, r=52903702\\npos=<-15040382,27593041,-16828555>, r=98102193\\npos=<4238261,47806341,84835125>, r=71326598\\npos=<-61314123,37115834,37671131>, r=87231235\\npos=<-14110872,23835337,25001512>, r=59100329\\npos=<-7998905,11167762,32953946>, r=57703498\\npos=<73084007,17161139,23888713>, r=89111045\\npos=<-25536438,32265853,23192868>, r=63904045\\npos=<1797388,1403057,4469249>, r=86156599\\npos=<-44663793,34147302,26946085>, r=77396749\\npos=<-10184864,35319826,56121785>, r=56348547\\npos=<-36276924,30090493,31205452>, r=68807365\\npos=<982096,46453274,22369878>, r=70998486\\npos=<-38820184,68783494,40765446>, r=91292660\\npos=<-29514672,32774254,7811421>, r=82755476\\npos=<43122064,43086885,5041005>, r=55806242\\npos=<47381532,31288601,16628844>, r=56540740\\npos=<31622065,5143808,32915845>, r=50639119\\npos=<-49386858,35120509,21697198>, r=86395730\\npos=<-36486930,44709198,21008545>, r=71575571\\npos=<-10018883,-3750791,19788555>, r=87807454\\npos=<-17776346,-1657173,17231917>, r=96028071\\npos=<15359863,111313331,28490227>, r=78851367\\npos=<26880585,69191453,17921359>, r=52789087\\npos=<-33463662,36543851,63349457>, r=85631013\\npos=<-23535276,33826241,12645701>, r=70889778\\npos=<-44888168,39629080,35928871>, r=66549852\\npos=<-6812213,36560758,-14337354>, r=78415242\\npos=<-44115407,49759400,37043809>, r=73842074\\npos=<13682839,29715933,84919669>, r=66882790\\npos=<-28165854,33363717,28150490>, r=60478022\\npos=<-21101573,30863066,13425972>, r=70638869\\npos=<-6205143,57553545,55537849>, r=62219924\\npos=<-40727938,65455354,42624924>, r=91731609\\npos=<-29215417,15615984,23966295>, r=83459710\\npos=<13205901,-26752066,29411291>, r=77961474\\npos=<-26401813,36999615,26124027>, r=57104515\\npos=<4127513,30999204,106610765>, r=96845861\\npos=<-25849569,50609781,28257653>, r=59589644\\npos=<-9657235,22797806,59260637>, r=71482122\\npos=<20541032,61964558,-4184956>, r=61328872\\npos=<-29167069,33283994,54253537>, r=75498494\\npos=<-54866383,43337996,31549945>, r=78042436\\npos=<-23674189,34457529,11999558>, r=71043395\\npos=<-18847005,37354717,48707350>, r=55561455\\npos=<-22126833,29839027,31284715>, r=54829483\\npos=<-75993662,42552205,36781424>, r=98250707\\npos=<-10297300,18192528,42645816>, r=60112444\\npos=<15483138,-12580438,-7934606>, r=98858945\\npos=<14179814,-12270194,15181825>, r=76734849\\npos=<-27125308,74373889,21430946>, r=91456233\\npos=<-4508790,70570840,16027196>, r=70440591\\npos=<-45164866,179169339,41494049>, r=97484969\\npos=<-45351714,37486569,3101059>, r=98590464\\npos=<-19443855,48692556,18970469>, r=60554103\\npos=<-36146554,38728765,26001328>, r=65242790\\npos=<39825358,27552423,91294821>, r=92179811\\npos=<44153860,44864914,-10992368>, r=74649569\\npos=<-40834374,35397453,29508031>, r=69755270\\npos=<-123298670,27168901,-27773665>, r=94471458\\npos=<-17149246,5605800,13858416>, r=91511467\\npos=<-54801220,37617263,35665278>, r=78210966\\npos=<-15768480,21253644,31439673>, r=56901457\\npos=<-42593558,39676712,30999657>, r=65743631\\npos=<-25767676,23346658,32635292>, r=63612188\\npos=<-2912207,-8822580,48360160>, r=85456702\\npos=<-9739338,88365808,29751624>, r=79741482\\npos=<-27093966,15960997,32138303>, r=72821372\\npos=<28036980,18506606,55746135>, r=53888575\\npos=<-134214273,9647236,4506989>, r=64358017\\npos=<19890059,24488272,2582255>, r=49896177\\npos=<-23191155,33856795,10722169>, r=72438492\\npos=<-30044947,35100869,13971735>, r=74798792\\npos=<2125970,49978269,31642816>, r=75231216\\npos=<13627196,-10254293,24201378>, r=66252359\\npos=<-23626959,44288632,48895281>, r=59734320\\npos=<7167214,43082274,-5343476>, r=52646492\\npos=<-70636446,38796722,28249167>, r=97416852\\npos=<-183069070,36542473,35980864>, r=86393205\\npos=<-18414672,34470995,16029665>, r=61740468\\npos=<-10559458,38679971,71163829>, r=68405071\\npos=<23468921,12992177,-10707796>, r=78261177\\npos=<74808328,38256883,26880853>, r=66747249\\npos=<23680070,19895430,10563752>, r=50297600\\npos=<13926916,24969502,98745921>, r=85211236\\npos=<-24859242,42968496,14826015>, r=64389705\\npos=<-2718846,48697342,88598212>, r=82937949\\npos=<-25395919,-623743,31662270>, r=88184234\\npos=<-41186983,24578165,27097957>, r=83337397\\npos=<-35003594,36559863,22357258>, r=69912867\\npos=<-21147193,32758020,13562579>, r=68652946\\npos=<7370858,31852482,71225592>, r=57364007\\npos=<27525081,19032410,1601541>, r=63967908\\npos=<20435445,61137635,-2268344>, r=58479767\\npos=<-11660822,26026804,7862228>, r=71598331\\npos=<103892679,40006971,30467124>, r=90495272\\npos=<-52541614,38605617,18413437>, r=89348967\\npos=<-10832833,-3230192,18903016>, r=88986344\\npos=<-40741338,18729499,41307509>, r=88681080\\npos=<15013512,36108421,10452513>, r=86391853\\npos=<-24834850,27432320,55483393>, r=78247825\\npos=<-15641288,-111977756,9692114>, r=58664226\\npos=<-481141,30980322,11455586>, r=51871568\\npos=<-167120789,44816609,12761610>, r=91542278\\npos=<-29791909,4469315,26226407>, r=92922499\\npos=<-35594851,19227642,15517969>, r=94675558\\npos=<-30246592,33676757,75601814>, r=97533399\\npos=<-11797525,-1615379,14907299>, r=92331920\\npos=<-11036816,15592998,70323765>, r=91129476\\npos=<-12384035,966910,20534515>, r=84708923\\npos=<55911330,428497,21171752>, r=91387741\\npos=<-1241899,83717203,25832427>, r=70514718\\npos=<-37603267,16783897,38566875>, r=84748139\\npos=<-48922056,15254756,28786943>, r=98706817\\npos=<10799343,-3692806,47170550>, r=65425790\\npos=<-43140008,36930599,26410779>, r=73625059\\npos=<-38023001,32907307,49929791>, r=80407232\\npos=<91242225,36000541,36125027>, r=79978789\\npos=<26900588,-38621334,28978354>, r=93620365\\npos=<-15205958,19115775,39259698>, r=60711784\\npos=<-16924594,22375236,31513993>, r=56861677\\npos=<51482780,304303,15148492>, r=93106682\\npos=<-22641198,27067388,893509>, r=88506755\\npos=<-44738072,20199470,31675915>, r=86689198\\npos=<14837184,58893088,-30910149>, r=86354177\\npos=<29171996,-6531550,49926447>, r=74242261\\npos=<-27746800,35582797,24391750>, r=61598603\\npos=<-31671097,31400624,21705849>, r=72391093\\npos=<-17447595,37783438,51807366>, r=56833329\\npos=<24252823,1784286,56916822>, r=67997514\\npos=<27943726,28637708,-5478752>, r=61861407\\npos=<-7725325,3567155,19143163>, r=78841313\\npos=<-45520706,54375570,26749482>, r=84534743\\npos=<-33727936,-107672033,23756640>, r=54222238\\npos=<26329848,44238015,21984204>, r=91735416\\npos=<7843780,23629510,-25095442>, r=87448447\\npos=<-9522754,-4803623,22649614>, r=85503117\\npos=<62536377,24165383,2568362>, r=92879287\\npos=<-16680831,-17389695,30605014>, r=97291917\\npos=<6913788,12193774,22462662>, r=52256070\\npos=<11072043,66715915,-14978278>, r=82010096\\npos=<-14963034,37129052,11381598>, r=60278702\\npos=<-28677619,8360612,22897478>, r=91245861\\npos=<21768495,-4544429,49106219>, r=64031219\\npos=<-8725230,86931580,31983984>, r=75060999\\npos=<11749268,-2864741,25968800>, r=58973604\\npos=<-9780471,17462586,11459921>, r=74684271\\npos=<4345313,46498434,-24701683>, r=78242808\\npos=<54817012,31939826,-1628199>, r=81582048\\npos=<-17275334,26800303,5007873>, r=79293662\\npos=<-6290081,25304774,67301557>, r=73648577\\npos=<-18174477,46687307,19652201>, r=56597536\\npos=<-72713597,39464033,33130862>, r=93945000\\npos=<87984585,25155843,33008938>, r=86896567\\npos=<13534905,34832341,32312688>, r=74501241\\npos=<-1028128,-24420077,30402205>, r=88872430\\npos=<16551597,-12119920,63610922>, r=84541113\\npos=<-5099048,68286011,23704205>, r=61068800\\npos=<-46573000,34296061,11853569>, r=94249663\\npos=<-12517539,26102738,7615462>, r=72625640\\npos=<-73078366,42387749,32118087>, r=94736300\\npos=<-8451384,37373995,13026564>, r=51877269\\npos=<-18119369,25796535,26650374>, r=59498807\\npos=<-52454389,38795297,46370421>, r=85391468\\npos=<-15222816,30737451,86214520>, r=96061623\\npos=<-16279683,52814713,-16311770>, r=96794880\\npos=<1735272,-7094391,18246810>, r=80938751\\npos=<164267,18031109,20196537>, r=55434455\\npos=<75381013,22571250,28949175>, r=80937623\\npos=<-14680973,14378438,32140872>, r=61988309\\npos=<21572294,47492727,-22432634>, r=66136081\\npos=<5896490,-14194831,24672584>, r=77452054\\npos=<-53651015,39633601,23917941>, r=83925812\\npos=<2446161,39155278,-29176423>, r=81401383\\npos=<30429782,39009834,31095482>, r=90613472\\npos=<-12927720,13813578,65470296>, r=89946344\\npos=<-12860074,12522341,45093800>, r=70793260\\npos=<14099541,6094930,19048856>, r=54582998\\npos=<-56626391,49592615,42215448>, r=91358079\\npos=<9215627,16436354,16616954>, r=51557655\\npos=<3703572,31505390,7214277>, r=51403098\\npos=<26374087,2118092,18138858>, r=63194020\\npos=<2710081,60784168,74224628>, r=75222119\\npos=<11145345,1109408,17068444>, r=64503250\\npos=<-35021290,35208094,22185118>, r=71454587\\npos=<-5661232,17174695,31029408>, r=51283727\\npos=<-43398596,46504264,32444880>, r=68845926\\npos=<6037610,30875043,67064209>, r=55513361\\npos=<8918602,38028404,-46583165>, r=93462778\\npos=<53757375,50864660,-10017784>, r=89278111\\npos=<-18891995,32694156,-7252937>, r=87277193\\npos=<3973238,24231953,72883587>, r=70040134\\npos=<-29102487,27806374,50097529>, r=76755686\\npos=<89668045,29264724,30362923>, r=87117043\\npos=<-56387545,35852451,24487675>, r=89873823\\npos=<-13785808,30259557,5146863>, r=72205730\\npos=<46382842,57876153,-880671>, r=79778491\\npos=<-24534922,36658550,30868376>, r=50834535\\npos=<-43445539,17949436,30850586>, r=88472061\\npos=<-2418006,19891097,80803484>, r=88692463\\npos=<-5459196,74139554,11942422>, r=79044298\\npos=<-50805394,52098229,41098913>, r=86925910\\npos=<-22118273,20681012,25661101>, r=69602476\\npos=<102892864,28524906,32661082>, r=98783512\\npos=<24261924,-18959433,12297848>, r=88000381\\npos=<4541621,37385185,32484679>, r=59967577\\npos=<95261882,39542630,32859318>, r=79936727\\npos=<10053765,105048878,37376269>, r=75294845\\npos=<-21567500,75101380,14733305>, r=93324012\\npos=<-49480678,40144720,36903915>, r=71601593\\npos=<-27090985,34653362,57661518>, r=75460909\\npos=<20708620,-15092411,49961818>, r=74374949\\npos=<4001586,70176423,25821400>, r=51741519\\npos=<36791999,32107249,-13619118>, r=75380545\\npos=<49437451,19152579,27517844>, r=59843685\\npos=<-27501140,36760354,35282760>, r=51385285\\npos=<-21521476,34023288,25053065>, r=56271470\\npos=<44828541,3432935,13806237>, r=84666111\\npos=<-36952105,23473014,19445591>, r=87859807\\npos=<-32750287,36809410,37272455>, r=58575065\\npos=<5745706,37034670,-7348990>, r=58395093\\npos=<31120384,99551391,59441556>, r=96287203\\npos=<49569826,23946920,13828823>, r=68870726\\npos=<-30461356,37709679,22238267>, r=64339935\\npos=<-5846098,36161775,8057723>, r=55452906\\npos=<-23614352,6878762,12035579>, r=98526380\\npos=<-11609881,37578646,32966793>, r=94553822\\npos=<21077783,34707280,41047900>, r=66866463\\npos=<52489317,9738037,11444042>, r=88384271\\npos=<-12862820,31085389,1035245>, r=74568651\\npos=<-30533897,45741772,32254236>, r=55409415\\npos=<10542595,112926591,19598151>, r=94173891\\npos=<-18784801,71034184,15662401>, r=85544569\\npos=<-40201043,30394930,31202339>, r=72430102\\npos=<-48348412,56319952,30812261>, r=85244080\\npos=<-12568958,-4308051,12812445>, r=97890967\\npos=<1418261,39131269,16944475>, r=84234927\\npos=<-13289173,31125692,83583761>, r=91108957\\npos=<63587623,35032882,48843325>, r=66010365\\npos=<-23607219,57114162,7479370>, r=84629962\\npos=<-38359213,53638507,62326827>, r=97247926\\npos=<-23830684,13048522,32993560>, r=71615066\\npos=<-11124892,33026285,54208378>, r=57668700\\npos=<-14110642,59175458,28214718>, r=56459806\\npos=<45411312,39746514,32746702>, r=94183838\\npos=<-38858635,43806987,2573733>, r=91479853\\npos=<-16953863,58477605,2671704>, r=84147929\\npos=<-45685795,38113930,45318177>, r=78251785\\npos=<-22123210,46685159,46028210>, r=57760031\\npos=<88766284,47985543,32158728>, r=79231397\\npos=<-22166779,37130667,-17638622>, r=96501167\\npos=<82876919,25125276,38395194>, r=84759389\\npos=<-8527838,14259395,9569820>, r=78525131\\npos=<3309367,18240716,14225712>, r=58050996\\npos=<4398076,21255791,98234463>, r=97942675\\npos=<76784268,16480778,32583400>, r=84796767\\npos=<-28315125,8061848,24416890>, r=89663067\\npos=<-30985640,51471225,68297782>, r=93678016\\npos=<42377368,29160182,6137385>, r=64156437\\npos=<39337916,23248081,11359120>, r=61807360\\npos=<-12449993,30050946,18006594>, r=58218756\\npos=<-64720403,53380657,30439215>, r=99049790\\npos=<-44759494,35340079,11400453>, r=91845264\\npos=<-12413738,25868563,21618750>, r=58752769\\npos=<28907416,46943683,-19719584>, r=70209222\\npos=<11053996,3816931,15008327>, r=63947061\\npos=<14164136,38377959,-34185076>, r=75469336\\npos=<-8253967,72469220,20983708>, r=71127441\\npos=<-26871421,39502215,20198929>, r=60996584\\npos=<-5685472,20446099,39305382>, r=49906654\\npos=<-58767682,26772882,32681852>, r=93139366\\npos=<-12369233,-179740,56763678>, r=94674657\\npos=<-8051872,18153482,20684197>, r=63040526\\npos=<-46489759,38674950,23386140>, r=78255022\\npos=<38122751,12413615,21380363>, r=61405645\\npos=<-37825950,39615841,19068842>, r=72967574\\npos=<830958,30943749,58479374>, r=52066641\\npos=<10457774,25675491,7091987>, r=50601123\\npos=<24359223,23909424,-7861793>, r=65388227\\npos=<-48364158,31002356,45031500>, r=87755037\\npos=<1255354,-10043756,17689199>, r=84925615\\npos=<16828977,-1541106,67641476>, r=77715323\\npos=<-9619519,17076985,54841935>, r=72746264\\npos=<-41657180,39397714,30871164>, r=65214614\\npos=<30354871,22010496,10068361>, r=55352903\\npos=<-22302003,28814089,30681730>, r=56632681\\npos=<-65516893,43874463,24806572>, r=95972913\\npos=<-11833305,27320317,-14574046>, r=92913500\\npos=<53268705,11920698,24942141>, r=73482507\\npos=<-22749840,34083743,32412374>, r=50080044\\npos=<51353326,42694743,714745>, r=67972318\\npos=<17063477,-12722205,60623850>, r=81644312\\npos=<-67307613,36694348,31470345>, r=92969221\\npos=<-56436795,39348693,20441901>, r=90472495\\npos=<-5292776,74069520,69013846>, r=91299733\\npos=<55004048,32652824,-3046848>, r=82474792\\npos=<-44882310,26172976,13599398>, r=98936318\\npos=<-1522088,33261813,-21196940>, r=83283589\\npos=<-15716162,62106475,4137339>, r=85073435\\npos=<-26462671,-5096266,32790478>, r=92594767\\npos=<-30959297,17290003,12522888>, r=94972699\\npos=<160035999,16754966,-4430091>, r=56608686\\npos=<-5395352,38779740,-32938954>, r=93381122\\npos=<20583457,79819006,18729271>, r=56311481\\npos=<-49430448,43322152,39428094>, r=75104155\\npos=<9154251,92590109,55377438>, r=81736686\\npos=<45936186,4545748,29838883>, r=68628191\\npos=<-22470278,25656499,-2794367>, r=93434452\";","export default \"initial state: ###....#..#..#......####.#..##..#..###......##.##..#...#.##.###.##.###.....#.###..#.#.##.#..#.#\\n\\n..### => #\\n..... => .\\n..#.. => .\\n.###. => .\\n...## => #\\n#.### => .\\n#.#.# => #\\n##..# => .\\n##.## => #\\n#...# => .\\n..##. => .\\n##.#. => .\\n...#. => .\\n#..#. => #\\n.#### => #\\n.#..# => #\\n##... => #\\n.##.# => .\\n....# => .\\n#.... => .\\n.#.#. => #\\n.##.. => .\\n###.# => #\\n####. => .\\n##### => #\\n#.##. => #\\n.#... => #\\n.#.## => #\\n###.. => #\\n#..## => .\\n#.#.. => #\\n..#.# => .\";","export default \"Your ferry made decent progress toward the island, but the storm came in faster than anyone expected. The ferry needs to take **evasive actions**!\\n\\nUnfortunately, the ship's navigation computer seems to be malfunctioning; rather than giving a route directly to safety, it produced extremely circuitous instructions. When the captain uses the [PA system](https://en.wikipedia.org/wiki/Public_address_system) to ask if anyone can help, you quickly volunteer.\\n\\nThe navigation instructions (your puzzle input) consists of a sequence of single-character **actions** paired with integer input **values**. After staring at them for a few minutes, you work out what they probably mean:\\n\\n- Action `N` means to move **north** by the given value.\\n- Action `S` means to move **south** by the given value.\\n- Action `E` means to move **east** by the given value.\\n- Action `W` means to move **west** by the given value.\\n- Action `L` means to turn **left** the given number of degrees.\\n- Action `R` means to turn **right** the given number of degrees.\\n- Action `F` means to move **forward** by the given value in the direction the ship is currently facing.\\n\\nThe ship starts by facing **east**. Only the `L` and `R` actions change the direction the ship is facing. (That is, if the ship is facing east and the next instruction is `N10`, the ship would move north 10 units, but would still move east if the following action were `F`.)\\n\\nFor example:\\n\\n```\\nF10\\nN3\\nF7\\nR90\\nF11\\n```\\n\\nThese instructions would be handled as follows:\\n\\n- `F10` would move the ship 10 units east (because the ship starts by facing east) to east 10, north 0.\\n- `N3` would move the ship 3 units north to **east 10, north 3**.\\n- `F7` would move the ship another 7 units east (because the ship is still facing east) to **east 17, north 3**.\\n- `R90` would cause the ship to turn right by 90 degrees and face **south**; it remains at **east 17, north 3**.\\n- `F11` would move the ship 11 units south to **east 17, south 8**.\\n\\nAt the end of these instructions, the ship's [Manhattan distance](https://en.wikipedia.org/wiki/Manhattan_distance) (sum of the absolute values of its east/west position and its north/south position) from its starting position is `17 + 8` = **`25`**.\\n\\nFigure out where the navigation instructions lead. **What is the Manhattan distance between that location and the ship's starting position?**\\n\\n[comment]: <> (PART 2)\\n\\nBefore you can give the destination to the captain, you realize that the actual action meanings were printed on the back of the instructions the whole time.\\n\\nAlmost all of the actions indicate how to move a **waypoint** which is relative to the ship's position:\\n\\n- Action `N` means to move the waypoint **north** by the given value.\\n- Action `S` means to move the waypoint **south** by the given value.\\n- Action `E` means to move the waypoint **east** by the given value.\\n- Action `W` means to move the waypoint **west** by the given value.\\n- Action `L` means to rotate the waypoint around the ship **left** (**counter-clockwise**) the given number of degrees.\\n- Action `R` means to rotate the waypoint around the ship **right** (**clockwise**) the given number of degrees.\\n- Action `F` means to move **forward** to the waypoint a number of times equal to the given value.\\n\\nThe waypoint starts **10 units east and 1 unit north** relative to the ship. The waypoint is relative to the ship; that is, if the ship moves, the waypoint moves with it.\\n\\nFor example, using the same instructions as above:\\n\\n- `F10` moves the ship to the waypoint 10 times (a total of **100 units east and 10 units north**), leaving the ship at **east 100, north 10**. The waypoint stays 10 units east and 1 unit north of the ship.\\n- `N3` moves the waypoint 3 units north to **10 units east and 4 units north of the ship**. The ship remains at **east 100, north 10**.\\n- `F7` moves the ship to the waypoint 7 times (a total of **70 units east and 28 units north**), leaving the ship at **east 170, north 38**. The waypoint stays 10 units east and 4 units north of the ship.\\n- `R90` rotates the waypoint around the ship clockwise 90 degrees, moving it to **4 units east and 10 units south of the ship**. The ship remains at **east 170, north 38**.\\n- `F11` moves the ship to the waypoint 11 times (a total of **44 units east and 110 units south**), leaving the ship at **east 214, south 72**. The waypoint stays 4 units east and 10 units south of the ship.\\n\\nAfter these operations, the ship's Manhattan distance from its starting position is `214 + 72` = **`286`**.\\n\\nFigure out where the navigation instructions actually lead. **What is the Manhattan distance between that location and the ship's starting position?**\";","export default \"62: 110 112 | 92 68\\n85: 38 92 | 102 110\\n63: 92 6 | 110 23\\n82: 110 | 92\\n99: 110 122 | 92 54\\n33: 110 61 | 92 103\\n24: 110 92 | 110 110\\n76: 3 92\\n109: 26 92 | 81 110\\n94: 92 78 | 110 28\\n17: 110 115\\n61: 92 110 | 110 82\\n25: 9 110 | 61 92\\n114: 47 110 | 63 92\\n21: 30 82\\n103: 82 82\\n69: 5 110 | 43 92\\n73: 110 116 | 92 69\\n52: 92 81 | 110 103\\n22: 119 92 | 50 110\\n108: 37 92 | 35 110\\n2: 71 92 | 20 110\\n119: 103 110 | 88 92\\n102: 101 92 | 49 110\\n92: \\\"b\\\"\\n91: 92 54 | 110 3\\n64: 92 115 | 110 24\\n68: 92 30 | 110 81\\n89: 115 110 | 26 92\\n80: 61 110 | 81 92\\n19: 110 73 | 92 1\\n16: 115 92 | 103 110\\n15: 123 110 | 58 92\\n115: 110 110 | 92 110\\n70: 92 30 | 110 9\\n40: 110 96 | 92 99\\n50: 88 110 | 115 92\\n18: 26 92 | 48 110\\n81: 92 110\\n107: 110 30 | 92 115\\n38: 84 110 | 12 92\\n44: 40 92 | 66 110\\n27: 125 92 | 2 110\\n41: 92 128 | 110 118\\n56: 81 92 | 30 110\\n88: 110 92\\n13: 75 92\\n55: 75 110 | 26 92\\n12: 13 92 | 52 110\\n28: 122 92\\n121: 75 92 | 24 110\\n113: 92 81 | 110 54\\n98: 103 110 | 3 92\\n6: 92 62 | 110 126\\n96: 75 92 | 9 110\\n9: 82 92 | 92 110\\n0: 8 11\\n32: 104 92 | 91 110\\n116: 110 32 | 92 67\\n104: 92 81 | 110 30\\n5: 110 109 | 92 105\\n117: 110 22 | 92 59\\n128: 92 24 | 110 9\\n66: 92 98 | 110 21\\n46: 76 92 | 89 110\\n36: 92 90 | 110 127\\n20: 110 115 | 92 3\\n4: 48 110 | 30 92\\n26: 92 82 | 110 110\\n39: 30 110 | 115 92\\n127: 61 110 | 9 92\\n84: 110 104 | 92 78\\n100: 97 92 | 68 110\\n106: 110 7 | 92 18\\n123: 110 64 | 92 68\\n111: 110 74 | 92 46\\n42: 114 110 | 19 92\\n58: 28 92 | 16 110\\n47: 110 15 | 92 124\\n54: 92 92 | 110 92\\n51: 110 117 | 92 111\\n130: 92 41 | 110 106\\n30: 92 92 | 110 110\\n72: 17 110 | 109 92\\n129: 130 92 | 108 110\\n14: 85 110 | 51 92\\n53: 87 92 | 44 110\\n112: 92 30 | 110 122\\n45: 61 82\\n105: 75 92 | 61 110\\n90: 110 122 | 92 9\\n122: 110 92 | 92 110\\n83: 110 33 | 92 56\\n118: 110 61 | 92 75\\n74: 120 92 | 78 110\\n29: 110 65 | 92 60\\n31: 14 92 | 10 110\\n110: \\\"a\\\"\\n87: 36 110 | 94 92\\n57: 92 48 | 110 81\\n78: 92 115 | 110 54\\n97: 92 48 | 110 122\\n1: 110 27 | 92 34\\n95: 92 107 | 110 86\\n79: 110 55 | 92 77\\n37: 92 109 | 110 25\\n126: 4 110 | 39 92\\n101: 45 92 | 80 110\\n59: 110 70 | 92 105\\n7: 61 92 | 48 110\\n48: 92 92\\n35: 104 92 | 57 110\\n120: 48 92 | 48 110\\n34: 29 110 | 79 92\\n93: 54 92 | 26 110\\n71: 115 110 | 61 92\\n125: 121 110 | 45 92\\n60: 122 92 | 54 110\\n86: 54 110 | 9 92\\n49: 97 110 | 91 92\\n3: 110 110\\n23: 110 95 | 92 72\\n65: 92 103 | 110 115\\n10: 129 110 | 53 92\\n8: 42\\n11: 42 31\\n77: 103 92 | 81 110\\n67: 93 92 | 112 110\\n75: 92 110 | 92 92\\n124: 83 110 | 100 92\\n43: 92 113 | 110 56\\n\\nabbabbbbaaabbbbabbbababaaabaabaabbaabbba\\nbabaaaabbaaabbbbbbbbbaba\\nbbbbaaaabaaabbabaababbbabaaaaaababaabaaaaabbabbb\\nbaabbbbbbbaababaababbbabbababbbbaaaabbbbbabaabbabaaababb\\naabbaabbbbbaabbbbaaabaab\\nbbaaabbaaaabababbbbaabaa\\nabbbbbababbaabaabaaaabbbaaaabaab\\nabaabbbbabaaabaabbbbaabbabaabaaabbaaabbbabbaabbbaabbbabb\\nbaabbbbbaabbaaabbabbabaa\\nbabbabbbabaabaaaaabbababaaaabaaaabbababbabababbaaababaaa\\naaababaabababbbbabaaaaab\\nbbabaabaabbaabaabbbbbbab\\nbbbbaaaabaaabbabbbbbbaababaabbaabaabbaab\\naaabbabbbabababbaabbabba\\nabbbbbbabbababbbbabbabbabbabaabbaaabbaab\\nbbbbabaaabbaabbabaaabbbababababbabaabbaabbabbbaa\\naabaaaaabaabaaabaaabbaababbbaaababbbbbbabbbbabababbbabbaabaaabaa\\nbaaaababbaaaaaabaabbbabbaaabaaab\\nabbabbbaaabaaabbaaaaabbb\\nababaaaababaaaaaaababbaa\\nbabbabbabbababababbaaabb\\nbbabbaabaaabbabbababaaababababaaaaababaabbaababb\\nbbababbbbbabaaabaaabaaaa\\nabbaaabaaaabaabbbbbaaaba\\naaaabababbbbabaabaabaaabbabbabbabaaababaaabaabbaabaaabbabbaaaabababbbaab\\naabaababaaaaaabbaabaaabbbabbbaaabaabaaaaabbaaaba\\nbababaaaabbaabbbaaaabbab\\nabababaabbbbbaababbaaaabbabaabbbabbbbaaaabaaabbbabbbbaba\\nababababababbbaaababbbba\\nababbabbabaabbbaabaaaabbaaaaaaaaaaabaaaabbbababb\\naaabbabbbaaabaaaabaabaaa\\nabbbbabbabbbbaaabbbbabbbbabaaaababbbabaababbaabbabaaabba\\nbbbababaaaaabaaabaabaaabbaababba\\naaaabbbbbbabababbbaaabab\\naabaababbbbbaabaabaaabaaabababbbbababbabbbbabbaa\\nbabbabbaabababaaabbbabaa\\nbaaaaaaabbabababbbaabaaa\\naaababaaaaabaaaaabaaabbaabaaaaab\\nabaaabaabaaabaabaaabaaaabbaabaaabbbbbbab\\naaabbbabaababbbbbaabaaba\\nbababbbaabababaabababaab\\nbababbbaaaabaaaabbbaaabbabbaaabb\\nababaaabbababaaabbabbbbabaabaabaabaababb\\nbbabbaabbabaabbbabbabbbaaabbaabaaaaaaaababbbbaaaabbaabab\\naaababababaaaabbaaaaabba\\nbabaababbbbabababaabaaaaababbabaabaaabba\\naaaabaaaabababaaaaabbaaa\\naabaaaaababbbaaaabbbabababbabbaa\\nbbbbaababaabbbabbbbabbaa\\nbaaaaaabaabaaaaaabbaabbaabbabbbbbbbabbabbbbbabbbabaabbab\\nababababbaaaaaabaabaabbb\\nabbbababababbbaababbaabb\\naabbaaabaabbaabbaaaaaabbbbaaabbaabbbaaaa\\nbbabbbbaaababaababbbbbbaabbbbbabbabbabbb\\nbabbbabaabaabbbabaabbaab\\nbbabbbabababbbabaababbbaaabaaaababbbbaba\\nbabbaaaabbbabbbbabbaaaba\\nbbbbababbbababbbbbabbbabbbaabbbbaaabbaaa\\nababbbaababbbabaaaaaaabaabaaaaaabbabaabbaaaaaabababaaabaaaaaababbbbabbbbaababbaabbbbaaab\\naabbbabbaabbaabbbaaabababaaabaabbbabbaba\\nbbbabaabbbabbaabbaabaaaababbababababbbba\\nabaabbbabaaaaabbabaaabbb\\nbababbabaabaabaaaabbbbaabbababba\\naabbaaabaabbbabbaababaaa\\nbaababbbbbabaabaaaaabbab\\nbbbbabbaabbbbbbbabbbaaaaaaabaabababaaaaaabababbbbaababab\\nbaaaabbabbaaaaaababaaaaaabaabbbbababbbbb\\nbaababbbabbbbaaabbaabaaa\\nbbbabbabbbbbabbbbaaaaaaaaaabbabaabaababb\\nbbbbbbaabaabbbaaabbbaaba\\nbbbababaaabbbbbbbbbbababaabaabaababbbbba\\nabbaabbaabbaaaababaaaaababaabaaaaabbbaabaabaaaabaabbabbbbabaabba\\nbaaaabbbaaabbaabaabbbabababbaaab\\nabaaabaaabababaababbbbbb\\nbbbbaaaabbabaabaabaaabaabaabbaaa\\nbbaaabbbbaaaaaaabaabbbbbbbbaabbbaaaaabbb\\nabbaabbabaaabbabaaabbbbabbababba\\nbaabaaaaaabbabaaaabaabbbbaabbaab\\nbabbbababaaababaabaabbaa\\naabbbbaaababbbaaabaaaaab\\nbbaaabbbaabaaabaabbbabba\\nbabbbaaabababaaababbbaab\\naaaaaaaaabbbababaaabbaab\\nbbaabaabbabbbaaababbbaaabbbbbaabbbababba\\nababababbaaabbabbababbbbbbbbabba\\nabbaabbababbbabaabbabbbabbaaaaababbbabababaabbaa\\naabbbabaaaabbbbbababbbbbbabbaaabbabaababaabbabab\\nbabbbaaababaabbbbbbabbaa\\nababaabaaabbaaababaabbbb\\naabaabaaaabbbbaaaabbabaa\\nbaaaabbbbbbababbaabaababaabbabaaababbbbabaaabbbbbbbaaabbabbbbbbaaaaaaabaaaaaabbbbbbaaaba\\nbaaabbabbabbbabaaaabaaba\\nbaaaabbbbbbbbaababbbbbbb\\nbaaaabbaaabbbbbbaababaaa\\naabaababbaaaababaabbabba\\naabbbbaaaabbaaaabaababba\\nbbaaabaaaaaabbbabbabaabababbabbaaababbababaabbab\\nabbabbbaaabaaabbabbabbaa\\naaaaabbbbbbbbbbbabaababbababbbbabbbabbbaabaababb\\nbbbbababbbabaabababbbabaaabaabababaaaabbabaabbabbbaabbab\\nbabbbabbbababbbbabbaabbbabaaaabbbbabbaabaabbabaaabbbbaab\\nbaabaabbaaababbaaababbbbbbaaabbbabaaaaabbbbbaaabbbbaaaaa\\nabaaababaaaabababbaabbab\\nabababaaaaaabaaababbabba\\nabbbaaabbaabbbbbbaaababb\\nbaabbbbbbbbbabbbbbaabbba\\nabaaabaaabbbbbabbbbabbba\\nbabbbabbaabaabaaabaaaaaa\\naaabbabbabaaababbbbabbabbabaaaabaabbababbbbbabba\\naabaaaaaababaaaabababaaaabbbbbbababbaabaabbbaaaa\\nabaaaabbbbbabaaaaabbbbababaabaaa\\naaabbbabaaaabaaaabbabbab\\nbbbbaabbbabbbabbbaaabbbabaabaabbbabbabbbabaaabbaabbababb\\nbabaabbbbbbbababbbaabaababbaaabb\\nabbbbabbbbbbbbbababbaabb\\nabaaaabbaabbbbaabaabbbbbbabbabbababbbbbbabbabbaabababaab\\naaabbabbaaaabbbaabbbabaa\\nbabbbabaabababaaababbaba\\nabbaabbababaaaaaaababaaa\\naabbbabbabababbbabbbbbaa\\naababbbbbaaaaabbbaabbaab\\naabbaabaaabaabaaaabbbaab\\nabaabbbabababaaaaabababb\\nabbbbbbaabaaabaababbabbb\\nbaabaaaaaaabbabaaabbaabbaabbaaab\\nbaababbaababbaabbbbabbaa\\nababababbabaaaabbaaabaab\\nabbabbbbabbbababaabababb\\nbbabbabbbbabaaabaabbbbba\\naaaaaabbbaaaaabbabbababb\\nbaaabaaababbbabaaababbbbbbaabbab\\nbbbbbbbababaababaababbaa\\nbaaaaaaaabaabbbaababbabbbaaaaaabbaabaaaaababbbbaaabaabaa\\naaabbbabbaaaabbbbabbbabababaaabababaabba\\nbbbabbabababbabbbabaaabb\\nbbaaabaaaaaaaaaababaaabb\\naabaabbaaabbbaabbaaabaaaababbaab\\nabbbbaaabbabbbbbbbbbbbaabbabbabbbabbbbab\\naaababaabaababaabbbaabab\\nbaabaabbbbabbbabababbaaa\\nabbbaaabaabaababbbbbababababbaabbabaaaaaabbbbbaa\\naabbbbbbbbbabbbbabaabaab\\nbababaaabbbabbbbababbaba\\nbbabaabbbababaaabaaaaabb\\nbbbbbbaababaababababbbbb\\nbababbbbabbbbbabbaabaaba\\naabaababbbbbbbbabaabbbabbbabbbabbbabbaabaabaaabbababbaba\\nababbbabbaaabbabababbbbbababaabaaabaabaabbbaaaaaaaaabbaabbbababbaaabbabbbbaabbaa\\nbbabbbabaaabbabaabaabaaa\\nbbabbaabbbaaaaabababbbbb\\nbbbbbbaaababbabbaababbaa\\nbbbbbbaabbabababaaaabaab\\nabbaaabbabbababbabababbaaabbbbababbaabbbabbbbbab\\nbbbbababbabbbabbbbaabaaa\\nbbaabaabbababbaaaabbaaaabaaaaaba\\nabbaabaaababbabbabbbabaaaaaabaab\\nbaaaababbbabbabbbbbbaabbabbaaaaabaabbbaaaaabbaaaabaaaaab\\nbbbbbbbabaabaaabbbabbbbaaabbbbababbaaabb\\nbbaaabaaabbaaaaaaaabbaaa\\nbabaabbbabbabbbbbaaabbbbababaabb\\nbbbbabbbbababbbabbabbbaa\\nbaaaaaababbaaaabbbbaabba\\nabbbaaabbbbbababaabbbbbb\\naabbaaaaaababaabbabaabbbbabbaabaaaaaaaaaaababbab\\naaabbabbbbbabababbbbbbab\\nbabaabaabbbabaaaaaabbababaababba\\nabaabbbaabbbbbababaaaaab\\naaabbabbaabababbaabbbbba\\naabaaabaaaaabbbaabbbaabaababbbbbbbbbaabbbbbbaabbbaabbaaa\\nabbaabbbbaaaabbbabbbaabb\\nbbaaabbaaaababaabbbabaababaaaabaaabbbaabbbaababbbaababba\\nbabaababbabaaaaaaaaaabaabbbbbaababbabbaa\\nbbaaabbabbabbbabaaaaabbb\\naaaabababbababbbaabbbbababbaaaaabaaaaaba\\nbbabaabbbbbbbbbaabaaaaab\\nbbabaaababaaababbaaaabaa\\naabbaaabaabbbabaabbbabaa\\nbababaaabbbbbbbabababaaaabaaaaab\\nabaaaabbaaaaababaaaaaaba\\nbaaaabbaaaababababaabaabbaaaaabbbaababba\\nbbababbbbbaaaaabaabababb\\nbbbabbbbbbbbaababbbbaabaabbbbbaa\\nbbbabbbbabaabaaaababbbbaababaabb\\nbbbbababbabbbabbbabbabaa\\nbaaabababaabbbaabbabaabababbabbaabbaabab\\naaababbabaaaaaaabbbaaaba\\nbaaaaaabaabaaabaaabaabba\\nbabbaabababababbaaabbaaa\\nbbbababaaaaaaaabbbbaaaab\\nbababbaabbbabaabbaaaaaba\\nabababbbbbbbabababbabbaa\\naaabbbabbaaabbabaabababa\\naaaabbbababaabbbabbaaaaaabaababbbabbabab\\nbbaaaaababaaabaababaaaabbabaabbbaaaabbaa\\nabbabaabaabbaaabbababbbabaaabaab\\nabbbababaaabbabbaaabbaab\\nabbabbbbabaaababaaabbbaa\\naababaababbaabbbaababbaa\\nbabaabaaaaabaaabbbbbaaab\\naababbbbbaababbbbaabbabb\\nbbbbaaaaabaaaaabbbbaabaabbababbabaaabbaabbbaabab\\nababababbaaaabbbbbbaabbbabbbbbaa\\nbbabbbbbbbababbbbabbabab\\nbbbbbbbbbbabbaabbabbbaaaaabbbabaaabbbbba\\nbbabbbabaabbaaabbbbabbba\\naabaabbbbbaababbaabababa\\nbbaabaabbbbbababbbbbbaaa\\nbababbaaaaaaaabbabbbbaaabbbabaababbbbababbabbbaaabbbaabb\\naabbbbbbbbbbabaabbbbbaaa\\nababbbaabbbaabbbbaaaaaabababaaababbbababbbabababbbaabbbb\\naabbbbbbbaabbbabbbabbaaa\\nbababbababaaaabbabaabbab\\naababbbbababababaaabbaaa\\nbbbbababbbabbbabbaababaa\\nabbbbaaabbaaabbbbaaaaabbaaaaabba\\nabbaabbabbaabaabbabbaabb\\nbaaaabbbaaabbbbabaaabaab\\nbaaabaaabbaababaaaabbaab\\nbaabbbabbbbbbaabbabaabbbbaababab\\nbbabababaaabbbababaababa\\naabaabaabbabbbbababbaaababbbabbbaabbabaabbbbabbabbbbbbbb\\nabaaaababbbbababaabababb\\nabbabbbbaaaabbbbabbabbbbababaabb\\naababaabaaaaabaababaaaba\\nabbbbaaabbaaaaabaaabbaaa\\naabaaabaaabbaaaaaaaabaab\\nbbaaabbbbbbababaaabababa\\nbbbabbabbaaaababbabaabbbaabbbbbbabbaaaaabbababba\\nbbbbababbaaaaabbabbbbbabbaabbabb\\nbbabaabbbbbbaabbbaabbbabaabaaaaabaabbaaa\\nabbaaaabbbbbabbbabaabaaa\\naaabbbbaaaababbabaaaaaba\\nbababbaabaaaabbaaaabbaaa\\nababababaaaabaaaababbaab\\naabaaababbabaabaabaabbbb\\nabbaabbbbbbbabbbbbbbbaabbbababbbaaabbaaabbababaa\\nabbabbbbaaaabaaababbbabaabbbabaaaabbabaa\\naababbbbbaabaabbbbbabaabaababbbbbbbbaaabbbabbaaa\\nbabaaaabbbabbaabbaababba\\nbbabbbabbbbbabaabaaaabaa\\naaaaaabbaabbbababaaabaab\\nabaaaababbbbbbaaabaabaab\\nabaabbbabaaaaabaaaaabbaaaaaababbabbbaabb\\nbbbbaaaaabbaabbabbbbabbbbbabaabaaaabaaab\\nbbabaaabaababbbabbababbbababbaaa\\nbbbbbbbbbbabaaabbaabbabb\\nbbbabbbbabbaabbbbaababbbabbababb\\nbbaaabbabaabbbaabaababab\\nbbabaabaabbbababbaaabbabbbbbaaab\\nabbbbaaaababababbabaabbbabbbbbbb\\nbabaaaaaaabaaabababaababbabbaabbbbaabaaa\\nbaaaabbabbaababaabbababb\\naaaaaaabbaaaabbbbbbaaaaa\\naabaaaaabbbabaabbaababaa\\nabbabaabbbabbbbbbaabaaaaaaaabbaaaaabbaab\\nbaaaabababbbbaaabaababaa\\nbabaaaaabaaabbbbaaabaaaa\\naaabbababaaaaaaaabbbabaa\\nbbabaaabbaaaababaaabaaaa\\nbbaaabbbbabbbbbaaabbbbbaaabbbbbabbabaabababbbbbaabbabbaabbbabbbaaaaaaaababbbbababaabaabb\\naabaaaaaaabababababbabaaaaabbaaa\\nbbbabaaabbaaaaaabbbaaaab\\nabaaaaaabbabaaaabbbaabbabbababaa\\nbbaaabbaaabbbabaababbbbb\\nbbabaaabbababbbababaaaabbabaaaba\\nabbabbbabaaabbbaaabaaaab\\nbaaabbbbbabbbaaabbbaaabb\\nbbaaabbaababbbababaaabba\\naaaaabaaaabbbbabaabbbbaaaababbbbbabaabbbbbabbbaa\\nbbaaaaaaabababbbbabbbbaa\\nababbabbaabaaaaaaaababbb\\nbabbabbabaabaaabbabaababbbbaabbbbbababababaababb\\nabbaaaaabababbbbaaaabababbaaaaabaabaabbb\\nbbaaabbbbaaaabbbaaabbaaa\\nbbabaaabbaaaaaaabbabbaba\\nbbabaabaaabaaabbbaaabababaaaabaa\\nbbbbababbbbabaaababbbaaaababababbaabbbaaabaabbaaaaabbbbb\\nbbaaaaabbbaaabaabaababab\\naaaabaaabaaabbbaaababbab\\naabbaababbabbbbbabbababa\\nbaaaaaaaaabbaabaaabbbbabbaaaaaababaababb\\naabbaaabababababaaaaabbb\\naabaaaaabbbbaabaaaaabaab\\nbbaaaaabbbbabaaaabbbabba\\nbabaaaababbabbbbbbbaaaaa\\nbbbbaabaaaabbbbababbaabaabbbababaabaaaabbaababba\\nbababbbbbabbbaaabbabbaba\\nabbaaaabbabbbaaabaabbabb\\naabbbababaaaababbabbbbab\\nabaaabaabbbbabababbbaaababbabaaababaabba\\nbbbabbabaaabbabbabbabbbabaaababbaaaababababbbbabbabbabaaabaaabaaaaaabaaababbaabb\\nabbbaaabbabaaaaabababbbabababbbbabaabbaa\\naabaaaaabaababbbbaaaaaba\\naaaaaaabbabaaaababbbbaab\\naabaaababbaaabbabaaabaaaaabbaaaababaababbbbbbbbbabaaaaab\\nbbbbbbbbbbaabababbbbbbbbaabbabbb\\nabbbbbbaaabbbbbbaaaaabaabbbbababbabbabab\\nbaaababaabbbaaabababbbbb\\nbababbbabbabaaabbbabababbbbbabbaabbbabbb\\nbaaabbbabaabbabbbbabbaba\\nababbbbabbaaaabbbaababbbaaabbbbbbbabbbabaabaabaabbaabbaabbbaabbaaabaabba\\nbababbbaababbabbaabaabaabbbbaaab\\naaabaabaaabaabbabbaabbaaabbbaaab\\nabaaababbbbbbaabbaabbaab\\naaabbabbaaaaaabbaaabaabb\\nbbbabbabbbbabaabbbabbbabbabbaabbabbaaabb\\nbbaababaabbaabaaaabbbbba\\nababaaaabaabbbaaaaaababb\\nbabaabababaaabaabbbabbbbbbbbbbbbbabaabbbabbbbbaaabbaababbaaabaababbbbaba\\nababbabbbaababababbababbbbabaabaababbabbaabbbbaa\\nbaaaabababbaababaaabaaaaaaabbbaabbababbabaaaaaabbaaabbaaaabaaaaababbbbababbabaab\\naaabbbbaabbabbbbbababaaabababbbbabaabaabaabbbaaaabbbbaab\\naabbbbbbabbaaaabaaabaabb\\nbbbaabbbaaaaaaabbbaabaabbababbbaabababbaabbaaabb\\nbbbbaaaababbbabababaaabb\\nbbaaabbbbababbbababbbaab\\nbbabbabbaabbbbabaaaabababaababaa\\nabaaabaaabaaababbaababaa\\naabaaabbbaabaaaabbbbbbab\\nbaabaaabbabaabababbbabaa\\nababbabbbaabbbbbbabbabaa\\nabbbbaaabbbabbbbbababaaa\\nbbbbbbaabababaaaabaababa\\naabbaabaabaaaabbbaabbaba\\nbbbbbbaaaabbaaaaaabbaabaaaaaabbb\\naaaabbbbaaaaabaabaaaaaabaaabaabb\\nabaaababbaaaababaaaaaaaaabaabbabababbaab\\nbabababbabbabaabaabaabbb\\nbabaaaabbbabbabbbaababab\\naaabbababbbbbbbaabbbbabbbbbbaabbaaabbabbaaaabababaaabbaaababbaab\\nabaabbbabaaaabbbabbbababbaaaabbbbabbabaa\\naabbbbaababbaababbbaabaa\\nbbaabababbaababaaaabbbaa\\nbabaababbbbbabaaaabaaabaabbabbbbaaaaaabbbbaababbabaabaaaaabbbaaababbbbbb\\nbaababbbbaaaaaaabbabbaab\\naaaabbbaababababbbbbbabb\\nbbaaaaaaababbbaaaabbabbabbabaaababbbbbbabbbaaaaabbaababbbaababaa\\naaaaaaabbbaaabaabbbabaabbbabaababbaaabaabbaababb\\nbabaaaabaabbbbaabaaaaaabbaaaaaba\\naabbbaabababbbabbabaaabababbbbbabaababbaaabbaabaaabbaaaabaabbbbbbaaaababbbaabaab\\nbabaaaaaababbbabaabababb\\nbabbabbbabbaababbabbbaab\\nbaabbbabbabbbabbabbbbaaaaaaaaaaaaabaabbaaaababbbabbbaabb\\nbbbaabbbbababbabbbbaaabb\\nbabaabbbbaabaaabaaabababbbaabbbbbbbabbba\\nbababbabbaaabbbabbbbbabb\\nbbabbbabbbabbbbbbbbaaaab\\nbaabaaaaabbaaaabababaaaaaaabbaaa\\nababbbaabbabbabbbaabbbba\\nabbaabbbaaaabbbbaaaaabba\\nbbaababbbbababaaabbaababbabbabaababbbbab\\nbbbabbbbaaaaaabbbbaabaaababaaabbaaaababb\\nbaaaaaabbbbbbabbbbaabbaaababbbbb\\nabbbbbbbababbaaaababaabababbabbaabaaabaababaaaaaabababab\\nababababbbaaaaaabababbbbabaaabbb\\nbaaabbabbbabbbbbbbaaaaabaabababa\\nbaaababaabbaaaaaabababaababbaababaaaabbbbbbbbaaaabaabbaa\\nabbbbbbaababbaabbababaaaaabbbbbaaababbbbaaabbbbb\\naaababaaabaaabaaabaaabbb\\nbaabaaaabbbbbbaabbaabbba\\nababbbabbbbbabbababbabab\\nbbbababaababbbaaaaaaaaaaaaaabababaababab\\naababbbbbabababbbbaaaabb\\nbbaaaaaabbabaabaababbbba\\nbbabaabaabbabaabbaabbabb\\nabbbabaabbbbbbabaaaaabaababaabab\\nbaabbbaabbbababaaaaabbab\\nbabaabababbaabbbabaabbbb\\naabaaaaaababbabbabaabbbb\";","export default \"Now, you need to figure out how to pilot this thing.\\n\\nIt seems like the submarine can take a series of commands like `forward 1`, `down 2`, or `up 3`:\\n\\n- `forward X` increases the horizontal position by `X` units.\\n- `down X` **increases** the depth by `X` units.\\n- `up X` **decreases** the depth by `X` units.\\n\\nNote that since you're on a submarine, down and up affect your **depth**, and so they have the opposite result of what you might expect.\\n\\nThe submarine seems to already have a planned course (your puzzle input). You should probably figure out where it's going. For example:\\n\\n```\\nforward 5\\ndown 5\\nforward 8\\nup 3\\ndown 8\\nforward 2\\n```\\n\\nYour horizontal position and depth both start at 0. The steps above would then modify them as follows:\\n\\n- `forward 5` adds `5` to your horizontal position, a total of `5`.\\n- `down 5` adds `5` to your depth, resulting in a value of `5`.\\n- `forward 8` adds `8` to your horizontal position, a total of `13`.\\n- `up 3` decreases your depth by `3`, resulting in a value of `2`.\\n- `down 8` adds `8` to your depth, resulting in a value of `10`.\\n- `forward 2` adds `2` to your horizontal position, a total of `15`.\\n\\nAfter following these instructions, you would have a horizontal position of `15` and a depth of `10`. (Multiplying these together produces **`150`**.)\\n\\nCalculate the horizontal position and depth you would have after following the planned course. **What do you get if you multiply your final horizontal position by your final depth?**\\n\\n[comment]: <> (PART 2)\\n\\nBased on your calculations, the planned course doesn't seem to make any sense. You find the submarine manual and discover that the process is actually slightly more complicated.\\n\\nIn addition to horizontal position and depth, you'll also need to track a third value, **aim**, which also starts at `0`. The commands also mean something entirely different than you first thought:\\n\\n- `down X` **increases** your aim by `X` units.\\n- `up X` **decreases** your aim by `X` units.\\n- `forward X` does two things:\\n   - It increases your horizontal position by `X` units.\\n   - It increases your depth by your aim **multiplied by** `X`.\\n\\nAgain note that since you're on a submarine, `down` and `up` do the opposite of what you might expect: \\\"down\\\" means aiming in the positive direction.\\n\\nNow, the above example does something different:\\n\\n- `forward 5` adds `5` to your horizontal position, a total of `5`. Because your aim is `0`, your depth does not change.\\n- `down 5` adds `5` to your aim, resulting in a value of `5`.\\n- `forward 8` adds `8` to your horizontal position, a total of `13`. Because your aim is `5`, your depth increases by `8*5=40`.\\n- `up 3` decreases your aim by `3`, resulting in a value of `2`.\\n- `down 8` adds `8` to your aim, resulting in a value of `10`.\\n- `forward 2` adds `2` to your horizontal position, a total of `15`. Because your aim is `10`, your depth increases by `2*10=20` to a total of `60`.\\n\\nAfter following these new instructions, you would have a horizontal position of `15` and a depth of `60`. (Multiplying these produces **`900`**.)\\n\\nUsing this new interpretation of the commands, calculate the horizontal position and depth you would have after following the planned course. **What do you get if you multiply your final horizontal position by your final depth?**\";","export default \"You talk to the Elves while you wait for your navigation system to initialize. To pass the time, they introduce you to their favorite [marble](https://en.wikipedia.org/wiki/Marble_(toy)) game.\\n\\nThe Elves play this game by taking turns arranging the marbles in a **circle** according to very particular rules. The marbles are numbered starting with `0` and increasing by `1` until every marble has a number.\\n\\nFirst, the marble numbered `0` is placed in the circle. At this point, while it contains only a single marble, it is still a circle: the marble is both clockwise from itself and counter-clockwise from itself. This marble is designated the **current marble**.\\n\\nThen, each Elf takes a turn placing the **lowest-numbered remaining marble** into the circle between the marbles that are `1` and `2` marbles **clockwise** of the current marble. (When the circle is large enough, this means that there is one marble between the marble that was just placed and the current marble.) The marble that was just placed then becomes the **current marble**.\\n\\nHowever, if the marble that is about to be placed has a number which is a multiple of `23`, **something entirely different happens**. First, the current player keeps the marble they would have placed, adding it to their **score**. In addition, the marble `7` marbles **counter-clockwise** from the current marble is **removed** from the circle and **also** added to the current player's score. The marble located immediately **clockwise** of the marble that was removed becomes the new **current marble**.\\n\\nFor example, suppose there are 9 players. After the marble with value 0 is placed in the middle, each player (shown in square brackets) takes a turn. The result of each of those turns would produce circles of marbles like this, where clockwise is to the right and the resulting current marble is in parentheses:\\n\\n```\\n[-] (0)\\n[1]  0 (1)\\n[2]  0 (2) 1 \\n[3]  0  2  1 (3)\\n[4]  0 (4) 2  1  3 \\n[5]  0  4  2 (5) 1  3 \\n[6]  0  4  2  5  1 (6) 3 \\n[7]  0  4  2  5  1  6  3 (7)\\n[8]  0 (8) 4  2  5  1  6  3  7 \\n[9]  0  8  4 (9) 2  5  1  6  3  7 \\n[1]  0  8  4  9  2(10) 5  1  6  3  7 \\n[2]  0  8  4  9  2 10  5(11) 1  6  3  7 \\n[3]  0  8  4  9  2 10  5 11  1(12) 6  3  7 \\n[4]  0  8  4  9  2 10  5 11  1 12  6(13) 3  7 \\n[5]  0  8  4  9  2 10  5 11  1 12  6 13  3(14) 7 \\n[6]  0  8  4  9  2 10  5 11  1 12  6 13  3 14  7(15)\\n[7]  0(16) 8  4  9  2 10  5 11  1 12  6 13  3 14  7 15 \\n[8]  0 16  8(17) 4  9  2 10  5 11  1 12  6 13  3 14  7 15 \\n[9]  0 16  8 17  4(18) 9  2 10  5 11  1 12  6 13  3 14  7 15 \\n[1]  0 16  8 17  4 18  9(19) 2 10  5 11  1 12  6 13  3 14  7 15 \\n[2]  0 16  8 17  4 18  9 19  2(20)10  5 11  1 12  6 13  3 14  7 15 \\n[3]  0 16  8 17  4 18  9 19  2 20 10(21) 5 11  1 12  6 13  3 14  7 15 \\n[4]  0 16  8 17  4 18  9 19  2 20 10 21  5(22)11  1 12  6 13  3 14  7 15 \\n[5]  0 16  8 17  4 18(19) 2 20 10 21  5 22 11  1 12  6 13  3 14  7 15 \\n[6]  0 16  8 17  4 18 19  2(24)20 10 21  5 22 11  1 12  6 13  3 14  7 15 \\n[7]  0 16  8 17  4 18 19  2 24 20(25)10 21  5 22 11  1 12  6 13  3 14  7 15\\n```\\n\\nThe goal is to be the **player with the highest score** after the last marble is used up. Assuming the example above ends after the marble numbered `25`, the winning score is `23+9=`**`32`** (because player 5 kept marble `23` and removed marble `9`, while no other player got any points in this very short example game).\\n\\nHere are a few more examples:\\n\\n- `10` players; last marble is worth `1618` points: high score is **`8317`**\\n- `13` players; last marble is worth `7999` points: high score is **`146373`**\\n- `17` players; last marble is worth `1104` points: high score is **`2764`**\\n- `21` players; last marble is worth `6111` points: high score is **`54718`**\\n- `30` players; last marble is worth `5807` points: high score is **`37305`**\\n\\n**What is the winning Elf's score?**\\n\\n[comment]: <> (PART 2)\\n\\nAmused by the speed of your answer, the Elves are curious:\\n\\n**What would the new winning Elf's score be if the number of the last marble were 100 times larger?**\";","export default \"1101,1,29,67,1102,0,1,65,1008,65,35,66,1005,66,28,1,67,65,20,4,0,1001,65,1,65,1106,0,8,99,35,67,101,99,105,32,110,39,101,115,116,32,112,97,115,32,117,110,101,32,105,110,116,99,111,100,101,32,112,114,111,103,114,97,109,10,82,1266,26,290,428,9,676,880,16,340,1578,839,23,32,721,88,837,118,543,198,836,870,105,44,214,184,52,330,213,1224,1211,481,1707,409,78,1096,995,420,808,50,65,635,1186,228,5,359,290,1241,757,323,11,447,522,8,170,265,632,321,9,1707,1005,1194,466,137,982,905,373,158,601,247,373,202,432,168,694,785,568,144,576,1006,143,1506,298,1790,146,182,535,895,42,296,278,469,118,292,1375,206,235,1545,63,81,49,1405,660,41,1009,226,133,324,1250,113,10,687,223,78,10,745,21,55,1041,149,519,57,589,123,901,416,200,112,35,6,873,353,539,665,75,207,80,787,322,1026,178,19,630,12,263,1136,71,220,143,688,101,88,1600,16,141,55,64,436,19,889,267,470,884,31,546,846,601,15,84,399,83,1054,4,1417,766,525,162,640,73,2,110,189,494,85,44,263,618,583,263,591,1139,21,1593,187,115,520,142,887,3,12,565,78,88,114,803,157,307,1007,1365,1063,1481,431,410,125,19,1123,3,433,73,273,25,438,314,111,369,1188,526,516,509,1,186,143,1335,689,436,1002,260,791,12,36,380,80,306,173,45,24,856,1892,255,11,12,1221,422,8,1214,327,851,85,375,115,325,213,725,720,669,465,577,1,28,331,123,297,267,1586,478,259,572,204,365,461,618,364,5,630,377,26,259,331,956,164,89,115,1328,823,48,625,922,236,577,1113,251,156,846,261,500,73,1607,281,267,64,2,392,115,682,1833,861,1093,1165,52,1643,59,180,787,298,274,304,381,196,511,352,793,1043,984,30,85,190,109,276,303,251,1601,939,726,5,213,915,235,780,43,1212,1466,353,364,507,129,1109,1307,113,109,342,756,898,1015,63,949,127,887,175,91,409,1069,88,600,101,434,1021,477,1073,22,549,145,712,730,160,7,123,27,566,689,172,1496,543,154,345,442,3,860,47,69,319,487,17,1086,1305,329,788,738,688,421,139,1629,499,824,276,13,1033,885,522,140,328,113,311,297,252,33,168,1059,94,469,1816,2,107,149,652,350,200,173,367,100,229,219,400,43,283,1551,752,278,99,648,190,190,337,44,191,462,454,544,261,142,1204,231,924,209,858,768,211,223,186,1452,687,320,343,444,94,1231,285,324,431,36,309,705,672,69,1082,83,269,515,369,117,951,489,117,249,47,350,1408,93,203,800,1151,526,785,721,240,74,605,501,533,512,337,12,720,787,1521,894,112,187,170,1020,339,77,565,691,1141,129,1020,60,505,1383,178,1262,1302,750,743,1108,43,634,135,738,810,628,1807,938,530,61,1384,42,79,276,336,1434,1286,393,145,9,94,945,113,76,88,856,78,1750,499,994,527,1102,266,1164,796,143,726,480,357,577,910,460,448,379,402,1576,1353,257,1044,651,1206,44,126,353,1099,934,892,379,710,988,1041,367,116,377,546,1222,830,259,10,6,385,856,343,793,490,165,367,1022,1065,95,135,426,184,270,227,456,673,90,1363,1127,387,93,138,202,184,1071,134,15,813,134,200,80,144,128,1502,574,868,487,118,42,48,1135,1107,57,418,1093,1508,229,26,154,652,94,1254,171,502,407,276,1098,18,1000,345,150,123,211,1517,1005,590,1413,63,80,510,502,76,476,47,405,186,143,344,286,1277,934,64,512,12,1026,264,68,1420,10,245,10,352,6,585,567,48,428,816,1525,180,346,350,34,100,42,1354,699,265,445,1719,425,8,604,129,111,71,110,1170,703,36,317,198,104,655,95,1046,327,161,853,400,224,797,1221,794,684,321,1279,1,95,1253,671,203,43,220,55,90,1606,359,52,775,76,422,403,305,614,196,244,102,519,122,451,1610,79,709,336,1374,735,478,1123,658,906,615,688,561,518,39,1084,608,54,739,416,1648,1838,1280,1039,35,552,299,142,56,1217,1356,30,12,102,731,1343,224,452,304,1808,546,583,710,33,149,1126,565,314,745,22,115,263,813,113,52,308,944,981,441,544,129,1258,299,885,717,536,253,3,612,29,130,1099,1455,38,501,578,13,347,729,166,772,230,518,488,430,1093,140,16,120,1603,794,174,1361,1657,825,444,176,815,1353,469,264,191,988,12,104,11,1518,1096,347,606,350,18,1376,430,182,1229,131,111,731,174,111,304,715,35,410,701,78,46,390,291,1008,1779,620,2,1378,199,331,334,708,446,1141,773,159,702,716,13,582,161,259,90,180,607,539,611,312,622,151,522,921,150,522,273,421,842,111,21,159,148\";","export default \"You board your plane only to discover a new problem: you dropped your boarding pass! You aren't sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.\\n\\nYou write a quick program to use your phone's camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.\\n\\nInstead of [zones or groups](https://www.youtube.com/watch?v=oAHbLRjF0vo), this airline uses **binary space partitioning** to seat people. A seat might be specified like `FBFBBFFRLR`, where `F` means \\\"front\\\", `B` means \\\"back\\\", `L` means \\\"left\\\", and `R` means \\\"right\\\".\\n\\nThe first 7 characters will either be F or B; these specify exactly one of the **128 rows** on the plane (numbered `0` through `127`). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the **front** (0 through 63) or the **back** (64 through 127). The next letter indicates which half of that region the seat is in, and so on until you're left with exactly one row.\\n\\nFor example, consider just the first seven characters of `FBFBBFFRLR`:\\n\\n- Start by considering the whole range, rows `0` through `127`.\\n- `F` means to take the lower half, keeping rows `0` through `63`.\\n- `B` means to take the upper half, keeping rows `32` through `63`.\\n- `F` means to take the lower half, keeping rows `32` through `47`.\\n- `B` means to take the upper half, keeping rows `40` through `47`.\\n- `B` keeps rows `44` through `47`.\\n- `F` keeps rows `44` through `45`.\\n- The final `F` keeps the lower of the two, row `44`.\\n\\nThe last three characters will be either `L` or `R`; these specify exactly one of the **8 columns** of seats on the plane (numbered `0` through `7`). The same process as above proceeds again, this time with only three steps. `L` means to keep the **lower half**, while `R` means to keep the **upper half**.\\n\\nFor example, consider just the last 3 characters of `FBFBBFFRLR`:\\n\\n- Start by considering the whole range, columns `0` through `7`.\\n- `R` means to take the upper half, keeping columns `4` through `7`.\\n- `L` means to take the lower half, keeping columns `4` through `5`.\\n- The final `R` keeps the upper of the two, column `5`.\\n\\nSo, decoding `FBFBBFFRLR` reveals that it is the seat at **row `44`, column `5`**.\\n\\nEvery seat also has a unique **seat ID**: multiply the row by `8`, then add the column. In this example, the seat has ID `44 * 8 + 5 = 357`.\\n\\nHere are some other boarding passes:\\n\\n- `BFFFBBFRRR`: row `70`, column `7`, seat ID `567`.\\n- `FFFBBBFRRR`: row `14`, column `7`, seat ID `119`.\\n- `BBFFBBFRLL`: row `102`, column `4`, seat ID `820`.\\n\\nAs a sanity check, look through your list of boarding passes. **What is the highest seat ID on a boarding pass?**\\n\\n[comment]: <> (PART 2)\\n\\n**Ding!** The \\\"fasten seat belt\\\" signs have turned on. Time to find your seat.\\n\\nIt's a completely full flight, so your seat should be the only missing boarding pass in your list. However, there's a catch: some of the seats at the very front and back of the plane don't exist on this aircraft, so they'll be missing from your list as well.\\n\\nYour seat wasn't at the very front or back, though; the seats with IDs `+1` and `-1` from yours will be in your list.\\n\\n**What is the ID of your seat?**\\n\";","export default \"Generator A starts with 699\\nGenerator B starts with 124\";","export default \"A debugger program here is having an issue: it is trying to repair a memory reallocation routine, but it keeps getting stuck in an infinite loop.\\n\\nIn this area, there are sixteen memory banks; each memory bank can hold any number of **blocks**. The goal of the reallocation routine is to balance the blocks between the memory banks.\\n\\nThe reallocation routine operates in cycles. In each cycle, it finds the memory bank with the most blocks (ties won by the lowest-numbered memory bank) and redistributes those blocks among the banks. To do this, it removes all of the blocks from the selected bank, then moves to the next (by index) memory bank and inserts one of the blocks. It continues doing this until it runs out of blocks; if it reaches the last memory bank, it wraps around to the first one.\\n\\nThe debugger would like to know how many redistributions can be done before a blocks-in-banks configuration is produced that **has been seen before**.\\n\\nFor example, imagine a scenario with only four memory banks:\\n\\n- The banks start with `0`, `2`, `7`, and `0` blocks. The third bank has the most blocks, so it is chosen for redistribution.\\n- Starting with the next bank (the fourth bank) and then continuing to the first bank, the second bank, and so on, the 7 blocks are spread out over the memory banks. The fourth, first, and second banks get two blocks each, and the third bank gets one back. The final result looks like this: `2 4 1 2`.\\n- Next, the second bank is chosen because it contains the most blocks (four). Because there are four memory banks, each gets one block. The result is: `3 1 2 3`.\\n- Now, there is a tie between the first and fourth memory banks, both of which have three blocks. The first bank wins the tie, and its three blocks are distributed evenly over the other three banks, leaving it with none: `0 2 3 4`.\\n- The fourth bank is chosen, and its four blocks are distributed such that each of the four banks receives one: `1 3 4 1`.\\n- The third bank is chosen, and the same thing happens: `2 4 1 2`.\\n\\nAt this point, we've reached a state we've seen before: `2 4 1 2` was already seen. The infinite loop is detected after the fifth block redistribution cycle, and so the answer in this example is `5`.\\n\\nGiven the initial block counts in your puzzle input, **how many redistribution cycles** must be completed before a configuration is produced that has been seen before?\\n\\n[comment]: <> (PART 2)\\n\\nOut of curiosity, the debugger would also like to know the size of the loop: starting from a state that has already been seen, how many block redistribution cycles must be performed before that same state is seen again?\\n\\nIn the example above, `2 4 1 2` is seen again after four cycles, and so the answer in that example would be 4.\\n\\n**How many cycles** are in the infinite loop that arises from the configuration in your puzzle input?\";","export default \"3 * (2 + (9 * 2 * 2 + 8) * (7 * 6 * 7 * 3) * (3 * 9 * 7) * (6 * 6)) * 9 * 8 + 6\\n6 + 4 + 6 * 2 + 5 * (8 + 5 + 5 + (8 * 7 + 2 + 6 * 5 * 4))\\n9 + 3 + 5 + 3 * (5 + (8 + 7 * 8 * 8) * (5 + 9 + 9 * 9 * 4)) * (6 * (8 * 5 * 6 * 8 + 4 * 5))\\n4 * ((8 * 6 + 3 * 3 * 9 * 8) + (2 * 3 * 4 + 9 * 2 * 3) + 4)\\n4 * 9 + (6 + 4) * 6\\n6 * 7 + (8 * 2 + 9) + 4 * 7\\n(2 + 6 * 4 + 3 + 7 * 2) * 2 + 7 + 2 + (9 * 4 + 9 + 7 + 9) + (2 * 4 + 3 + 5 + 2 + 7)\\n(7 * 5 + 4) * 7\\n3 + 8 + (5 + 9 * 8 + 6 + 4 * (3 + 3 * 8 + 7)) + (2 * 4 + 4 * 3)\\n2 + 2 + ((8 * 9 + 2 * 8) * 7 + 5 * (5 + 7 * 3) + 7 * 5) * 3 + 8 * 7\\n5 * 9 + (5 * (9 * 7 * 9 * 9) + 9 * 2 + 6 * 2)\\n9 + 9 * (4 + 9 * 9 * 6 + 5) * 7 * 8 * ((7 + 6 * 6 * 4 * 8) * (7 * 8) + 7 * 6 * 8 * 9)\\n6 + ((3 + 4) + (2 * 9 + 8 + 9 * 3 * 7) * 3 + (7 * 8 + 9 * 3))\\n6 + (3 * (9 + 2) * 9 + 4 + (5 + 4 + 3 * 2 * 4 + 4) + 6)\\n(8 * 3) * ((8 * 4 + 4) + 7 * 2 * 7 * 8 * 9) + 2 + (4 * 3 + (7 + 6) + 4 * (3 * 8 * 3 * 8) * 3)\\n(9 * (3 * 6 + 7) + (2 * 3 * 2) + (7 + 8 + 7 * 4 * 4) + 6) + 3\\n6 * (3 + (5 + 6 * 2 * 3) + (8 + 7 + 2 + 7 * 2 * 5) * 3) + 4 * 4 + 7 * 7\\n4 + 3 + 9 + 5 * 3 * (7 + 6 + (5 + 2 + 7) + 8)\\n5 * 4 + 4 * 4 + (2 + 9)\\n8 + 6 + ((8 + 5 + 2 * 9 * 3 + 3) * 8 * 4) + (7 + (7 * 4 + 9) * 4)\\n2 * 8 * 4 + ((3 + 2) * 8) + 3\\n4 * ((6 + 8 * 6 * 7 + 3) * 6 + 9 + 8 * 6 * (5 * 9 + 4)) * (2 + 8 + 6 * 3 + 9)\\n(3 + 6 + 3) * 3 * 4 * 6 + ((9 + 9 + 7) * 6 + 9 + 6) + (7 * 7 + 8 * 2 * 2)\\n(3 * 8 + 9 * 2 * 8 * (2 + 3 * 4)) + 3 * 3\\n(7 + 9 * 5 + 6 * 4) + 9 * 4 + 2 * 2\\n(6 + 9 + 2 * 7 * 6) * 9 * (5 + 9 * 6)\\n(2 * 4 * 8 + 2 * (4 + 3 + 2 * 2)) * 4 * 3 + 6 + ((8 * 5) + (9 * 5 * 3 * 9 * 7 + 7) * 7 + 9) + (4 * 8 + 9 + 5 + 2)\\n3 + ((6 + 3) * 3 * 8 + 9 + 5)\\n9 + 7 * (9 + 5 + (2 * 7 + 8 + 3 + 9 * 2)) + 4\\n4 * (8 * 7 + 9 * 9 * 3) * (5 + 5 + 9 + 4 * 9 * 6) + (4 + 3) * (9 + 3 + 4 + 7 * 5) + 7\\n(7 + 9 + 5) + 3 * ((6 + 7 * 7 + 4) + (3 * 3) + 3)\\n5 + (6 * (5 + 6 * 5) + 9 * (3 * 5 + 7 + 6) + (2 * 3 * 4 + 5 * 9) + 4)\\n((2 + 3 + 5 + 5 + 2 * 7) + 5 + 2 * 7 + 6) + 8 * 9 + 4 + 5\\n3 * 3 * 4 * 4 * 6 + (4 + (7 + 6))\\n(2 + 8 + 6 + 7 + 6) * (8 + 4) + 4 + 3\\n(7 + 3 + (5 + 3 + 3 + 5)) * 5 + 4 * (7 * 3)\\n4 * 2 * (5 + 5 * 7 + 8 * (4 * 6 * 8 + 6 + 7 + 2) * (4 + 3)) * (2 * 3 * 7 * 3 + 8 + 5) * 4\\n6 + (2 * 6 * 7 + (6 * 6 + 8 + 4 * 2) + 6 + 5) * (8 + 3 * (4 * 4)) + (2 * 5 + 6 + 8 * 3 + 6) * 9 + (3 + 3 * 3 + 8)\\n2 + (4 * 3 * 9 + (2 + 4)) * (3 + (5 * 8 + 9) + 6 * (7 * 3) + 6 + 6) + 8 * 2 * 7\\n8 * (4 * 5 * 7 * (4 * 8 + 4 + 3) + 6) + 5 * 2\\n((5 + 5) * 9) + 2 + 8 + 3 + 6\\n8 * (9 + 7 + (5 * 3 + 7 * 3)) + 5\\n5 + 5 * 2 + (6 * 4 + 4 * (5 + 7 * 4 * 8 + 7 + 5) * 5 + 7)\\n(5 + 9 + 6 * 7 + 4) * 3 * 9 + 7 * (2 + 9 + 8 * 4)\\n7 * 4 + 7 + (7 + 4 + 8) + 9 * (6 + 5)\\n2 + 3 * 2\\n8 * (3 + 4 * 7 + 6 + 9 * 2) + (7 * 2 * 5)\\n(4 + 3 + 3) * (6 * 8 + 2 + (6 * 5)) * 8 * 9\\n8 * (2 + 8 * 3 * 5 + 2) + 9 * 4 + ((4 * 8 * 4) * 9 * 4 + 3 * 4) * 8\\n(4 + 3) * 5\\n3 + 8 * 8 * (3 * 7 + 5 * 7 * (2 * 8 + 3 + 8) * (5 + 2 * 6 + 3 * 2 + 3))\\n3 * ((5 * 9 + 2 + 8) * (9 + 9)) + (4 + 9 * 2 + 8 * 6) * 7 * (8 + (3 + 6 * 3 + 5)) + 3\\n5 + 2 * 7 * 8 + 2 + (8 * 3 * 2 * 7 * 5)\\n(3 + (6 + 5) * (2 * 2 * 6) + 8 + 5 * 8) + 9 + 2 * 8\\n(8 + 3 * 8) + 7 + ((9 + 3 + 2) * (8 * 5 + 3 + 7) + 9)\\n2 + 5 + ((5 * 8 + 7) * 2) + 7 + 6\\n6 * 5 * 3\\n5 * ((3 * 7 * 6) * 2 * 5) * 5 * 8 * 6 * (9 + 9 + 2 * 3 + 6 + 4)\\n9 * (6 * (4 + 9 + 9 + 7 * 5 * 3)) + 7 + 7 + 6 * 5\\n9 * (4 + (3 * 9 + 3 + 6 * 7) * 7 * 9 + 3 * 6) + 7\\n(4 * 3) + 4 * 6 * 3 * 5\\n3 * 9 * 8 * (9 + 8 * 6) + 8 + (7 + (5 * 5 * 8 + 6))\\n6 * 3\\n2 + (3 + (6 + 2) + 5 + 9 * 7 * (3 + 5)) + 4\\n(7 * (8 * 6 + 3) * 4 * 5) * 6 * 9 + 9 + 9\\n((3 * 4 * 7 + 8) + 5 + 5) + 9 + (2 + (5 + 9 + 7 * 7 + 8) + (3 + 3 + 2) + 9) * (3 + (6 * 3) * 9) * 5\\n(6 * 6 + 7) + 7 + 8 * 5\\n(6 + 2 + 3 + 4) + (6 + 9 + 5 + 8) + (4 + 3 * 2) * 7\\n5 * ((5 + 5 * 9 * 7 * 8 + 2) * 7 + (7 + 5 + 5 + 5 * 9 * 8) + 5 * 6 * 3)\\n(9 * 6 * 5) + (7 + 2 + 4 * 7 + 8) * (3 * 6) + (9 + 7 + 3 * 7 + 4)\\n4 + ((5 + 8 + 3) + 7 + 4 + 9 * 3) + 5 + 2 + 6\\n2 + 6 + 5 * (6 + (9 + 8 * 4 * 5 * 4) + 6 + 9) * (7 * 4 + 6 + 4 + 7) * 6\\n((9 + 8 * 5 * 9 * 9 * 2) * 5) + 8 * 9\\n9 * 7 * 5 + (8 + 4 + 3 * 5 + 2 * 6)\\n8 * 7 * 7 * 9 + (6 * 3 + 8 * 7 * 8 * (2 * 9))\\n7 * (5 + (7 + 3 + 2 * 4 + 8)) * 8 * 3\\n6 * (8 + 3) + ((7 * 9 + 7 * 8 * 9 * 8) + 3 * (9 * 7 + 3 * 7) + 3 * 6 * 7)\\n7 + 6 * 7 * 4 * (4 * 2) + ((7 + 5 * 9 + 5 + 9) + 7 * 4 * 4 + 8)\\n5 + 6 + 4 + 9 * 2 * (9 * 4 + (7 + 6 * 7) + (2 * 8 + 9 + 6) * 2 + 8)\\n6 + 6 * 8 + 9 + (3 + 2 + 7 * 7 * (7 * 7 * 3 + 3 + 5 * 6) + 9)\\n3 + 2 + 2 + 6 + 6 + 9\\n8 * 3 * (7 * 6 + 6 * 9 * 9 * 9)\\n7 + 5 + (6 * 4 + (7 + 7 + 9) + (5 + 7) + 9) + (9 * 7 + 6 * 8)\\n7 + (5 + (9 + 4) * (8 * 8 + 2 + 6 + 8) * (5 * 5) * 5 * 9)\\n5 * 7 + 6 + (7 * 4 + (7 + 2 + 8 + 5) * 8 * 6 * (3 * 4 * 9 * 5)) + 9\\n(7 * 5 + 7 + (6 * 5) + 3 + 5) + 4 * 2 + ((5 + 2) + 5 * (6 + 7 + 4 * 8 * 6) + (8 * 4) + 5 * (2 + 5 * 8 + 6 + 2 * 8))\\n6 * 9\\n9 + (3 * 7 + 8 + 9 * 5) * 3\\n(4 * (7 * 7) + 8 * 5 + 8) * 3\\n6 * (5 + 2 * 2 * 2 + 2)\\n(2 * 3 * 6 + 9) * 8\\n2 * 7 * 4 * (4 + 2) * (3 + 5 * 8 + 5 * 9)\\n((2 * 8 + 7 * 2 * 6 + 6) * 5 + 9 + (8 + 7 * 4) + 8 + 6) * (6 * (5 + 5 * 7 + 2 + 3) + 4 * 4 + 5 + 3) + 8\\n6 + 7 * (9 * 7 * (4 + 2 * 5) * 4 * (7 + 3 + 2) * 2)\\n8 * 3 * 5 + (3 + (3 * 5 + 8 + 9) + 5 + 2)\\n2 * ((5 * 6 + 3 * 6) * 8 * 4 * 9) * 3\\n5 + (3 + 8 * 8 + (8 * 8 * 2 * 7) + 8 + 4) * 4 + 2 * 5\\n7 * (4 * (2 * 8 + 2 * 8) + 2) * 8\\n8 * 4 * 3 * 6 + (6 + 2 * 5 + (8 + 3 + 8 * 7 * 8) + 6 * 2)\\n(3 * (8 * 4 + 9 + 8 + 8) * (4 + 5 * 3 * 3) * 6 + (8 + 5)) + 9 * 7 + 4\\n6 + (5 * 5 + 5 * 8 + 2) * 8 + 9 * 5\\n2 + 4 + (9 * 2 + 7 + (6 * 2 * 5 * 8 + 2 * 8) + 5 + 9) + 3 * 4\\n3 * (9 * 4) * 8\\n2 + 8\\n7 * 9 * 5 * 4\\n8 + 8 * (2 + 5 * 4 * 6 * 8) + 9 + 9\\n(8 * 5 * 4 + 3 * 7) + 5 + 9 * 3 * (4 * 7 + (7 * 8 + 4 * 7 + 7) + (4 + 6 + 9 + 5 + 5)) + (5 + (4 * 2 * 3) * 2 + 6 * 3)\\n(2 + 8) * 3 * (8 + 6 + 5) * 2 * 3\\n(6 + 7 + (8 * 2 * 5 * 4 * 4) + 2) * (6 * 8 + 6)\\n(6 * 9 * (8 * 6 * 8)) * 6 + (4 + 7 * 6 + 7 + 8 + (2 * 6 * 3 + 9 + 5))\\n((3 + 9 + 9 + 4 + 3 * 4) + 5 * 9 + 5 + 6 * (2 * 5 * 3)) * 4\\n9 * 9 + (8 + (8 * 3 + 4 + 7 * 7 + 3) + 4 * 7 * 4) * (6 * 6 * (5 * 7 + 8) * 2 * 4 * 7)\\n2 + 8 * (5 + 5) * (3 + 9 + 8)\\n8 * (4 * 7 * 9 * 8 + 8 * 7) * (6 + 7) * 6 * 3\\n2 * 6 + ((7 * 3) + 6 * (5 + 4 * 7 * 9 + 9 + 5) + 5) * 9 + 9 + 2\\n2 + (3 + 2 + 9 * 6 + 3) + 2 * 9 + (4 + 9 + 4 + 4)\\n2 * (8 * 9 * 4 + 9) + 6 + (6 + 5 * (2 + 4 + 5 + 9 + 5 * 6) * (3 * 2 + 5 + 4) + 5)\\n3 * 9 + (6 * 9) + 9 * ((5 + 2 + 3 * 2 * 4) * 8 + 8) + 3\\n((9 + 8 * 9 + 4 * 5) * 2 + 8 + 7) + 8\\n(6 + 8 + 2 + 4 + 8 * 6) + 7\\n6 * 9 + 9 * (6 + 6 * 8) * (5 + 4 + 4) * 7\\n((4 * 4 * 7 * 8) + 6) * 3\\n7 * 3 + (7 * 5 * 3 + 4)\\n5 * ((8 * 9 * 8 + 4 + 2 * 6) + 7) + ((7 + 7 * 3) * 5 + 9 + 9 + 5) + 2 * ((3 * 2 * 9 * 2 * 5) + (6 + 4) * 6 + 6) * 8\\n(3 + 6 * (9 + 4 + 5 * 2 * 5) * 2) + ((8 * 9) * 5 + 4 + (8 * 8 + 8 + 2 * 8 * 5)) + 4\\n3 * 4 + ((7 + 6 + 9 * 7) * 7 * 9) + (6 + 3 * (2 * 9 * 2 * 3) + 6 * (8 + 2 * 8 + 9))\\n3 * 3 + ((7 * 7) + 4 + 3 + 5 + 8 + 8) + 3 * (7 + 8) + (8 + 9 * 2 + 5 * 9)\\n6 + 9 + ((3 + 2 * 2 + 6 * 7) * 9) + 8 + 4 + 2\\n(5 * 4 + 7 + (5 * 4) * 8 + 2) * 5 + (8 * (6 + 7 + 7 + 9 * 7 + 5) + 6 + 3 + 3) + 6 + (4 * 4 * 2) + (9 * 7 + 6)\\n5 + 3 * (2 + (8 * 9 * 4 * 3) * (2 + 8))\\n(6 * 5 + 3 + (4 + 9 * 7 * 2 + 3 * 6)) + 6 * ((3 * 2 * 2 * 6) + 7) * 5 + 7 * 5\\n6 + (8 * 5 * 3 + 9 + 6 + (7 * 5 * 4 + 4 + 2)) * 4 + 7 * (4 + 8) + 7\\n2 * 2 * 9 * 6 * ((6 * 8 * 8) * (2 + 7 + 3 * 9 * 5 + 2) * 9) * 5\\n8 * 8\\n(9 * 2) + 5 + (5 * 8 * (2 + 3 + 9 * 8)) * 4 + 6\\n((4 * 8 + 9 + 5 + 8) + 6 * 8 * (2 + 3)) * 8 * 3 * 2 + (2 * 7)\\n8 + 4 * ((2 + 4 + 7 + 4 * 2) * 3 * 6 + 3 * 7 + 3) * 8 * 9 + 4\\n5 + ((2 + 9 * 3 * 9) + 6 * (3 * 7 + 2 + 7 * 5 + 9)) * (9 + 8)\\n9 * (5 + 7) + 5 * 6 * 9 + 7\\n9 * 5 + 8 * 5 * (5 * 7 * 9) * (5 * 3 + 9 + (7 + 2 + 5 * 6) * 5 + 5)\\n3 * 7 * (8 + (3 * 4 * 6 + 4 + 2 * 8) * 8 + 2 * 9) + 2 * 6\\n2 + 6 + 9 * (6 * 2 + 9 * 9 * 8) * 3\\n(2 + 4 * 4 + 7 + 3) * 2 * 8\\n6 * 6 + 4 + 5 * 4 * 2\\n(3 + 6) * 3 + 9 + (7 + 8 * 3 + (2 + 5 + 4 * 4 * 8 * 5)) + 9\\n(5 + 5 * (5 + 3 + 5 * 4)) + ((3 * 7 * 9 + 7 * 7) * 4 * 6)\\n(6 * 3 * 3 + (8 + 8 * 6 + 3) * 2) * (5 + 3 * 8 * 4) + (6 + 6) * ((3 + 9 + 7) + (5 + 2 + 2) * 7 + (7 * 2 * 4 + 7 + 2 * 9)) * 2 + 5\\n(8 + 8 + 2 * 4) + (6 * 8 + (6 * 4 + 2 + 9 * 9 * 8) * (4 + 4 + 2 + 4)) * ((8 + 6 * 5) + 6 * (2 + 6 + 3 * 5 + 4 + 8)) + 9 + 8 + 3\\n5 + 7 + ((7 + 9 + 9) * 3 + 6) + 6 * 2 * 4\\n(8 + 5) + 8 * 7 * (9 * 2 + 6) * (2 * 2)\\n7 * 6 * (2 + 7 + 6) * 8\\n5 + 6 * (5 + 4 + (8 * 4)) * 3 + 3\\n5 * 4 + 7 + 7 + (2 + 6 * (6 + 3 * 9 + 7 * 4 * 5) * 6) * 8\\n(9 * (9 + 8 + 4 * 8)) + 6 + ((8 + 6) * 5 * 5 * 2 + 9 + 2) * 5\\n5 * (4 * 9 + (3 + 7 + 9 * 6 * 2 * 4)) * 4 * 6\\n4 + 2 * (7 + 2 + 8 * 3) + 2\\n5 * ((9 * 3 * 4 * 2) * 2 + (2 * 7) * 2 * 4 * 6)\\n9 + (6 + 8) + 9 * 9 * ((6 * 7 + 2 * 8 * 8) * 8) + 8\\n9 + 9 * 2 * (8 * 3 + 2 + 4 + 2) * (4 * 4 + 3 + 2) + 2\\n3 * (5 + 9 + 5 * (8 * 3) * 6) + 3 * 6 * (4 * 8 + 6 * (4 * 8) * 5) + 3\\n3 + (3 + 7 + 7 * (3 + 5 + 8 + 5 * 7 + 6) + 3) * 8 + 4 + 7\\n3 * (7 * 6 * 6 + 9 * 8) + 5 + 7 + 4 + (7 * 3)\\n8 + (4 * 9 * 5 * 5 + 9) * 3 * 5 * ((7 * 5 + 8 * 9 + 2) + 6 * (9 * 5 * 6 + 7 + 7) * 8)\\n(3 * 4) + (7 + 2 + (2 * 7) + 6 + 8 + (5 * 6 * 5 * 2 + 8 * 2)) + ((7 + 9 * 3 + 7 + 8) * (9 * 3 + 5 + 4 * 5) + (4 + 9 * 7 * 4 * 3) + 5) + 6 * 2\\n(3 + 2 * 4 * (6 * 6 + 5 * 2)) + 7 * 8 + (3 + (5 * 6 * 3) + (8 + 9 * 6 * 6 * 2 * 6) * 8) * 2 * (2 + 6)\\n8 * 6 * (8 * 5 + (7 * 7 + 7 * 5 + 4 + 8) + 5 + (6 + 8 * 4 + 2 + 7)) * 2 + 9\\n5 + 9 * 5 * 9 + (8 * 6 + (7 + 6) * 6 * 5 + 7) + 4\\n4 * ((4 + 8 + 6 + 7 * 2 + 6) * 2 + 5) + ((5 + 8 + 9 + 9) + (7 * 3 + 3 + 2 + 9) + 6 * 8 * (9 + 5 + 8 + 5) * (6 + 9 * 9 * 6 * 7 + 8)) * (2 + 6 * 9 * 7) + 3 * 2\\n(4 + 7 + 5 * 8) + (3 + 5) + 7\\n7 * 8 + (6 * 4)\\n6 * 3 * 7 + 4 + 3 * 4\\n(6 * (6 * 7 * 9 + 9) + 4 * 3 * 2) + 8\\n8 * 3 * 9 + 5 + 6 * 6\\n5 + 4 * 2 + 9 * 5 * 8\\n5 + 8 + 3\\n(6 + 2 + 9 * 8) + 3 * 4 + (5 + 7 * 3 + 5)\\n((5 * 5) * 6) * 7\\n8 + ((2 + 6 + 6 * 3 + 2) + 6) + 4\\n(5 * 2 * 9 + 2 * 2) + 4 + (3 + 2 + 3 * 4) * 3 + ((5 * 3 * 7) * (8 * 2 + 3 * 2) + 9 * 8 + (8 * 7 + 8 + 9 * 3) + 7)\\n6 + 5 * 6 + 8 * (3 * 8 + (7 + 4 * 4 + 3))\\n6 * (7 + (2 * 3) + 2) * 8 + 4 + 6 + 5\\n7 * 3 * 6 * 4 + 3\\n(8 * 8 + (5 + 5 + 5 + 9)) * 5 + 3 + 5 + 5\\n(2 * 3 * 6) + 9 + (3 * 2 * 6) * 4 + ((6 * 6 + 9 * 3 + 3) * 7 + 7 * 6) + 6\\n7 + 6 * 3 * ((7 + 5 + 2 + 8) * 4 * 5 * 3) + 7 * 6\\n6 * ((8 * 3 + 6 + 5 * 6 * 7) + (9 + 6 * 2 + 6) * 8 * 8) + (4 * 5 + 9 * 6) * 7\\n(9 + 7 + 2 + 2) + 9 + 7 * 4\\n(9 + 3 * 2 * 4) * 7 * 6 + 2 * (4 * (3 * 9) + 4 * 3 * 3) + 9\\n7 + 2 + 2 + 6 * 2 + (6 * 7)\\n6 + ((2 * 3 * 3 + 3) + 3 * 9 + 7 + 4 * 2) + 3\\n7 + 6 + 9 * (8 * 4) * 9\\n2 * ((4 * 3) + 5) + 7 + 4 + 3\\n(5 * 4 * (8 * 6) + 4) * 6 * (3 * 3 + 5 * (3 + 3 + 6 * 7 * 6) + 6 + 8)\\n4 * 7 + 3 * 8\\n5 + 3 + 7\\n5 * 8 * (3 + 4 + (3 + 6) * (4 + 6 * 3 * 5 + 8) + (5 + 2 + 3 + 2 * 3 * 8)) + 7 * 4\\n(7 + 8) + (6 * 7 + 9) * ((2 * 4 * 7 + 2 + 8) + 9 * 9 + 5 * 3 + 3) * 6 + 4 * 6\\n2 + 4 * 5 + 3 + (7 + 9 * (6 + 2))\\n8 + (9 + 2 * 4) * 4 * (7 * 7 * 5) * (4 * (3 + 2 + 3 * 4)) + 9\\n7 * 2 * 7 * 4 + 2 * (2 + 4 * 5 + 2)\\n5 * (3 * 7 * 8 * (4 + 2 + 8)) + 5 * 4 + 3\\n((8 + 6 + 4 * 9 * 7 + 8) * 9 * (7 * 9 + 5 * 8) * 4) * 9 + (5 * (5 * 7 * 4 + 3 * 9) + 6 + 2 * 9 * 2)\\n6 * (5 + 2 * 3) + 5 + 5 * 2\\n(4 * (7 * 3 * 3 + 4 * 6) + 6 * 9 * 6 + (8 * 4)) * 5 * 9 + 3 * 9\\n4 * (2 * 8 * 8) * 5 * ((4 + 2 * 7 * 4 * 4 * 3) + 5) + 4\\n7 * ((8 + 8 + 6) * (5 * 5 * 2 * 8 + 7) * 8 * 2 * 8 * 8) * ((3 * 3 + 9 * 8) * 3 * 3)\\n8 + (4 * (3 + 6 + 9 * 6 * 9) + 5 * 6) * 9 + 2 + 6\\n(6 + (6 + 9 + 5)) + (3 * 7 * 7 * 8) * 4 * 7 * (2 * (9 + 2 * 4 + 7 * 2))\\n2 + (6 + 6 * 6) * 9 * 4\\n9 * (9 + 3 * 4 + 8 + (4 * 4 + 5 + 8 + 8 * 2) + 5) * 9 + 5\\n((9 * 6 * 9) + (4 + 4 * 3 + 2 * 2 * 6) * 4 * 6 * (9 * 4 * 9 + 9 * 3)) + (5 * 6 * 9 * (8 * 5 * 9 * 6 + 4) + 3) + 8\\n6 + (2 * 3 + 5 * 7 * 7) + 2 + 4\\n2 * 9 + 6 + (2 * 7 + 7 * 3) * (7 * 5 * 7 + 5 * 4) * 2\\n6 + 6 * 5 * 7 + (3 * (2 * 7) * 3 * (9 * 4 * 5 + 5 * 7 * 5))\\n8 * ((4 + 9 + 9) + 8) * (5 * 4 * (9 + 3 * 3 + 6) + 3) * (8 * 7 * 9 + (8 + 8 * 3 + 9 * 7) * (3 + 7 + 9) * 7) + 6\\n8 + 8 * 3 * 8 + 5\\n2 + 3 * ((4 * 7 + 3 * 2 * 8 * 4) + 7 + 3 + (3 * 5) * 5) * 9 + 5\\n(3 + 7) + 6 * 4 * 7 * 3 * (4 * 7 + 3 * 6 + 5)\\n3 * (3 * (2 * 5 * 4 + 9 * 8 * 8) * (6 * 4 + 2 + 5 * 4) * 4 * 6) + (9 + 9 * 9 + 3 + 5) + 7 * (7 + 7)\\n((9 + 8 + 8 * 8) * 9 + 8 + (2 * 7 * 4) * 2 + 5) * (9 + (7 * 3 + 4 + 2 * 2) * 4) * 7 * 2\\n2 * (7 + 9 * 7 + (3 + 2 + 2) + (9 + 5 * 2 * 8 * 6) * 2) * 4 + 3 * 5 * (5 * (7 * 8) * (5 + 3 + 4 + 3 * 3) + 7)\\n(7 * (9 + 7) + 5 * 7 + 3) * (2 + 8) * (2 + 9 * (7 * 7 * 7 + 4) + 6 * 2) * 9 * 8\\n(3 + 5) + (8 * 4 * 4 + 3 * 8 + 7) + 5 * 5 * 7\\n5 * 9 + (2 + 9 * 9 * 6 * 4) + 5\\n3 * 6 * 2 * ((2 * 3) + 6 * (6 + 8 + 9 * 2 + 5) * 2 + 5 + 5) * (7 + 6 + 4 + 9 + 6 + 3) + 4\\n8 * 9 * 3 * 7\\n(2 + 8) * 3 + 7\\n(9 + 7 + 8 * 5 * 9) + 9\\n3 + ((7 * 6 * 4 * 5 * 9 + 3) * 5 + 4 + 3 * 5)\\n(2 + 8 * (8 + 3 * 3 + 4 * 5)) + (5 + (3 + 8 + 4 + 7 + 3 + 3) + (9 * 8 + 3)) + 9 * (7 * 5 * 2 + 2 * (4 * 7 * 3 * 4 + 8 + 4) + (2 * 2 + 4 * 7 + 9 + 8))\\n((4 * 9) + 5 * 3 * 3 + 6 * 7) * 7 * 7\\n(9 + 4 + 4 + 6 + 7 * 2) + 2 + 3 * 7 + 9\\n5 * (4 * (9 * 3) + 9) * 7 * (6 * 8 + 3 * 4 + 7 + 3) * 9 * 6\\n6 * ((8 + 7 * 3 + 7 * 4) * 5 + (5 * 5 + 9) + 6 * 3) * (6 * 6 + 7 * (3 + 4 + 9 * 5 + 7) * (8 + 3 * 7 * 6) + 4) + 8 * 7 + 6\\n(9 + 3 * 9 * (5 * 6 * 8) * (4 * 2 + 3) * 6) + ((6 + 2 + 6 + 8 + 4) + 4 * 7 + 7) * 5 + (6 * 8 * 5) + 7 * 6\\n8 + 3 * (9 + 6 + 2 + (4 * 2 * 8) * 7 + (7 + 7 * 7 + 5 * 4 + 6)) * 9 + 9 + 7\\n(2 * 2 + 7 * 3 * 3 * 4) * 9 * 9 * 7\\n(2 * (9 * 6 * 6 * 5 + 2 + 7) * 3 + 3 * 4) + 2 * 6 + (9 + (2 + 2 + 9)) * (2 + (7 * 6 * 5 * 9) + 6 * 3) * 9\\n8 * 2 * 5 + 9 + ((3 + 7) * 7 * 6 + 5)\\n9 * 8 * 4 + (8 + 9) + (4 * 7 * 4 + 6)\\n5 * (8 * 4 * 6 * 7 * 6) * 9 * 7 * (6 + 6 * 6 + 7 + 4)\\n7 + (2 + 2 * 3) * 6 * 8 + 9 * 6\\n3 * 4 * (4 + (6 * 9) + 3 + 8 * 9 * 5)\\n3 * (5 * 6 * (8 * 4 + 6 + 3)) + 4 + (9 + 8) + ((6 * 3 + 2) * 9 * 5 + 5 + 8 * 3)\\n3 + ((4 + 9 * 2 + 2 + 2) * (9 * 3 * 4 * 7) * (8 * 7 + 2 * 6 * 2) * 2 + 3 * 4)\\n5 * (2 + 2 + 9 * 5) + 7 * 8 + 7\\n4 + 2 + 8\\n7 + (2 + 8 + 9 * 4) + 4 * ((9 * 4 * 4 * 4 * 4 + 3) * 3)\\n2 + (9 + 4 * 3) + ((2 + 5 * 5 * 5 + 5) + (5 * 6 * 9 * 8)) + 4 + 9\\n(7 + 4 + (5 + 3 + 3 + 8 + 9) + 9 * 6) + 4 * 9 + 3 + 5\\n2 + (4 + 2 + 7) + (5 + 9 + 3 + 7) + 7 * ((2 + 8 + 5 + 4) + 5 + 6) * (4 * 8 * 4 * 8)\\n(8 + 7 + 3 + (8 * 3) + 6 * 2) * 4 + ((5 + 6 * 4) * 6 + 4 + 5)\\n(8 + 2 * 7 * 3 + 5) * 2 * ((9 + 3 * 4 * 6 + 2) * 2 * (7 * 9 * 4 * 5 + 8 * 5))\\n((9 + 8 + 3 * 2 + 8) + (8 + 4 + 2 * 5 + 3 * 9) + (9 * 3 * 2 * 4 * 8) * 8) + (8 * 5 + 3 + 3 + 9) * 8 + (4 + 7 * 7 + (3 + 7 * 9 + 8 + 2) * 5 + (5 * 5)) + 9 + 2\\n(5 + 3 + (6 * 2 + 5 + 4 + 3 + 9) + 5) + 5 * 9 * 8 * 8 + 3\\n(3 + 8 * 8 * 2 * 3) + 7 + 4 + 3 + 5 + 4\\n7 + 9 + 5 * 6 * 9 + ((4 * 8 * 7 + 8 * 2 * 8) + (7 * 2 + 9 + 4 + 2 * 4) * 2)\\n((6 * 4 + 8 * 7) + 9 + 5 * 5) * 8 + 8 + 4\\n(6 + 2 * 6 + 4) + ((5 * 4 + 5) * 4 + 3)\\n6 + (2 * 4 * 4 + 6) + (8 * 5 * 2) * 4\\n7 + (4 + 3 * 5 * 5 * 5 * 4) * 4\\n(6 + 2) + (9 + 6 + (9 + 3) + (3 + 7 + 2 * 6) + 6) * 3 + 5 + 8 + 7\\n2 + (9 * (4 * 7 * 9) + 7 * 5 + 2) * 3\\n6 * (6 * 8 * 3 * 6 * 3 + 4)\\n4 + (2 + (3 + 3 * 8) + 8 + 4 + 3 + 6) * (6 + (3 + 9 + 9 + 7 * 6 * 7) + 9 + 9 + 6) + 5 * 5\\n(9 * (6 + 7 * 5 * 9 + 3 + 8) + 4 + 4 * 6) + 8 * 3\\n7 * (7 * 5 * 5) + 8\\n8 * 8 * 2 + ((4 + 2 + 5 + 4 + 3) + 2) + (3 * 5 * 3 + 4)\\n9 + 2 * 9 * (8 * 7 + 2 * 3) * 2\\n8 * (6 * 6) * 7 + 3 * 5 * ((8 + 3) + 3 + 7 * 3)\\n7 * 8 * (7 + (2 + 6) * 5) + 5 + 2\\n3 * 2 + 5 + (5 * 9 * 8) + 7\\n(8 * 7 + 9) + (7 * 7 * 8 + 9 * 3) + (8 * 9 * 4 * 9)\\n8 * 9 + 7 * 2 + 3 + (2 + 3 * (4 * 2 * 3 * 3) + 4)\\n(5 + 4 * 3 + 8) * (8 * (2 + 3 + 2 + 2) + 9 * 8 * 9)\\n7 * 7 * 9 * (5 * 9 * 4 * 5 + (9 * 3 * 4 * 4))\\n4 * ((2 + 6 * 4) + 7) * 8 + 7 + ((9 + 2 + 3 + 8) + (5 * 9)) * 2\\n6 + 5 + 4 * 7 * 6 + (6 * 7 * 2 * 6 + 8 * 2)\\n4 * (8 * (5 + 2 * 2 + 4) + 4 + (2 + 8 * 3 + 7 + 8)) + (4 + 7 + 9 * 4 + 8 * (8 * 6 * 6 * 9)) + 6 * 8 * ((3 + 3 * 7 * 2 + 7 + 5) * 2 * 5)\\n5 * (2 * (4 * 4 * 6 + 3 + 4 + 8) * 7 * (8 * 3 + 9 + 2 * 8) * 5) + 5 * ((7 + 7 * 3 * 5 * 7 + 3) * 7 + 3 + 6 * 7) + 8\\n(2 * 3 + 8 * 5 * 6 + 2) * 6 + (6 * 5 + 2 * 9 + 3 * (9 + 5 * 2))\\n9 + ((8 + 9 * 7 * 5 * 8) * 4 * 2)\\n3 * 6 * 4 + 4 + 3 * (4 + 3 + 4 + 6 + (4 + 6 + 2) + 3)\\n5 * 2 * ((9 + 9) * 2 + (4 + 2) + 9 * 4 * 3)\\n(4 + 8) + 2 * 4 + 5\\n(3 * 7 * 5 * (7 + 6 * 9 * 2 * 7 * 3)) * 4 * 4 * 8 + 9 * 5\\n6 * 8 * ((5 + 4 * 4 + 9) * 4 * 6 * 9) + 9 * 9 + (2 + (9 + 3 + 7 * 7 + 2 + 8) + 7 + 4 * 8 * (8 * 3 * 3))\\n((9 * 6 * 6 + 3) * 2) + 7 + 6\\n9 * 6 * 5 + 6 * (7 * 6 * 9 + 4 * 4)\\n9 * (4 * 9 + 9) * (2 * 3 * 6) + 7 + (6 + 9 * 6 * 7 + 4) * 6\\n(2 * 9) * 2 + 5 + 6 + 8 + (8 + 7 + 3)\\n(2 + 3 + 6 + 2) * (6 * 3 + 7 * 5 + 5 + 7) + 4 * 4 + 2\\n5 + (4 + (8 + 2 + 9 + 6 + 6 * 7) + 2 + 9 + 4) * 8 * 8 * ((3 + 3 + 7) * 7 + 9 * 7 + 6 * 9) * 9\\n7 * (7 * 5 + 6 + (6 * 7 + 8 * 5 + 3 + 5) + 4)\\n6 + 4 * (3 + 2 * (5 * 7 + 6 + 2) * (8 + 8 + 2) + (7 + 2))\\n5 * ((4 + 5 * 9) + 3 * 4 + (2 * 3 * 2) * 5 + 4) + (7 + 9) * 6 + (8 + 2 * 6 * 9)\\n(4 + 9 + 2) * (4 + 8 * 9 + 6 * 8) + 4 + 8 * 9\\n4 + 8 + 3 + 5 + (5 * 9 * (3 * 3 * 8))\\n(5 + 4 * 8 + 9 * 3) * 2 + 5 + 8\\n(3 + 3 * 9) + 6 * (2 * 9 + 6) + 5\\n3 + 4 + 3 * 9 * 2 + ((7 * 7) * 3 * (9 * 5 * 7 * 4 * 2))\\n7 * 7 * (8 + 4) * (7 + 9 + (6 * 7 * 7 * 2 * 6 * 6) * 7)\\n7 + (4 + (5 + 4 + 9 * 2 + 6 * 5) + 2 + 6) + 7\\n(3 + (5 + 9) * 8 * 3 + 9) * 5 + ((6 * 7 * 5) * (4 * 8 + 6 + 5) + 3 + 4 + 8) + (4 * (2 + 7 + 5 * 7 + 2) * 8 * 8 + 6 + 3)\\n6 * (5 * 3) * 4 * 8 * 6\\n4 * 5 * 4 * 3 * 5\\n3 + 6 * 2 + 7 + ((3 + 7 + 3) + 5) * 8\\n9 * 5 + (6 + 7 * 9 + 8 + 3 + 8) + (9 + (2 + 9 * 4) * 9 * 9 * (3 * 2 * 3 * 5 + 3) * (2 + 9 * 3 * 4 * 7))\\n5 * 6 * 3 * (7 * 3 + 3 + (2 * 7))\\n9 + 8 * 5 + (7 * 6) * 9 + 3\\n8 + 6 + 4 * (6 * 8)\\n3 * (4 * (2 * 4 + 4 * 8 + 7) * (2 + 7 * 4 * 6 + 3) + 8 * 4) * (7 + (7 * 9 + 8 + 7 + 8 * 8))\\n3 + (8 * 9) * 6 + (5 + 6)\\n6 + 2 + (7 * 6 + 7 * 6 + 3)\\n5 + 9 * (9 * 7 + 4 + 6) + (9 + 7 + 6)\\n(9 * 7 * (3 + 6 * 3)) + 3 + 6\\n5 * (9 * 5 * 2 * 5) * 8\\n((2 + 9 * 6) * 5 * (2 + 2) + 7 * 9 + 3) + 4 + 6 + 5\\n6 + 8 + 9 * (4 * 2 * 7) + 4 + 6\\n4 * (9 * (4 * 8 + 3 * 3)) * 2\\n(7 * (3 + 3) * 8 * 8 * 9) + 5 + 4 + 6 * 2 + (8 * (6 * 6) + 5 * 2 * 8)\\n((9 * 3 * 4 + 4 + 4) + 8 * 3 + 2 + 9) + ((4 + 4 + 8 + 7 + 7 * 9) + (7 + 8 + 9 + 3 + 7) * 9 * 7 * 8)\\n(8 + 6 + 3 * 8 + 3) * 6 * 4 + 9 * 2 * (7 * (3 * 2 * 2 + 7 * 7 * 3) * 7 * 2 * (3 + 2 + 2 + 5) + (7 * 8 + 3))\\n7 + 5 * 5 * (4 + (7 * 3) * 5 + (7 + 5) + 3) * 4 * 8\\n4 * (3 + 6) + 8 + 6\\n5 * 2 * 7 + 8 * 5\\n3 + (9 + (4 * 5) + 5 * (9 + 3 * 3) * 3 * 5)\\n7 * (5 * 3 + 3 * (9 + 9 + 6 * 6 + 8 * 9) + (8 * 2 * 9 * 4))\\n((5 + 7 * 7 * 9 + 3) * 3 + 6) * 7 * 5\\n(7 * 7 * 9) * 5 + 8 * 6 * 5 + 5\\n2 * 6 + 3 * 4 + (9 + 4) + 4\\n6 * 6 + 2 * ((5 + 9 * 2 + 6) + 9 * 9 * 6 * 4 + (9 * 4 + 2)) + 3\\n5 * 3 * ((6 + 7 + 6 + 3 * 9 + 3) + 8 * 5 + 2) * 9 * (7 * (7 + 2 * 6 + 2 * 2) * 4 * 3) + 5\\n9 + ((7 + 4 + 5 * 5 * 6) + 4 + 4 * 9)\\n((5 + 9) * (4 * 6) * (8 + 3 * 8 + 8 + 3)) * 8 + ((5 * 5 + 5 + 4) + (4 + 9) + 2 * (7 + 5 * 4) * 5) + (5 * 5 + 2 * 3 * 6)\\n8 * 4 + 8 * 8\\n(4 + 8) + (7 + 4)\\n8 + (8 + 6 * 5 + 6 + 9 * 8) + 7 * 2\\n3 + 9 + 4 + (6 + (9 * 6 + 6 + 6) * 7) + 7 * 3\\n2 * (8 + 9 + 7 * 4 + (2 * 9) * 6) + 3\\n6 + (5 + 2)\\n3 * 9 * 3 + 2 + 3\\n4 * 3 + 8 * 2 + (2 * (8 + 2 * 5) * 3 * 4 * 3)\\n9 + (2 + 4 * 8 * 7 * 5) + 8 + (6 + (3 * 4 + 6) * 5 * 8 + (2 * 5 * 4 * 8 * 3 * 5))\\n5 + 4\\n4 + 8 * (6 + (3 + 9 + 5 * 4 * 8) * (8 + 3 * 2 * 5) + 9 + (9 + 2 + 6 + 6) + 4) + 5 + (6 * (3 + 3 + 5 * 6 * 9 + 2) + 4 * 4)\\n(9 * (6 + 9 + 4 + 6 * 9)) * 9 * 8 * 7 * 8\\n(4 * 6 * 6 * 7 * 3) + (3 + (3 * 8) + 3 * (8 * 4)) * 2\\n(7 + 2 + 6 + 2) + (4 + 5 * (5 * 2 + 4) * 3) * 5 + 4 * 5 * 8\\n(3 * 3 + 7 + 7 + 8) * (3 * 4 * (6 * 2 * 3 + 6 * 7 * 7) + 5 * 3 * (7 * 9 + 7 + 9 * 2))\\n7 + (8 + 9 * (4 + 5 + 4 + 2 + 2 * 3) * 7 + 8 * (4 * 6 * 7 * 6 * 2)) * 5 + 6 * 3 + (4 + 8)\\n(4 + 3) + ((9 * 7) + 2 * 2 + 4 + 6 + 7) * 6 * 3 * 8\\n7 + (4 * (7 * 9 + 2) + 3) * 2 * 8 + 9 + 2\\n8 * 5 * (7 * 8 + (7 + 6)) * 7\\n(4 * 6 * 9 + 7) + 3 + 6 + 2 * 3\\n2 * 2 * 9 * (4 * (9 * 8 * 4 + 2 + 3))\\n9 + 6 * ((2 * 6 + 6 + 9) + 9 * 5 + (7 * 3 * 9 * 3 + 5 + 6)) + 2 * 4\\n5 * 7 + (9 + 3 * 4)\\n5 * 3 * 3 + (9 + 3 * 9 + 5) * 7 + 8\\n3 + 2 + 7 + (6 + 8 + (2 * 6 + 5) * 2)\\n8 * 8 * (6 * (3 + 6 + 4 * 7 * 8) + 7 + 9 * (3 * 8) + 8) + 3\\n5 + 3 * 9 + 2 * 4 * (8 * 7 * (7 + 6) + (9 + 3 * 8 * 7 * 7 * 3))\\n(4 + 8 * 3 + 6 * 9) * 2 + 4 * (7 * 4) + 7 + 5\\n7 + ((8 + 6 + 7) * 2 * 8 + (9 * 3 + 8) + 2)\\n6 * 9 + (3 + 4 * 5 * (8 * 6) + 4) * 8 * (7 * 7) + 5\\n5 + 7 + 4 + (2 * (5 + 3 * 2 * 5 + 7 * 4))\\n3 + 6 * 9 + (5 + (7 + 3 * 4 * 3 * 5) * 6 * 5 * 2 * (8 * 5 * 5)) + 8\\n((9 + 8 * 2) + 9 * 8 * 3) + ((8 * 7 + 3 + 4 * 7 * 5) * 4 + 3) + 3 + 9 + 2\\n(8 + (6 * 7 + 5 * 7 * 7 + 3) + 9 + 6 * 2) * 3 + 4 + 2 + 4\\n5 + 8 + ((5 * 9 * 7 * 9) * 8 * 8) + (8 * 7 + 8 * (6 + 9 * 3 * 2) * 6 + 6) + 3 * 9\\n5 * ((3 * 5 + 3) * 7 * 3 * 3 * 6) + 4 + 6\\n((2 + 6 * 8 + 7) * (6 + 2 * 2) + (4 * 8 + 9) * 4 + 5) * 4 * 3\\n9 * 9 * 2 * 2\\n2 * (4 * 2 * 8 * 8) * 5 * (7 + 9 + 8)\\n4 + (2 + 5 + 8 + 8) * (9 + 4) * 8 + ((6 * 3 + 5 + 8 * 5 + 2) * (4 + 7 + 9) * 9 + 3 + (4 * 4 * 6 + 2 + 2) * 4) + 7\\n5 + 5 * 9 * (2 * 6 * 2 + 3 * 7 * (3 + 7 * 4 + 5)) + 6 + 8\\n9 * 4 + 2 + (6 * 8 + 5 * 7)\\n(6 * 5 * 7 * 8 + 3) + ((9 + 5 * 5 + 8 * 4 + 3) * 6 + (6 * 4 + 8 * 6 * 3) + 3 + 5 + 5) * 7 * 5 + 7 * 5\";","export default \"neesewweeseeseesewseeenwneswe\\nneneswnenenwnenenwnwenesenenwnwnenenwne\\nneswnweswseswnesewsesweswwswswneswsew\\nneneeneneeneewnenweneneeeeswswe\\nseeeeseseseeeeweeeseneenweeee\\nswseswwswswswswwswswswswswswneswwswsw\\nseseswsenwseseseseseseseesenwswswsenwse\\nseswnesenwsesweseswesenwsesesesewsenwsese\\nenwwwsewwnwwwwnenw\\neeewseeeeseseseeeeseseseeneese\\neseneswwseseseseseswsesenwseseseswswwse\\nnesweeeneneneenenwnenenenwseseeneenew\\neseeeeseeneewnwseseenwnweeeene\\nnwswnwsenwwnewnenwnwnwnwnwnwenwnenwnwnwse\\nswneseneseseswseswwseneswnwseseesesesesw\\nwswnwwwwewnwwwwnwwwwwwnwnww\\newwwswwwwnww\\nwwnwwwwwwwseswwewwwnewsww\\nswwwnewswwseswswswswswswswswsw\\nwswwwwnewwwsewwwswwwwwww\\nnenweseswsesesesenwsewsesewsesenenesesw\\nswswswnwsenwseseseswseseswsesw\\nseseewseeseseseesesesesesesesesesese\\nswesweeeseneeneeeeeeeswenwese\\nwnwnwnwwwnwnwnwwnwwwnenwnwse\\nneseeseseseswsenesewesenesewswnwnwse\\nsweeneswwswswswnwswswsw\\neeeeeeweeeeeeeeswenwneeew\\nswwesewwnwswenenenwnwnewseswwswew\\nseswswswnwesenwwswswsweeswwenwnwenw\\nnwnewenwwswnwewsewswnesenwenwwsew\\nnwnwnwnwswenwnwswsenenwwnwnenwnwseese\\nwwnewwwwwwnwwwswnwnwnwnw\\nnwenwwnwnwnwnwnwnwwnwnwnw\\nsewnenewwnenenwswnwenwnwseneeswnenwne\\nenewneenwneneeenewswseseneewewne\\nneneneswnwswneewnenenenwneeneneeneene\\nnweeeneeneseneneneneneneneeneneee\\nswwnenwnwnwwnwsenwwnwsewnwnwnwnwnwnenw\\nwwseswwwwnwneesewwseswnwsenwwwnew\\nseseswseswneswseswswseswwswseswneswsw\\nnenenwswnenwswnwneneswswenewewneene\\nsweswnwwneswseseseneseswseseswneseswsesesw\\nnwnwnenwnwwsenwnwnwnenwwnwnwswsenwnww\\nwnewwsenwwsenwwswwwnwwnenwnenww\\nnwwwwswseswwswnesw\\neseeeeeeeeeeeeeswenewee\\nneeneneeswneneeneneneeenewnwnenenene\\nwneeswnwwsewenwneneswnwneesewneesw\\nnwwnwneseswnwwenwwsenwenenwnwseeseww\\nswnewwswswswswwswswwnwswswswseswwsw\\nsesenwseswneswswswswswnwswnwseswseeeswsese\\nnwnwnwswnweseswnwnwnwnenwnwnwne\\nswsweeeeeneeseeneswneswnwnewsesw\\nseswseswseseswswseseswseneseweseswsesese\\neeneenenenenenesweneneenene\\nseeseeeeeseeeeeeeeeenwese\\nnenwnewwswwwnwwswwnwnwneswwsewnw\\nseseseswsesesesenweeesenwseseseesesese\\nwwwnesenesweswswnwwwwnwnwnwsewne\\nswswweseseswswsweseswswswswswseswsww\\neneeseseneenwwnwwneneeseeseswnwne\\nseswswswenesesweseswnwswsesenwwsesw\\nwwwwswwwwnwwswnwneesewswswsew\\nwnwseeneswseeeseseeseewwseenwnee\\nwseeseseseeseseseseseesesesese\\nseswswseeseseswseswswseswseswnw\\nwwwwwwwwwewswwswnwnwseswwwwsw\\neeeenwsweeeesweeneeeswenene\\nnwneewnwnewnenwenweneneswsewsenwsw\\nneeeneneeeeeeeneeeneeeneew\\nnwnwnenwwnwnwnwnwnwwnwnwnwnwnwnwsenwnw\\nsweenwnwswnwnwnwnwnwnenewnwsenwneeswnenw\\nseswseneneswnwswnweseseswsesewsesewswwe\\nwswwnwsewnewnwwswwewwswwsesewnww\\nwseswseseswswsesewnenwnwseneseneswsew\\nswseswwsesenesenwnwswseeswneswswseseswnesw\\nswnenwneneneenenewnwnenwnwseeswnwwne\\nsenewnwnewseseneeseswswnenwsewwsesese\\nnwsweswswswseswswsweswswswnwseswswwnwsw\\nnwnenwnenwswnwnenenenwnwnenwnenwswneneenw\\nnwnwnwnwnwnwnenesenwnwnenwnenwnwnwnenwnw\\nwwnewwnwwwwsewwwwnwwwwww\\nswseneseseswseswseswseseesesesesew\\neswswwswswswswwwswswswnenesweswswsw\\nswneneweneneneneneseneenenweeenene\\neseeeseseesesenweseneseesenwnwsewse\\neeeeeeeeeeeweeeeeeee\\nswneesewneenwnenesenenesenenenwwnewne\\nseseswsewseneneseswseswsewsewseswesese\\nenweneeneneeneeswneeseeneeee\\nnenenenwsenwnenwenenwwneneneswnenenesw\\nseseseeseneneeseseeseesesesewewse\\nneswseswseseseswswseswwseenwseswswnwswsw\\neneneeweeeeneseeeneeeeeewnene\\nnwenwswesweswenwe\\nseswswswseswswseswswswswwneswswswswneswsw\\nenenenenenwnenenenenenenenenesenenene\\nwseswnewneswwwswswwswewnenewwse\\nwwseneseweneswneeneeswnwne\\nwnwwwwwwwewnwwnenwwsewwsww\\nseneswneneenewswnenenwenweenenenesee\\nseseeseeswewseeeeenwenwsweene\\neneeeneeeeeneneeeneeneswwesenene\\nnewswnwsenwwswenwnewne\\nnwnwnwnwwnwsenwnwwnwwnwnwnwnwnwnwnwnw\\nneneeeeneeneneeeeneeeesweee\\nwnenenwswsewenenwnenwneneswnweenenwwe\\nnwwsenenwseswwsenwwnewnenwswwnwsenw\\nwnwwnwwwwewnewwwwwsewwwwswnw\\nnwnwsenwnweseswwswsenenenwnw\\nneenenenwnwnenwneneswnenesenenwnenwnenwne\\nnwwsenewnenwnesene\\neeeeeeesewsweeeswenweenwe\\nswwnewwseseswwswwnwnenewwnwsenese\\nwwswswseeneswswnwwswswswwswswswswswsw\\nsewnwnwnenenwenenwnwnwnwsenwswnwnwnwnenwnw\\nnwnwnenenwneswnwnenwnwswnwneenwnwnenwnwnw\\nnesenenwnwnwnwenenwnewnwnwnwnenwnwnww\\nwnesesesweseeeswneseenew\\nnenwewesenwnewwwnwenewswnwnwseenw\\nweeseeseeseneseseseeseeseesesee\\nswwswwwswswswwswwwwswswwwew\\nnwnenenenenwneswnwnwsenenenenenenenwnwnwnwe\\nseseseseeseseseseseseeesenwseeswseee\\nswseseseswseseswseswswsenesesesesesw\\nnwnenwnesenwnwnenwnwnenenwnwwnwnenwnwnwne\\nswswswswswseseswsesweseseswnwswswsw\\newwnwwwnwwwswweww\\nseewsenenwswseswswnwseswseseswneseswsesw\\nwnewwnwwwwwwwwwwwsewwwww\\nsesesesesenwseseseseseswseseseesenwnwse\\nswswswswswswswswswswswswswswsweswswnwsww\\nswswewseswswwwsewswwnweswswswswnenw\\nnwsewwnwnwnwnwwnwnwwwwnwnwnwnwnww\\nwneneseneneneneneesewnenenenenene\\neenwseeswswswnweseeseswneeenwnwne\\nneneneneneneneneneneswswnenenenenenenenene\\nswswswsesewswswnenwswswswseswswswswseesw\\nnesenenwseswswswnwswseseswseswsweswseswe\\nseeswenwsewneswneneswswnwswnwseswsene\\nnenwnenwnwnwnwnesenenenenenenwwnwnwnwnwnw\\nwneeneneneeneneneenenenesweneneenene\\nnwenenwnenenwnwnwnenwnwswseenwswwnesw\\nneseseneneseswswswwswsenesesw\\nswswswwnweswsewewswswswswswswswsww\\nnwswswseseswswseseeswsesesewseseswnesesw\\nwnenwneswnenenwseenwnwenewnwnenenw\\neeeneneneswnenenenenene\\nswswwswswswswwswweswwswswwnwwwww\\nnwswnwwnwwnwswnweseswenenwesenwnwnew\\nseeseseseseeeseseeseseenweeweee\\nswseseseseseseseswseseneseseseseseswsenw\\nnenwnenenenenenesenenenwnenenewnene\\nnenenenweenewneneswnesenenwnesenewne\\nswswswswwswswswneswswswswswswswsw\\nnwsesenwnwseseseseweeseseswsesesesese\\neeneneneneneseneenenenenwnenenenenene\\nsweswneswneneseswneenenenwneneswne\\neswseeseseeseseseseneseeeseewnee\\nneneeeweeeneneneeneneneeneeese\\nsweswswneswwwwswswswnwswnwseswswswwsw\\nwnwseseseeswnwenwsesweseweseseswnwse\\nseseeeswsewseseseesesenee\\nnenenenwneneneneneneneneneseenenenenene\\nnwnwnwenwnwnwnwnenwwnwsenwnwnwnwnwnwnw\\nwsewwwwswnwnenwwneenwwwnwsenwwnwse\\neseeeswenweneweseseeeeeeeee\\nnwnwwwnwswnwwwwewnwnwwwwwnwwnw\\nesesesenesesewseseswsesenee\\nseswenwnesenweswsenwnewsese\\nnwnwswnwnwenwenwnwnwnwwnwnwnwnwswnwnwnwnw\\nseswnwwsesewneseseseeeswseswswsenesenw\\nwseswnewsewwwseswnenenwneswswne\\nesweeeeewneeneneneeeeeeee\\neeweseswwswswwwnwswnwesenwwnenww\\nwswswwneswwnwwwswswwsewe\\nenwswwnwnwnenwnwnwnwnwnwnwnw\\nnwnwneneneneneneenenenenwnwneseswnwnwnww\\nwnwnwwwnwnwnwnwsenwnwwwnwenwswnenw\\nneseseneseewnesesenwseeeseswwseese\\nswswswwswswswswnewswswswswswswswsww\\nwwwsewwwnwswwnwnwnwnewnwwwnwnw\\nenwwwneesesweseeseneswewsesenesesese\\nesesesesesesenwsenwseseesesesesesesesesww\\neweeeeesweeeeeeeenweee\\nnewswseswseseseswsweswswnwneswwswsesw\\nnenwswnwsenwseswnwnwwswweesesewnenwse\\nseseseseseswseeswseswseswsenwswseswseswse\\nseseenewesesesesesesesesesenesesesesw\\nsweneesewsenwswswseseeeseenwenee\\nseeweseswnweseseeseeweeeeese\\nesweseeeeseeeeeewneeeeese\\nwwwswnwswswswweewswswswswwswwsw\\nswseswsenesesesesesesesenee\\nswenwnwnwswnwneswnwnwnwnenwnwnwseeswe\\nswnwnenwnwnenwnenwnwnwnenenenwnweenwwnw\\nnwswswenwneseswseenwnesenenewwnwwse\\nesweewneneeseneswnenee\\neeeseneweneneeneeseneneneneneenenew\\nswneswswwwwswswswswwwwswswswwsww\\neeseeweneeeesesese\\nsenenwsenwwnenenwnwwnwnwnwnenwsenwsenenene\\neneeenewwsweeeneneseeswneewenw\\nsenwnenewenwnwneswweneneneseeneenesw\\neesenweeseesweewewneeeseee\\nwsenwewnwwwwnwse\\nnwnwnwsenwnwnwnwnwnwnwnwnwnwnwsenwnwnwnwnw\\neeweseneeeeweeneneeeneeenw\\neseeeeseeseeseseeseseseenweese\\nsweeswneseesenenenwswwneneswnweenwnw\\nnwneenwswnenenenenwnwnwnwnenwnenwnenwnene\\nwnwnwnwwnwwwnwnwnwwsewnwnwenwswnwww\\nwwwwnwwwwwwwwwwwwwwenw\\nwwwswwswsewwswnewnwwwewswwneww\\nsenwswseseesenesewseseseneeswsesesesesese\\nnwnwswsewsewswnenenwew\\nnewnenwnenwnwneneenenenenenenwnwnenene\\nwnwnwnwnwnwwnwsewnwwwwwnwwnwwe\\nswswswswneswswswswswseswswswswswswseswsw\\neneneneeneneseswnenenenenenenenewnenene\\nnwnwnwnwnwnwenwnenenwnwnwnww\\nnenwwswnwnesewenwnesewwnwsenesewswsw\\nnwwnenenwneeneneseenewnenwnwnenwnenwne\\nswswswswswswswswswswwwwsweswneswswe\\neneneneneneneneswneswnenenenenewnenenene\\neeeneeeeeneewseneeeeeeene\\neseseeseneseswwsesesesesewsesesenwsw\\nnwnenenesenewnenenwnenenenenwnenesenenenene\\nwnweewswnwswewneswnesenwwewswew\\nwswswswsenweeeweneeeneewneeesene\\neeeeseeeseeeseseeenweeesesw\\nswswswnwnwenwnwswnenwnenwnene\\nswwswswswswwwwswwweswwwswswneswsw\\nwwswwswseneswwwswswswenwsweswsenew\\nswwswswseswseswswseswswneseswswswseseswnesw\\neeneeeeesweeeee\\nswwswswwswwswwneswwneswswswswswwsw\\nseesesenwseseseswse\\nnenwnwnwesweneswnenenenenenenwswne\\nnwnwwnwnwwnwsenwnwnwwsenenwnw\\nswseswwnwswswswswswseswswswenew\\nenweeenwesweeeeeeeeeesenwsw\\neswseenwswnwsesesesenwseewwseenesenw\\nwswseeswneeeneewneneneeenwneeswnw\\nnewnwsenwnenweneeeneesweseeswnw\\nnwnwwswwnwwwnenwnwnw\\nwnesenenenwnenenenewnenwnenenesenenene\\nswswwswsenwswswswswswswsw\\nsewseswswneseseswseneswswseesesenesese\\nswwseswwswswswwnwswwwwnewwwwww\\nwwwnewsewwwwwwwwwwwwwww\\nnewnenwwnwesewnwnwwenwwnwsenwwnwsw\\nnwwsewwwnweseneneswswwsenewwsenw\\nswswswwswswnwsweswswseswswswweswswswswne\\nwswseseswsenwnweseeseswswse\\nnwnwnwnwnwswnwwnwnwnenenwnwswwnwnwewnw\\nneswswswseswswsenwesweseneseswwwnwswnwsw\\newwswswwswswswwswswswswswnweswwwsww\\neeseeseeseeeeseeeeewseeese\\nneeeenwneweeeeswseeeneeneee\\nneenenwswnenesenenenwneneneneneneewwne\\nneneeeneneneswnenenenenenewnenenenenee\\nneswnenenenwnwswnwnenenenenee\\nwwwwenwwnewwwwnwwwwwwwnwsw\\nnenewsenesweseneeneenwwnenwneswwsw\\nsewwwnewwnewswwwww\\nsenwnwenwwnwsenenwnwswenenwnwswnwnwsenew\\nnwnwnwnwnenwnwnwswnwnwnenenwnwne\\nwswseeenwewnweeeewswseesesese\\nwwswwwwwwwseneeenewwwwwse\\neeeseeeeeneesweeeeeeeese\\nneesewneneneneeneeeseeeenweneee\\nseseseseseswseseseseseseswsesenesesesese\\nsenenwnenenenwnenenenenweneswnewnwnenene\\nsewswwesweewswwnwswswwwwswsww\\neeneneeneneesweneeneneneswnenenwe\\nswneswswsesesesenwswesewwneseswsweswnw\\nnenesweneeeneeneneneneneneneee\\nnwwsewnwnwnwwnewnwnwnwwnwwwnwsenw\\nwnenenwseswneneneswenenwsenwneswnwne\\neeeeesweeeeeeeeneeneeee\\nnwnwnwnwwwnenwswnwnwewnwwwwwnwnww\\nnewnwnwnwnwsenwnwnwsenwsenenwnwwnwnwnwnww\\neseseswseseseseseneseseseeswenwesew\\nwswwwwswwwwwwwwwnwwwsewsw\\nnwnwnwnwwnwnwnwnwnwwwwnwnwnwwnwnwe\\nnweneseneneseewnwnenwwseseneneeenee\\nnwnwnenwnwnwnwnwnwnwnwnwnenwsenwnwnwnwse\\nseseseseesesesewsenwsesese\\nsweenweesenwwewsenwswsesweenene\\nnwswnwnenwenwnwnwnwneeswenwnwnwwnwnwne\\nnenenwwnenesenesenenenenenenesenenewswnw\\nsenweswnweseesweeesenwseenweenw\\nseswsweseswewswnwnwswswseswnwseswswne\\nenwnenwnwnwnwsewnwnwswwnwnewnwsew\\neneeneweneeeeeeneeeeenweesw\\nseseseseenweseswwewneeew\\nneenwsesweeenesweeee\\nnweenenenwneneseswesweeneneneneene\\neseeeeesenweeesweeseeseeseee\\nnwnwnenwnwnwsenwnwnwnwnwnwnwnenwnwnwnwwnw\\nseseseswswswswseswnwswsw\\neeswenwneneeeeneneeneeeeeenene\\nwnwnwnwwwnwwnwnwwswe\\nesenenenenenenwneeswnwnwnenenenwnwwnw\\nseseseswsesenesesesesewse\\nnwnwswnwswwnwnwnwnwnwnwnwwnwenwnwwew\\nseseseeeeeesweeseeseene\\nseeswwwneeswswnesweswswwenwswnwsww\\nnenenwnwnwswenenenwnwnenwnenenwnwnwnwne\\nswseswswwswswswnwnwnwseswwwwewwsw\\nneenwseeneesesenewneenwnwneeenwsesw\\nwswswswseesenwneswnwswseseneseswwswswsw\\nswenesenesesenwswsesweswwnwswnwwsenwsw\\nnwnwnenenwnwnwnwnenenenwnwnese\\nswswseswseeswsweswswseseseswswswwnwswswse\\nswswsweswwwswswswsweswswseswswswswsw\\nnwnwsenwwnwnwnwsenwnwnwnenwnwnenwnwwnene\\nnwwnwnwnwwnwwwwwwwnwewwewww\\nswwswswseswswswswswswsweswswswswswswsw\\nnesesesesenwewswnwsesesesesenw\\nseseeeseseeseeseeeesenwseseeswwe\\nswseswswswswseseswsenwnwswsw\\nswswwwwwewswswewnwnwnwswewwsw\\nswswnewswswsenewswnenwneeesenwswwsw\\nswswswswswswswswswswswswnewswswswwswsw\\neweseeenwseseeseeseseeseseseee\\nsewseseswesewseseneseswswseesenwnwsw\\nwswwswwwwwnwswswswsenewwswwswww\\nnwnwnenwwnwwwwwnwwnwwwnewswnwsw\\nneseswwsenwnwswwsenwneesenene\\nsewewwswwwswswwsewnwneswswwwnw\\nnenenewnewsweeeeeseswswseenwnee\\nwwwnwnwneseswewswwswseswwswenewsw\\nneswsewswswswwswwswswswwwswswsw\\nnwnwnwenwwnwenwsewenwnwswwwnwnwnwnw\\nnwnwnenenwnenwnwnenewnwseneswnwnwseenwnw\\nneweeseenwseeeeeeseseenwneeew\\nseswnwnweseweeswnwnewnesweswnenenw\\neneewneneeneeneenenwnesweeseene\\neenwsweeneneneneeeneeneeeneenene\\nneneswnesweneenewneseneswnenwnenwwse\\nswneswswsesewwseswseswswswseneswswwswne\\nnwnwnwnwnwnwnenwnwnwnwnenwnwswenwnwnw\\nwswwswwwnewswsenwwwswswsewwswsw\\nwsewwwwwwwwewwnwwwwwww\\nseswsweseswswnwswsesenwseseseswwseswse\\nwwwswwswwwswswswswswswwswswswew\\nswswseseswswsesesenwneswswswseseeseswwsese\\nenwswnwnwnwnwneneneeswnwneeswnewnwnenw\\nswswsewswswnwswnwneswswwwwnwwewse\\nnewneeneneneneneenenenenenewnewenese\\nnwnwnewnwewenenw\\nswwnesenwseneneswnenenenwnw\\neeeeeeeneeeeeseweeneeene\\nswswswwwsesewswswswwwnwwwswwswwne\\newsenwwewwewnwwwwwwnewwww\\nnenewneeneenenenenewneneeneneneseneene\\nswswsewseswswseswweswswswswneswswseswsw\\nswseswseswsesenwsweswwseswseswseswenese\\nswewwnewseswnwwwwswswwwsewnene\\nseenesesweseenwnwseseesesewsesesweese\\nnwswsenwenwnwnwswnwewnwnwnwnwnwne\\nwsewwnewwwwwnwswwwewwwnw\\neeeeenwswnwswee\\nwswwwwwwwwwwsenewwwwwwww\\nnenenenwseseneeseneneneeswnwesenwnwnwse\\neneswswsweweseswswsenwswswswwwnesese\\nnenwnwnwsenwnewnwnwnwewenwnenwnwnwnwnw\\nnewnwswwwwwnewswsewwwwwwswswne\\nsewseneseseseseseseseseseeseewsesese\\nenenenweeneeeeneneneeeneeneeesw\\nesweeeneeseeeesweeeseswnwnwenw\\nseseswsweeswswwseseswswseswseswsesenw\\nnenwneneenwnenwnwnenwneneneeswneneneneswnw\\nnwnenenwnwswnwnwnwnenwnenwnwnwnwnwneswne\\newnewnwswswweeswwewnwenenewwswse\\neeesweseenwenwesweweeeeseswne\\nnenwswnenewwnweneneswewneneeneneswnee\\nswseseseseeswseseswseseswsenwseswsesenw\\neneseeeswseseesesweeenwse\\nenenenenwwnwneenewnenwnenenwswnwsesenw\\nwswwswswswswnwswsweswwswswswswswswswsw\\nnenwneswnenenenenenenenenesenenenenenenene\\nswnenwnenewsewneneneneneneseeneenenenenw\\nwwswwnewswswwwwwenwsw\\nseeeseeenwneseseseeeeeewsesese\\nseneseseseswseseseswnwswseseswsenenewsw\\nswseseeswseswswswseswswwswswswswswswsw\\nnwnenenewnenenwneenenwseseneneneswnewne\\nnewneneneneneneneenenesenenenenwnenew\\neeneeeeweeneneeeeeeeeswenwsw\\nnwesesweseseswsesewsesesesesesesesesese\\nwesweeweewswwnenweeneenesenene\\nswswnewswswwnweneseseseneseswwwseesw\\nwwswnewnenwswswswwewwwswswnewwse\\nneswseseseseseswseseseswswsesesw\\nneneneneneneswnenenenenenenenenwnene\\nwnwenwwnwnwnwnwwnwnwwnwnwwwnw\\nsenwneswnenenwnwseneneswnenwnenewnwnenee\\nnewwwnewwwwwwsewwswwsewneww\\nnwsenenenenwswnenenwsenenenenwnenenenene\\neseeseeseseseeseweseseeseesesee\\nwswswwneewnwnwsewwwnenewseneswww\\neeseeeeeeeeeeeneeeeeew\\nsenwwneneswnesenwsewnenwnwnwnenwnwnew\\nsewneseseseneswswswswswsweseseswseswwsw\\neseseeneseeewneenweeenwnwswenee\\nswnwneswweneeneewneswsenwesenwesee\\nneneswnenenwnwnenenenenenwswneneeswnene\\neeseseeesewsesee\\nseseesenwswseseseswsese\\nneenwseeenwsewwwseesenesesesesesw\\nenweseneeeneneenewenewenwswese\\nwwwsewwwswewwswwwnwswwwswsw\\nswnwnwwseewnwnwwswnwwnwnwwnwwwnewse\\nseseseseeseseseseseseeswenwseesesesese\\nneneneneneneeneneenenenenewneeneee\\nweenwnenwwsweseseswnwsee\\nsesewwwnwwwnewwww\\nneewewneeneweeeeeeneenesenene\\nnwwnwwsewnwnwnwnwnwwnwnwwnwsenwnwnwnw\\nsenwnwnwseseseseswwsenwsesenwseneesenw\\nwewswwswswswwswswwwwsww\\nnwseneseswwnwswnwseseenwewseeeenwsee\\nneneswnenenenenwnenesesenenesenenenwnenw\\nnwneneeeswnewsenweenenenweswne\\neeenwneswseenewswnwneenwseneneeeee\\nneneneeeneseesenewneenwwneneneneswne\\nswswswswswswswswswswswswswswswswneswswsw\\nenweeeseeseeeenwswweeeeeee\\nwenwnewseenwnwneweenwnwnewnwnwnwnw\\nswswswsweswwwswswwnewswwswwwseww\\nnwwnwnweseswnwwswnenenwnwnwwswewnw\\nwnewwwwsewwwewwwwwwswww\\nswseswswswwswswswswseesweswswsesenwsw\\nsweswnwseeswswseswwswnwswswswswneswsw\\nwwswswseswwneneswseswswwswnwwswseww\\nsweswswswswseswswswswswswesweswwswnwwsw\\nsewnenwnenwswnwswenenewnwnenwseewnw\\nwnwwneenesewneeneenwnesewnewnwnenene\\nseswswswneneswswswseswswwswesenww\\nswswswwseneswswwswseswswswswesw\\nnwwnwnwwwnewwwsewnwnwnwnwnwsenenwnww\\nseseseswseswswseseseswseneeseseswswsewsw\\neeneweseseneesesweseeeeseeseese\\nswseswswseseswswnenweseswswseswseswsenw\\nwwwwwwwwweswewwwwwwwnew\\nswseswswswswswswswseseseswswswswwneswswsw\\nwwwswwwwswwwwwwwwnewsesww\\nnenenewneneneneneneneeneswnenenene\\nnenenwneneneneneneewneneneneneswnwnene\\nnwneeneneneneeeneeeswneswenwswneswse\\nnesenwseeseswneseesenwsesesweneeesesw\\nswwswwswwwseswwwwnwwswsewneww\\nwwwwwwwsewwwnew\\neenwesweeeeweneneeseneeewee\\nswsenwswnwwwswneenwwnwnwenwenenwnw\\nswnesweswnwswneenwsesweneneswnwnwnwnw\\newswwnwseswsenewnewwsweeneneneese\\nsweseneseswnewenenwnwwswseseseseswsene\\nnwnwnwnwwsenwnwwwnwnwnwnwwneewnwnw\\nnwnesenenwnwnenenwnwnenwwnenenenenwnene\\nnwnwswnwnwnwsenwnwnenwnenwnwnenwnenwnwnwnw\\nwsenwwenwnwwswwnenwwewnwnwnwwwse\\nwwswswnewwswwwwwwwswwweww\\nwswswwswswwswnwswswswswseswswswswsww\\nwwnwwewnwnwnwnwnwseeswwww\\neeeeeeeeeesweeeeenwseeeew\\neewneseenesenweneswseseeeweee\\nswwwswswwswswswswseswswwswnwswswwsw\\nnweeeeneneeeeseweweesweeeene\\nweewneweswnwwsenenenenenwesene\\nsesenwseseseseeweseeseswenwsenwsee\\nesweeeeeeswnenenwenweeeeee\\nwswswwnwswswwswewnwswswswswswswswewsw\\nsweswswswswswnwswseseswswseseswswswswsw\\nnwewseeseeeneswswseeweseeeneenw\\neseswnwneneeneneeenwneneenee\\nswwswswwneswsewswnwnwwseeswwwsew\\nneesewweneseseswnwnewnweneswnwneswnee\\nnwseswseswswswswnwswsweswwswseseswswe\\nwnwwwsewnwenwwwswnwwnwnwwwwww\\neseseseeneesesesenesewsesewsesesewse\\nswnwnwswnewwenwnwnwnwwwnwnenwnwwsww\\nnwnwnwnwnwnwnwenwnwnwnwwnenwnwsewsenew\\nneseswseswwseseswenwnwswseswseseesew\\nnwwnwnwnwnwswesweeenwnwswseeswnwnw\\neeeeeeseeeeeesenweeeesese\\nnwenwwnenwnenenwnwnwnenwnwneneswnw\\nnwswswseswnwsesenwseseswswse\\nswseswneswsweseswseswwwswswswnwswswswsee\\nenwsesesesewseeseeeseseee\\nwenenesesesewnwneneswnwsweweneeswenw\\nsewwswswnewsewewswswwwswswnenesesww\\nseewseseeseseseseseneseseeeeeeee\\nnwnwnwnwnwenwswnwnwnwnwnwenwnwnwnwnww\\nswswswswswwsweneswswswnwswswswswswswswse\\nneneeneeneneneswnenenewnenenenenenene\\nnenenwewnenenwnene\\nsesesewseseseseseswseseseswnesesenesew\\nnwnwnwwnewseenwnenwswnwswnwneneneene\\neseeeeseseenwesweeeenweeswee\\nneswwnewswsewswwseswswswswwwnwseswswsw\\nnwnwnwnwnenenwnenwnwneswneenwnwnwnwseswsw\\nwswwwwwswewswwwwnewsewswwnw\\nnwwneenenenwnwneenenwnenenesenenwnesw\\nwwewwnwwswewswwwneewwneeww\\nwswnweseseseseswseseswsesesenesesenese\\nwnwewnenwnwwnesenwnwnwnwsenwnwnwnwnwnwse\\nseenewswswswswsewswswswseseswswswswsese\\neweseswseeeenweeeeeeeeeee\\neswsenwneswswswswwnwswneswneseseenwnenw\\nnenwnwnenenwnenesenwnw\\nneneneneneneeswnenwneneseneneenwsw\\nnwwnwwwwnwwnwnwwnwwe\\nneeneswsesesesenesenesewseseswesenwsewse\\nseenwswsweeswswswswwwnwseswseswsee\\nsweswnewwwswnwnwewswwswwswswwww\\neewneenwneeeeswneeseseeee\\nwewwwwwwwwwwewwwwwwww\\nnwsweneneneewnwnenwnenenwnwnwne\\nnenwneneeneswenenewneneseneswwnenenene\\nswnwseswseswswseswswseswswswseswswswsese\\nwnwwnwnwnwneenwnwnwnwnwnwnwenwnwnwnw\\nwwswnwnewenwwswswwnewwwwwwwne\\nneewnwnwwnenenesweneneeenwseneneswnwne\\neneswnenwswnwnenwnwnwne\\nwswnenewneswwswwwseswneswswnewswnenw\\neseeseeeseseenweeeenweeeeeswse\\neswsenweneeeeeneeeweneeneneeene\\nnenewnesesenenenenewsenenwnwne\\nnewwwnwwnwnwnwwwseswwwwnwnwnenwww\\nnwnwnwnwnwenwnenwnwnwwnwnwnwnw\\nswswswswswswswswnwseswswseswswswswswsw\\nnwnwwsenwnesenwnenwnwnwnwnwwswwnwww\\nsenenwswswswwswswswswswswswswsewswswswsw\\nnwwwwwwwsewwwwwwnewwwe\\nwnenwswnenweswnewnwnwenwnwswnwnweesenw\\nnweseeeswenewseeeneeeweswneenwe\\neswnwseswnwswswswewswswwswswswswsww\\nswsesesenwsenwswswsewneseseseenwsw\\nseseseswseseneseseseseswswseswseswneswse\\nnenenenenwsenwsenwswsewwwwwswnwenwse\\nneeneneneseneneneeeswnweneeee\\neeneneeneneswneneenweneswnenenenewne\\nesenwwswwnwswewwwswswswswnwwwsw\\nwwwseseswnwnwneeenwwnewswnwswwwe\\nwswseswseswswswswnwswswsweneswswswsesw\\nnwswnwwwnwnwenwnw\\nswsesenwneseseseseseseseseseeseseesese\\nswsenewwsewnwwwwswewwneewwse\\nwwsweswnwnwnwsenesewswneneneseewne\\nnwnwnwnwnwnwnwswnwnwnwnwnwnenwnwsewnwnwne\\nswseswswsesewswsesweswswswswswswseswsw\\nnwnesewnenenenenesenenenenenenenene\\nnwnwnenwwnwnenwnwnwnwnwnwnwnenenwnwnwnwse\\nneeesweneneenee\\neeseseseneswweeesesenweeesenweenw\\nwswwswswwwwwwwwewwwswweww\\nseseseesesewsesesewsesesesesesenesese\\nnwnenewseseneswneneweeswnenesenwewne\\nneseeneneneseenenenenenenenenwewnenee\\nseseseswseseseseseswesesenwswseseswsesw\\nswswsenenwewneseeeneeeneenesenwwe\\nsewwwnesesenwwnewwwwwwnww\\nnwseesweseswseswnwwsesweswsenwnesenenw\\nwwneseseeeseseeseseseseseneewseseee\\nnenenenwnenwnwnwneenwnewwneenenenwnw\\nsweeneeeeeeneeeeeeswneeee\\nwseeswwswwwwwsweswwnwswswswswww\\neneneneeneswneneeneswneeneneneeee\\nenenenenenwnwwswnenenese\\nswnewnweseseewneneeswswswwnweww\\nseswsesesesesesesesesesesesenesesesesese\\nwswswswswseswnewswneswwwswswneswewsw\\nwnenenenenwnenwwenwnwsenwnwnwnenwnw\\nseseeeeeweeeeeeeenwseesesese\\neeeesweeeeneeseeenweesewesene\\nswnewswneswwseneswwswneswswswenwswse\\nnweneeneneneneneneesenwswswenenesenww\\nseneneneeenenenenenenwneneneeeenene\\nswwswswswswswwwwswswswweswwswsww\\nnenwneswnenenwnenenenenesenenwneneenwnwne\\nswswswsweswswnwswswswswswswswswswswswsw\\nsesewnenwnenenwnenenwneenenenwnwnwswnenwnw\\nsesenwseseseseseseseseseeseswsesesesese\\nseseseesenwsenwseseswseseseseseswsewnese\\nwwswnwwswwwwwwwwwneewnwww\\neeeseswsesesesenwnweseweese\\nneeeseeeweneeeeeneenwswnwnesw\\nwnwnwwwnwnwnwewswnenwwwwwswwnw\\nswnwseseswwswneseswneseswswswseseeswsw\\neswnwnwswswwswswswswsweneswseswswneswswsw\\nnwseseeseseseseesesesesesee\\nseswseswswewwswnewnwswwwswnwswww\\nwwwwwnwnwnwnwnwewswnwwnwwnwnww\\nneseswnwswswseswseseseswseswseswseswswsesw\";","export default \"343\";","export default \"431 players; last marble is worth 70950 points\";","export default \"347991\";","export default \"ne,se,se,s,nw,s,ne,sw,s,nw,sw,sw,sw,sw,sw,s,sw,nw,nw,nw,nw,ne,nw,nw,n,n,n,nw,nw,nw,n,n,s,nw,sw,se,n,n,ne,n,n,n,sw,n,ne,n,nw,n,sw,n,se,n,ne,ne,sw,n,n,ne,ne,ne,ne,s,se,ne,ne,ne,n,ne,ne,ne,sw,ne,ne,sw,se,se,ne,sw,nw,se,s,nw,se,nw,se,se,se,se,se,ne,se,se,n,n,se,se,sw,se,se,se,se,se,se,se,se,se,ne,se,ne,se,se,s,se,se,se,se,se,s,se,ne,s,se,s,se,ne,s,se,s,s,s,se,se,s,s,nw,s,s,s,se,s,s,s,s,nw,nw,s,s,nw,s,s,nw,s,s,s,s,s,s,s,nw,s,sw,s,s,sw,s,s,s,s,s,ne,nw,s,s,n,s,sw,s,n,sw,sw,sw,sw,s,sw,sw,sw,sw,sw,sw,s,s,se,se,sw,sw,nw,s,s,s,s,sw,sw,sw,ne,s,sw,s,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,nw,sw,sw,sw,se,se,sw,sw,sw,sw,sw,sw,sw,nw,nw,sw,sw,nw,nw,s,sw,sw,sw,sw,se,sw,s,nw,se,sw,nw,sw,sw,sw,sw,sw,sw,nw,nw,sw,sw,sw,sw,sw,n,n,nw,sw,sw,nw,se,sw,nw,sw,ne,sw,nw,n,n,nw,sw,nw,nw,nw,nw,nw,sw,n,nw,nw,sw,nw,n,nw,sw,nw,s,sw,sw,sw,nw,nw,sw,nw,nw,nw,sw,sw,nw,nw,nw,nw,nw,nw,sw,nw,nw,nw,nw,ne,nw,ne,nw,nw,sw,nw,nw,se,nw,nw,se,nw,nw,nw,sw,n,n,nw,n,nw,nw,sw,nw,n,nw,s,nw,nw,ne,nw,nw,nw,nw,nw,n,nw,n,nw,nw,nw,se,nw,nw,n,se,n,ne,nw,nw,nw,nw,nw,nw,n,nw,nw,nw,n,nw,ne,n,nw,se,n,nw,se,nw,n,n,s,nw,n,n,n,ne,sw,n,se,nw,nw,nw,nw,nw,n,n,nw,n,nw,nw,nw,n,n,nw,s,nw,nw,nw,nw,n,n,sw,n,n,nw,nw,se,nw,ne,nw,n,nw,se,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,nw,s,s,ne,nw,nw,ne,sw,nw,se,n,se,ne,ne,nw,nw,n,nw,s,n,se,n,n,n,n,n,n,n,n,n,n,n,n,nw,n,n,n,n,nw,n,se,n,n,sw,n,n,ne,s,n,n,n,n,n,n,n,n,n,s,n,nw,n,n,ne,s,n,ne,se,n,n,ne,ne,n,s,s,n,n,nw,n,n,s,ne,n,n,n,ne,ne,n,se,n,n,n,n,sw,n,sw,n,se,s,nw,n,n,n,ne,n,ne,n,ne,se,s,se,ne,n,n,n,ne,ne,ne,ne,ne,ne,n,ne,n,n,ne,n,n,se,ne,n,n,n,n,se,ne,n,n,n,se,s,ne,ne,ne,ne,ne,ne,ne,sw,sw,ne,ne,ne,nw,n,ne,n,ne,ne,ne,n,ne,ne,sw,ne,n,se,ne,nw,ne,n,s,ne,ne,ne,ne,n,ne,ne,ne,ne,ne,ne,sw,s,n,ne,n,ne,ne,ne,n,nw,sw,ne,ne,ne,ne,ne,ne,se,ne,n,s,ne,sw,nw,ne,n,ne,n,n,ne,n,ne,ne,ne,s,ne,ne,ne,ne,ne,ne,se,ne,ne,ne,ne,ne,ne,s,ne,se,n,ne,sw,ne,n,ne,ne,ne,ne,ne,ne,s,ne,ne,ne,ne,se,ne,s,ne,ne,ne,ne,s,ne,ne,s,ne,ne,ne,ne,ne,ne,ne,se,se,se,ne,ne,n,ne,ne,ne,s,n,ne,s,ne,se,ne,ne,ne,ne,ne,s,sw,ne,s,ne,se,se,ne,nw,ne,se,se,se,ne,nw,sw,ne,ne,ne,ne,ne,ne,ne,ne,ne,s,se,ne,ne,se,s,se,ne,se,ne,nw,s,se,ne,ne,se,se,se,s,ne,se,ne,sw,se,ne,se,se,ne,ne,ne,se,se,ne,se,nw,s,ne,ne,n,ne,ne,se,ne,ne,se,ne,ne,se,ne,ne,ne,se,ne,nw,ne,ne,sw,se,se,sw,se,ne,ne,se,nw,sw,ne,s,ne,ne,se,ne,ne,s,se,ne,ne,ne,n,sw,n,se,ne,ne,ne,se,n,ne,sw,ne,sw,se,se,ne,ne,se,ne,ne,se,se,se,se,nw,nw,se,se,ne,se,sw,ne,s,ne,ne,se,se,se,sw,sw,se,ne,ne,nw,n,ne,se,ne,ne,se,se,se,ne,ne,sw,se,ne,se,ne,se,se,se,se,ne,se,se,se,ne,se,se,sw,se,se,se,se,se,ne,se,se,se,se,se,ne,se,se,se,se,se,ne,ne,sw,se,se,ne,ne,ne,nw,se,se,nw,se,se,se,sw,se,se,se,sw,ne,se,se,sw,se,s,se,se,se,se,se,se,s,se,se,s,s,se,se,se,se,se,se,se,sw,se,se,se,se,se,se,ne,n,se,se,n,se,se,se,sw,s,ne,s,se,se,se,se,se,se,se,se,sw,ne,se,se,s,se,se,se,se,s,n,se,se,nw,se,ne,se,se,nw,se,se,se,se,n,se,se,se,se,se,se,se,se,n,se,se,se,se,n,se,s,se,n,s,se,s,s,sw,se,s,se,n,se,sw,s,se,sw,se,se,se,se,se,se,se,se,se,se,se,se,se,se,se,sw,n,sw,se,se,se,s,se,nw,se,s,s,s,se,s,se,se,sw,sw,se,se,ne,se,s,se,s,se,ne,s,s,se,s,nw,se,se,s,sw,s,se,s,s,se,s,s,sw,nw,se,se,se,sw,s,nw,se,n,se,s,s,s,se,se,se,se,ne,ne,s,s,se,se,sw,s,s,se,se,nw,s,nw,s,se,s,s,s,se,se,s,s,s,nw,n,sw,se,se,s,se,se,se,se,se,s,s,se,se,s,s,s,s,se,sw,se,ne,nw,sw,ne,s,s,s,se,n,nw,se,se,se,s,se,ne,sw,s,s,se,s,s,s,nw,nw,s,s,se,s,s,se,s,s,s,sw,s,se,se,ne,s,se,s,nw,s,se,s,se,se,s,s,nw,n,se,n,se,s,s,se,se,se,s,se,s,s,sw,s,s,nw,se,sw,s,sw,s,s,s,se,se,n,s,se,s,ne,s,s,se,s,se,se,s,nw,s,s,s,n,se,sw,s,s,se,ne,s,s,s,n,s,s,s,s,nw,s,s,s,n,s,se,s,s,s,se,s,s,s,s,s,n,s,s,se,se,s,ne,se,se,s,s,ne,s,s,s,se,se,se,nw,s,s,se,s,se,s,s,s,s,s,s,se,s,s,s,s,s,n,s,s,ne,n,s,s,s,s,n,n,ne,se,s,sw,s,s,s,s,s,s,s,ne,s,s,se,s,se,se,s,s,s,s,s,ne,s,s,sw,s,se,nw,s,s,sw,s,s,s,sw,s,s,s,s,s,se,nw,s,s,s,s,s,sw,s,s,s,s,sw,s,nw,ne,se,s,ne,s,s,s,nw,s,s,s,s,se,s,s,sw,s,s,s,s,s,s,s,se,s,sw,ne,s,s,s,s,sw,sw,sw,s,nw,s,ne,s,s,s,n,sw,sw,s,sw,sw,s,se,s,s,se,s,s,s,s,sw,s,s,sw,s,s,s,s,nw,sw,s,s,sw,s,s,se,nw,s,s,s,s,s,nw,s,sw,s,s,n,s,s,s,n,sw,se,s,se,s,se,s,s,sw,sw,n,sw,s,s,se,s,sw,sw,se,s,nw,s,sw,s,s,s,nw,s,s,s,s,sw,nw,sw,s,s,s,s,s,s,s,s,nw,s,sw,sw,sw,s,sw,n,s,sw,n,sw,s,sw,sw,s,s,s,sw,s,s,n,n,s,sw,s,sw,s,s,sw,nw,s,se,s,s,s,n,s,s,se,sw,s,s,sw,s,s,sw,s,sw,sw,s,s,s,sw,s,s,s,s,s,sw,sw,sw,se,n,s,sw,sw,sw,s,n,se,s,s,sw,s,s,sw,sw,se,se,sw,sw,sw,s,s,s,sw,s,sw,s,s,sw,sw,sw,se,s,sw,s,sw,sw,sw,se,sw,sw,sw,n,sw,sw,s,s,s,sw,s,sw,sw,s,sw,ne,s,sw,s,s,sw,s,s,n,sw,s,s,sw,se,s,s,n,sw,sw,s,s,s,s,sw,nw,se,sw,sw,sw,s,sw,s,sw,s,sw,s,sw,s,nw,s,s,sw,sw,s,s,sw,nw,ne,sw,sw,sw,sw,ne,s,s,sw,s,sw,sw,s,sw,sw,s,sw,sw,sw,sw,s,sw,ne,sw,sw,s,nw,sw,s,s,s,s,sw,sw,se,ne,nw,sw,sw,sw,s,s,se,s,s,sw,s,sw,sw,s,n,ne,sw,sw,s,sw,s,sw,s,sw,s,sw,sw,sw,sw,s,sw,s,sw,sw,s,nw,s,nw,s,sw,sw,sw,sw,s,sw,sw,s,sw,sw,s,se,s,sw,sw,sw,sw,sw,sw,sw,s,sw,sw,sw,se,s,s,sw,sw,s,s,sw,sw,sw,s,sw,s,sw,sw,s,sw,sw,ne,sw,s,sw,s,sw,sw,sw,sw,s,sw,se,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,nw,sw,sw,s,sw,sw,sw,nw,sw,sw,sw,se,n,sw,sw,s,s,sw,sw,sw,s,sw,sw,sw,nw,sw,sw,nw,sw,sw,sw,sw,s,n,sw,s,sw,sw,sw,s,sw,se,sw,sw,sw,ne,sw,sw,sw,s,sw,sw,sw,n,sw,sw,s,sw,sw,s,sw,sw,s,se,s,sw,sw,sw,ne,sw,sw,sw,n,sw,sw,sw,sw,sw,sw,ne,se,sw,sw,n,sw,sw,sw,sw,se,sw,sw,nw,sw,n,sw,sw,sw,sw,sw,se,sw,sw,sw,sw,sw,nw,sw,se,sw,sw,sw,s,n,se,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,ne,sw,se,sw,se,sw,sw,sw,sw,sw,s,sw,nw,n,se,sw,ne,sw,sw,sw,n,s,se,sw,se,sw,se,n,s,sw,sw,sw,nw,n,se,sw,sw,nw,sw,sw,ne,sw,sw,s,sw,sw,s,sw,sw,sw,nw,s,sw,s,s,sw,ne,sw,sw,sw,sw,nw,sw,s,sw,nw,sw,nw,s,sw,sw,sw,s,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,ne,sw,s,sw,sw,sw,sw,nw,sw,sw,nw,sw,sw,nw,sw,sw,nw,sw,sw,sw,sw,sw,sw,sw,sw,sw,nw,sw,sw,sw,s,sw,se,s,sw,sw,nw,sw,sw,n,se,sw,s,sw,sw,sw,nw,sw,sw,sw,sw,sw,nw,nw,nw,sw,sw,sw,sw,sw,n,se,sw,sw,n,nw,sw,sw,n,sw,n,sw,sw,sw,sw,nw,se,nw,sw,sw,sw,ne,sw,nw,nw,sw,sw,sw,sw,sw,nw,sw,nw,nw,nw,sw,sw,sw,ne,sw,sw,sw,se,sw,nw,ne,sw,sw,sw,nw,sw,sw,n,sw,nw,nw,nw,nw,sw,sw,sw,sw,sw,se,sw,sw,ne,sw,s,sw,sw,sw,sw,sw,sw,sw,sw,ne,nw,sw,sw,nw,se,nw,sw,sw,sw,sw,sw,nw,nw,sw,sw,sw,ne,sw,nw,sw,sw,sw,nw,sw,sw,sw,sw,ne,n,nw,sw,sw,nw,sw,nw,n,sw,sw,sw,ne,sw,sw,sw,nw,sw,nw,sw,nw,sw,sw,nw,se,sw,sw,nw,nw,nw,nw,nw,nw,n,sw,sw,s,sw,sw,sw,s,se,sw,n,sw,se,nw,sw,sw,sw,sw,nw,nw,nw,se,sw,ne,sw,n,sw,se,sw,nw,nw,sw,nw,sw,sw,sw,ne,sw,n,nw,sw,nw,se,sw,ne,se,nw,sw,nw,se,sw,nw,sw,se,n,nw,se,sw,n,se,sw,nw,se,s,sw,sw,nw,sw,sw,sw,nw,sw,s,nw,ne,nw,sw,n,nw,nw,ne,ne,nw,ne,sw,nw,sw,nw,nw,nw,nw,sw,sw,se,sw,nw,sw,nw,sw,sw,sw,nw,nw,ne,nw,sw,sw,se,sw,nw,sw,sw,sw,sw,se,sw,ne,nw,sw,sw,nw,nw,nw,sw,se,sw,nw,sw,sw,sw,nw,sw,sw,se,sw,nw,sw,ne,sw,sw,nw,nw,sw,sw,ne,nw,sw,s,sw,sw,sw,nw,nw,n,nw,nw,sw,sw,sw,sw,sw,nw,nw,nw,nw,nw,nw,nw,sw,n,nw,sw,sw,n,nw,nw,sw,s,sw,ne,se,nw,nw,nw,sw,nw,sw,nw,s,nw,nw,n,s,nw,s,nw,sw,sw,nw,nw,nw,nw,nw,nw,se,nw,se,nw,nw,s,sw,nw,nw,nw,se,nw,nw,sw,sw,nw,sw,nw,sw,nw,s,nw,nw,nw,nw,sw,nw,ne,n,nw,nw,nw,sw,nw,nw,nw,sw,ne,nw,sw,nw,sw,nw,nw,nw,nw,nw,nw,s,nw,nw,ne,nw,nw,nw,n,sw,nw,nw,nw,nw,se,nw,sw,nw,sw,nw,nw,se,nw,nw,se,nw,sw,sw,sw,nw,sw,s,nw,nw,nw,s,nw,nw,se,sw,nw,sw,se,nw,ne,nw,nw,n,nw,nw,sw,nw,nw,ne,nw,ne,s,nw,sw,nw,nw,nw,nw,nw,sw,sw,sw,nw,sw,n,nw,nw,n,sw,sw,nw,ne,se,sw,nw,n,nw,nw,ne,nw,sw,se,sw,sw,n,nw,ne,nw,nw,sw,n,nw,sw,nw,ne,n,n,nw,nw,sw,nw,nw,nw,nw,nw,nw,sw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,sw,nw,nw,sw,se,nw,nw,s,nw,sw,nw,nw,nw,nw,nw,nw,nw,sw,nw,nw,nw,nw,sw,sw,nw,nw,nw,nw,ne,nw,nw,nw,nw,nw,nw,sw,nw,nw,n,n,nw,nw,ne,nw,nw,nw,n,sw,nw,sw,se,s,nw,nw,nw,s,nw,nw,nw,ne,se,nw,se,sw,sw,nw,nw,nw,nw,nw,se,nw,ne,nw,nw,se,se,se,nw,nw,nw,nw,nw,nw,nw,nw,nw,n,nw,nw,nw,nw,nw,nw,nw,ne,n,nw,nw,ne,se,nw,nw,sw,s,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,se,n,n,sw,nw,nw,se,s,nw,n,nw,s,nw,nw,nw,nw,nw,nw,nw,nw,s,nw,nw,nw,sw,n,n,nw,ne,ne,n,nw,sw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,ne,nw,s,nw,nw,nw,nw,nw,nw,nw,n,nw,ne,n,nw,nw,nw,nw,nw,ne,ne,nw,nw,nw,nw,nw,sw,ne,nw,ne,s,nw,nw,sw,nw,nw,nw,nw,nw,nw,se,nw,nw,nw,nw,nw,nw,nw,se,n,nw,nw,nw,nw,nw,nw,nw,nw,n,nw,nw,s,n,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,n,sw,nw,nw,nw,nw,se,n,se,n,nw,nw,nw,nw,nw,nw,nw,nw,n,sw,nw,nw,s,s,n,n,nw,sw,nw,n,nw,s,nw,nw,n,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,ne,nw,nw,nw,nw,nw,nw,nw,nw,n,n,nw,n,nw,se,nw,nw,nw,nw,s,nw,nw,nw,nw,se,n,nw,s,nw,nw,nw,nw,nw,nw,nw,nw,n,nw,sw,n,nw,nw,ne,n,nw,ne,n,s,n,n,ne,n,nw,nw,ne,nw,nw,nw,n,sw,nw,sw,nw,n,s,nw,nw,nw,nw,n,nw,nw,nw,nw,sw,nw,nw,n,sw,nw,sw,nw,n,ne,nw,nw,sw,n,n,nw,nw,nw,sw,nw,n,nw,nw,nw,s,nw,nw,nw,nw,nw,n,nw,nw,nw,sw,nw,se,n,nw,nw,s,nw,n,nw,se,n,sw,n,nw,n,nw,nw,nw,nw,n,n,n,n,nw,sw,s,nw,nw,n,se,nw,n,nw,nw,nw,ne,sw,nw,se,nw,n,s,ne,s,nw,n,n,n,nw,nw,nw,n,nw,nw,nw,nw,n,n,nw,nw,n,sw,n,se,nw,nw,nw,n,nw,nw,ne,n,se,n,ne,n,n,se,n,n,n,nw,n,nw,n,nw,ne,nw,nw,nw,n,n,n,n,nw,se,n,sw,nw,nw,n,s,nw,n,nw,n,n,nw,n,nw,n,ne,nw,sw,nw,sw,nw,nw,nw,nw,ne,nw,nw,n,ne,sw,nw,nw,n,n,se,nw,n,sw,nw,nw,se,n,nw,n,ne,nw,nw,se,nw,ne,n,n,se,n,nw,nw,nw,nw,nw,n,nw,n,nw,nw,nw,n,n,nw,nw,ne,nw,nw,nw,n,n,nw,nw,s,se,nw,n,nw,n,n,ne,nw,nw,n,n,nw,sw,nw,nw,nw,nw,nw,nw,nw,s,n,n,n,n,n,nw,nw,nw,nw,n,n,nw,n,s,n,nw,nw,nw,nw,sw,ne,nw,nw,nw,nw,nw,nw,se,nw,n,n,nw,s,sw,nw,nw,n,n,nw,n,n,nw,n,nw,sw,n,n,nw,n,nw,ne,sw,nw,nw,nw,n,n,nw,s,s,nw,nw,nw,nw,nw,n,nw,n,n,s,nw,nw,n,nw,n,nw,se,n,n,nw,n,n,sw,s,nw,s,nw,nw,n,n,nw,nw,nw,nw,n,nw,sw,n,se,n,nw,nw,n,n,nw,n,n,nw,n,n,se,nw,sw,n,nw,nw,n,s,sw,s,n,n,nw,n,n,n,se,n,nw,nw,se,se,n,n,n,nw,nw,ne,n,n,n,n,n,sw,n,nw,n,s,nw,nw,n,ne,nw,se,nw,nw,n,nw,sw,n,n,n,nw,n,nw,nw,n,nw,n,n,nw,nw,n,n,nw,n,sw,n,n,n,se,ne,nw,nw,sw,nw,n,s,nw,nw,n,nw,n,nw,n,nw,n,nw,nw,nw,n,nw,n,nw,n,n,nw,n,nw,nw,n,nw,n,n,n,nw,n,sw,n,nw,n,nw,n,n,nw,nw,n,n,nw,n,nw,nw,sw,n,n,nw,nw,nw,n,n,n,n,n,nw,n,ne,nw,nw,n,ne,n,nw,nw,sw,se,n,n,n,sw,n,n,ne,n,ne,nw,nw,nw,n,n,n,ne,nw,n,n,nw,n,n,nw,n,n,n,n,nw,n,nw,sw,n,ne,n,nw,nw,n,nw,n,se,n,n,nw,n,n,n,nw,ne,s,nw,nw,nw,n,n,sw,n,sw,sw,n,n,n,n,n,n,sw,nw,n,n,n,nw,n,nw,n,n,se,n,ne,n,nw,n,nw,n,n,n,n,n,n,ne,se,n,nw,n,nw,n,nw,n,nw,nw,n,n,n,sw,se,nw,n,n,nw,ne,nw,n,nw,nw,nw,n,n,s,se,s,n,sw,sw,n,n,nw,ne,s,n,nw,n,nw,n,n,se,n,n,n,sw,n,n,n,n,n,nw,nw,n,nw,nw,n,n,nw,n,n,n,n,n,n,n,n,nw,n,ne,nw,n,nw,nw,n,s,se,nw,n,se,n,s,n,n,n,nw,sw,n,n,nw,n,nw,n,se,n,sw,nw,n,n,n,n,n,nw,s,nw,n,n,n,n,nw,n,n,nw,n,nw,n,n,nw,n,nw,n,n,s,n,s,n,nw,sw,ne,n,n,n,nw,n,n,n,n,n,n,s,n,s,n,nw,n,n,nw,n,n,s,n,n,sw,s,n,n,n,nw,n,sw,n,n,ne,n,n,n,n,n,n,n,sw,n,n,n,nw,n,n,n,n,n,n,n,n,n,n,nw,nw,n,n,ne,n,n,n,se,n,nw,s,sw,nw,n,n,sw,nw,se,n,n,nw,n,n,n,s,sw,n,ne,n,n,nw,n,n,n,s,ne,ne,s,sw,n,ne,n,n,n,n,n,se,n,n,n,n,n,n,n,n,n,n,n,n,sw,n,s,n,n,n,se,nw,nw,n,nw,n,se,sw,n,n,n,nw,sw,ne,nw,se,n,n,n,ne,n,nw,n,n,n,n,nw,n,n,n,n,n,n,sw,n,ne,n,nw,n,n,n,n,n,se,n,n,n,n,n,n,n,n,n,ne,n,n,n,n,nw,se,se,ne,n,n,n,nw,n,n,se,n,n,n,n,ne,n,se,ne,n,n,n,se,s,sw,n,n,n,n,n,s,n,n,s,n,n,n,n,s,n,sw,nw,n,n,s,n,n,n,ne,ne,n,ne,n,sw,n,se,n,n,n,nw,n,n,n,n,sw,nw,n,s,n,n,se,n,nw,n,n,n,n,n,n,se,n,n,n,n,n,se,n,n,n,n,s,n,n,n,n,se,se,n,n,s,n,n,n,nw,n,n,n,n,n,n,n,ne,n,ne,n,n,n,n,ne,n,n,n,n,se,n,n,n,n,n,ne,n,n,n,se,n,s,n,n,s,n,n,se,n,n,n,n,ne,n,s,n,n,ne,n,n,ne,nw,n,ne,n,ne,n,ne,n,n,s,n,sw,ne,s,n,n,n,n,se,n,ne,n,n,n,s,n,n,n,sw,n,n,n,n,n,n,n,n,nw,n,n,n,n,n,n,ne,ne,s,n,n,s,n,n,n,nw,nw,ne,n,sw,n,n,n,ne,se,n,sw,se,n,sw,n,n,nw,n,n,n,ne,n,n,n,n,n,n,s,nw,n,n,n,n,sw,n,n,n,n,n,n,sw,ne,n,n,n,nw,ne,n,n,n,sw,nw,ne,s,nw,n,n,n,n,n,n,ne,n,n,n,n,n,n,n,n,n,n,se,n,s,se,nw,n,n,n,n,s,n,n,n,ne,n,n,ne,n,ne,n,ne,ne,n,n,n,s,ne,n,ne,n,n,n,ne,se,n,n,n,ne,n,n,ne,n,n,n,s,n,ne,n,n,n,n,n,n,n,n,n,n,n,n,ne,n,n,n,n,ne,n,n,n,se,n,ne,n,s,n,n,ne,n,sw,n,se,n,s,n,ne,n,s,ne,s,n,n,se,n,ne,n,ne,n,ne,n,sw,n,n,s,ne,n,ne,ne,n,sw,n,n,s,ne,n,n,s,n,s,n,n,n,ne,n,s,ne,n,ne,n,n,n,s,n,n,ne,s,n,ne,se,ne,nw,n,n,n,nw,n,n,ne,sw,s,n,n,n,n,se,n,n,ne,ne,n,nw,n,ne,n,n,n,n,ne,n,s,n,sw,n,n,n,n,ne,n,n,n,n,s,sw,ne,n,n,n,n,n,ne,n,n,s,se,se,sw,n,n,n,n,ne,ne,n,ne,n,n,se,sw,n,ne,n,n,n,nw,ne,n,ne,n,ne,n,se,ne,ne,n,n,n,n,n,n,se,ne,nw,sw,n,nw,ne,n,n,ne,sw,ne,s,n,se,se,ne,s,n,sw,ne,n,n,n,ne,n,ne,n,ne,n,n,ne,ne,n,ne,ne,n,se,n,ne,ne,n,sw,ne,ne,ne,ne,n,n,n,ne,nw,ne,n,n,n,n,n,n,n,n,ne,ne,n,ne,n,ne,se,ne,n,ne,n,n,sw,sw,n,n,ne,n,n,ne,ne,s,n,ne,ne,ne,n,ne,ne,s,n,sw,s,nw,n,n,n,se,n,ne,n,se,ne,ne,ne,sw,ne,ne,n,ne,n,n,n,ne,nw,n,n,n,ne,n,nw,n,n,se,nw,n,ne,n,ne,n,ne,n,ne,nw,nw,n,ne,ne,sw,n,ne,ne,ne,ne,n,n,n,se,n,n,n,s,ne,ne,n,n,n,ne,n,n,n,nw,ne,ne,n,ne,n,n,ne,n,sw,n,ne,n,n,ne,n,n,ne,n,n,ne,ne,sw,ne,ne,ne,se,n,sw,n,ne,n,n,n,n,ne,s,n,ne,n,ne,n,ne,n,ne,se,ne,ne,n,ne,ne,ne,n,ne,ne,n,n,n,n,n,n,n,n,n,n,ne,se,n,n,n,ne,n,n,ne,ne,n,n,ne,ne,n,se,nw,se,n,sw,ne,ne,ne,ne,ne,ne,ne,n,n,ne,n,ne,n,ne,n,ne,n,s,s,ne,ne,se,n,n,sw,n,n,n,ne,ne,nw,n,n,n,ne,n,n,n,n,n,ne,ne,ne,ne,n,ne,ne,n,ne,ne,sw,n,n,n,nw,se,ne,ne,n,n,n,s,n,n,se,s,nw,ne,n,ne,ne,ne,ne,nw,s,n,se,sw,ne,ne,ne,n,ne,n,ne,sw,n,n,ne,ne,ne,se,s,s,ne,ne,ne,s,n,ne,n,ne,ne,ne,n,s,se,ne,n,n,se,n,ne,ne,n,ne,ne,n,ne,ne,n,n,n,nw,n,ne,n,ne,n,s,se,sw,ne,ne,n,n,ne,s,ne,ne,n,ne,ne,ne,ne,n,ne,ne,ne,ne,n,n,se,ne,s,ne,ne,ne,ne,ne,n,ne,ne,ne,n,n,ne,n,ne,ne,ne,ne,n,n,n,n,n,nw,ne,n,ne,s,n,ne,n,ne,n,ne,ne,nw,ne,sw,nw,ne,n,n,s,se,nw,ne,nw,ne,ne,n,n,ne,n,se,ne,n,ne,n,n,ne,n,s,ne,ne,n,se,ne,nw,ne,ne,sw,ne,ne,n,ne,ne,n,ne,s,ne,sw,n,n,ne,n,n,ne,ne,ne,s,n,n,n,n,nw,n,n,n,n,ne,ne,nw,ne,ne,n,ne,n,ne,n,ne,ne,ne,n,sw,ne,ne,ne,ne,ne,n,sw,ne,n,ne,ne,ne,n,ne,n,ne,n,s,s,n,ne,ne,n,ne,n,ne,n,ne,nw,ne,se,n,n,ne,n,n,ne,ne,n,ne,n,n,n,n,n,ne,ne,ne,n,ne,n,ne,ne,n,ne,ne,ne,ne,ne,n,n,ne,n,n,n,ne,ne,ne,ne,ne,sw,n,n,ne,n,ne,ne,nw,n,ne,n,ne,ne,n,sw,n,n,ne,ne,nw,ne,nw,ne,se,se,se,ne,ne,se,ne,sw,n,n,ne,ne,ne,ne,n,ne,ne,se,ne,ne,ne,ne,n,ne,ne,ne,n,s,ne,se,se,ne,ne,ne,n,ne,n,n,ne,n,nw,ne,ne,n,ne,se,sw,ne,ne,ne,n,ne,ne,n,ne,ne,sw,ne,ne,ne,ne,n,sw,n,ne,ne,ne,ne,ne,ne,ne,n,ne,ne,ne,ne,n,se,n,ne,n,n,ne,ne,n,ne,ne,n,ne,n,ne,ne,n,ne,n,n,ne,ne,n,n,ne,sw,ne,nw,ne,n,ne,se,ne,ne,sw,ne,ne,ne,n,ne,ne,n,n,n,ne,nw,ne,n,ne,ne,ne,n,ne,n,sw,ne,s,se,ne,ne,sw,ne,ne,ne,ne,ne,se,ne,ne,n,ne,ne,ne,ne,ne,ne,n,n,n,ne,n,ne,ne,ne,n,n,ne,ne,nw,s,ne,ne,se,ne,n,ne,ne,ne,ne,ne,n,ne,ne,ne,nw,s,n,ne,ne,ne,n,ne,ne,se,ne,ne,ne,ne,ne,ne,ne,n,ne,ne,s,ne,sw,ne,ne,ne,ne,nw,n,sw,ne,ne,ne,ne,sw,ne,nw,ne,n,n,n,ne,ne,n,ne,se,sw,sw,ne,n,ne,n,ne,ne,nw,ne,ne,se,ne,ne,sw,ne,se,ne,n,ne,ne,ne,sw,ne,ne,ne,ne,nw,ne,n,ne,ne,ne,n,ne,ne,ne,ne,se,ne,ne,n,ne,n,ne,ne,n,ne,n,sw,ne,ne,n,s,ne,ne,ne,ne,s,ne,ne,se,n,ne,ne,ne,ne,ne,ne,ne,n,ne,ne,ne,n,ne,ne,ne,n,n,s,ne,ne,sw,se,n,ne,ne,ne,ne,ne,n,ne,n,ne,ne,ne,ne,n,ne,ne,ne,ne,s,ne,nw,s,ne,se,se,ne,ne,ne,ne,sw,se,ne,ne,sw,se,ne,n,ne,n,ne,ne,n,sw,ne,ne,s,n,ne,ne,s,ne,s,n,ne,ne,ne,ne,n,n,ne,ne,s,se,ne,ne,ne,se,ne,ne,ne,sw,ne,sw,ne,ne,ne,ne,ne,ne,n,ne,ne,ne,ne,ne,s,nw,ne,ne,n,ne,n,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,nw,ne,ne,ne,n,se,ne,ne,s,n,n,ne,n,ne,nw,ne,nw,ne,ne,ne,ne,ne,ne,ne,ne,ne,n,ne,ne,ne,n,ne,ne,nw,ne,ne,sw,ne,ne,ne,n,ne,ne,ne,n,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,s,ne,ne,ne,nw,ne,ne,ne,ne,ne,ne,ne,ne,ne,nw,ne,ne,ne,ne,ne,nw,ne,ne,n,n,sw,sw,sw,sw,se,s,sw,s,sw,se,s,sw,s,sw,sw,se,se,s,n,se,se,se,se,se,se,nw,se,se,ne,ne,se,ne,nw,nw,ne,ne,sw,ne,ne,ne,ne,se,se,ne,n,ne,n,n,n,ne,n,n,ne,n,n,n,n,nw,n,n,se,n,n,n,sw,se,n,n,se,se,n,nw,n,n,n,sw,n,nw,se,nw,nw,nw,se,n,n,s,nw,nw,nw,nw,nw,sw,nw,nw,se,nw,se,nw,n,nw,nw,sw,nw,nw,nw,nw,nw,nw,ne,nw,nw,nw,s,nw,nw,sw,sw,nw,sw,nw,nw,sw,nw,sw,nw,nw,nw,s,sw,sw,nw,sw,nw,s,sw,sw,ne,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,n,sw,sw,sw,s,sw,sw,sw,sw,sw,nw,sw,sw,sw,sw,sw,sw,sw,sw,sw,se,nw,sw,sw,sw,sw,sw,s,s,sw,sw,s,sw,ne,sw,sw,sw,sw,s,nw,s,s,s,sw,sw,sw,nw,s,sw,s,sw,se,s,n,s,s,s,s,s,nw,s,s,s,s,se,se,s,s,s,nw,s,s,s,s,s,s,n,s,s,s,s,s,s,nw,s,s,s,se,s,se,nw,n,nw,se,n,s,n,sw,se,s,s,s,se,se,s,s,nw,se,s,n,s,se,s,s,sw,se,n,s,sw,s,se,s,s,se,se,se,s,s,se,s,se,se,se,se,se,se,se,s,s,s,s,n,s,s,se,n,nw,se,nw,sw,nw,se,nw,se,se,se,se,se,se,se,sw,se,s,se,se,nw,se,ne,se,se,se,s,se,se,se,se,se,sw,se,n,ne,se,ne,s,se,sw,se,se,se,se,nw,sw,se,se,n,ne,se,ne,se,se,ne,se,nw,se,se,se,se,se,se,se,nw,se,se,se,n,se,ne,ne,se,ne,se,se,se,ne,nw,se,se,se,n,sw,ne,s,ne,ne,se,nw,se,ne,nw,ne,se,ne,se,se,se,se,se,sw,ne,nw,se,sw,n,se,se,se,se,se,se,se,se,se,ne,sw,se,ne,ne,s,ne,se,se,se,se,nw,ne,ne,ne,ne,ne,ne,n,ne,s,se,se,ne,ne,ne,se,se,ne,ne,se,ne,ne,s,s,ne,ne,ne,ne,ne,se,se,n,ne,ne,ne,s,nw,sw,n,ne,ne,ne,ne,s,ne,s,ne,ne,ne,ne,ne,n,s,nw,ne,nw,n,sw,nw,se,ne,ne,nw,se,ne,ne,n,ne,ne,ne,ne,sw,se,n,n,ne,ne,ne,ne,n,ne,ne,n,n,ne,ne,sw,n,ne,ne,ne,ne,ne,ne,se,ne,nw,se,ne,sw,ne,ne,ne,ne,ne,n,ne,ne,n,n,ne,n,n,ne,n,se,n,sw,ne,ne,ne,ne,sw,ne,n,ne,ne,ne,ne,se,ne,ne,sw,ne,n,n,ne,ne,ne,n,ne,ne,ne,ne,n,ne,n,n,ne,n,ne,n,ne,sw,n,n,n,nw,ne,n,n,n,n,ne,n,ne,ne,n,sw,sw,n,nw,n,ne,n,se,s,n,ne,sw,n,ne,ne,sw,n,n,sw,nw,n,n,n,s,n,n,n,ne,n,se,ne,n,n,s,n,nw,ne,ne,n,se,n,n,n,n,n,n,n,n,n,n,ne,sw,n,nw,n,n,sw,n,sw,n,n,ne,n,n,n,n,n,n,n,n,ne,n,ne,s,ne,n,n,ne,se,n,n,n,n,n,n,n,n,s,n,n,s,n,sw,se,n,n,n,n,n,ne,n,n,ne,se,n,nw,n,n,ne,nw,n,n,ne,n,n,nw,se,n,n,n,n,n,n,n,n,n,n,nw,n,n,n,n,n,n,ne,n,n,s,n,n,n,nw,n,n,n,n,n,n,n,n,n,se,se,ne,n,se,n,n,n,n,n,n,n,n,n,nw,n,nw,n,nw,n,n,n,n,n,sw,n,nw,n,nw,n,n,se,nw,n,nw,n,s,nw,nw,n,ne,n,se,n,sw,nw,nw,nw,nw,nw,nw,se,n,n,n,nw,n,n,s,nw,s,nw,n,nw,nw,se,sw,n,n,n,n,ne,nw,n,nw,nw,ne,n,nw,sw,nw,nw,n,se,nw,se,nw,nw,n,n,n,nw,nw,n,n,n,nw,nw,n,ne,nw,n,ne,nw,nw,s,se,nw,nw,n,s,nw,n,n,n,n,nw,nw,n,n,se,nw,s,n,nw,nw,nw,nw,nw,nw,nw,sw,nw,nw,nw,sw,n,nw,nw,n,nw,s,nw,nw,se,n,n,n,ne,nw,ne,nw,nw,nw,nw,nw,n,nw,ne,n,nw,n,nw,se,n,n,nw,nw,n,nw,nw,nw,nw,se,n,s,ne,sw,n,s,nw,nw,nw,nw,nw,ne,ne,s,nw,se,nw,nw,n,nw,nw,nw,nw,nw,s,nw,nw,n,nw,nw,nw,nw,nw,ne,sw,nw,nw,nw,ne,nw,nw,nw,nw,nw,se,nw,nw,ne,nw,se,ne,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,se,nw,nw,nw,nw,nw,sw,ne,nw,nw,nw,nw,nw,nw,ne,nw,n,nw,nw,nw,n,nw,ne,nw,nw,nw,nw,n,nw,se,nw,nw,s,nw,ne,nw,nw,ne,ne,nw,ne,nw,ne,nw,nw,nw,nw,nw,nw,sw,nw,ne,sw,nw,sw,nw,n,nw,se,nw,nw,nw,nw,nw,nw,nw,sw,se,nw,n,sw,sw,n,nw,n,nw,s,nw,nw,nw,nw,nw,nw,nw,nw,sw,sw,nw,sw,nw,nw,se,se,nw,nw,n,s,s,nw,nw,nw,sw,nw,sw,ne,se,s,nw,s,nw,sw,nw,nw,nw,sw,nw,sw,sw,s,nw,nw,nw,nw,nw,sw,nw,ne,nw,nw,nw,se,nw,nw,n,sw,sw,sw,sw,nw,nw,nw,sw,nw,sw,sw,nw,nw,sw,sw,n,se,nw,nw,nw,s,se,nw,sw,s,se,se,se,sw,sw,sw,nw,sw,sw,sw,nw,nw,nw,sw,nw,n,se,sw,sw,s,sw,sw,sw,nw,nw,sw,n,nw,nw,sw,n,s,sw,sw,nw,sw,nw,sw,sw,nw,sw,sw,nw,nw,s,sw,nw,sw,nw,nw,sw,nw,sw,sw,nw,sw,se,sw,n,sw,se,nw,sw,nw,ne,nw,sw,s,nw,sw,sw,sw,n,sw,sw,nw,n,nw,sw,sw,s,sw,sw,nw,sw,nw,nw,sw,sw,nw,nw,nw,sw,sw,sw,sw,nw,sw,sw,ne,sw,sw,se,sw,sw,s,nw,sw,sw,sw,nw,sw,s,sw,sw,s,ne,sw,sw,nw,sw,sw,nw,nw,nw,sw,sw,nw,sw,sw,sw,sw,sw,n,nw,sw,sw,nw,ne,nw,n,sw,sw,sw,n,nw,sw,n,sw,sw,sw,sw,sw,sw,n,ne,nw,nw,nw,sw,sw,n,n,sw,sw,sw,sw,sw,sw,se,sw,sw,nw,sw,ne,sw,sw,ne,nw,sw,nw,sw,sw,sw,sw,s,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,se,sw,sw,se,se,sw,sw,sw,sw,sw,se,sw,nw,se,nw,sw,n,nw,sw,ne,ne,sw,sw,sw,sw,sw,se,sw,n,sw,sw,n,sw,sw,sw,sw,sw,sw,sw,ne,sw,sw,se,sw,sw,sw,sw,sw,sw,se,s,s,sw,s,ne,sw,se,sw,sw,sw,sw,sw,ne,s,s,nw,sw,sw,sw,sw,sw,sw,s,n,sw,sw,sw,sw,se,sw,sw,sw,sw,sw,sw,se,s,sw,nw,sw,ne,sw,s,s,sw,sw,sw,sw,sw,sw,s,s,sw,sw,nw,sw,sw,sw,sw,sw,sw,nw,sw,sw,sw,n,sw,s,s,s,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,s,sw,sw,ne,s,nw,s,s,nw,sw,sw,sw,sw,sw,sw,sw,sw,sw,nw,sw,sw,sw,sw,s,s,se,se,s,se,sw,sw,nw,sw,sw,sw,sw,s,ne,sw,s,s,s,sw,sw,nw,n,s,s,sw,n,nw,s,s,sw,ne,sw,s,nw,sw,ne,s,s,sw,s,sw,sw,sw,sw,s,s,sw,sw,sw,nw,sw,n,s,sw,sw,sw,sw,s,s,nw,sw,s,nw,ne,sw,se,sw,s,sw,sw,ne,sw,s,sw,n,sw,s,se,se,sw,sw,ne,s,sw,sw,sw,sw,n,sw,sw,s,s,sw,nw,sw,ne,s,s,sw,sw,n,sw,ne,sw,se,sw,sw,s,s,s,sw,s,s,nw,n,sw,sw,ne,sw,s,ne,nw,s,se,s,sw,nw,s,n,s,sw,sw,nw,n,sw,sw,s,n,s,sw,n,s,s,s,s,s,s,sw,s,sw,s,s,s,sw,sw,n,sw,sw,s,sw,sw,sw,sw,sw,sw,s,sw,sw,s,se,s,sw,n,se,nw,sw,s,s,se,se,sw,sw,s,se,s,nw,n,s,sw,s,nw,se,sw,s,s,sw,s,sw,sw,s,sw,sw,s,s,se,n,nw,sw,sw,s,sw,sw,sw,s,s,s,sw,ne,s,s,se,sw,sw,sw,sw,n,s,s,s,sw,se,sw,n,s,sw,sw,nw,sw,s,s,sw,s,s,ne,s,s,s,s,sw,ne,sw,nw,s,sw,ne,sw,sw,ne,s,sw,nw,s,s,sw,s,s,s,s,s,nw,sw,s,se,s,s,s,n,s,sw,s,s,s,sw,s,nw,s,s,s,n,s,s,se,s,s,se,sw,ne,s,s,sw,se,s,s,s,se,s,sw,se,s,s,sw,se,s,s,s,s,nw,s,sw,sw,s,s,nw,s,ne,s,s,s,sw,s,s,sw,s,nw,sw,s,sw,sw,s,s,s,ne,sw,nw,s,s,s,s,s,s,s,sw,s,s,s,s,s,se,s,s,s,s,s,s,sw,s,sw,s,s,s,se,s,s,s,s,s,se,nw,n,se,s,s,s,s,s,s,nw,n,s,s,s,sw,s,s,s,s,n,s,s,nw,n,s,se,s,s,n,s,n,s,s,n,sw,s,s,s,nw,sw,se,ne,ne,s,s,s,ne,n,nw,s,se,sw,s,s,s,s,s,s,se,s,s,s,s,s,se,s,s,s,s,s,nw,s,s,s,s,n,s,nw,s,s,se,s,nw,s,s,s,s,s,nw,s,s,s,s,s,ne,s,nw,s,s,ne,s,ne,s,s,s,s,s,s,ne,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,se,s,s,ne,s,sw,s,nw,s,s,s,s,s,ne,s,se,s,s,s,s,s,s,s,s,ne,s,s,ne,s,s,s,n,s,s,n,s,s,s,s,s,n,n,s,s,s,ne,s,s,ne,s,se,n,s,s,s,n,se,s,s,s,s,s,s,s,s,s,s,se,s,s,s,n,s,s,ne,se,s,s,s,sw,se,n,s,se,s,s,ne,s,se,s,s,nw,nw,se,se,se,se,s,s,s,s,se,se,nw,se,se,sw,s,s,s,ne,s,nw,s,s,sw,se,s,se,se,s,s,n,s,s,ne,s,s,s,s,n,s,s,sw,s,se,nw,sw,s,n,s,s,ne,s,se,s,nw,s,s,nw,s,se,sw,s,se,s,se,ne,se,se,se,s,nw,s,nw,s,nw,se,n,se,se,se,s,s,s,s,se,s,nw,se,nw,s,se,sw,se,se,se,n,s,ne,se,s,s,se,s,s,ne,se,ne,sw,se,s,se,s,s,s,s,se,s,s,s,s,s,se,se,se,s,n,se,se,s,s,se,s,se,s,s,s,se,nw,se,se,s,se,se,s,ne,ne,se,s,ne,n,se,s,s,se,s,s,se,s,s,s,sw,se,s,s,se,sw,se,se,s,se,s,s,s,nw,s,s,s,se,se,se,s,s,s,s,sw,s,se,se,s,s,s,s,s,sw,sw,se,s,se,se,s,s,s,se,s,se,se,s,s,se,s,se,s,ne,ne,s,s,se,s,s,s,s,s,s,se,s,s,se,se,sw,s,ne,s,s,se,s,se,sw,se,n,s,s,s,se,s,s,s,se,s,se,s,ne,se,se,s,s,s,s,se,se,se,se,se,se,se,s,s,ne,nw,s,s,se,s,ne,s,s,se,se,s,n,s,s,se,nw,s,s,se,se,s,se,s,se,s,se,nw,se,ne,n,s,s,se,se,ne,se,nw,se,se,se,se,se,se,se,se,s,s,se,se,n,se,s,se,se,nw,s,sw,se,sw,n,se,s,s,se,s,ne,se,s,ne,se,se,s,s,s,se,nw,se,se,se,se,s,se,se,se,se,se,se,se,s,se,se,se,sw,se,n,se,se,sw,se,se,se,se,se,se,s,se,se,n,se,se,se,se,se,se,se,s,se,se,se,s,se,nw,s,s,se,se,s,se,se,s,se,se,s,n,se,se,se,se,se,se,se,s,s,se,se,se,s,se,s,s,n,nw,se,se,s,se,s,se,s,sw,se,se,nw,se,nw,s,n,s,se,s,s,se,se,se,nw,se,nw,nw,se,se,s,s,s,nw,se,n,ne,se,se,se,se,ne,se,se,se,s,se,sw,s,n,s,s,se,se,s,n,s,se,se,sw,se,se,se,s,se,sw,s,se,se,se,se,se,ne,se,se,se,se,se,se,s,se,se,se,se,se,se,se,n,se,se,ne,s,se,se,se,s,se,ne,se,se,se,se,se,se,se,s,se,se,se,se,se,se,se,se,sw,se,se,se,se,nw,s,se,se,nw,se,s,s,se,se,se,se,se,se,se,se,se,sw,se,se,n,nw,n,se,ne,se,n,se,nw,nw,se,ne,s,se,se,s,se,se,s,se,se,s,se,s,se,n,se,se,se,se,se,n,s,se,se,se,se,se,se,s,se,se,nw,ne,s,se,ne,se,se,se,n,se,se,se,s,se,se,se,se,se,se,n,se,se,s,se,se,s,s,se,se,se,se,se,n,ne,se,se,nw,se,se,se,se,se,se,se,se,se,se,se,se,s,n,se,s,s,s,se,n,ne,se,s,se,se,se,ne,ne,s,se,se,s,se,se,se,se\";","export default \"depth: 7740\\ntarget: 12,763\";"],"sourceRoot":""}
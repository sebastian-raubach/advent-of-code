{"version":3,"file":"js/7937.dc9745fa.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,iBAAiB,CAACV,EAAG,SAAS,CAACU,YAAY,SAASR,MAAM,CAAC,GAAK,UAAU,MAAQ,MAAM,OAAS,WAAW,EAAES,OAAM,MAAS,EACjZC,EAAkB,G,sBCatB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAZ,UAAAA,CACAa,QAAAA,KACAC,QAAAA,MAEAC,GAAAA,CAAAA,EAAAA,GAAAA,GAAAA,CAAAA,GAAAA,GAAAA,CAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAAA,IACAC,MAAAA,GACAC,MAAAA,EAEA,EACAC,QAAAA,CACAhB,eAAAA,SAAAA,GACA,uCACA,CACAiB,GAAAA,EACAC,SAAAA,QAKA,QAEA,IACA,SAEA,WAEAC,EAAAA,SAAAA,CAAAA,EAAAA,IAAAA,EAAAA,SAAAA,CAAAA,EAAAA,KAEAC,EAAAA,IAGA,OACAC,EAAAA,KAAAA,CAAAC,EAAAA,EAAAC,EAAAA,GACA,MAGA,QAEA,kBAEA,kBAEA,cAEA,YAEAC,EAAAA,SAAAA,EACAC,IAGA,wCACA,oBACA,YACAC,EAAAA,IAEA,OACAL,EAAAA,KAAAA,GAEA,IAGA,CAEA,gDAoBA,GAnBAM,OAAAA,OAAAA,GACA,mBAGAR,EAAAA,SAAAA,GAAAA,EAAAA,SAAAA,IACAC,EAAAA,SAAAA,EACA,QACAA,EAAAA,EAAAA,EACA,MAIAQ,IACAC,GAAAA,EAEA,UAEA,0BAEA,QAMA,OAJA,8BAEA,6DAIA,CACA,EACAC,aAAAA,SAAAA,EAAAA,GAEA,wBACA,eACA,SAEA,OACAR,EAAAA,EACAC,EAAAA,EACA,IACA,WACA,gCAEA,EACAQ,KAAAA,WACA,4DACAC,EAAAA,UAAAA,EAAAA,EAAAA,IAAAA,KACA,yCAEA,yBACA,qBACA,qBACAA,EAAAA,UAAAA,EAAAA,EAAAA,GAAAA,IACAA,EAAAA,SAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAIA,4CAEAC,YAAAA,IAAAA,OAAAA,sBAAAA,KAAAA,OAAAA,IACA,IC/I6P,I,UCQzPC,GAAY,OACd,EACA5C,EACAiB,GACA,EACA,KACA,WACA,MAIF,EAAe2B,EAAiB,O,yGCnBhC,MAAMC,EAAU,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAM3LC,EAAYC,IAChB,MAAMC,EAAS,4CAA4CC,KAAKF,GAChE,OAAOC,EACH,CACAE,EAAGC,SAASH,EAAO,GAAI,IACvBI,EAAGD,SAASH,EAAO,GAAI,IACvBK,EAAGF,SAASH,EAAO,GAAI,KAEvB,IAAI,EASJM,EAAWA,CAACJ,EAAGE,EAAGC,IACf,MAAQ,GAAK,KAAOH,GAAK,KAAOE,GAAK,GAAKC,GAAGE,SAAS,IAAIC,MAAM,GASnEC,EAAsBA,CAACC,EAAKC,EAAKC,KACrC,MAAMC,EAASf,EAASY,GAClBI,EAAShB,EAASa,GAExB,GAAIC,EAAQ,EACV,MAAO,CAACF,GAGV,MAAMV,EAAS,GACf,IAAK,IAAIV,EAAI,EAAGA,EAAIsB,EAAOtB,IAAK,CAC9B,MAAMyB,EAASzB,GAAKsB,EAAQ,GAC5BZ,EAAOgB,KAAKV,EACVW,KAAKC,MAAML,EAAOX,EAAIa,GAASD,EAAOZ,EAAIW,EAAOX,IACjDe,KAAKC,MAAML,EAAOT,EAAIW,GAASD,EAAOV,EAAIS,EAAOT,IACjDa,KAAKC,MAAML,EAAOR,EAAIU,GAASD,EAAOT,EAAIQ,EAAOR,KAErD,CACA,OAAOL,CAAM,EAGTmB,EAA2BA,CAACC,EAAQR,KACxC,GAAIQ,EAAOC,OAAST,EAClB,OAAOQ,EAAOZ,MAAM,EAAGI,GAGzB,MAAMU,EAAWF,EAAOC,OAAS,EAEjC,IAAIrB,EAAS,GAEb,IAAK,IAAIV,EAAI,EAAGA,EAAIgC,EAAW,EAAGhC,IAChCU,EAASA,EAAOuB,OAAOd,EAAoBW,EAAO9B,GAAI8B,EAAO9B,EAAI,GAAI2B,KAAKO,IAAI,EAAGP,KAAKC,MAAMN,EAAQU,MAGtG,MAAOtB,EAAOqB,OAAST,EACrBZ,EAAOgB,KAAKI,EAAOA,EAAOC,OAAS,IAGrC,OAAOrB,CAAM,C","sources":["webpack://advent-of-code/./src/components/2021/Day11.vue?6e0a","webpack://advent-of-code/src/components/2021/Day11.vue","webpack://advent-of-code/./src/components/2021/Day11.vue?98c0","webpack://advent-of-code/./src/components/2021/Day11.vue","webpack://advent-of-code/./src/util/color.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":11,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partTwo\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partTwo\",\"width\":\"518\",\"height\":\"518\"}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"11\" :year=\"2021\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partTwo>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partTwo\" class=\"canvas\" width=\"518\" height=\"518\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { createColorGradient } from '@/util/color'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      ns: [[-1, -1], [0, -1], [1, -1], [-1, 0], [1, 0], [-1, 1], [0, 1], [1, 1]],\n      grids: [],\n      round: 0\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const grid = input.map(r => r.split('').map(c => {\n        return {\n          v: +c,\n          flashed: false\n        }\n      }))\n\n      // Total flash counter\n      let totalFlashes = 0\n      // Current round index\n      let i = 0\n      while (true) {\n        // Keep track of the ones that have flashed and need to increase their neighbors\n        const queue = []\n\n        grid.forEach((r, y) => r.forEach((c, x) => {\n          // Increase first\n          c.v++\n\n          // If they'll flash, add to queue\n          if (c.v > 9) {\n            queue.push({ x: x, y: y })\n          }\n        }))\n\n        let roundFlashes = 0\n        // Now go through the queue while there are still ones that have to flash\n        while (queue.length > 0) {\n          // Get the next one\n          const next = queue.shift()\n          // Get the corresponding grid cell\n          const gridCell = grid[next.y][next.x]\n          // If it hasn't flashed yet (it may be in the queue multiple times)\n          if (!gridCell.flashed) {\n            // Flash\n            gridCell.flashed = true\n            roundFlashes++\n\n            // Increment all neighbors\n            this.getNeighbors(next.x, next.y).forEach(n => {\n              const nbc = grid[n.y][n.x]\n              if (!nbc.flashed) {\n                nbc.v++\n\n                if (nbc.v > 9) {\n                  queue.push(n)\n                }\n              }\n            })\n          }\n        }\n\n        const flashMap = grid.map(r => r.map(c => Math.min(9, c.v)))\n        Object.freeze(flashMap)\n        this.grids.push(flashMap)\n\n        // Reset each flashed node\n        grid.forEach(r => r.forEach(c => {\n          c.flashed = false\n          if (c.v > 9) {\n            c.v = 0\n          }\n        }))\n\n        // Increment\n        i++\n        totalFlashes += roundFlashes\n\n        if (i === 100) {\n          // Found solution one after 100 iterations\n          this.solutions.partOne = totalFlashes\n        }\n        if (roundFlashes === 100) {\n          // Found solution two after all have flashed in the same round\n          this.solutions.partTwo = i\n\n          this.$nextTick(() => window.requestAnimationFrame(this.draw))\n\n          return\n        }\n      }\n    },\n    getNeighbors: function (x, y) {\n      // Create all possible neighbors, then filter out invalid ones\n      return this.ns.map(n => {\n        const dx = x + n[0]\n        const dy = y + n[1]\n\n        return {\n          x: dx,\n          y: dy\n        }\n      }).filter(n => {\n        return n.x >= 0 && n.x < 10 && n.y >= 0 && n.y < 10\n      })\n    },\n    draw: function () {\n      const ctx = document.getElementById('partTwo').getContext('2d')\n      ctx.clearRect(0, 0, 518, 518)\n      const gradient = createColorGradient('#C4E538', '#006266', 10)\n\n      const grid = this.grids[this.round]\n      for (let y = 0; y < 10; y++) {\n        for (let x = 0; x < 10; x++) {\n          ctx.fillStyle = gradient[grid[y][x]]\n          ctx.fillRect(x * 50, y * 50, 50, 50)\n        }\n      }\n\n      this.round = (this.round + 1) % this.grids.length\n\n      setTimeout(() => window.requestAnimationFrame(this.draw), 100)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.canvas-holder {\n  overflow: auto;\n  height: 522px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day11.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day11.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day11.vue?vue&type=template&id=4c2711f0&scoped=true\"\nimport script from \"./Day11.vue?vue&type=script&lang=js\"\nexport * from \"./Day11.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day11.vue?vue&type=style&index=0&id=4c2711f0&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4c2711f0\",\n  null\n  \n)\n\nexport default component.exports","const VIRIDIS = ['#440154', '#48186a', '#472d7b', '#424086', '#3b528b', '#33638d', '#2c728e', '#26828e', '#21918c', '#1fa088', '#28ae80', '#3fbc73', '#5ec962', '#84d44b', '#addc30', '#d8e219', '#fde725']\n\n/**\n * Converts a HEX value into an RGB object\n * @param {String} hex The hex color\n */\nconst hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    }\n    : null\n}\n\n/**\n * Converts the given R, G, B values into a HEX color\n * @param {Number} r The red color component\n * @param {Number} g The green color component\n * @param {Number} b The blue color component\n */\nconst rgbToHex = (r, g, b) => {\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n}\n\n/**\n * Creates a linear gradient between the two given colors with the given number of steps\n * @param {String} one The first color in HEX\n * @param {String} two The second color in HEX\n * @param {Number} steps The number of steps between the two colors\n */\nconst createColorGradient = (one, two, steps) => {\n  const oneRgb = hexToRgb(one)\n  const twoRgb = hexToRgb(two)\n\n  if (steps < 2) {\n    return [one]\n  }\n\n  const result = []\n  for (let i = 0; i < steps; i++) {\n    const iNorm = (i / (steps - 1))\n    result.push(rgbToHex(\n      Math.floor(oneRgb.r + iNorm * (twoRgb.r - oneRgb.r)),\n      Math.floor(oneRgb.g + iNorm * (twoRgb.g - oneRgb.g)),\n      Math.floor(oneRgb.b + iNorm * (twoRgb.b - oneRgb.b))\n    ))\n  }\n  return result\n}\n\nconst createMultiColorGradient = (colors, steps) => {\n  if (colors.length > steps) {\n    return colors.slice(0, steps)\n  }\n\n  const sections = colors.length - 1\n\n  let result = []\n\n  for (let i = 0; i < sections - 1; i++) {\n    result = result.concat(createColorGradient(colors[i], colors[i + 1], Math.max(1, Math.floor(steps / sections))))\n  }\n\n  while (result.length < steps) {\n    result.push(colors[colors.length - 1])\n  }\n\n  return result\n}\n\nexport {\n  hexToRgb,\n  rgbToHex,\n  createColorGradient,\n  createMultiColorGradient,\n  VIRIDIS\n}\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","proxy","staticRenderFns","components","Day","data","partOne","partTwo","ns","grids","round","methods","v","flashed","grid","c","queue","x","y","gridCell","roundFlashes","nbc","Object","i","totalFlashes","getNeighbors","draw","ctx","setTimeout","component","VIRIDIS","hexToRgb","hex","result","exec","r","parseInt","g","b","rgbToHex","toString","slice","createColorGradient","one","two","steps","oneRgb","twoRgb","iNorm","push","Math","floor","createMultiColorGradient","colors","length","sections","concat","max"],"sourceRoot":""}
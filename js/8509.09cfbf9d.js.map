{"version":3,"file":"js/8509.09cfbf9d.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GAEA,yBAEA,sBACA,+BACA,kBACA,qCAIA,OAFAQ,EAAAA,SAAAA,GAAAA,KAAAA,YAAAA,IAAAA,KAEA,CACAA,YAAAA,IAAAA,IAAAA,GACAC,UAAAA,IAAAA,IAAAA,GACA,IAGA,oBACA,mBACA,EACAC,UAAAA,SAAAA,EAAAA,GACA,4CACA,EACAC,MAAAA,SAAAA,EAAAA,GACA,2BACA,EACAC,aAAAA,WAEA,6BAEA,wBAEAC,EAAAA,UAAAA,SAAAA,IAEA,6BAKA,wFAHA,mDAIA,GACA,IAIA,2FAEA,+CAGA,2GACA,EACAC,aAAAA,WAEA,WAEA,KAEA,gDAEA,kBAEA,qHAGAC,EAAAA,SAAAA,IAEAC,EAAAA,KAAAA,GAEA,2DACAC,EAAAA,GAAAA,EAGAC,OAAAA,KAAAA,KAAAA,sBAAAA,SAAAA,GAAAA,KAAAA,qBAAAA,GAAAA,OAAAA,IAAAA,GAEA,CAGA,gGACA,ICpG6P,I,UCOzPC,GAAY,OACd,EACA7B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAekB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2020/Day21.vue?bd1b","webpack://advent-of-code/src/components/2020/Day21.vue","webpack://advent-of-code/./src/components/2020/Day21.vue?60b4","webpack://advent-of-code/./src/components/2020/Day21.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":21,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"21\" :year=\"2020\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Get all ingredients\n      this.ingredients = new Set()\n      // Keep track of all foods\n      this.foods = input.map(i => {\n        const parts = i.split(' (contains ')\n        const ingredients = parts[0].split(' ')\n        const allergens = parts[1].replace(/\\)/g, '').split(', ')\n\n        ingredients.forEach(i => this.ingredients.add(i))\n\n        return {\n          ingredients: new Set(ingredients),\n          allergens: new Set(allergens)\n        }\n      })\n\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    intersect: function (one, two) {\n      return new Set([...one].filter(x => two.has(x)))\n    },\n    union: function (one, two) {\n      return new Set([...one, ...two])\n    },\n    solvePartOne: function () {\n      // Map allergens to the ingredients that may cause them\n      this.allergenToIngredient = {}\n      // Iterate over all foods\n      this.foods.forEach(f => {\n        // Then iterate the allergens\n        f.allergens.forEach(a => {\n          // If we have no mapping yet\n          if (!this.allergenToIngredient[a]) {\n            // Keep the current ingredients\n            this.allergenToIngredient[a] = new Set(f.ingredients)\n          } else {\n            // Else use the intersection between current ones and new ones\n            this.allergenToIngredient[a] = this.intersect(this.allergenToIngredient[a], f.ingredients)\n          }\n        })\n      })\n\n      // Unsafe ingredients are those contained in the mapping\n      const unsafeIngredients = new Set(Object.values(this.allergenToIngredient).reduce((a, b) => this.union(a, b)))\n      // Safe ingredients are those that aren't unsafe (duh)\n      const safeIngredients = [...this.ingredients].filter(i => !unsafeIngredients.has(i))\n\n      //  Solution for part one is the sum over all individual safe ingredient occurance counts\n      this.solutions.partOne = safeIngredients.map(s => this.foods.filter(f => f.ingredients.has(s)).length).reduce((a, b) => a + b)\n    },\n    solvePartTwo: function () {\n      // Remember the mapped allergens\n      const mappedAllergens = []\n      // Remember which ingredient causes which allergen\n      const allergenMapping = {}\n      // The number of total allergens\n      const nrOfAllergens = Object.keys(this.allergenToIngredient).length\n\n      while (mappedAllergens.length < nrOfAllergens) {\n        // Get those that haven't been mapped yet and that have a unique mapping\n        const allergensWithOne = Object.keys(this.allergenToIngredient).filter(a => mappedAllergens.indexOf(a) === -1 && this.allergenToIngredient[a].size === 1)\n\n        // For each unique mapping\n        allergensWithOne.forEach(a => {\n          // Remember that we've mapped this\n          mappedAllergens.push(a)\n          // Get the ingredient that causes it\n          const ingredient = this.allergenToIngredient[a].values().next().value\n          allergenMapping[a] = ingredient\n\n          // Remove the ingredient from all other allergen mappings\n          Object.keys(this.allergenToIngredient).forEach(otherA => this.allergenToIngredient[otherA].delete(ingredient))\n        })\n      }\n\n      // Sort the allergens, then map them to the ingredient that causes them, then join with \",\"\n      this.solutions.partTwo = Object.keys(allergenMapping).sort((a, b) => a.localeCompare(b)).map(a => allergenMapping[a]).join(',')\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day21.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day21.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day21.vue?vue&type=template&id=0ed45e38\"\nimport script from \"./Day21.vue?vue&type=script&lang=js\"\nexport * from \"./Day21.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","ingredients","allergens","intersect","union","solvePartOne","f","solvePartTwo","allergensWithOne","mappedAllergens","allergenMapping","Object","component"],"sourceRoot":""}
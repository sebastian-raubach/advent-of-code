{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.array.reduce.js","webpack:///./src/assets/input/Day-14.txt","webpack:///./src/components/Day14.vue?2890","webpack:///src/components/Day14.vue","webpack:///./src/components/Day14.vue?7bb0","webpack:///./src/components/Day14.vue","webpack:///./node_modules/core-js/modules/es.string.replace.js","webpack:///./node_modules/core-js/modules/es.array.join.js","webpack:///./node_modules/core-js/modules/es.array.index-of.js","webpack:///./node_modules/core-js/internals/array-reduce.js","webpack:///./node_modules/core-js/modules/es.array.map.js"],"names":["$","$reduce","left","arrayMethodIsStrict","arrayMethodUsesToLength","CHROME_VERSION","IS_NODE","STRICT_METHOD","USES_TO_LENGTH","1","CHROME_BUG","target","proto","forced","reduce","callbackfn","this","arguments","length","undefined","render","_vm","_h","$createElement","_c","_self","attrs","solutions","taskInput","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","memory","input","masks","methods","forEach","i","indexOf","index","mask","value","solvePartOne","solvePartTwo","Object","keys","map","x","addressBits","y","copy","bin","position","finalAddresses","push","parseInt","join","decimalToBinary","result","overwriteBits","split","component","fixRegExpWellKnownSymbolLogic","anObject","toObject","toLength","toInteger","requireObjectCoercible","advanceStringIndex","regExpExec","max","Math","min","floor","SUBSTITUTION_SYMBOLS","SUBSTITUTION_SYMBOLS_NO_NAMED","maybeToString","it","String","REPLACE","nativeReplace","maybeCallNative","reason","REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE","REPLACE_KEEPS_$0","UNSAFE_SUBSTITUTE","searchValue","replaceValue","O","replacer","call","regexp","res","done","rx","S","functionalReplace","global","fullUnicode","unicode","lastIndex","results","matchStr","accumulatedResult","nextSourcePosition","matched","captures","j","namedCaptures","groups","replacerArgs","concat","replacement","apply","getSubstitution","slice","str","tailPos","m","symbols","match","ch","capture","charAt","n","f","IndexedObject","toIndexedObject","nativeJoin","ES3_STRINGS","separator","$indexOf","nativeIndexOf","NEGATIVE_ZERO","ACCESSORS","searchElement","aFunction","createMethod","IS_RIGHT","that","argumentsLength","memo","self","TypeError","module","exports","right","$map","arrayMethodHasSpeciesSupport","HAS_SPECIES_SUPPORT"],"mappings":"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","file":"js/chunk-190ea17d.1c70737a.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar $reduce = require('../internals/array-reduce').left;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\nvar CHROME_VERSION = require('../internals/engine-v8-version');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar STRICT_METHOD = arrayMethodIsStrict('reduce');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });\n// Chrome 80-82 has a critical bug\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\nvar CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;\n\n// `Array.prototype.reduce` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH || CHROME_BUG }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","export default \"mask = 1001X0X00110011X01X1000110100011000X\\nmem[5228] = 409649\\nmem[64037] = 474625\\nmask = 1X0110X0X110000100X01100000011101111\\nmem[62395] = 48627\\nmem[32253] = 16724249\\nmem[29843] = 241166\\nmask = 100X100X110001111101X0X0010100111X10\\nmem[9042] = 12448\\nmem[36389] = 14915399\\nmem[53378] = 2004566\\nmem[60022] = 121815\\nmem[46937] = 1238\\nmask = X001X0X101X10X10101X0000001110100011\\nmem[55791] = 2998\\nmem[16538] = 4120048\\nmem[36864] = 183554\\nmem[38989] = 7774725\\nmem[43983] = 18397304\\nmem[26551] = 1232\\nmask = 1111X0110110X0010110000010X1X1X10X1X\\nmem[28101] = 14619727\\nmem[35256] = 29030667\\nmem[63194] = 146129065\\nmem[44798] = 189\\nmem[2426] = 16693877\\nmem[695] = 30070848\\nmem[45241] = 4271881\\nmask = 1001X011X1100X01XX101X110001X110X101\\nmem[17482] = 7601\\nmem[35168] = 164940\\nmem[50171] = 1047374131\\nmask = X0010X101X00111X11100111110110X11X01\\nmem[55397] = 6883232\\nmem[36276] = 460553\\nmem[28164] = 6184\\nmem[32800] = 3846\\nmask = 100110X1X1100X110110XXX00X00101X010X\\nmem[34061] = 8335\\nmem[19672] = 806\\nmem[20346] = 45051423\\nmem[36909] = 75717\\nmem[14949] = 12484\\nmask = X00XX1100100111X00X11XX00000110X1010\\nmem[32991] = 13151\\nmem[26489] = 54180147\\nmem[55564] = 5690\\nmem[7187] = 807798\\nmem[4660] = 21323\\nmask = 0001X01001100111101X0111101X1110001X\\nmem[53378] = 33491\\nmem[11625] = 23905844\\nmem[11286] = 226133438\\nmem[59562] = 61\\nmem[39496] = 45492350\\nmem[35168] = 1063\\nmem[35116] = 1135415\\nmask = 1X011X100X1001X1111011011XX000010100\\nmem[14949] = 7088\\nmem[27179] = 249426\\nmem[12840] = 3398667\\nmask = 100110X0X1X0011111011X0001XX00111X1X\\nmem[9310] = 377264021\\nmem[39496] = 5310\\nmask = 1X0111100X0011X10001100X00X0X1X0X01X\\nmem[23624] = 3559669\\nmem[4358] = 25901\\nmask = X0X1111001X0111X11011X00110000000X10\\nmem[41470] = 74601\\nmem[46470] = 28860028\\nmem[28699] = 579\\nmem[50915] = 8018491\\nmem[9582] = 512\\nmem[17809] = 2468\\nmem[19264] = 382929593\\nmask = 1X01X01001X001X1XX100111X0000X110000\\nmem[53852] = 671\\nmem[829] = 14607863\\nmem[59475] = 42176426\\nmem[50352] = 917431806\\nmem[25565] = 2735024\\nmem[31268] = 8203\\nmem[63568] = 18725\\nmask = 1011X01101X0X0X1X1X0X0110X0100001110\\nmem[14581] = 534274885\\nmem[60208] = 23685066\\nmem[59262] = 268487956\\nmem[243] = 75944\\nmask = 1001XX0001X01111001XX1X0X01000X10X11\\nmem[53831] = 4237440\\nmem[24052] = 1451049\\nmem[64125] = 432782904\\nmem[8892] = 15419\\nmask = 10X0101101000X1XX010100X110001XXX11X\\nmem[47441] = 9514\\nmem[24633] = 4407646\\nmem[40184] = 15477\\nmem[1696] = 106342632\\nmem[36011] = 606150\\nmem[14545] = 874\\nmask = 100X1XX11110X001X1X011000X0011010100\\nmem[18822] = 1345\\nmem[31329] = 49781332\\nmem[1256] = 23323\\nmem[47095] = 360\\nmem[28233] = 122942\\nmask = 1X01XX100100X1110X1110X10001X100X00X\\nmem[20346] = 6255\\nmem[2088] = 10531698\\nmem[19802] = 23124041\\nmem[13152] = 64318\\nmask = 1XX110100X100011011000XX10X00XX10X00\\nmem[55530] = 462159\\nmem[53302] = 4050\\nmask = 11X1X01X00X0X011X1101100100X101X100X\\nmem[32170] = 2300\\nmem[60379] = 1946048\\nmem[38974] = 935362865\\nmem[30527] = 38214\\nmem[39317] = 309\\nmask = 0X0XX11011X001X11X101011111X01100101\\nmem[6761] = 3363\\nmem[30072] = 488192925\\nmem[30577] = 5587652\\nmem[36815] = 820921800\\nmem[48185] = 90597685\\nmem[45346] = 14766\\nmask = 10XX000X0100000X011000X1X1X0X1X00101\\nmem[65328] = 277939257\\nmem[32705] = 259305\\nmem[8201] = 1708\\nmask = 100110X101100X01X110X011X001101X1101\\nmem[1321] = 133255266\\nmem[33628] = 464\\nmem[58727] = 673\\nmask = 1001101001X001010XX0X00001X0X0100000\\nmem[19034] = 17040206\\nmem[34637] = 15994570\\nmem[58564] = 7623\\nmask = 1001101101100101011X11110000X1001XX0\\nmem[23305] = 8044\\nmem[64547] = 395\\nmem[37420] = 27907889\\nmem[27608] = 612\\nmem[7901] = 680129\\nmem[2047] = 829469\\nmask = 1X0X0X100100111100011011100111XX1100\\nmem[55530] = 17794\\nmem[35214] = 6843366\\nmem[55948] = 325722\\nmem[50625] = 1010688\\nmem[1409] = 7196\\nmem[61824] = 484817479\\nmem[18803] = 12612636\\nmask = 1001X01XX1X0X1111X1001110X110X011101\\nmem[28127] = 1963295\\nmem[11625] = 1018106\\nmem[30920] = 1636\\nmem[15448] = 10027\\nmem[13104] = 13415208\\nmask = 11011010011101111X100000X0X110XXX101\\nmem[32426] = 26317976\\nmem[33610] = 953396121\\nmem[18997] = 205749058\\nmask = 1001101XX1100XX1011010XXXX00011X1100\\nmem[16512] = 115996365\\nmem[9541] = 816\\nmem[2017] = 47814977\\nmem[48769] = 6960\\nmem[57904] = 17542395\\nmem[31268] = 536187\\nmask = 100X101011X0X1X100100010101000X1100X\\nmem[12315] = 151687693\\nmem[2426] = 585162\\nmem[58101] = 840013\\nmask = X00110000100111100X1001001000XX00XXX\\nmem[61146] = 100666431\\nmem[64619] = 4637046\\nmem[27122] = 237312\\nmem[43315] = 2538822\\nmem[6097] = 889148\\nmask = 101110100X10X0110110111X1X001000X110\\nmem[59937] = 1039821042\\nmem[5228] = 20695323\\nmem[16793] = 1847174\\nmem[58963] = 11095\\nmem[22680] = 5166227\\nmem[44856] = 15083\\nmask = X001X0111X10X0110X10X1X0010110010100\\nmem[60974] = 391897\\nmem[54413] = 376986\\nmem[16685] = 488\\nmask = 1X0X0X00X0000111X00110X10X000110X000\\nmem[16055] = 28402351\\nmem[30402] = 379124674\\nmem[34946] = 13507\\nmem[52357] = 5299\\nmem[64564] = 106012728\\nmem[2719] = 45355693\\nmem[12] = 89762\\nmask = XX011X1111X00011X1X0010000001101X101\\nmem[29208] = 29115\\nmem[18551] = 426909992\\nmem[23699] = 15195667\\nmem[3422] = 11107\\nmem[34134] = 15916\\nmem[18069] = 1238938\\nmem[50734] = 4062867\\nmask = 1001X000XX00011100X100X1100XX11000X0\\nmem[62530] = 18469859\\nmem[54219] = 239365\\nmem[43155] = 3473\\nmem[38944] = 358650\\nmask = 1X01001X11001110X11X1010X0X111X010XX\\nmem[10724] = 2916217\\nmem[44147] = 416\\nmem[4105] = 2413\\nmem[38699] = 1661\\nmem[64725] = 1933034\\nmem[20996] = 13732\\nmem[63194] = 484290\\nmask = 1001X010110X1111X11111110011X0010000\\nmem[56756] = 53912\\nmem[55265] = 2802\\nmem[55521] = 61411987\\nmem[43040] = 1167\\nmask = 1XX1111101001X11001001111110101X1011\\nmem[29769] = 87000096\\nmem[15343] = 480461\\nmem[16428] = 51254247\\nmem[13162] = 53048239\\nmask = 100100100100XX010X1001XX1XXXX0100100\\nmem[13117] = 136\\nmem[63074] = 35112135\\nmask = 1101101001XX01110010111X100XX11X1XX0\\nmem[21012] = 2037\\nmem[54144] = 3133068\\nmem[63961] = 14080353\\nmask = 1001X11X01101111110X10X1010001000X0X\\nmem[62471] = 12508052\\nmem[14338] = 435627\\nmem[318] = 3687092\\nmem[64508] = 2664\\nmem[58433] = 14556\\nmem[8995] = 938\\nmem[32875] = 1012574980\\nmask = 1X01XX100X10011101X01001011X11011X01\\nmem[26989] = 97197022\\nmem[9541] = 150895995\\nmem[36956] = 174431384\\nmem[43247] = 2881\\nmem[6758] = 18074756\\nmem[35444] = 3197755\\nmem[42854] = 28212\\nmask = 100X101X0X00X1110010100011X0X01X1010\\nmem[17239] = 76342363\\nmem[48185] = 30296621\\nmem[26693] = 55049\\nmem[30110] = 28232858\\nmem[40609] = 197705858\\nmem[63074] = 1491954\\nmask = 100X1X1XX100111100XXX01110X00000101X\\nmem[28233] = 16456060\\nmem[37936] = 1485\\nmem[60589] = 1108\\nmem[58201] = 178477087\\nmem[35353] = 5172\\nmem[58317] = 582\\nmem[3707] = 124900\\nmask = 1001X0110XXXX11X1X100101101X000X1011\\nmem[6853] = 53203870\\nmem[10134] = 15607855\\nmem[55789] = 65720\\nmem[40948] = 26255\\nmem[23925] = 247\\nmask = 10XX00X001X0X11101100101100X0XX1X011\\nmem[21991] = 12365\\nmem[60284] = 475281124\\nmem[27156] = 712381\\nmem[40992] = 32030028\\nmem[55639] = 459820\\nmask = XX0110000100011X1X011101111X0X0001X1\\nmem[21777] = 23804\\nmem[18660] = 16096160\\nmem[13001] = 133879324\\nmem[55679] = 16534\\nmem[35334] = 95963075\\nmask = 1111X01X01100X01X1X00101000010101X01\\nmem[42543] = 830\\nmem[35104] = 119069\\nmem[30672] = 237624\\nmem[57513] = 11273\\nmem[24425] = 8038\\nmem[15062] = 880\\nmem[3370] = 1147051\\nmask = 100110X00100X111001X10X100XX0010X0X0\\nmem[34880] = 47552929\\nmem[56463] = 1311038\\nmem[34134] = 48583\\nmem[26841] = 28022630\\nmem[34391] = 238829624\\nmem[61488] = 64163\\nmask = 100110100X000X11001000111000X1X00000\\nmem[64564] = 9373265\\nmem[45253] = 516852473\\nmem[54102] = 7680\\nmem[56373] = 6272\\nmem[32800] = 20520227\\nmask = 100XX0X00100011100110001X00X01X00000\\nmem[11445] = 17299797\\nmem[45739] = 26477\\nmem[35104] = 8020\\nmem[44856] = 5098\\nmask = 100110100XXX0111001010XX0100001100X0\\nmem[31855] = 4562526\\nmem[37196] = 49264053\\nmask = 10011X1011X0011X1X010X00000000100X11\\nmem[51356] = 2533530\\nmem[21991] = 617827134\\nmem[59007] = 146920\\nmask = 10X11010001000110110001010XX101X1110\\nmem[17438] = 724\\nmem[40037] = 26066923\\nmem[62740] = 64849289\\nmem[51356] = 362548959\\nmask = 1001111XX000X1010001X1X1X010X1X00001\\nmem[62654] = 495\\nmem[13661] = 784\\nmem[2201] = 825060967\\nmem[56463] = 25468\\nmem[11152] = 332175\\nmem[11201] = 318547\\nmem[56898] = 19359\\nmask = 10011011111X011X01101010X00101001X11\\nmem[39227] = 183088177\\nmem[11942] = 18427\\nmem[56845] = 74552997\\nmem[9386] = 30899\\nmem[7664] = 28246572\\nmask = 1001101001100X11X11X100010X00X110XX0\\nmem[18885] = 28794\\nmem[1321] = 2616\\nmem[31268] = 1924\\nmem[26938] = 384173\\nmem[12796] = 400542613\\nmem[64037] = 104083\\nmask = 1001X01101X001010110110X0110000011X0\\nmem[47972] = 49309\\nmem[45634] = 85099607\\nmem[34920] = 28977\\nmem[58564] = 2559\\nmem[4311] = 700\\nmem[60974] = 658\\nmem[5228] = 4807\\nmask = XX011X11X1100011011X010X100011000110\\nmem[17753] = 70529\\nmem[17324] = 248339160\\nmem[60589] = 5812\\nmask = 11011110010X0X110X111011X1000X0X10XX\\nmem[35474] = 63093\\nmem[35770] = 170945\\nmem[31209] = 658557270\\nmem[41345] = 3895120\\nmem[28522] = 164751383\\nmask = X0X11XX01100011111X1X0000100XX111000\\nmem[8995] = 18206851\\nmem[21601] = 756\\nmem[64169] = 2372\\nmem[54020] = 40408\\nmask = 000111XX0100XX1100010000000010000110\\nmem[32975] = 11379458\\nmem[35264] = 191\\nmem[48634] = 372213\\nmem[37443] = 12419\\nmem[11441] = 168862967\\nmask = 1X0001100100X1X1XXXX100000X011101X01\\nmem[60955] = 121774\\nmem[33433] = 728\\nmem[34602] = 174\\nmem[41800] = 4552421\\nmask = 10011010X11000X1XXX0111100001X111000\\nmem[6773] = 15578957\\nmem[28044] = 3493208\\nmem[62407] = 169767\\nmem[51334] = 52448434\\nmem[53093] = 4752\\nmem[14545] = 1251\\nmask = 100110X01XX0X11111110110X01100110XXX\\nmem[18935] = 231360\\nmem[19721] = 876\\nmem[63491] = 56496605\\nmask = 10011010X110011X11X10X10101000010000\\nmem[61488] = 115634\\nmem[1321] = 19197\\nmem[33154] = 31600682\\nmask = 10011X1101X00111101X10X101X11010000X\\nmem[31209] = 30697\\nmem[30292] = 56770\\nmem[46372] = 4474\\nmem[22434] = 894\\nmask = X1011X11XXXXX01101X0X100100001100011\\nmem[33610] = 386\\nmem[46743] = 9985\\nmem[18581] = 25393973\\nmask = 1XX100X101X000010X10X011X001101X0101\\nmem[56281] = 2427\\nmem[23013] = 124563907\\nmem[41470] = 6819267\\nmem[58727] = 5142531\\nmem[63093] = 802798807\\nmem[58709] = 88\\nmask = 1001101X11100X011110010001XX010X01X0\\nmem[35264] = 9076212\\nmem[58092] = 3559173\\nmem[48925] = 58523913\\nmem[28101] = 402638054\\nmask = 10011010011001010111100001XX0010X0X1\\nmem[47972] = 128418944\\nmem[62530] = 288\\nmem[17179] = 77713212\\nmask = X0011011X0100X010110100X000100011100\\nmem[24524] = 107898\\nmem[46010] = 82127781\\nmem[45253] = 156159\\nmask = X0011X000100X1110X11100110000XX01010\\nmem[47222] = 15963\\nmem[13206] = 184605823\\nmem[34890] = 92193985\\nmem[64547] = 606039\\nmask = 1X0X101X011X011101101X111X000X1X0001\\nmem[4144] = 85071\\nmem[63340] = 3568335\\nmem[42980] = 2223\\nmem[65165] = 15723492\\nmem[55303] = 228834\\nmem[41409] = 120704\\nmask = X0X11X1011X0XX1111100X0110110111X1X0\\nmem[28969] = 5451626\\nmem[23890] = 202\\nmem[32579] = 893738\\nmem[19768] = 9755\\nmem[46679] = 4469\\nmem[10572] = 2621\\nmask = 1X01X010011X011111X001XX0001101X100X\\nmem[13230] = 4177769\\nmem[6789] = 1570\\nmem[12814] = 6330042\\nmem[19862] = 399947\\nmask = 100X0110X1001111001111X10001X1100000\\nmem[16428] = 62747997\\nmem[57753] = 3812740\\nmem[53818] = 2042073\\nmem[57170] = 65402596\\nmask = 00000110010X1X1X0011010000001X0X1X1X\\nmem[39125] = 231032\\nmem[41182] = 8309392\\nmem[41659] = 69862358\\nmem[2426] = 3954\\nmem[29634] = 1877\\nmask = 10011XX00X00110100X11X01100001X10000\\nmem[3276] = 165739267\\nmem[18985] = 215914582\\nmem[51726] = 2911\\nmem[1198] = 2689\\nmem[25096] = 38217\\nmem[65146] = 750396\\nmask = 100X000X11100111X0111X111X010X0X0100\\nmem[55354] = 71488486\\nmem[26941] = 153429\\nmem[27903] = 1242771\\nmem[20076] = 13658750\\nmask = 1X0X1X111100011110100X11XX0001X01101\\nmem[8106] = 8655\\nmem[13105] = 326089686\\nmask = 11110011011000010110XX0X1X0111X0X1X1\\nmem[47972] = 4628833\\nmem[64742] = 108229\\nmem[20310] = 234311\\nmem[22525] = 1268681\\nmem[57315] = 2293399\\nmem[1415] = 309220\\nmask = 1X01101001100X110X10X01110000X110001\\nmem[63491] = 55284\\nmem[6892] = 1776247\\nmem[22680] = 10087682\\nmask = 100110100X100111XX10X011100100101001\\nmem[32836] = 529\\nmem[60379] = 108710\\nmem[3707] = 119489129\\nmem[41220] = 407759\\nmem[17438] = 4570597\\nmem[18735] = 116991\\nmem[45194] = 632\\nmask = 10X100000X10111100100110001X01X000X0\\nmem[29832] = 17415\\nmem[18326] = 149774707\\nmem[61969] = 27327701\\nmask = 10011X100110X1X1X1X1101X000000X00X10\\nmem[37977] = 32149847\\nmem[10572] = 23418\\nmem[21601] = 46807\\nmem[3432] = 205866675\\nmem[15290] = 52828\\nmask = 1001X0X0010X111100101X100X0X000001X0\\nmem[29496] = 3463669\\nmem[22900] = 14028901\\nmem[59821] = 26258\\nmem[6007] = 3083265\\nmem[26841] = 223727\\nmask = 100110XX010001110001X000100X0X110X11\\nmem[47185] = 37062\\nmem[53497] = 486088\\nmem[20646] = 1031395\\nmem[51185] = 335\\nmem[42320] = 2256917\\nmask = X1011X1X0XX00101011010X10000XX010000\\nmem[24688] = 536538\\nmem[30782] = 45733\\nmask = 100010110X0X00100X10100X01X01011110X\\nmem[3691] = 61776413\\nmem[37654] = 3873\\nmem[32875] = 780114\\nmask = 10011X001X1X011X1111X010X00X1X110001\\nmem[54410] = 836\\nmem[63661] = 970522\\nmem[62471] = 1855\\nmem[16994] = 201\\nmem[27546] = 1249156\\nmem[37773] = 220004102\\nmem[39306] = 22122687\\nmask = 10011011XX10010101101X0100X01X001000\\nmem[16428] = 1095\\nmem[56732] = 121853353\\nmem[58092] = 234\\nmask = X010X01X010011X101X001X11000X0XX1011\\nmem[367] = 74756331\\nmem[55921] = 529419\\nmem[39160] = 278975\\nmem[6758] = 920\\nmem[32922] = 33406\\nmem[59763] = 1563\\nmem[10382] = 886\\nmask = 10011X100XX0010110100011001X10010X01\\nmem[25565] = 26956\\nmem[23146] = 57605\\nmem[28925] = 962\\nmask = 1X11X100X100011X111XX010001110X01011\\nmem[35334] = 92117904\\nmem[34488] = 59287493\\nmem[7861] = 64986498\\nmask = X001X0XXX1X00111X01110111X0101100X00\\nmem[50457] = 17353399\\nmem[62959] = 16719393\\nmem[49674] = 134654\\nmem[55789] = 2243\\nmem[22434] = 99455\\nmem[8288] = 142594569\\nmask = 10011010X11001111111110010X00X1X0001\\nmem[37420] = 41618762\\nmem[11560] = 48435\\nmem[829] = 2389\\nmem[40014] = 70681907\\nmem[36217] = 715125593\\nmem[30774] = 510\\nmem[15212] = 10840\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":14,\"solutions\":_vm.solutions,\"taskInput\":_vm.taskInput},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"14\" :solutions=\"solutions\" :taskInput=\"taskInput\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      taskInput: require('@/assets/input/Day-14.txt').default,\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      memory: {},\n      input: [],\n      masks: []\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Initialize everything\n      this.memory = {}\n      this.input = []\n      this.masks = []\n      // Loop through input\n      input.forEach(i => {\n        if (i.indexOf('mask') !== -1) {\n          // If it's a mask, parse it\n          this.masks.push(i.replace('mask = ', '').split(''))\n        } else {\n          // Otherwise, split on the equals\n          const parts = i.split(' = ')\n          // Get the memory index\n          const index = +parts[0].replace(/\\D/g, '')\n          // And get the binary representation of the value\n          const value = this.decimalToBinary(+parts[1], 36)\n          // Then push the configuration to an array\n          this.input.push({\n            index: index,\n            mask: this.masks[this.masks.length - 1],\n            value: value\n          })\n        }\n      })\n\n      this.solvePartOne()\n\n      // Reset the memory\n      this.memory = {}\n      this.solvePartTwo()\n    },\n    solvePartOne: function () {\n      this.input.forEach(i => {\n        // Set the memory at the given index to the corrected input\n        this.memory[i.index] = parseInt(this.overwriteBits(i.value, i.mask), 2)\n      })\n\n      // Sum over all set memory addresses\n      this.solutions.partOne = Object.keys(this.memory).map(k => this.memory[k]).reduce((a, b) => a + b)\n    },\n    solvePartTwo: function () {\n      // Loop over the input\n      this.input.forEach(i => {\n        // Convert the index to binary representation\n        const addressBits = this.decimalToBinary(i.index, 36).split('')\n        const mask = i.mask\n\n        // First replace all mask 1's\n        for (let x = 0; x < mask.length; x++) {\n          if (mask[x] === '1') {\n            addressBits[x] = '1'\n          }\n        }\n\n        // Keep track of all final addresses\n        const finalAddresses = []\n        // Get the number of Xs in the mask\n        const numberOfXs = mask.filter(x => x === 'X').length\n\n        // Loop through all 2^#Xs combinations\n        for (let x = 0; x < Math.pow(2, numberOfXs); x++) {\n          // Convert the number to a binary\n          // This gives for #X = 2\n          // 00, 01, 10, 11\n          // For #X = 3 this results in\n          // 000, 001, 010, 011, 100, 101, 110, 111\n          // We then use these bits from right to left to fill the Xs in the address\n          const bin = this.decimalToBinary(x, numberOfXs)\n\n          // Copy the current address\n          const copy = JSON.parse(JSON.stringify(addressBits))\n\n          // Walk through the current address from the right, replacing the positions where the mask has an X with the binary representation of the current loop\n          let position = 0\n          for (let y = addressBits.length - 1; y >= 0; y--) {\n            if (mask[y] === 'X') {\n              copy[y] = bin[bin.length - 1 - position]\n              position++\n            }\n          }\n\n          // Push the address index\n          finalAddresses.push(parseInt(copy.join(''), 2))\n        }\n\n        // Replace all memory indices with the value\n        finalAddresses.forEach(f => {\n          this.memory[f] = parseInt(i.value, 2)\n        })\n      })\n\n      // Sum over all set memory addresses\n      this.solutions.partTwo = Object.keys(this.memory).map(k => this.memory[k]).reduce((a, b) => a + b)\n    },\n    /**\n     * Converts the given decimal to its binary reprentation enforcing a length of at least `length`\n     * @param dec The decimal number to convert\n     * @param length The minimal length of the binary string representation\n     * @returns The binary string representation of the decimal input with at least the specified length\n     */\n    decimalToBinary: function (dec, length) {\n      let result = (dec >>> 0).toString(2)\n      while (result.length < length) {\n        result = '0' + result\n      }\n\n      return result\n    },\n    /**\n     * Overwrites the positions in the input with the mask bits skipping `X` positions\n     * @param input The input to replace on\n     * @param mask The mask to replace with\n     * @returns The replaced input\n     */\n    overwriteBits: function (input, mask) {\n      return input.split('').map((bit, index) => mask[index] === 'X' ? bit : mask[index]).join('')\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day14.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day14.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Day14.vue?vue&type=template&id=05d37e64&\"\nimport script from \"./Day14.vue?vue&type=script&lang=js&\"\nexport * from \"./Day14.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nfixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {\n  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;\n  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;\n  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\n\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return replacer !== undefined\n        ? replacer.call(searchValue, O, replaceValue)\n        : nativeReplace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      if (\n        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||\n        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)\n      ) {\n        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n        if (res.done) return res.value;\n      }\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n\n        results.push(result);\n        if (!global) break;\n\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n  // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return nativeReplace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $indexOf = require('../internals/array-includes').indexOf;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar nativeIndexOf = [].indexOf;\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\nvar STRICT_METHOD = arrayMethodIsStrict('indexOf');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aFunction(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = toLength(O.length);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar $map = require('../internals/array-iteration').map;\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');\n// FF49- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('map');\n\n// `Array.prototype.map` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n"],"sourceRoot":""}
{"version":3,"file":"js/6726.94dffa13.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGAC,UAAAA,CACA,UACA,UACA,QAEAC,EAAAA,GAAAA,KAAAA,WAAAA,EAAAA,IAAAA,EAAAA,UAEAA,EAAAA,SAAAA,KAAAA,OAAAA,KAAAA,MAAAA,QAAAA,EAAAA,UAAAA,GAAAA,KAAAA,MAAAA,OAAAA,EAEA,QACA,aACA,QACAA,EAAAA,GAAAA,IACA,MACA,QACAA,EAAAA,GAAAA,IACA,MACA,QACAA,EAAAA,GAAAA,IACA,MACA,QACAA,EAAAA,GAAAA,IACA,MACA,EAEA,SACA,aACA,QACAA,EAAAA,GAAAA,IACA,MACA,QACAA,EAAAA,GAAAA,IACA,MACA,QACAA,EAAAA,GAAAA,IACA,MACA,QACAA,EAAAA,GAAAA,IACA,MACA,GAIAC,WAAAA,CACA,KACAC,KAAAA,IACAC,MAAAA,IACAC,SAAAA,IACAC,KAAAA,GAAAA,EAAAA,KAEA,KACAH,KAAAA,IACAC,MAAAA,IACAC,SAAAA,IACAC,KAAAA,GAAAA,EAAAA,KAEAC,EAAAA,CACAJ,KAAAA,IACAC,MAAAA,IACAC,SAAAA,IACAC,KAAAA,GAAAA,EAAAA,KAEA,KACAH,KAAAA,IACAC,MAAAA,IACAC,SAAAA,IACAC,KAAAA,GAAAA,EAAAA,MAGAE,MAAAA,CAAAA,OAAAA,WAAAA,SAEA,EACAC,QAAAA,CACAhB,eAAAA,SAAAA,GACA,4BACA,4BAEA,0BAGA,kCAEA,cAGA,mCACA,uCAEA,oCACA,QAEA,iBACAiB,EAAAA,EACAC,EAAAA,EACAC,GAAAA,KAAAA,KAAAA,GAAAA,GACAC,SAAAA,SAIA,6CACA,oBAEA,oBAGA,CAGA,YACA,EAIAC,gBAAAA,SAAAA,GACA,+BACA,UACA,QAEA,SAGA,EACAC,MAAAA,WACA,0BACA,gBACAC,EAAAA,SAAAA,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,EAAAA,OAEA,SACAA,EAAAA,KAAAA,gBAAAA,GAEA,QACA,kBAEA,aAEA,kBACAC,EAAAA,OAAAA,GAGA,8BAEA,4BAEA,qBAGA,wBAGA,gBAEA,YADA,8CAKA,aAEA,yBACA,0BAIA,QACAD,EAAAA,SAAAA,CAAAA,EAAAA,KAEA,2BACAE,GACA,IAGAF,EAAAA,EAAAA,QAAAA,KAAAA,EAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAAAA,EAAAA,KAEAC,EAAAA,OAAAA,GAEAE,GAAAA,CACA,MACAF,EAAAA,IAAAA,GAGAE,GACA,CACA,CACA,ICzM6P,I,UCOzPC,GAAY,OACd,EACArC,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAe0B,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2018/Day13.vue?77a5","webpack://advent-of-code/src/components/2018/Day13.vue","webpack://advent-of-code/./src/components/2018/Day13.vue?28e6","webpack://advent-of-code/./src/components/2018/Day13.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":13,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"13\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      // What to do on which grid cell symbol\n      gridCells: {\n        '|': (cart) => {},\n        '-': (cart) => {},\n        '+': (cart) => {\n          // Adjust the orientation based on the next turn direction\n          cart.or = this.directions[cart.or][cart.nextTurn]\n          // Adjust the next turn based on the next index in the turns array\n          cart.nextTurn = this.turns[(this.turns.indexOf(cart.nextTurn) + 1) % this.turns.length]\n        },\n        '/': (cart) => {\n          switch (cart.or) {\n            case '^':\n              cart.or = '>'\n              break\n            case '>':\n              cart.or = '^'\n              break\n            case 'v':\n              cart.or = '<'\n              break\n            case '<':\n              cart.or = 'v'\n              break\n          }\n        },\n        '\\\\': (cart) => {\n          switch (cart.or) {\n            case '^':\n              cart.or = '<'\n              break\n            case '>':\n              cart.or = 'v'\n              break\n            case 'v':\n              cart.or = '>'\n              break\n            case '<':\n              cart.or = '^'\n              break\n          }\n        }\n      },\n      // Directions to handle turns and movements\n      directions: {\n        '^': {\n          left: '<',\n          right: '>',\n          straight: '^',\n          move: (cart) => cart.y--\n        },\n        '>': {\n          left: '^',\n          right: 'v',\n          straight: '>',\n          move: (cart) => cart.x++\n        },\n        v: {\n          left: '>',\n          right: '<',\n          straight: 'v',\n          move: (cart) => cart.y++\n        },\n        '<': {\n          left: 'v',\n          right: '^',\n          straight: '<',\n          move: (cart) => cart.x--\n        }\n      },\n      turns: ['left', 'straight', 'right']\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.solutions.partOne = null\n      this.solutions.partTwo = null\n      // Valid cart markers\n      const cartsMarkers = ['^', '>', 'v', '<']\n\n      // Parse the grid\n      this.grid = input.map(i => i.split(''))\n      // Parse the carts\n      this.carts = []\n\n      // Go through the grid\n      for (let y = 0; y < this.grid.length; y++) {\n        for (let x = 0; x < this.grid[y].length; x++) {\n          // Check if it's a cart\n          const cartIndex = cartsMarkers.indexOf(this.grid[y][x])\n          if (cartIndex !== -1) {\n            // Push it to the array with its position, orientation and next turn direction\n            this.carts.push({\n              x: x,\n              y: y,\n              or: this.grid[y][x],\n              nextTurn: 'left'\n            })\n\n            // Replace the symbol on the grid with a rail\n            if (this.grid[y][x] === '<' || this.grid[y][x] === '>') {\n              this.grid[y][x] = '-'\n            } else {\n              this.grid[y][x] = '|'\n            }\n          }\n        }\n      }\n\n      this.solve()\n    },\n    /**\n     * Sorts the given carts based on their action order, first on y then on x\n     */\n    getCartsInOrder: function (carts) {\n      return carts.concat().sort((a, b) => {\n        if (a.y !== b.y) {\n          return a.y - b.y\n        } else {\n          return a.x - b.x\n        }\n      })\n    },\n    solve: function () {\n      let lCarts = this.carts.concat()\n      const locs = new Set()\n      lCarts.forEach(c => locs.add(`${c.x},${c.y}`))\n\n      while (true) {\n        lCarts = this.getCartsInOrder(lCarts)\n\n        let pos = 0\n        while (pos < lCarts.length) {\n        // for (let c = 0; c < lCarts.length; c++) {\n          const cart = lCarts[pos]\n          // Remove the current cart location from the list\n          const oldLoc = `${cart.x},${cart.y}`\n          locs.delete(oldLoc)\n\n          // Move the cart\n          this.directions[cart.or].move(cart)\n          // Get the grid cell at that location\n          const cell = this.grid[cart.y][cart.x]\n          // Turn the cart if necessary\n          this.gridCells[cell](cart)\n\n          // Check if it collides with any of the others\n          const newLoc = `${cart.x},${cart.y}`\n\n          // If this was the last cart, we stop here before going any further\n          if (lCarts.length === 1) {\n            this.solutions.partTwo = `${lCarts[0].x},${lCarts[0].y}`\n            return\n          }\n\n          // Otherwise, check if this location is occupied\n          if (locs.has(newLoc)) {\n            // If it is, store solution part one if it's the first collision\n            if (!this.solutions.partOne) {\n              this.solutions.partOne = newLoc\n            }\n\n            // We need to adjust the position, because we are removing items\n            let decrement = 1\n            lCarts.forEach((c, i) => {\n              // Only count those with the same coordinates but a smaller index\n              if (c.x === cart.x && c.y === cart.y && i < pos) {\n                decrement++\n              }\n            })\n            // Now actually remove the items\n            lCarts = lCarts.filter(c => !(c.x === cart.x && c.y === cart.y))\n            // Delete the location, cause there's nothing there anymore\n            locs.delete(newLoc)\n            // Decrement the position\n            pos -= decrement\n          } else {\n            locs.add(newLoc)\n          }\n\n          pos++\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day13.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day13.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day13.vue?vue&type=template&id=1d1384a8\"\nimport script from \"./Day13.vue?vue&type=script&lang=js\"\nexport * from \"./Day13.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","gridCells","cart","directions","left","right","straight","move","v","turns","methods","x","y","or","nextTurn","getCartsInOrder","solve","lCarts","locs","decrement","pos","component"],"sourceRoot":""}
{"version":3,"file":"js/4736.7067c722.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,sBAAsB,CAACV,EAAG,OAAO,CAACW,SAAS,CAAC,UAAYf,EAAIgB,GAAGhB,EAAIiB,YAAYjB,EAAIkB,GAAG,cAAc,EAAEC,OAAM,GAAM,CAACP,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,sBAAsB,CAACV,EAAG,OAAO,CAACW,SAAS,CAAC,UAAYf,EAAIgB,GAAGhB,EAAIoB,YAAYpB,EAAIkB,GAAG,cAAc,EAAEC,OAAM,MAAS,EACtjBE,EAAkB,G,WCiBtB,MAAMC,EAAS,IACTC,EAAO,IACPC,EAAS,IAEf,OACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACApB,UAAAA,CACAqB,QAAAA,KACAC,QAAAA,MAEAC,UAAAA,CAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,GAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,GAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAAA,IACAC,IAAAA,CACA,aACA,WACA,cAEAd,QAAAA,KACAG,QAAAA,KAEA,EACAY,QAAAA,CACAvB,eAAAA,SAAAA,GACA,kBACA,kCACA,oBACA,mBACA,EACAwB,IAAAA,SAAAA,GAEA,sCAGA,2BACA,+BAEA,SACAC,KAAAA,EACAC,OAAAA,EACAC,OAAAA,GAWA,OAPA,4BACA,WACAN,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,OACA,IAIA,SACA,OACA,YACAO,EAAAA,GAAAA,GAAAA,GAEA,MACA,OACA,cACAA,EAAAA,GAAAA,GAAAA,GAEA,MACA,QACA,wBACAA,EAAAA,GAAAA,GAAAA,GAEA,MAEA,CAGA,QACA,EACAC,aAAAA,WAEA,4CAEA,sBACA,oBAEAC,EAAAA,CACA,CAGA,SACAL,KAAAA,EACAC,OAAAA,EACAC,OAAAA,GAEA,2BACA,8BACAI,EAAAA,KAAAA,IAAAA,EAAAA,GAAAA,OAKA,uCACA,0BACA,EACAC,aAAAA,WAEA,YACA,QAEA,gBAEA,4CAEA,WAEA,kBACAC,IAGA,0BAEA,aAEA,iBACA,MAGA,UACAA,GAAAA,EAGAA,GAAAA,EAGA,sBACAL,EAAAA,KAAAA,IAAAA,GAEAE,EAAAA,EAIA,SACAL,KAAAA,EACAC,OAAAA,EACAC,OAAAA,GAGA,2BACA,8BACAI,EAAAA,KAAAA,IAAAA,EAAAA,GAAAA,OAQA,OAHA,4CACA,2BAGA,CAEAG,EAAAA,IAAAA,EAAAA,GAGAJ,EAAAA,CACA,CACA,EACAK,MAAAA,SAAAA,GACA,SACA,4BACA,8BACA,YACAC,GAAAA,qCACA,YACAA,GAAAA,uCAEAA,GAAAA,EAAAA,GAAAA,GAGAA,GAAAA,OACA,CACA,QACA,ICpM6P,I,UCQzPC,GAAY,OACd,EACA/C,EACAsB,GACA,EACA,KACA,KACA,MAIF,EAAeyB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2018/Day18.vue?7853","webpack://advent-of-code/src/components/2018/Day18.vue","webpack://advent-of-code/./src/components/2018/Day18.vue?e02d","webpack://advent-of-code/./src/components/2018/Day18.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":18,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('pre',{staticClass:\"day-18-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridOne)}}),_vm._v(\"\\n      \")])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('pre',{staticClass:\"day-18-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridTwo)}}),_vm._v(\"\\n      \")])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"18\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <pre class=\"day-18-code border\">\n<code v-html=\"gridOne\" />\n      </pre>\n    </template>\n    <template v-slot:partTwo>\n      <pre class=\"day-18-code border\">\n<code v-html=\"gridTwo\" />\n      </pre>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nconst GROUND = '.'\nconst TREE = '|'\nconst LUMBER = '#'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      neighbors: [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]],\n      map: {\n        '.': 'ground',\n        '|': 'tree',\n        '#': 'lumber'\n      },\n      gridOne: null,\n      gridTwo: null\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.gridOne = null\n      this.grid = input.map(i => i.split(''))\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    run: function (grid) {\n      // Take a copy of the grid\n      const temp = JSON.parse(JSON.stringify(grid))\n\n      // Iteratr through it\n      for (let y = 0; y < temp.length; y++) {\n        for (let x = 0; x < temp[y].length; x++) {\n          // Keep track of neighbor counts per type\n          const neighbors = {\n            tree: 0,\n            lumber: 0,\n            ground: 0\n          }\n\n          // Count them\n          this.neighbors.forEach(n => {\n            if (grid[y + n[1]]) {\n              neighbors[this.map[grid[y + n[1]][x + n[0]]]]++\n            }\n          })\n\n          // Adjust based on current value and neighbors\n          switch (grid[y][x]) {\n            case GROUND:\n              if (neighbors.tree >= 3) {\n                temp[y][x] = TREE\n              }\n              break\n            case TREE:\n              if (neighbors.lumber >= 3) {\n                temp[y][x] = LUMBER\n              }\n              break\n            case LUMBER:\n              if (neighbors.lumber < 1 || neighbors.tree < 1) {\n                temp[y][x] = GROUND\n              }\n              break\n          }\n        }\n      }\n\n      return temp\n    },\n    solvePartOne: function () {\n      // Take a copy of the grid\n      let prev = JSON.parse(JSON.stringify(this.grid))\n      // Run 10 time steps\n      for (let i = 0; i < 10; i++) {\n        const temp = this.run(prev)\n\n        prev = temp\n      }\n\n      // Count types\n      const counts = {\n        tree: 0,\n        lumber: 0,\n        ground: 0\n      }\n      for (let y = 0; y < prev.length; y++) {\n        for (let x = 0; x < prev[y].length; x++) {\n          counts[this.map[prev[y][x]]]++\n        }\n      }\n\n      // Set solution\n      this.solutions.partOne = counts.tree * counts.lumber\n      this.gridOne = this.print(prev)\n    },\n    solvePartTwo: function () {\n      // Initial setip\n      const LIMIT = 1000000000\n      let round = 0\n      // Keep track of seen configurations\n      const memory = new Map()\n\n      let prev = JSON.parse(JSON.stringify(this.grid))\n      // While we haven't finished yet\n      while (round < LIMIT) {\n        // Do a step\n        let temp = this.run(prev)\n        round++\n\n        // Get configuration\n        const string = JSON.stringify(temp)\n\n        if (memory.has(string)) {\n          // Configuration exists? Get it and calculate the loop length\n          const match = memory.get(string)\n          const loopLength = round - match\n\n          // Then jump using the loop length\n          while (round < LIMIT) {\n            round += loopLength\n          }\n          // Adjust for offset\n          round -= loopLength\n\n          // Then run the remaining iterations manually again\n          for (let t = 0; t < LIMIT - round; t++) {\n            temp = this.run(temp)\n\n            prev = temp\n          }\n\n          // Calculate counts\n          const counts = {\n            tree: 0,\n            lumber: 0,\n            ground: 0\n          }\n\n          for (let y = 0; y < prev.length; y++) {\n            for (let x = 0; x < prev[y].length; x++) {\n              counts[this.map[prev[y][x]]]++\n            }\n          }\n\n          // Set result\n          this.solutions.partTwo = counts.tree * counts.lumber\n          this.gridTwo = this.print(prev)\n\n          return\n        } else {\n          // If we haven't seen this configuration yet, remember and continue\n          memory.set(string, round)\n        }\n\n        prev = temp\n      }\n    },\n    print: function (grid) {\n      let result = ''\n      for (let y = 0; y < grid.length; y++) {\n        for (let x = 0; x < grid[y].length; x++) {\n          if (grid[y][x] === TREE) {\n            result += '<span class=\"day-18-tree\">|</span>'\n          } else if (grid[y][x] === LUMBER) {\n            result += '<span class=\"day-18-lumber\">#</span>'\n          } else {\n            result += grid[y][x]\n          }\n        }\n        result += '<br/>'\n      }\n      return result\n    }\n  }\n}\n</script>\n\n<style>\n.day-18-code {\n  background-color: #2c3e50;\n  color: #7f8c8d;\n  max-height: 50vh;\n}\n.day-18-tree {\n  background-color:#27ae60;\n  color: #2c3e50;\n}\n.day-18-lumber {\n  background-color: #2980b9;\n  color: #2c3e50;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day18.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day18.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day18.vue?vue&type=template&id=7b638548\"\nimport script from \"./Day18.vue?vue&type=script&lang=js\"\nexport * from \"./Day18.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day18.vue?vue&type=style&index=0&id=7b638548&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","domProps","_s","gridOne","_v","proxy","gridTwo","staticRenderFns","GROUND","TREE","LUMBER","components","Day","data","partOne","partTwo","neighbors","map","methods","run","tree","lumber","ground","temp","solvePartOne","prev","counts","solvePartTwo","round","memory","print","result","component"],"sourceRoot":""}
{"version":3,"file":"js/9132.47cf5065.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,IAAI,UAAUR,MAAM,CAAC,GAAK,aAAa,EAAES,OAAM,MAAS,EAC/TC,EAAkB,G,sBCWtB,IAAIC,EAAW,GAEf,OACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,SAAAA,KACA,SACA,mBAGAC,KAAAA,WACA,OACAd,UAAAA,CACAe,QAAAA,KACAC,QAAAA,MAGA,EACAC,MAAAA,CACAC,cAAAA,WACA,WACA,GAEAC,QAAAA,CACAjB,eAAAA,SAAAA,GACAQ,EAAAA,GACA,WAEA,SACA,IAEAU,EAAAA,SAAAA,IACA,QAEAC,EAAAA,KAAAA,GACAC,EAAAA,EAGAZ,EAAAA,KAAAA,GACAa,EAAAA,KAGAD,IAAAA,EAGAC,EAAAA,MAAAA,GACA,IAIAb,EAAAA,KAAAA,GACAW,EAAAA,KAAAA,GAGAA,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,IAGA,4BAEA,sCAGAX,EAAAA,SAAAA,GAAAA,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,MAEAA,EAAAA,MAAAA,CAAAA,EAAAA,KACA,+BACA,yBACA,cAEA,iCACA,EACAc,KAAAA,WACA,uBACA,OAGA,8BAEA,0CAEA,KACA,oBACAC,EAAAA,KAAAA,CACAC,EAAAA,EAAAA,KAAAA,CAAAA,EAAAA,IAAAA,IACAC,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,OAAAA,EAAAA,EAAAA,GAAAA,OACAC,KAAAA,MACAC,KAAAA,SAAAA,EAAAA,MAIA,kCACAC,OAAAA,IACAC,UAAAA,IACAC,QAAAA,QACAC,YAAAA,EACAC,OAAAA,CAAAC,EAAAA,GAAAC,EAAAA,GAAAC,EAAAA,GAAAC,EAAAA,GACAC,cAAAA,cACAC,aAAAA,cACAC,MAAAA,CACAC,MAAAA,CAAAC,KAAAA,QAAAC,KAAAA,CAAAC,MAAAA,KAAAA,cAAAA,QAAAA,UACAC,SAAAA,CAAAD,MAAAA,KAAAA,cAAAA,QAAAA,SACAE,UAAAA,KAAAA,cAAAA,UAAAA,WAEAC,MAAAA,CACAN,MAAAA,CAAAC,KAAAA,WAAAC,KAAAA,CAAAC,MAAAA,KAAAA,cAAAA,QAAAA,UACAC,SAAAA,CAAAD,MAAAA,KAAAA,cAAAA,QAAAA,SACAE,UAAAA,KAAAA,cAAAA,UAAAA,YAEA,CACAE,YAAAA,EACAC,aAAAA,GAEA,IC7H4P,I,UCOxPC,GAAY,OACd,EACA3D,EACAiB,GACA,EACA,KACA,KACA,MAIF,EAAe0C,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2022/Day1.vue?9ac6","webpack://advent-of-code/src/components/2022/Day1.vue","webpack://advent-of-code/./src/components/2022/Day1.vue?d34e","webpack://advent-of-code/./src/components/2022/Day1.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":1,\"year\":2022,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{ref:\"partOne\",attrs:{\"id\":\"partOne\"}})]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"1\" :year=\"2022\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div id=\"partOne\" ref=\"partOne\" />\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { mapGetters } from 'vuex'\n\nlet plotData = []\n\nexport default {\n  components: {\n    Day\n  },\n  computed: {\n    ...mapGetters([\n      'storeDarkMode'\n    ])\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  watch: {\n    storeDarkMode: function () {\n      this.plot()\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      plotData = []\n      const elves = []\n\n      let plotArray = []\n      let sum = 0\n\n      input.forEach(i => {\n        if (i === '') {\n          // If we encounter an empty line, store the sum and reset\n          elves.push(sum)\n          sum = 0\n\n          // Keep track of the data for the chart\n          plotData.push(plotArray)\n          plotArray = []\n        } else {\n          // Otherwise, add to the sum\n          sum += +i\n\n          // Add point to chart data\n          plotArray.push(+i)\n        }\n      })\n\n      // Add the last one\n      plotData.push(plotArray)\n      elves.push(sum)\n\n      // Sort them\n      elves.sort((a, b) => b - a)\n\n      // Get the largest value for part one\n      this.solutions.partOne = elves[0]\n      // Sum up three largest for part two\n      this.solutions.partTwo = elves[0] + elves[1] + elves[2]\n\n      // Sort snacks per elf\n      plotData.forEach(pd => pd.sort((a, b) => b - a))\n      // Sort list of elfs\n      plotData.sort((one, two) => {\n        const totalA = one.reduce((a, b) => a + b)\n        const totalB = two.reduce((a, b) => a + b)\n        return totalB - totalA\n      })\n      this.$nextTick(() => this.plot())\n    },\n    plot: function () {\n      if (!this.$refs.partOne) {\n        return\n      }\n\n      this.$plotly.purge('partOne')\n\n      const maxTraces = Math.max(...plotData.map(pd => pd.length))\n\n      const traces = []\n      for (let i = 0; i < maxTraces; i++) {\n        traces.push({\n          x: plotData.map((_, j) => j),\n          y: plotData.map(pd => pd.length > i ? pd[i] : null),\n          type: 'bar',\n          name: `Snack ${i + 1}`\n        })\n      }\n\n      this.$plotly.newPlot('partOne', traces, {\n        height: 400,\n        hovermode: 'x',\n        barmode: 'stack',\n        showlegend: false,\n        margin: { t: 10, b: 40, l: 50, r: 0 },\n        paper_bgcolor: 'transparent',\n        plot_bgcolor: 'transparent',\n        xaxis: {\n          title: { text: 'Elves', font: { color: this.storeDarkMode ? 'white' : 'black' } },\n          tickfont: { color: this.storeDarkMode ? 'white' : 'black' },\n          gridcolor: this.storeDarkMode ? '#111111' : '#eeeeee'\n        },\n        yaxis: {\n          title: { text: 'Calories', font: { color: this.storeDarkMode ? 'white' : 'black' } },\n          tickfont: { color: this.storeDarkMode ? 'white' : 'black' },\n          gridcolor: this.storeDarkMode ? '#111111' : '#eeeeee'\n        }\n      }, {\n        responsive: true,\n        displaylogo: false\n      })\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day1.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day1.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day1.vue?vue&type=template&id=a509dc6e\"\nimport script from \"./Day1.vue?vue&type=script&lang=js\"\nexport * from \"./Day1.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","ref","proxy","staticRenderFns","plotData","components","Day","computed","data","partOne","partTwo","watch","storeDarkMode","methods","input","elves","sum","plotArray","plot","traces","x","y","type","name","height","hovermode","barmode","showlegend","margin","t","b","l","r","paper_bgcolor","plot_bgcolor","xaxis","title","text","font","color","tickfont","gridcolor","yaxis","responsive","displaylogo","component"],"sourceRoot":""}
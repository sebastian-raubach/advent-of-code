"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[534],{54740:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day19)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day19.vue?vue&type=template&id=64d8872e\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":19,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day19.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day19vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.rules = {};\n      this.input = [];\n      let part = 0;\n      // For each input\n      input.forEach(i => {\n        // If it's empty, we've reached the second part\n        if (i === '') {\n          part++;\n          return;\n        }\n        if (part === 0) {\n          // If we're still in the first half of the input, split on the colon and replace quotes\n          const split = i.split(': ').map(p => p.replace(/\"/g, ''));\n          // Then save the result in a map/object\n          this.rules[+split[0]] = split[1];\n        } else {\n          // If we're in the second half of the input, just keep the input\n          this.input.push(i);\n        }\n      });\n      this.solvePartOne();\n      this.solvePartTwo();\n    },\n    expandOne: function (current) {\n      // If we've reached a letter, simply return\n      if (current.length === 1 && isNaN(+current)) {\n        return current;\n      }\n\n      // Split into parts and then map them recursively\n      const result = current.split(' ').map(p => {\n        if (p === '|') {\n          // ORs are simply kept\n          return '|';\n        } else {\n          // Everything else is resolved recursively\n          return this.expandOne(this.rules[+p]);\n        }\n      }).join('');\n\n      // Return the result joined back together\n      return `(${result})`;\n    },\n    expandTwo: function (current, prevKey, eleven, eight) {\n      // If we've come from rule 8\n      if (prevKey === 8) {\n        // Increase the counter\n        eight++;\n\n        // Some test runs have shown that 5 is the limit we need\n        // If we have reached 5 repetitions, ignore the recursive part and just return the rule without it\n        if (eight >= 5) {\n          return `(${this.expandTwo(this.rules[42], 42, eleven, eight)})`;\n        }\n      }\n      // If we've come from rule 11\n      if (prevKey === 11) {\n        // Increase the counter\n        eleven++;\n\n        // Some test runs have shown that 5 is the limit we need\n        // If we have reached 5 repetitions, ignore the recursive part and just return the rule without it\n        if (eleven >= 5) {\n          return `(${this.expandTwo(this.rules[42], 42, eleven, eight)}${this.expandTwo(this.rules[31], 31, eleven, eight)})`;\n        }\n      }\n\n      // The rest is identical to part 1\n      if (current.length === 1 && isNaN(+current)) {\n        return current;\n      }\n      const result = current.split(' ').map(p => {\n        if (p === '|') {\n          return '|';\n        } else {\n          return this.expandTwo(this.rules[+p], +p, eleven, eight);\n        }\n      }).join('');\n      return `(${result})`;\n    },\n    solvePartOne: function () {\n      const overallRule = new RegExp('^' + this.expandOne(this.rules[0]) + '$', 'gm');\n      this.solutions.partOne = this.input.filter(m => m.match(overallRule)).length;\n    },\n    solvePartTwo: function () {\n      // Replace the rules\n      this.rules[8] = '42 | 42 8';\n      this.rules[11] = '42 31 | 42 11 31';\n\n      // Generate the regex\n      const overallRule = new RegExp('^' + this.expandTwo(this.rules[0], 0, 0, 0) + '$', 'gm');\n      this.solutions.partTwo = this.input.filter(m => m.match(overallRule)).length;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2020/Day19.vue?vue&type=script&lang=js\n /* harmony default export */ const _2020_Day19vue_type_script_lang_js = (Day19vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2020/Day19.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2020_Day19vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day19 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///54740\n")}}]);
{"version":3,"file":"js/9787.05238105.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2023/Day22.vue?1468","webpack://advent-of-code/src/components/2023/Day22.vue","webpack://advent-of-code/./src/components/2023/Day22.vue?6b7f","webpack://advent-of-code/./src/components/2023/Day22.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":22,\"year\":2023,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{ref:\"partOne\"})]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"22\" :year=\"2023\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div ref=\"partOne\" />\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const parts = input.map((i, ii) => {\n        // Parse start and end points\n        const [start, end] = i.split('~')\n        const [sx, sy, sz] = start.split(',').map(Number)\n        const [ex, ey, ez] = end.split(',').map(Number)\n        return {\n          start: { x: sx, y: sy, z: sz },\n          end: { x: ex, y: ey, z: ez },\n          below: [],\n          above: [],\n          name: `${ii}`\n        }\n      })\n\n      // Sort them by z,y,x order so the lowest ones come first\n      parts.sort((a, b) => Math.min(a.start.z, a.end.z) - Math.min(b.start.z, b.end.z) ||\n                           Math.min(a.start.y, a.end.y) - Math.min(b.start.y, b.end.y) ||\n                           Math.min(a.start.z, a.end.x) - Math.min(b.start.z, b.end.x))\n\n      this.drop(parts, true)\n\n      const nameMap = {}\n      parts.forEach(p => {\n        nameMap[p.name] = p\n      })\n\n      // Solution one are all those parts that either have no other parts resting on them or those where every brick resting on them also rests on another.\n      this.solutions.partOne = parts.filter(p => p.above.length === 0 || p.above.every(op => nameMap[op].below.length > 1)).length\n\n      // Take a copy of the current state\n      const copy = JSON.stringify(parts)\n      this.solutions.partTwo = parts.map(p => {\n        // Remove the current brick\n        const parsed = JSON.parse(copy).filter(op => p.name !== op.name)\n        return this.drop(parsed, false)\n      }).reduce((a, b) => a + b)\n\n      // Plot the result of part 1\n      this.$nextTick(() => this.plot(parts))\n    },\n    getPoints: function (p) {\n      // Get the 8 coordinates that make up the brick.\n      return [\n        { x: p.start.x, y: p.start.y, z: p.start.z },\n        { x: p.end.x + 1, y: p.start.y, z: p.start.z },\n        { x: p.start.x, y: p.end.y + 1, z: p.start.z },\n        { x: p.end.x + 1, y: p.end.y + 1, z: p.start.z },\n        { x: p.start.x, y: p.start.y, z: p.end.z + 1 },\n        { x: p.end.x + 1, y: p.start.y, z: p.end.z + 1 },\n        { x: p.start.x, y: p.end.y + 1, z: p.end.z + 1 },\n        { x: p.end.x + 1, y: p.end.y + 1, z: p.end.z + 1 }\n      ]\n    },\n    plot: function (parts) {\n      this.$plotly.purge(this.$refs.partOne)\n\n      const traces = []\n\n      let maxZ = 0\n      parts.forEach(p => {\n        const points = this.getPoints(p)\n        maxZ = Math.max(maxZ, Math.max(...points.map(p => p.z)))\n        traces.push({\n          x: points.map(pp => pp.x),\n          y: points.map(pp => pp.y),\n          z: points.map(pp => pp.z),\n          alphahull: 0,\n          opacity: 1,\n          type: 'mesh3d'\n        })\n      })\n\n      this.$plotly.newPlot(this.$refs.partOne, traces, {\n        height: maxZ * 10,\n        scene: {\n          aspectratio: {\n            x: 1,\n            y: 1,\n            z: 10\n          }\n        },\n        autosize: true,\n        automargin: false,\n        showlegend: false,\n        margin: { t: 10, b: 40, l: 50, r: 0 },\n        paper_bgcolor: 'transparent',\n        plot_bgcolor: 'transparent'\n      }, {\n        responsive: true,\n        displaylogo: false\n      })\n    },\n    drop: function (parts, cacheUpDown) {\n      const dropped = new Set()\n      parts.forEach(p => {\n        while (p.start.z > 1 && p.end.z > 1) {\n          // Get all the potential collisions\n          const getZ = parts.filter(op => Math.max(op.start.z, op.end.z) === Math.min(p.start.z, p.end.z) - 1)\n\n          // Remember the ones it touches below\n          const touching = this.getTouching(p, getZ)\n          if (cacheUpDown) {\n            p.below = touching.map(t => t.name)\n            // Remember this one is above the others\n            touching.forEach(t => t.above.push(p.name))\n          }\n\n          if (touching.length > 0) {\n            return\n          }\n\n          // Decrement\n          p.start.z--\n          p.end.z--\n          // Remember that this one was dropped for part 2 counts\n          dropped.add(p.name)\n        }\n      })\n      return dropped.size\n    },\n    onSegment: function (p, q, r) {\n      return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y)\n    },\n    orientation: function (p, q, r) {\n      const val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y)\n\n      if (val === 0) {\n        return 0 // collinear\n      } else {\n        return (val > 0) ? 1 : 2 // clock or counterclock wise\n      }\n    },\n    intersect: function (p1, q1, p2, q2) {\n      // Find the four orientations needed for general and special cases\n      const o1 = this.orientation(p1, q1, p2)\n      const o2 = this.orientation(p1, q1, q2)\n      const o3 = this.orientation(p2, q2, p1)\n      const o4 = this.orientation(p2, q2, q1)\n\n      // General case\n      if (o1 !== o2 && o3 !== o4) {\n        return true\n      }\n\n      // Special Cases\n      // p1, q1 and p2 are collinear and p2 lies on segment p1q1\n      if (o1 === 0 && this.onSegment(p1, p2, q1)) {\n        return true\n      }\n      // p1, q1 and q2 are collinear and q2 lies on segment p1q1\n      if (o2 === 0 && this.onSegment(p1, q2, q1)) {\n        return true\n      }\n      // p2, q2 and p1 are collinear and p1 lies on segment p2q2\n      if (o3 === 0 && this.onSegment(p2, p1, q2)) {\n        return true\n      }\n      // p2, q2 and q1 are collinear and q1 lies on segment p2q2\n      if (o4 === 0 && this.onSegment(p2, q1, q2)) {\n        return true\n      }\n\n      return false // Doesn't fall in any of the above cases\n    },\n    getTouching: function (above, potential) {\n      return potential.filter(p => this.intersect(above.start, above.end, p.start, p.end))\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day22.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day22.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day22.vue?vue&type=template&id=1f5a493b\"\nimport script from \"./Day22.vue?vue&type=script&lang=js\"\nexport * from \"./Day22.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","ref","proxy","staticRenderFns","components","Day","data","partOne","partTwo","methods","start","x","y","z","end","below","above","name","parts","Math","nameMap","getPoints","plot","maxZ","traces","alphahull","opacity","type","height","scene","aspectratio","autosize","automargin","showlegend","margin","t","b","l","r","paper_bgcolor","plot_bgcolor","responsive","displaylogo","drop","p","touching","dropped","onSegment","orientation","intersect","getTouching","component"],"sourceRoot":""}
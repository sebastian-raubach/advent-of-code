{"version":3,"file":"js/3981.db1bc531.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GACA,yCACA,yCACA,wCACA,EACAQ,kBAAAA,SAAAA,GACA,aACA,mBAGA,UAEA,6BAEAC,IAEA,MACAA,EAAAA,EAAAA,QAKAC,EAAAA,CAAAA,GAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,SAEA,qBACA,yDAGA,OADAC,EAAAA,KAAAA,EAAAA,SACA,CACA,EACAC,aAAAA,SAAAA,GACA,sBACAF,EAAAA,KAAAA,kBAAAA,GAGA,qBACA,SACA,6BACAC,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAEA,wBACA,EACAE,aAAAA,SAAAA,GAEA,sCACAH,EAAAA,KAAAA,GAGAA,EAAAA,EAAAA,KAAAA,IAAA,CAAAI,YAEAJ,EAAAA,SAAAA,CAAAA,EAAAA,IAAAA,EAAAA,GAAAA,KAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,KAGA,yCAGA,WAGA,uBAEA,gEAEA,SAEAK,EAAAA,KAAAA,EAAAA,KAAAA,KAAAA,KAAAA,KAGA,gBAEA,6BAEAN,IAEA,MACAA,EAAAA,EAAAA,QAKA,iBAEAO,EAAAA,KAAAA,KAAAA,KAAAA,EAAAA,KAEAC,EAAAA,KAAAA,EAGAF,EAAAA,EAAAA,IACA,CAGA,iBAEA,qDACA,ICnH6P,I,UCOzPG,GAAY,OACd,EACA5B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAeiB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2020/Day23.vue?3f54","webpack://advent-of-code/src/components/2020/Day23.vue","webpack://advent-of-code/./src/components/2020/Day23.vue?5eb7","webpack://advent-of-code/./src/components/2020/Day23.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":23,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"23\" :year=\"2020\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.numbers = input[0].split('').map(i => +i)\n      this.solvePartOne(this.numbers.concat())\n      this.solvePartTwo(this.numbers.concat())\n    },\n    moveCupsClockwise: function (numbers) {\n      const current = numbers[0]\n      const toMove = [numbers[1], numbers[2], numbers[3]]\n\n      // Start with the current - 1\n      let target = current - 1\n      // While the target is one of the moved cups\n      while (toMove.indexOf(target) !== -1 || target < 1) {\n        // Decrease\n        target--\n        // If we hit the bottom, start from the top\n        if (target < 1) {\n          target = numbers.length\n        }\n      }\n\n      // Remove them from the array\n      numbers = [current].concat(numbers.slice(4, numbers.length))\n      // Then add them again in the right position\n      const targetIndex = numbers.indexOf(target)\n      const result = numbers.slice(0, targetIndex + 1).concat(toMove).concat(numbers.slice(targetIndex + 1, numbers.length))\n      // Rotate so that the next number is at the top\n      result.push(result.shift())\n      return result\n    },\n    solvePartOne: function (numbers) {\n      for (let round = 0; round < 100; round++) {\n        numbers = this.moveCupsClockwise(numbers)\n      }\n\n      const indexOne = numbers.indexOf(1)\n      let result = ''\n      for (let index = 0; index < numbers.length - 1; index++) {\n        result += numbers[(indexOne + index + 1) % numbers.length]\n      }\n      this.solutions.partOne = result\n    },\n    solvePartTwo: function (numbers) {\n      // Fill up the array with the other numbers\n      for (let i = Math.max(...numbers) + 1; i <= 1000000; i++) {\n        numbers.push(i)\n      }\n      // Replace  them all with objects\n      numbers = numbers.map(value => { return { value } })\n      // Then store the next number like a linked list (only do this for the initial numbers)\n      numbers.forEach((v, i) => (numbers[i].next = i < numbers.length - 1 ? numbers[i + 1] : numbers[0]))\n\n      // Create a map that stores value to object\n      const vMap = new Map(numbers.map(number => [number.value, number]))\n\n      // Start with the first number\n      let head = numbers[0]\n\n      // Do the rounds\n      for (let round = 0; round < 10000000; round++) {\n        // Get the numbers to move\n        const toMove = [head.next.value, head.next.next.value, head.next.next.next.value]\n        // And the first one for reference\n        const toMoveHead = head.next\n        // Update the next one of our current one to the first one after the ones to move\n        head.next = head.next.next.next.next\n\n        // Start with the current - 1\n        let target = head.value - 1\n        // While the target is one of the moved cups\n        while (toMove.indexOf(target) !== -1 || target < 1) {\n          // Decrease\n          target--\n          // If we hit the bottom, start from the top\n          if (target < 1) {\n            target = numbers.length\n          }\n        }\n\n        // Get the object at the target value\n        const pos = vMap.get(target)\n        // Set the successor of the last one in the to move chunk to the next one after the target\n        toMoveHead.next.next.next = pos.next\n        // Then update the target to point at the items to move\n        pos.next = toMoveHead\n\n        // Move on to the next one\n        head = head.next\n      }\n\n      // Get the object with value 1\n      const posOne = vMap.get(1)\n      // Multiply the next and the one after together\n      this.solutions.partTwo = posOne.next.value * posOne.next.next.value\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day23.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day23.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day23.vue?vue&type=template&id=7a55b830\"\nimport script from \"./Day23.vue?vue&type=script&lang=js\"\nexport * from \"./Day23.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","moveCupsClockwise","target","numbers","result","solvePartOne","solvePartTwo","value","head","toMoveHead","pos","component"],"sourceRoot":""}
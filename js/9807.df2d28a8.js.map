{"version":3,"file":"js/9807.df2d28a8.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,iBAAiB,CAACV,EAAG,SAAS,CAACU,YAAY,SAASR,MAAM,CAAC,GAAK,UAAU,MAAQN,EAAIe,OAAOC,MAAM,OAAShB,EAAIe,OAAOE,YAAY,EAAEC,OAAM,MAAS,EACvaC,EAAkB,G,WCYtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAf,UAAAA,CACAgB,QAAAA,KACAC,QAAAA,MAEAT,OAAAA,CACAC,MAAAA,IACAC,OAAAA,KAEAQ,KAAAA,KAEA,EACAC,QAAAA,CACAjB,eAAAA,SAAAA,GACA,WACA,KAEA,kCAEA,2BACA,mBACA,WACA,2BACA,WAaA,iBAEA,WACAkB,EAAAA,IAIA,WACAC,EAAAA,KAAAA,CACAD,OAAAA,EACAE,KAAAA,EAAAA,EACAC,EAAAA,EACAC,OAAAA,EAAAA,UAAAA,EAAAA,KAEAJ,EAAAA,MAGAK,EAAAA,KAAAA,CAAAC,IAAAH,IAAAI,SAAAA,GAAAC,OAAAA,EAAAA,MA5BA,WACAP,EAAAA,KAAAA,CACAD,OAAAA,EACAE,KAAAA,EAAAA,EACAC,EAAAA,EACAC,OAAAA,EAAAA,UAAAA,EAAAA,KAEAJ,EAAAA,MAyBA,WACAC,EAAAA,KAAAA,CACAD,OAAAA,EACAE,KAAAA,EAAAA,OAAAA,EACAC,EAAAA,EACAC,OAAAA,EAAAA,UAAAA,EAAAA,EAAAA,UAEAJ,EAAAA,KACA,IAGA,kCACA,SAQA,OAPAK,EAAAA,SAAAA,IACA,uDACAI,KAAAA,EACAC,EAAAA,SAAAA,KAAAA,GACA,IAGA,eACA,uBAEA,iCACA,sCACA,wCAEA,IAEA,uBAEA,oCACA,EACAC,KAAAA,SAAAA,EAAAA,GAEA,2CACA,qBACAC,EAAAA,UAAAA,EAEA,WAEA,aACAvB,MAAAA,KAAAA,KAAAA,GAAAA,OAAAA,EACAC,OAAAA,KAAAA,KAAAA,OAAAA,GAGA,qBACAsB,EAAAA,UAAAA,UACAA,EAAAA,SAAAA,EAAAA,EAAAA,KAAAA,OAAAA,MAAAA,KAAAA,OAAAA,QAEAX,EAAAA,SAAAA,IACAW,EAAAA,UAAAA,UACAA,EAAAA,SAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAAAA,OAAAA,GAAAA,EAAAA,IAGAP,EAAAA,SAAAA,IACA,uCACAO,EAAAA,UAAAA,UACAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,UAAAA,UACAF,EAAAA,SAAAA,SAAAA,IACAE,EAAAA,SAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAAAA,OAAAA,GAAAA,EAAAA,MAGAA,EAAAA,UAAAA,UACAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,GACA,GAEA,IChJ4P,I,UCQxPC,GAAY,OACd,EACAzC,EACAoB,GACA,EACA,KACA,KACA,MAIF,EAAeqB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2023/Day3.vue?14d5","webpack://advent-of-code/src/components/2023/Day3.vue","webpack://advent-of-code/./src/components/2023/Day3.vue?df9f","webpack://advent-of-code/./src/components/2023/Day3.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":3,\"year\":2023,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":_vm.canvas.width,\"height\":_vm.canvas.height}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"3\" :year=\"2023\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partOne\" class=\"canvas\" :width=\"canvas.width\" :height=\"canvas.height\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      canvas: {\n        width: 1000,\n        height: 1000\n      },\n      grid: null\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const numbers = []\n      const symbols = []\n\n      this.grid = input.map(i => i.split(''))\n\n      this.grid.forEach((parts, y) => {\n        const i = parts.join('')\n        let xStart = null\n        for (let x = 0; x < parts.length; x++) {\n          if (parts[x] === '.') {\n            // Dot\n            if (xStart !== null) {\n              numbers.push({\n                xStart: xStart,\n                xEnd: x - 1,\n                y: y,\n                value: +i.substring(xStart, x)\n              })\n              xStart = null\n            }\n\n            continue\n          } else if (parts[x] === `${+parts[x]}`) {\n            // Number\n            if (xStart === null) {\n              xStart = x\n            }\n          } else {\n            // Symbol\n            if (xStart !== null) {\n              numbers.push({\n                xStart: xStart,\n                xEnd: x - 1,\n                y: y,\n                value: +i.substring(xStart, x)\n              })\n              xStart = null\n            }\n\n            symbols.push({ x, y, touching: [], symbol: parts[x] })\n          }\n        }\n\n        if (xStart !== null) {\n          numbers.push({\n            xStart: xStart,\n            xEnd: i.length - 1,\n            y: y,\n            value: +i.substring(xStart, i.length)\n          })\n          xStart = null\n        }\n      })\n\n      this.solutions.partOne = numbers.map(n => {\n        let touches = false\n        symbols.forEach(s => {\n          if ((Math.abs(s.y - n.y) <= 1) && (s.x >= n.xStart - 1) && (s.x <= n.xEnd + 1)) {\n            touches ||= true\n            s.touching.push(n)\n          }\n        })\n\n        return touches ? n.value : 0\n      }).reduce((a, b) => a + b, 0)\n\n      this.solutions.partTwo = symbols.map(s => {\n        if (s.symbol === '*' && s.touching.length === 2) {\n          return s.touching[0].value * s.touching[1].value\n        } else {\n          return 0\n        }\n      }).reduce((a, b) => a + b, 0)\n\n      this.$nextTick(() => this.draw(symbols, numbers))\n    },\n    draw: function (symbols, numbers) {\n      // Initialise the canvas\n      const canvas = document.getElementById('partOne')\n      const ctx = canvas.getContext('2d')\n      ctx.lineWidth = 1\n\n      const factor = 10\n\n      this.canvas = {\n        width: this.grid[0].length * factor,\n        height: this.grid.length * factor\n      }\n\n      this.$nextTick(() => {\n        ctx.fillStyle = '#2c3e50'\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n\n        numbers.forEach(n => {\n          ctx.fillStyle = '#006266'\n          ctx.fillRect(n.xStart * factor, n.y * factor, factor * (n.xEnd - n.xStart + 1), factor)\n        })\n\n        symbols.forEach(s => {\n          if (s.symbol === '*' && s.touching.length === 2) {\n            ctx.fillStyle = '#FFC312'\n            ctx.fillRect(s.x * factor, s.y * factor, factor, factor)\n            ctx.fillStyle = '#A3CB38'\n            s.touching.forEach(t => {\n              ctx.fillRect(t.xStart * factor, t.y * factor, factor * (t.xEnd - t.xStart + 1), factor)\n            })\n          } else {\n            ctx.fillStyle = '#EE5A24'\n            ctx.fillRect(s.x * factor, s.y * factor, factor, factor)\n          }\n        })\n      })\n    }\n  }\n}\n</script>\n\n<style>\n.canvas-holder {\n  overflow: auto;\n  height: 1000px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day3.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day3.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day3.vue?vue&type=template&id=70c0ae14\"\nimport script from \"./Day3.vue?vue&type=script&lang=js\"\nexport * from \"./Day3.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day3.vue?vue&type=style&index=0&id=70c0ae14&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","canvas","width","height","proxy","staticRenderFns","components","Day","data","partOne","partTwo","grid","methods","xStart","numbers","xEnd","y","value","symbols","x","touching","symbol","touches","s","draw","ctx","component"],"sourceRoot":""}
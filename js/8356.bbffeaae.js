"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[8356],{32183:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day20)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day20.vue?vue&type=template&id=01f27de8\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":20,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partTwo\",fn:function(){return [_c('pre',{staticClass:\"day-20-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridTwo)}}),_vm._v(\"\\n      \")])]},proxy:true}])})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./src/util/MonsterDrawer.js\nclass MonsterDrawer {\n  constructor(grid) {\n    this.$grid = grid;\n  }\n  getFormattedGrid() {\n    let result = '';\n    for (let y = 0; y < this.$grid.length; y++) {\n      for (let x = 0; x < this.$grid[y].length; x++) {\n        if (this.$grid[y][x] === 'O') {\n          result += '<span class=\"day-20-monster\">O</span>';\n        } else {\n          result += this.$grid[y][x];\n        }\n      }\n      result += '<br/>';\n    }\n    return result;\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day20.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ const Day20vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      gridTwo: null\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.gridTwo = null;\n      this.parts = [];\n      let id;\n      let part = [];\n      input.forEach(i => {\n        if (i === '') {\n          this.parts.push({\n            id,\n            part\n          });\n          id = null;\n          part = [];\n        } else if (i.includes('Tile ')) {\n          id = +i.replace(/\\D/g, '');\n        } else {\n          part.push(i.split('').map(c => c === '#'));\n        }\n      });\n      if (id !== null) {\n        this.parts.push({\n          id,\n          part\n        });\n      }\n      this.width = Math.sqrt(this.parts.length);\n      this.solvePartOne();\n      this.solvePartTwo();\n    },\n    rotateRight: function (part) {\n      return part[0].map((val, index) => part.map(row => row[index]).reverse());\n    },\n    flip: function (part) {\n      return part.map(p => p.map((c, index) => p[index]).reverse());\n    },\n    expand: function (parts) {\n      const expandedParts = [];\n      parts.forEach(p => {\n        // Get all rotations\n        const zero = p.part;\n        const ninety = this.rotateRight(zero);\n        const oneeighty = this.rotateRight(ninety);\n        const seventwenty = this.rotateRight(oneeighty);\n        // And their flipped options\n        const flipZero = this.flip(zero);\n        const flipNinety = this.flip(ninety);\n        const flipOneeighty = this.flip(oneeighty);\n        const flipSeventwenty = this.flip(seventwenty);\n\n        // Add them all\n        expandedParts.push({\n          id: p.id,\n          part: zero\n        });\n        expandedParts.push({\n          id: p.id,\n          part: ninety\n        });\n        expandedParts.push({\n          id: p.id,\n          part: oneeighty\n        });\n        expandedParts.push({\n          id: p.id,\n          part: seventwenty\n        });\n        expandedParts.push({\n          id: p.id,\n          part: flipZero\n        });\n        expandedParts.push({\n          id: p.id,\n          part: flipNinety\n        });\n        expandedParts.push({\n          id: p.id,\n          part: flipOneeighty\n        });\n        expandedParts.push({\n          id: p.id,\n          part: flipSeventwenty\n        });\n      });\n\n      // Keep track of the possible matches for each part\n      this.matches = {};\n      expandedParts.forEach(p => {\n        const m = expandedParts.filter(q => this.match(p.part, q.part, 'left') || this.match(p.part, q.part, 'top') || this.match(p.part, q.part, 'bottom') || this.match(p.part, q.part, 'right')).map(q => q.id);\n        if (!this.matches[p.id]) {\n          this.matches[p.id] = new Set();\n        }\n        m.filter(c => c !== p.id).forEach(c => this.matches[p.id].add(c));\n      });\n      return expandedParts;\n    },\n    recurse: function (allParts, usedParts, index, usedIds) {\n      // Get the x and y position in the puzzle\n      const x = index % this.width;\n      const y = Math.floor(index / this.width);\n\n      // If we've hit the last index (bottom right of the puzzle), return the used parts\n      if (index === this.parts.length) {\n        return usedParts;\n      }\n\n      // Get the part to the left and the top if this one\n      const left = x > 0 ? usedParts[index - 1] : null;\n      const top = y > 0 ? usedParts[index - this.width] : null;\n\n      // Get all possible options for this position by exluding all the ones we've used already\n      const possibleParts = allParts.filter(p => usedIds.indexOf(p.id) === -1);\n\n      // Iterate through them all\n      for (let i = 0; i < possibleParts.length; i++) {\n        const p = possibleParts[i];\n        // If they match together\n        if ((!left || this.matches[left.id].has(p.id) && this.match(left.part, p.part, 'right')) && (!top || this.matches[top.id].has(p.id) && this.match(top.part, p.part, 'bottom'))) {\n          // Take a copy of the arrays\n          const tempUsedParts = usedParts.concat();\n          const tempUsedIds = usedIds.concat();\n          // Add this one\n          tempUsedParts.push(p);\n          tempUsedIds.push(p.id);\n\n          // Continue recursively\n          const res = this.recurse(allParts, tempUsedParts, index + 1, tempUsedIds);\n\n          // If we found a result, return it\n          if (res !== null) {\n            return res;\n          }\n        }\n      }\n\n      // We have not found a result\n      return null;\n    },\n    match: function (one, two, side) {\n      switch (side) {\n        case 'bottom':\n          // Check the bottom of `one` matches the top of `two`\n          return JSON.stringify(one[one.length - 1]) === JSON.stringify(two[0]);\n        case 'top':\n          // Check the top of `one` matches the bottom of `two`\n          return JSON.stringify(one[0]) === JSON.stringify(two[two.length - 1]);\n        case 'right':\n          // Check the right of `one` matches the left of `two`\n          return JSON.stringify(one.map(r => r[r.length - 1])) === JSON.stringify(two.map(r => r[0]));\n        case 'left':\n          // Check the left of `one` matches the right of `two`\n          return JSON.stringify(one.map(r => r[0])) === JSON.stringify(two.map(r => r[r.length - 1]));\n      }\n    },\n    replaceAll: function (grid, monster) {\n      // Keep track of the number of monsters\n      let counter = 0;\n      // Iterate through the grid\n      grid.forEach((row, y) => {\n        row.forEach((_, x) => {\n          // Keep track of whether all monster positions exist and are '#'s\n          const all = monster.filter(m => grid[y + m[0]] !== undefined && grid[y + m[0]][x + m[1]] === '#').length === monster.length;\n\n          // If we have a complete monster, replace all parts with 'O's\n          if (all) {\n            monster.forEach(m => {\n              // Set it to 'O' to indicate it's been used\n              grid[y + m[0]][x + m[1]] = 'O';\n              counter++;\n            });\n          }\n        });\n      });\n      return counter > 0;\n    },\n    solvePartOne: function () {\n      // Expand the parts by getting all rotated and flipped options\n      const expanded = this.expand(this.parts);\n\n      // Solve this recursively. We start with all parts, no used parts, the top left index and no used ids.\n      this.usedParts = this.recurse(expanded, [], 0, []);\n\n      // The result is the corner ids multiplicated together\n      this.solutions.partOne = this.usedParts[0].id * this.usedParts[this.width - 1].id * this.usedParts[this.usedParts.length - 1].id * this.usedParts[this.usedParts.length - this.width].id;\n    },\n    solvePartTwo: function () {\n      // Map each part by removing its border\n      const borderRemoved = this.usedParts.map(p => {\n        // Remove first and last row based on the index\n        return p.part.filter((row, index) => index !== 0 && index !== p.part.length - 1).map(row => {\n          // Within each row, remove first and last entry\n          row.shift();\n          row.pop();\n          return row.map(c => c ? '#' : '.').join('');\n        });\n      });\n\n      // Join them all together\n      const joined = [];\n      // Iterate width in both dimensions across the parts\n      for (let y = 0; y < this.width; y++) {\n        for (let x = 0; x < this.width; x++) {\n          // Get the index of the part in our result\n          const part = borderRemoved[y * this.width + x];\n\n          // Within the part\n          for (let innerY = 0; innerY < part.length; innerY++) {\n            // Get the index in the joined grid\n            const joinedY = y * 8 + innerY;\n            // If it doesn't exist, create it\n            if (joined.length <= joinedY) {\n              joined.push('');\n            }\n\n            // Then concatenate the parts\n            joined[joinedY] = joined[joinedY] + part[innerY];\n          }\n        }\n      }\n\n      // Finally, we split it back apart\n      const largeGrid = joined.map(j => j.split(''));\n      const rotatedAndFlipped = this.expand([{\n        id: null,\n        part: largeGrid\n      }]);\n\n      // Define the monster as relative coordinates\n      const monster = [[0, 18], [1, 0], [1, 5], [1, 6], [1, 11], [1, 12], [1, 17], [1, 18], [1, 19], [2, 1], [2, 4], [2, 7], [2, 10], [2, 13], [2, 16]];\n      rotatedAndFlipped.forEach(r => {\n        const part = r.part;\n        // Check if the monster exists in there\n        if (this.replaceAll(part, monster)) {\n          // Count the non-monster '#'s\n          const counter = part.map(row => row.filter(c => c === '#').length).reduce((a, b) => a + b);\n\n          // Start the drawer\n          this.gridTwo = new MonsterDrawer(part).getFormattedGrid();\n\n          // The answer is the count\n          this.solutions.partTwo = counter;\n        }\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2020/Day20.vue?vue&type=script&lang=js\n /* harmony default export */ const _2020_Day20vue_type_script_lang_js = (Day20vue_type_script_lang_js); \n;// CONCATENATED MODULE: ./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-12.use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day20.vue?vue&type=style&index=0&id=01f27de8&prod&lang=css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/components/2020/Day20.vue?vue&type=style&index=0&id=01f27de8&prod&lang=css\n\n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2020/Day20.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2020_Day20vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day20 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32183\n")}}]);
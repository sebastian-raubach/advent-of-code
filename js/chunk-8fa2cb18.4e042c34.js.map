{"version":3,"sources":["webpack:///./src/components/2021/Day2.vue?abcc","webpack:///src/components/2021/Day2.vue","webpack:///./src/components/2021/Day2.vue?8e44","webpack:///./src/components/2021/Day2.vue","webpack:///./node_modules/core-js/modules/es.array.map.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","proxy","staticRenderFns","components","Day","computed","layout","height","xaxis","title","tickfont","gridcolor","darkMode","yaxis","paper_bgcolor","plot_bgcolor","data","partOne","partTwo","mod","forward","down","up","mod2","current","x","y","aim","watch","$plotly","relayout","methods","parts","value","mode","mods","forEach","traces","push","p1","p2","plot","$nextTick","responsive","displaylogo","component","$","$map","map","arrayMethodHasSpeciesSupport","HAS_SPECIES_SUPPORT","target","proto","forced","callbackfn","arguments","length","undefined"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,eAAeQ,OAAM,GAAM,CAACF,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,eAAeQ,OAAM,QAC9XC,EAAkB,G,wFCctB,GACEC,WAAY,CACVC,IAAJ,cAEEC,SAAU,OAAZ,OAAY,CAAZ,kBACA,gBACA,cAFA,IAIIC,OAAQ,WACN,MAAO,CACLC,OAAQ,IACRC,MAAO,CACLC,MAAO,CAAjB,uEACUC,SAAU,CAApB,qCACUC,UAAWvB,KAAKwB,SAAW,UAAY,WAEzCC,MAAO,CACLJ,MAAO,CAAjB,yDACUC,SAAU,CAApB,qCACUC,UAAWvB,KAAKwB,SAAW,UAAY,WAEzCE,cAAe,cACfC,aAAc,kBAIpBC,KAAM,WACJ,MAAO,CACLtB,UAAW,CACTuB,QAAS,KACTC,QAAS,MAEXC,IAAK,CACHC,QAAS,SAAjB,aACQC,KAAM,SAAd,aACQC,GAAI,SAAZ,cAEMC,KAAM,CACJH,QAAS,SAAjB,KACUI,EAAQC,GAAKA,EACbD,EAAQE,GAAKF,EAAQG,IAAMF,GAE7BJ,KAAM,SAAd,eACQC,GAAI,SAAZ,kBAIEM,MAAO,CACLhB,SAAU,WACR,IACExB,KAAKyC,QAAQC,SAAS,UAAW1C,KAAKkB,QAC9C,UAEM,IACElB,KAAKyC,QAAQC,SAAS,UAAW1C,KAAKkB,QAC9C,aAIEyB,QAAS,CACPnC,eAAgB,SAApB,cAEA,qBACQ,IAAR,eACQ,MAAO,CACLuB,IAAKa,EAAM,GACXC,OAAQD,EAAM,OAKxB,GACQP,EAAG,EACHC,EAAG,GAEX,GACQD,EAAG,EACHC,EAAG,EACHC,IAAK,GAIb,IACQF,EAAG,GACHC,EAAG,GACHQ,KAAM,iBACd,CACQT,EAAG,GACHC,EAAG,GACHQ,KAAM,kBAIRC,EAAKC,SAAQ,SAAnB,GACQ,EAAR,sBACQ,EAAR,uBACQC,EAAO,GAAGZ,EAAEa,KAAKC,EAAGd,GACpBY,EAAO,GAAGX,EAAEY,KAAKC,EAAGb,GACpBW,EAAO,GAAGZ,EAAEa,KAAKE,EAAGf,GACpBY,EAAO,GAAGX,EAAEY,KAAKE,EAAGd,MAItBtC,KAAKM,UAAUuB,QAAUsB,EAAGd,EAAIc,EAAGb,EACnCtC,KAAKM,UAAUwB,QAAUsB,EAAGf,EAAIe,EAAGd,EAEnCtC,KAAKqD,KAAK,UAAWJ,EAAO,IAC5BjD,KAAKqD,KAAK,UAAWJ,EAAO,KAE9BI,KAAM,SAAV,gBACMrD,KAAKsD,WAAU,WACb,EAAR,gCACUC,YAAY,EACZC,aAAa,UChIsU,I,YCOzVC,EAAY,eACd,EACA3D,EACAgB,GACA,EACA,KACA,KACA,MAIa,aAAA2C,E,2CCjBf,IAAIC,EAAI,EAAQ,QACZC,EAAO,EAAQ,QAAgCC,IAC/CC,EAA+B,EAAQ,QAEvCC,EAAsBD,EAA6B,OAKvDH,EAAE,CAAEK,OAAQ,QAASC,OAAO,EAAMC,QAASH,GAAuB,CAChEF,IAAK,SAAaM,GAChB,OAAOP,EAAK3D,KAAMkE,EAAYC,UAAUC,OAAS,EAAID,UAAU,QAAKE","file":"js/chunk-8fa2cb18.4e042c34.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":2,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{attrs:{\"id\":\"partOne\"}})]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('div',{attrs:{\"id\":\"partTwo\"}})]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"2\" :year=\"2021\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div id=\"partOne\" />\n    </template>\n    <template v-slot:partTwo>\n      <div id=\"partTwo\" />\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { mapGetters } from 'vuex'\n\nexport default {\n  components: {\n    Day\n  },\n  computed: {\n    ...mapGetters([\n      'darkMode'\n    ]),\n    layout: function () {\n      return {\n        height: 350,\n        xaxis: {\n          title: { text: 'Horizontal position', font: { color: this.darkMode ? 'white' : 'black' } },\n          tickfont: { color: this.darkMode ? 'white' : 'black' },\n          gridcolor: this.darkMode ? '#111111' : '#eeeeee'\n        },\n        yaxis: {\n          title: { text: 'Depth', font: { color: this.darkMode ? 'white' : 'black' } },\n          tickfont: { color: this.darkMode ? 'white' : 'black' },\n          gridcolor: this.darkMode ? '#111111' : '#eeeeee'\n        },\n        paper_bgcolor: 'transparent',\n        plot_bgcolor: 'transparent'\n      }\n    }\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      mod: {\n        forward: (current, x) => { current.x += x },\n        down: (current, y) => { current.y += y },\n        up: (current, y) => { current.y -= y }\n      },\n      mod2: {\n        forward: (current, x) => {\n          current.x += x\n          current.y += current.aim * x\n        },\n        down: (current, y) => { current.aim += y },\n        up: (current, y) => { current.aim -= y }\n      }\n    }\n  },\n  watch: {\n    darkMode: function () {\n      try {\n        this.$plotly.relayout('partOne', this.layout)\n      } catch (err) {\n      }\n      try {\n        this.$plotly.relayout('partTwo', this.layout)\n      } catch (err) {\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Parse the input\n      const mods = input.map(i => {\n        const parts = i.split(' ')\n        return {\n          mod: parts[0],\n          value: +parts[1]\n        }\n      })\n\n      // Keep track of the current position\n      const p1 = {\n        x: 0,\n        y: 0\n      }\n      const p2 = {\n        x: 0,\n        y: 0,\n        aim: 0\n      }\n\n      // For plotting\n      const traces = [{\n        x: [],\n        y: [],\n        mode: 'lines+markers'\n      }, {\n        x: [],\n        y: [],\n        mode: 'lines+markers'\n      }]\n\n      // Make the adjustments\n      mods.forEach(m => {\n        this.mod[m.mod](p1, m.value)\n        this.mod2[m.mod](p2, m.value)\n        traces[0].x.push(p1.x)\n        traces[0].y.push(p1.y)\n        traces[1].x.push(p2.x)\n        traces[1].y.push(p2.y)\n      })\n\n      // Get the solution\n      this.solutions.partOne = p1.x * p1.y\n      this.solutions.partTwo = p2.x * p2.y\n\n      this.plot('partOne', traces[0])\n      this.plot('partTwo', traces[1])\n    },\n    plot: function (id, trace) {\n      this.$nextTick(() => {\n        this.$plotly.newPlot(id, [trace], this.layout, {\n          responsive: true,\n          displaylogo: false\n        })\n      })\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day2.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Day2.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Day2.vue?vue&type=template&id=68246aa1&\"\nimport script from \"./Day2.vue?vue&type=script&lang=js&\"\nexport * from \"./Day2.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","'use strict';\nvar $ = require('../internals/export');\nvar $map = require('../internals/array-iteration').map;\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');\n\n// `Array.prototype.map` method\n// https://tc39.es/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n"],"sourceRoot":""}
{"version":3,"file":"js/9035.dd0ac661.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAEAC,WAAAA,GACAC,SAAAA,CAEAC,IAAAA,CAAAA,EAAAA,EAAAA,KAAA,CAAAA,IAAAA,EAAAA,EAAAC,IAAAA,EAAAA,IAEAC,IAAAA,CAAAA,EAAAA,EAAAA,KAAA,CAAAF,IAAAA,EAAAC,IAAAA,EAAAA,IAEAE,IAAAA,CAAAA,EAAAA,EAAAA,KAAA,CAAAH,IAAAA,EAAAC,IAAAA,EAAAA,KAGA,EACAG,QAAAA,CACAb,eAAAA,SAAAA,GACA,2BACA,qBAEA,OACAc,GAAAA,EAAAA,GACAC,OAAAA,EAAAA,GACA,IAGA,oBACA,mBACA,EACAC,kBAAAA,SAAAA,GACA,QACA,IACA,WAGA,SAEA,sBACA,OACAC,YAAAA,EACAC,SAAAA,GAKA,aAEAC,EAAAA,IAAAA,EAEA,yCAGAD,EAAAA,EAAAA,IACAD,EAAAA,EAAAA,GACA,CACA,EACAG,aAAAA,WACA,0EACA,EACAC,aAAAA,WAEA,0CAEA,2BAGA,+BAEA,oDAEAC,EAAAA,GAAAA,GAAAA,QAAAA,EAAAA,GAAAA,MAAAA,MAGA,kCAGA,yBAGA,YADA,qCAGA,CACA,CACA,ICjG4P,I,UCOxPC,GAAY,OACd,EACAjC,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAesB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2020/Day8.vue?d731","webpack://advent-of-code/src/components/2020/Day8.vue","webpack://advent-of-code/./src/components/2020/Day8.vue?6494","webpack://advent-of-code/./src/components/2020/Day8.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":8,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"8\" :year=\"2020\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      operations: [],\n      operands: {\n        // Accumulators increase the acc and move to the next position\n        acc: (value, acc, pos) => { return { acc: acc + value, pos: pos + 1 } },\n        // No operations just move to the next position\n        nop: (value, acc, pos) => { return { acc: acc, pos: pos + 1 } },\n        // Jumps just move the current position to the value\n        jmp: (value, acc, pos) => { return { acc: acc, pos: pos + value } }\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.operations = input.map(i => {\n        const parts = i.split(' ')\n        // Remember the operator and the value as a number\n        return {\n          op: parts[0],\n          value: +parts[1]\n        }\n      })\n\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    calculateSolution: function (localOperations) {\n      let accumulator = 0\n      let position = 0\n      const visitedPositions = {}\n\n      // Loop while we haven't terminated yet\n      while (true) {\n        // If we've either hit an infinite loop (repeated index) or we reached the end, return\n        if (position === localOperations.length || visitedPositions[position]) {\n          return {\n            accumulator: accumulator,\n            position: position\n          }\n        }\n\n        // Get the current operator\n        const operator = localOperations[position]\n        // Mark the index as visited\n        visitedPositions[position] = true\n        // Get the new configuration\n        const next = this.operands[operator.op](operator.value, accumulator, position)\n\n        // Adjust the configuration\n        position = next.pos\n        accumulator = next.acc\n      }\n    },\n    solvePartOne: function () {\n      this.solutions.partOne = this.calculateSolution(this.operations).accumulator\n    },\n    solvePartTwo: function () {\n      // Loop through all positions\n      for (let index = 0; index < this.operations.length; index++) {\n        // Get the operation\n        const i = this.operations[index]\n\n        // If it's a nop or a jmp\n        if (i.op === 'nop' || i.op === 'jmp') {\n          // Copy the whole input\n          const tempInput = JSON.parse(JSON.stringify(this.operations))\n          // Then swap the current position\n          tempInput[index].op = i.op === 'nop' ? 'jmp' : 'nop'\n\n          // Calculate the result using part one\n          const result = this.calculateSolution(tempInput)\n\n          // If this configuration has reached the end, it's no longer an infinite loop\n          if (result.position === tempInput.length) {\n            // Set the result and terminate\n            this.solutions.partTwo = result.accumulator\n            return\n          }\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day8.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day8.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day8.vue?vue&type=template&id=0c2d911a\"\nimport script from \"./Day8.vue?vue&type=script&lang=js\"\nexport * from \"./Day8.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","operations","operands","acc","pos","nop","jmp","methods","op","value","calculateSolution","accumulator","position","visitedPositions","solvePartOne","solvePartTwo","tempInput","component"],"sourceRoot":""}
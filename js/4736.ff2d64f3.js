"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[4736],{53164:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day18)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day18.vue?vue&type=template&id=7b638548\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":18,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('pre',{staticClass:\"day-18-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridOne)}}),_vm._v(\"\\n      \")])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('pre',{staticClass:\"day-18-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridTwo)}}),_vm._v(\"\\n      \")])]},proxy:true}])})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day18.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nconst GROUND = '.';\nconst TREE = '|';\nconst LUMBER = '#';\n/* harmony default export */ const Day18vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      neighbors: [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]],\n      map: {\n        '.': 'ground',\n        '|': 'tree',\n        '#': 'lumber'\n      },\n      gridOne: null,\n      gridTwo: null\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.gridOne = null;\n      this.grid = input.map(i => i.split(''));\n      this.solvePartOne();\n      this.solvePartTwo();\n    },\n    run: function (grid) {\n      // Take a copy of the grid\n      const temp = JSON.parse(JSON.stringify(grid));\n\n      // Iteratr through it\n      for (let y = 0; y < temp.length; y++) {\n        for (let x = 0; x < temp[y].length; x++) {\n          // Keep track of neighbor counts per type\n          const neighbors = {\n            tree: 0,\n            lumber: 0,\n            ground: 0\n          };\n\n          // Count them\n          this.neighbors.forEach(n => {\n            if (grid[y + n[1]]) {\n              neighbors[this.map[grid[y + n[1]][x + n[0]]]]++;\n            }\n          });\n\n          // Adjust based on current value and neighbors\n          switch (grid[y][x]) {\n            case GROUND:\n              if (neighbors.tree >= 3) {\n                temp[y][x] = TREE;\n              }\n              break;\n            case TREE:\n              if (neighbors.lumber >= 3) {\n                temp[y][x] = LUMBER;\n              }\n              break;\n            case LUMBER:\n              if (neighbors.lumber < 1 || neighbors.tree < 1) {\n                temp[y][x] = GROUND;\n              }\n              break;\n          }\n        }\n      }\n      return temp;\n    },\n    solvePartOne: function () {\n      // Take a copy of the grid\n      let prev = JSON.parse(JSON.stringify(this.grid));\n      // Run 10 time steps\n      for (let i = 0; i < 10; i++) {\n        const temp = this.run(prev);\n        prev = temp;\n      }\n\n      // Count types\n      const counts = {\n        tree: 0,\n        lumber: 0,\n        ground: 0\n      };\n      for (let y = 0; y < prev.length; y++) {\n        for (let x = 0; x < prev[y].length; x++) {\n          counts[this.map[prev[y][x]]]++;\n        }\n      }\n\n      // Set solution\n      this.solutions.partOne = counts.tree * counts.lumber;\n      this.gridOne = this.print(prev);\n    },\n    solvePartTwo: function () {\n      // Initial setip\n      const LIMIT = 1000000000;\n      let round = 0;\n      // Keep track of seen configurations\n      const memory = new Map();\n      let prev = JSON.parse(JSON.stringify(this.grid));\n      // While we haven't finished yet\n      while (round < LIMIT) {\n        // Do a step\n        let temp = this.run(prev);\n        round++;\n\n        // Get configuration\n        const string = JSON.stringify(temp);\n        if (memory.has(string)) {\n          // Configuration exists? Get it and calculate the loop length\n          const match = memory.get(string);\n          const loopLength = round - match;\n\n          // Then jump using the loop length\n          while (round < LIMIT) {\n            round += loopLength;\n          }\n          // Adjust for offset\n          round -= loopLength;\n\n          // Then run the remaining iterations manually again\n          for (let t = 0; t < LIMIT - round; t++) {\n            temp = this.run(temp);\n            prev = temp;\n          }\n\n          // Calculate counts\n          const counts = {\n            tree: 0,\n            lumber: 0,\n            ground: 0\n          };\n          for (let y = 0; y < prev.length; y++) {\n            for (let x = 0; x < prev[y].length; x++) {\n              counts[this.map[prev[y][x]]]++;\n            }\n          }\n\n          // Set result\n          this.solutions.partTwo = counts.tree * counts.lumber;\n          this.gridTwo = this.print(prev);\n          return;\n        } else {\n          // If we haven't seen this configuration yet, remember and continue\n          memory.set(string, round);\n        }\n        prev = temp;\n      }\n    },\n    print: function (grid) {\n      let result = '';\n      for (let y = 0; y < grid.length; y++) {\n        for (let x = 0; x < grid[y].length; x++) {\n          if (grid[y][x] === TREE) {\n            result += '<span class=\"day-18-tree\">|</span>';\n          } else if (grid[y][x] === LUMBER) {\n            result += '<span class=\"day-18-lumber\">#</span>';\n          } else {\n            result += grid[y][x];\n          }\n        }\n        result += '<br/>';\n      }\n      return result;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2018/Day18.vue?vue&type=script&lang=js\n /* harmony default export */ const _2018_Day18vue_type_script_lang_js = (Day18vue_type_script_lang_js); \n;// CONCATENATED MODULE: ./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-12.use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day18.vue?vue&type=style&index=0&id=7b638548&prod&lang=css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/components/2018/Day18.vue?vue&type=style&index=0&id=7b638548&prod&lang=css\n\n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2018/Day18.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2018_Day18vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day18 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53164\n")}}]);
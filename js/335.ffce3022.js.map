{"version":3,"file":"js/335.ffce3022.js","mappings":"yKAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCMtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAEAC,WAAAA,CACAC,EAAAA,GAAAA,EAAAA,IACAC,EAAAA,GAAAA,EAAAA,IACAC,EAAAA,GAAAA,EAAAA,IACAC,EAAAA,GAAAA,EAAAA,KAEAC,UAAAA,CACAJ,EAAAA,IACAC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,KAGA,EACAE,QAAAA,CACAb,eAAAA,SAAAA,GAEA,gCAGA,GACAc,EAAAA,EAAAA,GAAAA,QAAAA,KACAC,EAAAA,EACAC,UAAAA,KAIA,KAGA,QACA,SACAC,IAEA,gCAGA,oBAGA,WAGA,OAFA,uCACA,0BAIA,wBAEAC,EAAAA,KAAAA,QACA,aAEAC,EAAAA,UAAAA,KAAAA,gBAAAA,EAAAA,GAGA,oBAGA,OAFA,uCACA,yBAIA,CACA,EACAC,gBAAAA,SAAAA,EAAAA,GACA,qCACAC,QAAAA,GAAAA,IAAAA,KAAAA,UAAAA,EAAAA,aACAC,KAAAA,IAEA,SAAAR,EAAAA,EAAAA,EAAAC,EAAAA,EAAAA,EAAAC,UAAAA,GAEA,OADA,sBACA,KAEAK,QAAAA,KAEA,kDAIA,oBAIA,kBACA,eAEA,IAEA,ICvG6P,I,UCOzPE,GAAY,OACd,EACAjC,EACAW,GACA,EACA,KACA,WACA,MAIF,EAAesB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2017/Day19.vue?6eb9","webpack://advent-of-code/src/components/2017/Day19.vue","webpack://advent-of-code/./src/components/2017/Day19.vue?3ea1","webpack://advent-of-code/./src/components/2017/Day19.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":19,\"year\":2017,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"19\" :year=\"2017\" :solutions=\"solutions\" @input-changed=\"onInputChanged\" />\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      directions: {\n        s: (pos) => pos.y++,\n        w: (pos) => pos.x--,\n        n: (pos) => pos.y--,\n        e: (pos) => pos.x++\n      },\n      opposites: {\n        s: 'n',\n        w: 'e',\n        n: 's',\n        e: 'w'\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Parse the grid\n      const grid = input.map(r => r.split(''))\n\n      // Current position\n      const current = {\n        x: grid[0].indexOf('|'),\n        y: 0,\n        direction: 's'\n      }\n\n      // Remember the letters\n      const letters = []\n\n      // Count the steps\n      let stepCounter = 0\n      while (true) {\n        stepCounter++\n        // Move\n        this.directions[current.direction](current)\n\n        // Get the next cell\n        const cell = grid[current.y][current.x]\n\n        // If we ended up in empty space, then this is the end\n        if (cell === ' ') {\n          this.solutions.partOne = letters.join('')\n          this.solutions.partTwo = stepCounter\n          return\n        }\n\n        if (cell.match(/[a-zA-Z]/i)) {\n          // If it's a letter\n          letters.push(cell)\n        } else if (cell === '+') {\n          // If it's a corner, change direction\n          current.direction = this.adjustDirection(current, grid)\n\n          // We found a solution if there's nowhere to turn\n          if (current.direction === null) {\n            this.solutions.partOne = letters.join('')\n            this.solutions.partTwo = stepCounter\n            return\n          }\n        }\n      }\n    },\n    adjustDirection: function (pos, grid) {\n      const neighbors = Object.keys(this.directions)\n                              .filter(d => d !== this.opposites[pos.direction]) // Use all directions except where we came from\n                              .map(d => {\n                                // Get the coordinates in those directions\n                                const np = { x: pos.x, y: pos.y, direction: d }\n                                this.directions[d](np)\n                                return np\n                              })\n                              .filter(n => {\n                                // Only keep valid coordinates\n                                if (n.y > grid.length - 1 || n.y < 0 || n.x < 0 || n.x > grid[n.y].length) {\n                                  return false\n                                }\n                                // And only those that aren't empty space\n                                return grid[n.y][n.x] !== ' '\n                              })\n\n      // Return the first neighbor if found\n      if (neighbors.length > 0) {\n        return neighbors[0].direction\n      } else {\n        return null\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day19.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day19.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day19.vue?vue&type=template&id=83bb9fcc&scoped=true\"\nimport script from \"./Day19.vue?vue&type=script&lang=js\"\nexport * from \"./Day19.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"83bb9fcc\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","directions","s","w","n","e","opposites","methods","x","y","direction","stepCounter","letters","current","adjustDirection","filter","map","component"],"sourceRoot":""}
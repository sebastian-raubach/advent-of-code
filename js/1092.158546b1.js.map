{"version":3,"file":"js/1092.158546b1.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAEAC,WAAAA,CACAC,EAAAA,GAAAA,EAAAA,IACAC,EAAAA,GAAAA,EAAAA,IACAC,EAAAA,GAAAA,EAAAA,IACAC,EAAAA,GAAAA,EAAAA,KAGA,EACAC,QAAAA,CACAZ,eAAAA,SAAAA,GAEA,iDACA,YACA,EACAa,MAAAA,WAEA,OACAC,EAAAA,EACAC,EAAAA,GAEA,kBAGA,WAEA,UAGAC,EAAAA,IAAAA,EAAAA,GAGA,4BACA,MACA,EAEA,UACA,QAEAC,EAAAA,KAAAA,CACAH,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,IAEA,MACA,QAEAG,EAAAA,EAAAA,MACA,MACA,QAEAA,EAAAA,EAAAA,EAAAA,OAAAA,GACA,MACA,QAEAC,EAAAA,CACAL,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,GAGA,sBAGAK,EAAAA,GAAAA,EAAAA,KAAAA,EAAAA,IACAC,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,EAAAA,KAEA,SAEAL,EAAAA,IAAAA,EAAAA,KAAAA,IAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAGAA,EAAAA,IAAAA,EAAAA,EAAAA,GAIAE,EAAAA,EACA,MACA,IAIA,+CAEA,iEACA,ICpG6P,I,UCOzPI,GAAY,OACd,EACAhC,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAeqB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2018/Day20.vue?a571","webpack://advent-of-code/src/components/2018/Day20.vue","webpack://advent-of-code/./src/components/2018/Day20.vue?e342","webpack://advent-of-code/./src/components/2018/Day20.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":20,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"20\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      directions: {\n        N: (pos) => pos.y--,\n        E: (pos) => pos.x++,\n        S: (pos) => pos.y++,\n        W: (pos) => pos.x--\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Split into parts, removing the \"^\" and \"$\"\n      this.regex = input[0].split('').slice(1, input[0].length - 1)\n      this.solve()\n    },\n    solve: function () {\n      // Start at the origin\n      let current = {\n        x: 0,\n        y: 0\n      }\n      let xy = `${current.x},${current.y}`\n\n      // Keep track of path\n      const stack = []\n      // Keep track of minimal door numbers to get to x,y\n      const dist = new Map()\n\n      // 0 doors to get to the start - duh\n      dist.set(xy, 0)\n\n      // Iterate through the input\n      this.regex.forEach((char, index) => {\n        let next\n        let prevDist\n        // Switch based on the character\n        switch (char) {\n          case '(':\n            // Opening brackets mean a branch, add to the stack\n            stack.push({\n              x: current.x,\n              y: current.y\n            })\n            break\n          case ')':\n            // Closing brackets mean popping from the stack\n            current = stack.pop()\n            break\n          case '|':\n            // Use, but don't remove the last element in the stack\n            current = stack[stack.length - 1]\n            break\n          default:\n            // Otherwise, define a new node\n            next = {\n              x: current.x,\n              y: current.y\n            }\n            // Modify its position based on the direction\n            this.directions[char](next)\n\n            // Get the distance to the previous (current) one\n            xy = `${next.x},${next.y}`\n            prevDist = dist.get(`${current.x},${current.y}`)\n\n            if (dist.has(xy)) {\n              // If there is a distance value for this new position, take the minimum\n              dist.set(xy, Math.min(dist.get(xy), prevDist + 1))\n            } else {\n              // Otherwise use the previous plus one\n              dist.set(xy, prevDist + 1)\n            }\n\n            // Go to the next position\n            current = next\n            break\n        }\n      })\n\n      // The maximum door number is the maximal distance we have observed\n      this.solutions.partOne = Math.max(...dist.values())\n      // Since we kept track of the shortest distances to each position, just filter based on that\n      this.solutions.partTwo = [...dist.values()].filter(v => v >= 1000).length\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day20.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day20.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day20.vue?vue&type=template&id=2fc56a0e\"\nimport script from \"./Day20.vue?vue&type=script&lang=js\"\nexport * from \"./Day20.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","directions","N","E","S","W","methods","solve","x","y","dist","stack","current","next","xy","prevDist","component"],"sourceRoot":""}
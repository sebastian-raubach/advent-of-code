{"version":3,"file":"js/6979.9ce5dd79.js","mappings":"yKAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAEAC,WAAAA,CACAC,IAAAA,GAAAA,EAAAA,GACAC,IAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GACAC,GAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GACAC,OAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GACAC,OAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GACAC,IAAAA,IAAAA,EAAAA,IAGA,EACAC,QAAAA,CACAd,eAAAA,SAAAA,GAEA,yBAEA,gBAEA,gBAEA,kCAGAe,EAAAA,KAAAA,WAAAA,GAEAA,EAAAA,QAAAA,GAAAA,MAAAA,EAAAA,SAAAA,SAAAA,IACAC,EAAAA,QAAAA,CAAAA,KAAAA,UAAAA,SACAA,EAAAA,QAAAA,KAAAA,IAGAC,EAAAA,QAEA,gBAEA,iCACA,EACAC,MAAAA,SAAAA,EAAAA,GAEA,iBAEAH,EAAAA,EAAAA,QAAAA,IAEA,0BACA,SAKA,SAEA,SAGA,MARA,IAaA,gCAGAE,EAAAA,IAAAA,EAAAA,OAAAA,MAAAA,KAAAA,WAAAA,EAAAA,SAAAA,KAEA,EAIA,GAGA,EACAE,WAAAA,SAAAA,GACA,kBAEA,2BAEA,eAGA,KAEA,MA0BA,OAxBA,cAEA,YACAC,EAAAA,KAAAA,EAAAA,IAEAA,EAAAA,MAAAA,EAAAA,IAGAC,EAAAA,OACA,cAEAD,EAAAA,KAAAA,EAAAA,IAEAC,EAAAA,OACA,cAEAD,EAAAA,KAAAA,EAAAA,IACAA,EAAAA,KAAAA,EAAAA,IAEAC,EAAAA,EAAAA,IAEAC,QAAAA,MAAAA,2BAAAA,KAGA,CACAF,QAAAA,EACAG,OAAAA,EACAF,QAAAA,EACA,GAEA,IClI4P,I,UCOxPG,GAAY,OACd,EACAlC,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAeuB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2015/Day7.vue?4eb5","webpack://advent-of-code/src/components/2015/Day7.vue","webpack://advent-of-code/./src/components/2015/Day7.vue?8c59","webpack://advent-of-code/./src/components/2015/Day7.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":7,\"year\":2015,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"7\" :year=\"2015\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      operations: {\n        SET: s => s[0], // SET is a direct mapping of source 0\n        AND: s => s[0] & s[1], // AND uses bitwise and between both sources\n        OR: s => s[0] | s[1], // OR uses bitwise or between both sources\n        LSHIFT: s => s[0] << s[1], // LSHIFT shifts source 0 to the left by source 1\n        RSHIFT: s => s[0] >> s[1], // RSHIFT shifts source 0 to the right by source 1\n        NOT: s => ~s[0] // NOT uses bitwise complement for source 0\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Parse the input into a more suitable data structure\n      let parsed = this.parseInput(input)\n      // Create a mapping that remembers all the resolved wires and their values\n      const mapping = new Map()\n      // Then solve until all wires are set\n      this.solve(parsed, mapping)\n      // The solution is the value of 'a'\n      this.solutions.partOne = mapping.get('a')\n\n      // Read the input again for part 2\n      parsed = this.parseInput(input)\n      // Override the settings for wire 'b'\n      parsed.filter(p => p.target === 'b').forEach(p => {\n        p.sources = [this.solutions.partOne]\n        p.operand = 'SET'\n      })\n      // Wipe the memory\n      mapping.clear()\n      // Solve again\n      this.solve(parsed, mapping)\n      // And get the result again\n      this.solutions.partTwo = mapping.get('a')\n    },\n    solve: function (parsed, mapping) {\n      // As long as there are unsolved wires left\n      while (parsed.length > 0) {\n        // Filter them (to only keep track of the unsolved ones)\n        parsed = parsed.filter(p => {\n          // Map the sources to resolved values (if possible)\n          const sources = p.sources.map(s => {\n            if (!isNaN(s)) {\n              // If the source is a number, just use it\n              return +s\n            } else {\n              // Else, check the resolved wires\n              if (mapping.has(s)) {\n                // If it's there, use its value\n                return mapping.get(s)\n              } else {\n                // Otherwise, we cannot proceed for now\n                return null\n              }\n            }\n          })\n\n          if (sources.every(s => s !== null)) {\n            // If all sources have a resolved value, compute the new value for the target.\n            // Remember we're working on 16 bit integers, so reduce it accordingly\n            mapping.set(p.target, this.operations[p.operand](sources) & 0xFFFF)\n            // Don't keep it in the list of unresolved wires\n            return false\n          } else {\n            // We cannot resolve this just now, so keep it in the list\n            return true\n          }\n        })\n      }\n    },\n    parseInput: function (input) {\n      return input.map(i => {\n        // Split into left and right side\n        const [l, r] = i.split(' -> ')\n        // Split the left again on spaces\n        const lBits = l.split(' ')\n\n        // Remember the incoming wires\n        const sources = []\n        // And the operand\n        let operand\n\n        if (lBits.length === 1) {\n          // If there's only one, it's either a number or another wire that feeds in directly\n          if (isNaN(lBits[0])) {\n            sources.push(lBits[0])\n          } else {\n            sources.push(+lBits[0])\n          }\n          // The operand is simply SET\n          operand = 'SET'\n        } else if (lBits.length === 2) {\n          // If there are two, keep the second part as the source\n          sources.push(lBits[1])\n          // And set the operand to NOT (only operand with only two parts)\n          operand = 'NOT'\n        } else if (lBits.length === 3) {\n          // Otherwise, keep the two sources at index 0 and 2\n          sources.push(lBits[0])\n          sources.push(lBits[2])\n          // The operand is in the middle\n          operand = lBits[1]\n        } else {\n          console.error(`Unexpected input found: ${i}`)\n        }\n\n        return {\n          sources: sources,\n          target: r,\n          operand: operand\n        }\n      })\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day7.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day7.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day7.vue?vue&type=template&id=63a6507a\"\nimport script from \"./Day7.vue?vue&type=script&lang=js\"\nexport * from \"./Day7.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","operations","SET","AND","OR","LSHIFT","RSHIFT","NOT","methods","parsed","p","mapping","solve","parseInput","sources","operand","console","target","component"],"sourceRoot":""}
{"version":3,"file":"js/0.1708e577.js","mappings":"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iCAEA,8BACA,8BACA,+BAEA,+BACA,6BACA,oBACA,CAGA,iBACAC,OAAAA,uBAAAA,IAAAA,KAAAA,YACA,EACAC,SAAAA,WACA,kCAEA,gCACA,uBACA,qBAEAC,EAAAA,SAAAA,IACA,yCAEA,UAEAC,EADA,cACAA,IAEAA,KAGA,UACA,YACAA,EAAAA,IACA,cACAA,EAAAA,MAGA,UACA,YACAA,EAAAA,IACA,cACAA,EAAAA,MAGA,UAEAA,EADA,yBACAA,IAEAA,KAGA,WAEAA,EADA,yBACAA,IAEAA,KAIA,oCAGA,oCACA,iBACAH,OAAAA,uBAAAA,IAAAA,KAAAA,aAEA,EACAI,SAAAA,SAAAA,EAAAA,EAAAA,GACA,UACA,QACA,qBACA,2DACA,+DACA,gEACA,sDACA,kBACA,MACA,QACA,qBACA,2DACA,+DACA,gEACA,kDACA,kBACA,MACA,QACA,qBACA,2DACA,+DACA,gEACA,sDACA,kBACA,MACA,QACA,qBACA,2DACA,+DACA,gEACA,kDACA,kBACA,MACA,QACA,qBACA,oFACA,kBACA,MACA,QACA,qBACA,qEACA,kBACA,MACA,QACA,qBACA,0EACA,kBACA,MACA,QACA,qBACA,+EACA,kBACA,MACA,QACA,qBACA,6EACA,6EACA,kBACA,MACA,SACA,qBACA,yEACA,iFACA,kBACA,MACA,QACA,qBACA,2DACA,+DACA,kBACA,MACA,QACA,qBACA,2DACA,+DACA,kBACA,MACA,QAIA,MAEA,ICrV6P,I,UCQzPC,GAAY,OACd,EACA9C,EACAiB,GACA,EACA,KACA,KACA,MAIF,EAAe6B,EAAiB,O,yGCnBhC,MAAMC,EAAU,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAM3LC,EAAYC,IAChB,MAAMC,EAAS,4CAA4CC,KAAKF,GAChE,OAAOC,EACH,CACAE,EAAGC,SAASH,EAAO,GAAI,IACvBI,EAAGD,SAASH,EAAO,GAAI,IACvBK,EAAGF,SAASH,EAAO,GAAI,KAEvB,IAAI,EASJM,EAAWA,CAACJ,EAAGE,EAAGC,IACf,MAAQ,GAAK,KAAOH,GAAK,KAAOE,GAAK,GAAKC,GAAGE,SAAS,IAAIC,MAAM,GASnEC,EAAsBA,CAACC,EAAKC,EAAKC,KACrC,MAAMC,EAASf,EAASY,GAClBI,EAAShB,EAASa,GAExB,GAAIC,EAAQ,EACV,MAAO,CAACF,GAGV,MAAMV,EAAS,GACf,IAAK,IAAIe,EAAI,EAAGA,EAAIH,EAAOG,IAAK,CAC9B,MAAMC,EAASD,GAAKH,EAAQ,GAC5BZ,EAAOiB,KAAKX,EACVY,KAAKC,MAAMN,EAAOX,EAAIc,GAASF,EAAOZ,EAAIW,EAAOX,IACjDgB,KAAKC,MAAMN,EAAOT,EAAIY,GAASF,EAAOV,EAAIS,EAAOT,IACjDc,KAAKC,MAAMN,EAAOR,EAAIW,GAASF,EAAOT,EAAIQ,EAAOR,KAErD,CACA,OAAOL,CAAM,EAGToB,EAA2BA,CAACC,EAAQT,KACxC,GAAIS,EAAOC,OAASV,EAClB,OAAOS,EAAOb,MAAM,EAAGI,GAGzB,MAAMW,EAAWF,EAAOC,OAAS,EAEjC,IAAItB,EAAS,GAEb,IAAK,IAAIe,EAAI,EAAGA,EAAIQ,EAAW,EAAGR,IAChCf,EAASA,EAAOwB,OAAOf,EAAoBY,EAAON,GAAIM,EAAON,EAAI,GAAIG,KAAKpC,IAAI,EAAGoC,KAAKC,MAAMP,EAAQW,MAGtG,MAAOvB,EAAOsB,OAASV,EACrBZ,EAAOiB,KAAKI,EAAOA,EAAOC,OAAS,IAGrC,OAAOtB,CAAM,C","sources":["webpack://advent-of-code/./src/components/2023/Day16.vue?37d8","webpack://advent-of-code/src/components/2023/Day16.vue","webpack://advent-of-code/./src/components/2023/Day16.vue?7d94","webpack://advent-of-code/./src/components/2023/Day16.vue","webpack://advent-of-code/./src/util/color.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":16,\"year\":2023,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('div',{staticClass:\"canvas-holder\"},[_c('canvas',{staticClass:\"canvas\",attrs:{\"id\":\"partOne\",\"width\":\"1000\",\"height\":\"1000\"}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"16\" :year=\"2023\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <div class=\"canvas-holder\">\n        <canvas id=\"partOne\" class=\"canvas\" width=\"1000\" height=\"1000\" />\n      </div>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { createMultiColorGradient, VIRIDIS } from '@/util/color'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      directions: {\n        '.': (curr) => {\n          return [{\n            pos: { x: curr.pos.x + curr.delta.x, y: curr.pos.y + curr.delta.y },\n            delta: curr.delta\n          }]\n        },\n        '/': (curr) => {\n          const delta = { x: -curr.delta.y, y: -curr.delta.x }\n\n          return [{\n            pos: { x: curr.pos.x + delta.x, y: curr.pos.y + delta.y },\n            delta: delta\n          }]\n        },\n        '\\\\': (curr) => {\n          const delta = { x: curr.delta.y, y: curr.delta.x }\n\n          return [{\n            pos: { x: curr.pos.x + delta.x, y: curr.pos.y + delta.y },\n            delta: delta\n          }]\n        },\n        '-': (curr) => {\n          if (curr.delta.x !== 0) {\n            return [{\n              pos: { x: curr.pos.x + curr.delta.x, y: curr.pos.y + curr.delta.y },\n              delta: curr.delta\n            }]\n          } else {\n            return [{\n              pos: { x: curr.pos.x - 1, y: curr.pos.y },\n              delta: { x: -1, y: 0 }\n            }, {\n              pos: { x: curr.pos.x + 1, y: curr.pos.y },\n              delta: { x: 1, y: 0 }\n            }]\n          }\n        },\n        '|': (curr) => {\n          if (curr.delta.y !== 0) {\n            return [{\n              pos: { x: curr.pos.x + curr.delta.x, y: curr.pos.y + curr.delta.y },\n              delta: curr.delta\n            }]\n          } else {\n            return [{\n              pos: { x: curr.pos.x, y: curr.pos.y - 1 },\n              delta: { x: 0, y: -1 }\n            }, {\n              pos: { x: curr.pos.x, y: curr.pos.y + 1 },\n              delta: { x: 0, y: 1 }\n            }]\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const map = {}\n      this.height = input.length\n      this.width = null\n\n      input.forEach((i, y) => {\n        const parts = i.split('')\n\n        if (!this.width) {\n          this.width = parts.length\n        }\n\n        parts.forEach((c, x) => {\n          map[`${x}|${y}`] = c\n        })\n      })\n\n      this.grid = map\n\n      this.solutions.partOne = this.solve({ x: 0, y: 0 }, { x: 1, y: 0 }, true)\n\n      let max = 0\n\n      for (let x = 1; x < this.width - 1; x++) {\n        // Top row down\n        max = Math.max(max, this.solve({ x: x, y: 0 }, { x: 0, y: 1 }))\n        // Bottom row up\n        max = Math.max(max, this.solve({ x: x, y: this.height - 1 }, { x: 0, y: -1 }))\n      }\n      for (let y = 1; y < this.height - 1; y++) {\n        // Left column right\n        max = Math.max(max, this.solve({ x: 0, y: y }, { x: 1, y: 0 }))\n        // Right column left\n        max = Math.max(max, this.solve({ x: 0, y: this.width - 1 }, { x: -1, y: 0 }))\n      }\n\n      // Top left corner\n      max = Math.max(max, this.solve({ x: 0, y: 0 }, { x: 0, y: 1 }))\n      max = Math.max(max, this.solve({ x: 0, y: 0 }, { x: 1, y: 0 }))\n\n      // Top right corner\n      max = Math.max(max, this.solve({ x: this.width - 1, y: 0 }, { x: 0, y: 1 }))\n      max = Math.max(max, this.solve({ x: this.width - 1, y: 0 }, { x: -1, y: 0 }))\n\n      // Bottom left corner\n      max = Math.max(max, this.solve({ x: 0, y: this.height - 1 }, { x: 0, y: -1 }))\n      max = Math.max(max, this.solve({ x: 0, y: this.height - 1 }, { x: 1, y: 0 }))\n\n      // Bottom right corner\n      max = Math.max(max, this.solve({ x: this.width - 1, y: this.height - 1 }, { x: 0, y: -1 }))\n      max = Math.max(max, this.solve({ x: this.width - 1, y: this.height - 1 }, { x: -1, y: 0 }))\n\n      this.solutions.partTwo = max\n\n      this.$nextTick(() => this.draw())\n    },\n    solve: function (start, delta, recordPath = false) {\n      let queue = [{\n        pos: start,\n        delta: delta\n      }]\n      const visited = new Set()\n      const energized = new Set()\n      const path = []\n\n      while (queue.length > 0) {\n        if (recordPath) {\n          path.push(queue.concat())\n        }\n        const nextSteps = []\n\n        queue.forEach(q => {\n          const cell = this.grid[`${q.pos.x}|${q.pos.y}`]\n\n          visited.add(`${q.pos.x}|${q.pos.y}|${q.delta.x}|${q.delta.y}`)\n          energized.add(`${q.pos.x}|${q.pos.y}`)\n\n          const next = this.directions[cell](q).filter(n => n.pos.x >= 0 && n.pos.x < this.width && n.pos.y >= 0 && n.pos.y < this.height && !visited.has(`${n.pos.x}|${n.pos.y}|${n.delta.x}|${n.delta.y}`))\n\n          nextSteps.push(...next)\n        })\n\n        queue = nextSteps\n      }\n\n      if (recordPath) {\n        this.path = path\n        console.log(path)\n      }\n\n      return energized.size\n    },\n    draw: function () {\n      this.gradient = createMultiColorGradient(VIRIDIS, Math.ceil(this.path.length / 2))\n\n      // Initialise the canvas\n      this.canvas = document.getElementById('partOne')\n      this.ctx = this.canvas.getContext('2d')\n\n      // Set the canvas size\n      this.factor = 9\n      this.canvas.width = this.width * this.factor\n      this.canvas.height = this.height * this.factor\n      this.ctx.fillStyle = '#222222'\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n      this.ctx.lineWidth = this.factor / 4\n\n      for (let row = 0; row < this.height; row++) {\n        for (let col = 0; col < this.width; col++) {\n          const pipe = this.grid[`${col}|${row}`]\n\n          this.ctx.strokeStyle = '#34495e'\n          this.ctx.fillStyle = '#34495e'\n          this.drawPipe(col, row, pipe)\n        }\n      }\n\n      this.pathIndex = 0\n      window.requestAnimationFrame(() => this.drawPath())\n    },\n    drawPath: function () {\n      const cells = this.path[this.pathIndex]\n\n      const color = this.gradient[this.pathIndex]\n      this.ctx.strokeStyle = color\n      this.ctx.fillStyle = color\n\n      cells.forEach(c => {\n        let pipe = this.grid[`${c.pos.x}|${c.pos.y}`]\n\n        if (pipe === '.') {\n          if (c.delta.x !== 0) {\n            pipe = '-'\n          } else {\n            pipe = '|'\n          }\n        }\n        if (pipe === '-') {\n          if (c.delta.y > 0) {\n            pipe = '┴'\n          } else if (c.delta.y < 0) {\n            pipe = 'T'\n          }\n        }\n        if (pipe === '|') {\n          if (c.delta.x > 0) {\n            pipe = '┤'\n          } else if (c.delta.x < 0) {\n            pipe = '├'\n          }\n        }\n        if (pipe === '/') {\n          if (c.delta.x > 0 || c.delta.y > 0) {\n            pipe = 'J'\n          } else {\n            pipe = 'F'\n          }\n        }\n        if (pipe === '\\\\') {\n          if (c.delta.x > 0 || c.delta.y < 0) {\n            pipe = '7'\n          } else {\n            pipe = 'L'\n          }\n        }\n\n        this.drawPipe(c.pos.x, c.pos.y, pipe)\n      })\n\n      if (this.pathIndex < this.path.length - 1) {\n        this.pathIndex++\n        window.requestAnimationFrame(() => this.drawPath())\n      }\n    },\n    drawPipe: function (x, y, pipe) {\n      switch (pipe) {\n        case '├':\n          this.ctx.beginPath()\n          this.ctx.moveTo(x * this.factor + this.factor / 2, y * this.factor)\n          this.ctx.lineTo(x * this.factor + this.factor / 2, (y + 1) * this.factor)\n          this.ctx.moveTo(x * this.factor + this.factor / 2, (y + 0.5) * this.factor)\n          this.ctx.lineTo((x + 1) * this.factor, (y + 0.5) * this.factor)\n          this.ctx.stroke()\n          break\n        case '┤':\n          this.ctx.beginPath()\n          this.ctx.moveTo(x * this.factor + this.factor / 2, y * this.factor)\n          this.ctx.lineTo(x * this.factor + this.factor / 2, (y + 1) * this.factor)\n          this.ctx.moveTo(x * this.factor + this.factor / 2, (y + 0.5) * this.factor)\n          this.ctx.lineTo(x * this.factor, (y + 0.5) * this.factor)\n          this.ctx.stroke()\n          break\n        case 'T':\n          this.ctx.beginPath()\n          this.ctx.moveTo(x * this.factor, y * this.factor + this.factor / 2)\n          this.ctx.lineTo((x + 1) * this.factor, y * this.factor + this.factor / 2)\n          this.ctx.moveTo((x + 0.5) * this.factor, y * this.factor + this.factor / 2)\n          this.ctx.lineTo((x + 0.5) * this.factor, (y + 1) * this.factor)\n          this.ctx.stroke()\n          break\n        case '┴':\n          this.ctx.beginPath()\n          this.ctx.moveTo(x * this.factor, y * this.factor + this.factor / 2)\n          this.ctx.lineTo((x + 1) * this.factor, y * this.factor + this.factor / 2)\n          this.ctx.moveTo((x + 0.5) * this.factor, y * this.factor + this.factor / 2)\n          this.ctx.lineTo((x + 0.5) * this.factor, y * this.factor)\n          this.ctx.stroke()\n          break\n        case 'F':\n          this.ctx.beginPath()\n          this.ctx.arc((x + 1) * this.factor, (y + 1) * this.factor, this.factor / 2, Math.PI, 1.5 * Math.PI)\n          this.ctx.stroke()\n          break\n        case 'J':\n          this.ctx.beginPath()\n          this.ctx.arc(x * this.factor, y * this.factor, this.factor / 2, 0, 0.5 * Math.PI)\n          this.ctx.stroke()\n          break\n        case '7':\n          this.ctx.beginPath()\n          this.ctx.arc(x * this.factor, (y + 1) * this.factor, this.factor / 2, 1.5 * Math.PI, 0)\n          this.ctx.stroke()\n          break\n        case 'L':\n          this.ctx.beginPath()\n          this.ctx.arc((x + 1) * this.factor, y * this.factor, this.factor / 2, 0.5 * Math.PI, Math.PI)\n          this.ctx.stroke()\n          break\n        case '/':\n          this.ctx.beginPath()\n          this.ctx.moveTo(x * this.factor + this.factor / 8, (y + 1) * this.factor - this.factor / 8)\n          this.ctx.lineTo((x + 1) * this.factor - this.factor / 8, y * this.factor + this.factor / 8)\n          this.ctx.stroke()\n          break\n        case '\\\\':\n          this.ctx.beginPath()\n          this.ctx.moveTo(x * this.factor + this.factor / 8, y * this.factor + this.factor / 8)\n          this.ctx.lineTo((x + 1) * this.factor - this.factor / 8, (y + 1) * this.factor - this.factor / 8)\n          this.ctx.stroke()\n          break\n        case '|':\n          this.ctx.beginPath()\n          this.ctx.moveTo(x * this.factor + this.factor / 2, y * this.factor)\n          this.ctx.lineTo(x * this.factor + this.factor / 2, (y + 1) * this.factor)\n          this.ctx.stroke()\n          break\n        case '-':\n          this.ctx.beginPath()\n          this.ctx.moveTo(x * this.factor, y * this.factor + this.factor / 2)\n          this.ctx.lineTo((x + 1) * this.factor, y * this.factor + this.factor / 2)\n          this.ctx.stroke()\n          break\n        case '.':\n          // this.ctx.beginPath()\n          // this.ctx.arc(x * this.factor + this.factor / 2, y * this.factor + this.factor / 2, this.factor / 4, 0, 2 * Math.PI)\n          // this.ctx.fill()\n          break\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.canvas-holder {\n  overflow: auto;\n  height: 1000px;\n  width: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day16.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day16.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day16.vue?vue&type=template&id=a57e5ca4\"\nimport script from \"./Day16.vue?vue&type=script&lang=js\"\nexport * from \"./Day16.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day16.vue?vue&type=style&index=0&id=a57e5ca4&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","const VIRIDIS = ['#440154', '#48186a', '#472d7b', '#424086', '#3b528b', '#33638d', '#2c728e', '#26828e', '#21918c', '#1fa088', '#28ae80', '#3fbc73', '#5ec962', '#84d44b', '#addc30', '#d8e219', '#fde725']\n\n/**\n * Converts a HEX value into an RGB object\n * @param {String} hex The hex color\n */\nconst hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    }\n    : null\n}\n\n/**\n * Converts the given R, G, B values into a HEX color\n * @param {Number} r The red color component\n * @param {Number} g The green color component\n * @param {Number} b The blue color component\n */\nconst rgbToHex = (r, g, b) => {\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n}\n\n/**\n * Creates a linear gradient between the two given colors with the given number of steps\n * @param {String} one The first color in HEX\n * @param {String} two The second color in HEX\n * @param {Number} steps The number of steps between the two colors\n */\nconst createColorGradient = (one, two, steps) => {\n  const oneRgb = hexToRgb(one)\n  const twoRgb = hexToRgb(two)\n\n  if (steps < 2) {\n    return [one]\n  }\n\n  const result = []\n  for (let i = 0; i < steps; i++) {\n    const iNorm = (i / (steps - 1))\n    result.push(rgbToHex(\n      Math.floor(oneRgb.r + iNorm * (twoRgb.r - oneRgb.r)),\n      Math.floor(oneRgb.g + iNorm * (twoRgb.g - oneRgb.g)),\n      Math.floor(oneRgb.b + iNorm * (twoRgb.b - oneRgb.b))\n    ))\n  }\n  return result\n}\n\nconst createMultiColorGradient = (colors, steps) => {\n  if (colors.length > steps) {\n    return colors.slice(0, steps)\n  }\n\n  const sections = colors.length - 1\n\n  let result = []\n\n  for (let i = 0; i < sections - 1; i++) {\n    result = result.concat(createColorGradient(colors[i], colors[i + 1], Math.max(1, Math.floor(steps / sections))))\n  }\n\n  while (result.length < steps) {\n    result.push(colors[colors.length - 1])\n  }\n\n  return result\n}\n\nexport {\n  hexToRgb,\n  rgbToHex,\n  createColorGradient,\n  createMultiColorGradient,\n  VIRIDIS\n}\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","proxy","staticRenderFns","components","Day","data","partOne","partTwo","directions","pos","x","y","delta","methods","input","parts","map","max","solve","path","queue","visited","energized","nextSteps","console","draw","window","drawPath","cells","pipe","drawPipe","component","VIRIDIS","hexToRgb","hex","result","exec","r","parseInt","g","b","rgbToHex","toString","slice","createColorGradient","one","two","steps","oneRgb","twoRgb","i","iNorm","push","Math","floor","createMultiColorGradient","colors","length","sections","concat"],"sourceRoot":""}
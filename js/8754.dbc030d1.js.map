{"version":3,"file":"js/8754.dbc030d1.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,qBAAqB,CAACV,EAAG,OAAO,CAACW,SAAS,CAAC,UAAYf,EAAIgB,GAAGhB,EAAIiB,qBAAqBjB,EAAIkB,GAAG,cAAc,EAAEC,OAAM,MAAS,EAChZC,EAAkB,G,WCYtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAhB,UAAAA,CACAiB,QAAAA,KACAC,QAAAA,MAEAR,iBAAAA,KAEA,EACAS,QAAAA,CACAjB,eAAAA,SAAAA,GAEA,SACAkB,KAAAA,IACAC,OAAAA,KACAC,SAAAA,CAAAA,EACAC,MAAAA,CAAAA,EACAC,KAAAA,EACAC,UAAAA,GAIA,QAGAC,EAAAA,SAAAA,IAEA,qBACA,qBAEA,eAEA,cAEAC,EAAAA,OACA,eAEAA,EAAAA,EAAAA,YAGA,oBAEAA,EAAAA,EAAAA,SAAAA,EAAAA,QACA,CAEA,SACAP,KAAAA,EAAAA,GACAC,OAAAA,EACAC,SAAAA,CAAAA,EACAC,MAAAA,CAAAA,EACAC,KAAAA,EACAC,UAAAA,GAGAE,EAAAA,SAAAA,EAAAA,IAAAA,EACAA,EAAAA,CACA,MAEA,UAGA,wBAEA,aAEA,mBAEA,SACAP,KAAAA,EACAC,OAAAA,EACAC,SAAAA,CAAAA,EACAC,MAAAA,CAAAA,EACAC,KAAAA,EACAC,UAAAA,GAGAE,EAAAA,SAAAA,GAAAA,CACA,CACA,MAEA,cACA,OAEA,aACAA,EAAAA,MAAAA,GAAAA,EACAA,EAAAA,MAAAA,EAEA,KAIA,oBAGA,6CAGA,wBAEAC,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAGA,8BAGA,iBAEA,mBAEA,mCACA,KACA,CAGA,mCACA,EAIAC,QAAAA,SAAAA,GACA,YAMA,OAJAC,OAAAA,KAAAA,EAAAA,UAAAA,SAAAA,IACAC,EAAAA,QAAAA,KAAAA,QAAAA,EAAAA,SAAAA,IAAAA,IAGA,CACA,EAIAC,UAAAA,SAAAA,EAAAA,GACA,mCAMA,OAJAF,OAAAA,KAAAA,EAAAA,UAAAA,SAAAA,IACAG,GAAAA,KAAAA,UAAAA,EAAAA,SAAAA,GAAAA,EAAAA,IAGA,CACA,EAIAC,YAAAA,SAAAA,GACA,QAUA,OARAJ,OAAAA,KAAAA,EAAAA,UAAAA,SAAAA,IACAG,GAAAA,KAAAA,YAAAA,EAAAA,SAAAA,GAAAA,IAEAH,OAAAA,KAAAA,EAAAA,OAAAA,SAAAA,IACAG,GAAAA,EAAAA,MAAAA,EAAAA,IAGAE,EAAAA,UAAAA,EACA,CACA,EACAC,MAAAA,SAAAA,EAAAA,EAAAA,GACA,oFAOA,OANAN,OAAAA,KAAAA,EAAAA,UAAAA,SAAAA,IACAO,GAAAA,KAAAA,MAAAA,EAAAA,SAAAA,GAAAA,EAAAA,EAAAA,IAEAP,OAAAA,KAAAA,EAAAA,OAAAA,SAAAA,IACAO,GAAAA,QAAAA,IAAAA,OAAAA,EAAAA,gCAAAA,iBAAAA,EAAAA,MAAAA,YAAAA,IAEA,CACA,ICtL4P,I,UCQxPC,GAAY,OACd,EACA9C,EACAqB,GACA,EACA,KACA,KACA,MAIF,EAAeyB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2022/Day7.vue?0814","webpack://advent-of-code/src/components/2022/Day7.vue","webpack://advent-of-code/./src/components/2022/Day7.vue?54ea","webpack://advent-of-code/./src/components/2022/Day7.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":7,\"year\":2022,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('pre',{staticClass:\"day-7-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.dirStructureHtml)}}),_vm._v(\"\\n      \")])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"7\" :year=\"2022\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <pre class=\"day-7-code border\">\n<code v-html=\"dirStructureHtml\" />\n      </pre>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      dirStructureHtml: null\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Define the root directory\n      const root = {\n        name: '/',\n        parent: null,\n        children: {},\n        files: {},\n        size: 0,\n        totalSize: 0\n      }\n\n      // Remember current directory\n      let currentDir = root\n\n      // Iterate through all lines\n      input.forEach(i => {\n        // Split them\n        const parts = i.split(' ')\n        if (i.startsWith('$')) {\n          // If we're dealing with an instruction\n          if (parts[1] === 'cd') {\n            // And it's a 'change directory'\n            if (parts[2] === '/') {\n              // And it's root, set current directory to root\n              currentDir = root\n            } else if (parts[2] === '..') {\n              // If it's '..', go up one level\n              currentDir = currentDir.parent\n            } else {\n              // Else, we need to go deeper\n              if (currentDir.children[parts[2]]) {\n                // Switch to existing sub-directory\n                currentDir = currentDir.children[parts[2]]\n              } else {\n                // Create a new sub-directory\n                const newDir = {\n                  name: parts[2],\n                  parent: currentDir,\n                  children: {},\n                  files: {},\n                  size: 0,\n                  totalSize: 0\n                }\n\n                currentDir.children[parts[2]] = newDir\n                currentDir = newDir\n              }\n            }\n          } else if (parts[1] === 'ls') {\n            // Do nothing here, we handle the next lines in other places\n          }\n        } else if (i.startsWith('dir')) {\n          // If we found a new directory through a 'ls'\n          const dirName = parts[1]\n\n          if (!currentDir.children[dirName]) {\n            // Add a new one if it doesn't exist\n            const newDir = {\n              name: dirName,\n              parent: currentDir,\n              children: {},\n              files: {},\n              size: 0,\n              totalSize: 0\n            }\n\n            currentDir.children[dirName] = newDir\n          }\n        } else {\n          // Else it's a file, remember it's name and size\n          const fileSize = +parts[0]\n          const fileName = parts[1]\n\n          if (!currentDir.files[fileName]) {\n            currentDir.files[fileName] = fileSize\n            currentDir.size += fileSize\n          }\n        }\n      })\n\n      // Traverse the whole tree structure to calculate the total directory sizes from individual sizes\n      this.traverseSum(root)\n\n      // Solution for part one is counting the directories with at most size 100000\n      this.solutions.partOne = this.countDirs(root, 100000)\n\n      // Get all directories in a flat array structure\n      const flattened = this.flatten(root)\n      // Sort them by size increasing\n      flattened.sort((a, b) => a.totalSize - b.totalSize)\n\n      // Determine how much space we need to find\n      const target = 30000000 - (70000000 - root.totalSize)\n\n      // Iterate through all directories\n      for (const dir of flattened) {\n        // Until we find one that gives us enough space\n        if (dir.totalSize >= target) {\n          // This is the solution\n          this.solutions.partTwo = dir.totalSize\n          break\n        }\n      }\n\n      this.dirStructureHtml = this.print(root)\n    },\n    /**\n     * Flattens the given directory into an array of all recursively contained directories\n     */\n    flatten: function (dir) {\n      const dirs = [dir]\n\n      Object.keys(dir.children).forEach(d => {\n        dirs.push(...this.flatten(dir.children[d]))\n      })\n\n      return dirs\n    },\n    /**\n     * Counts the directories recursively that have a totalSize below the limit.\n     */\n    countDirs: function (dir, limit) {\n      let sum = dir.totalSize <= limit ? dir.totalSize : 0\n\n      Object.keys(dir.children).forEach(d => {\n        sum += this.countDirs(dir.children[d], limit)\n      })\n\n      return sum\n    },\n    /**\n     * Traverses the file system to calculate total sums per directory\n     */\n    traverseSum: function (dir) {\n      let sum = 0\n\n      Object.keys(dir.children).forEach(d => {\n        sum += this.traverseSum(dir.children[d])\n      })\n      Object.keys(dir.files).forEach(f => {\n        sum += dir.files[f]\n      })\n\n      dir.totalSize = sum\n      return sum\n    },\n    print: function (dir, indent = 0) {\n      let result = `<br/>${' '.repeat(indent)}- <span class=\"day-7-directory\">${dir.name} (dir)</span>`\n      Object.keys(dir.children).forEach(d => {\n        result += this.print(dir.children[d], indent + 2)\n      })\n      Object.keys(dir.files).forEach(f => {\n        result += `<br/>${' '.repeat(indent + 2)}- <span class=\"day-7-file\">${f} (file, size=${dir.files[f]})</span>`\n      })\n      return result\n    }\n  }\n}\n</script>\n\n<style>\n.day-7-code {\n  background-color: #2c3e50;\n  color: #7f8c8d;\n  max-height: 100vh;\n}\n.day-7-directory {\n  background-color:#27ae60;\n  color: #2c3e50;\n}\n.day-7-file {\n  background-color: #2980b9;\n  color: #2c3e50;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day7.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day7.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day7.vue?vue&type=template&id=ca1a825e\"\nimport script from \"./Day7.vue?vue&type=script&lang=js\"\nexport * from \"./Day7.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day7.vue?vue&type=style&index=0&id=ca1a825e&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","domProps","_s","dirStructureHtml","_v","proxy","staticRenderFns","components","Day","data","partOne","partTwo","methods","name","parent","children","files","size","totalSize","input","currentDir","flattened","flatten","Object","dirs","countDirs","sum","traverseSum","dir","print","result","component"],"sourceRoot":""}
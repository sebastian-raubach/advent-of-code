"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[5595],{80520:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day12)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day12.vue?vue&type=template&id=36abffa0&scoped=true\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":12,\"year\":2021,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day12.vue?vue&type=script&lang=js\n//\n//\n//\n//\n\n/* eslint-disable new-cap */\n\n// import { createColorGradient } from '@/util/color'\n\n/* harmony default export */ const Day12vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Keep trackk of (source -> [targets])\n      const nodeToNeighbor = new Map();\n\n      // Parse the input\n      input.forEach(i => {\n        const [source, target] = i.split('-');\n        let sourceNeighbors = nodeToNeighbor.get(source);\n        let targetNeighbors = nodeToNeighbor.get(target);\n        if (!sourceNeighbors) {\n          sourceNeighbors = [];\n        }\n        if (!targetNeighbors) {\n          targetNeighbors = [];\n        }\n        if (sourceNeighbors.indexOf(target) === -1) {\n          sourceNeighbors.push(target);\n        }\n        if (targetNeighbors.indexOf(source) === -1) {\n          targetNeighbors.push(source);\n        }\n        nodeToNeighbor.set(source, sourceNeighbors);\n        nodeToNeighbor.set(target, targetNeighbors);\n      });\n      const pathsPartOne = this.findAllPaths(nodeToNeighbor);\n      this.solutions.partOne = pathsPartOne.size;\n      const pathsPartTwo = this.findAllPathsWithMultiples(nodeToNeighbor);\n      this.solutions.partTwo = pathsPartTwo.size;\n      this.$nextTick(() => this.drawGraph(nodeToNeighbor, this.$refs.partOne, pathsPartOne));\n      this.$nextTick(() => this.drawGraph(nodeToNeighbor, this.$refs.partTwo, pathsPartTwo));\n    },\n    drawGraph: function (nodeToNeighbor, element, paths) {\n      // const nodeCount = new Map()\n\n      // console.log(paths)\n\n      // let min = 0\n      // let max = 0\n      // paths.forEach(p => p.split(',').forEach(l => {\n      //   if (!nodeCount.has(l)) {\n      //     nodeCount.set(l, 0)\n      //   }\n      //   const count = nodeCount.get(l) + 1\n      //   nodeCount.set(l, count)\n\n      //   min = Math.min(min, count)\n      //   max = Math.max(max, count)\n      // }))\n\n      // const g = new dagreD3.graphlib.Graph().setGraph({})\n\n      // const nodes = []\n      // const edges = new Set()\n\n      // const gradient = createColorGradient('#C4E538', '#006266', max - min + 1)\n\n      // console.log(nodeCount)\n\n      // nodeToNeighbor.forEach((v, k) => nodes.push({\n      //   label: k,\n      //   shape: 'circle',\n      //   style: `stroke: black; fill: ${nodeCount.has(k) ? gradient[nodeCount.get(k) - min] : 'white'};`,\n      //   labelStyle: `font-size: ${k === k.toLowerCase() ? 1 : 2}em`\n      // }))\n      // nodeToNeighbor.forEach((v, k) => v.forEach(t => {\n      //   const arr = [k, t]\n      //   arr.sort((a, b) => {\n      //     if (a === 'start' || b === 'end') {\n      //       return -1\n      //     } else if (b === 'start' || a === 'end') {\n      //       return 1\n      //     } else {\n      //       return a.localeCompare(b)\n      //     }\n      //   })\n      //   edges.add(`${arr[0]},${arr[1]}`)\n      // }))\n\n      // nodes.sort((a, b) => {\n      //   if (a.label === 'start' || b.label === 'end') {\n      //     return -1\n      //   } else if (b.label === 'start' || a.label === 'end') {\n      //     return 1\n      //   } else {\n      //     return a.label.localeCompare(b.label)\n      //   }\n      // })\n\n      // nodes.forEach(n => g.setNode(n.label, n))\n      // edges.forEach(e => {\n      //   const [source, target] = e.split(',')\n      //   g.setEdge(source, target, {\n      //     style: 'stroke: black; fill: none;',\n      //     arrowhead: 'undirected'\n      //   })\n      // })\n\n      // const render = new dagreD3.render()\n\n      // const svg = d3Select.select(element)\n      // const svgGroup = svg.append('g')\n\n      // // Run the renderer. This is what draws the final graph.\n      // render(svgGroup, g)\n\n      // // Center the graph\n      // const xCenterOffset = (svg.attr('width') - g.graph().width) / 2\n      // svgGroup.attr('transform', 'translate(' + xCenterOffset + ', 20)')\n      // svg.attr('height', g.graph().height + 40)\n    },\n    findAllPaths: function (nodeToNeighbor) {\n      const source = 'start';\n\n      // Keep track of all found paths. Use a set to ignore multiples found in part 2\n      const paths = new Set();\n      // Find them by recursive DFS from the start\n      this.recurse(source, nodeToNeighbor, null, [], [], paths);\n      return paths;\n    },\n    findAllPathsWithMultiples: function (nodeToNeighbor) {\n      const source = 'start';\n\n      // Keep track of all found paths. Use a set to ignore multiples found in part 2\n      const paths = new Set();\n\n      // Get all lowercase caves\n      // Find the paths by recursive DFS from the start allowing this single cave to appear multiple times\n      Array.from(nodeToNeighbor.keys()).filter(k => k !== 'start' && k !== 'end' && k.toLowerCase() === k).forEach(l => this.recurse(source, nodeToNeighbor, l, [], [], paths));\n      return paths;\n    },\n    recurse: function (current, nodeToNeighbor, multiple, visitedNodes, path, paths) {\n      // Remember we visited this one\n      visitedNodes.push(current);\n      // Add it to the path\n      path.push(current);\n      if (current === 'end') {\n        // If we reached the end, return the path\n        paths.add(path.join(','));\n        return;\n      }\n\n      // Count how often we've visited the small cave we can visit twice\n      const multipleCount = path.filter(p => p === multiple).length;\n      // For each neighbor\n      nodeToNeighbor.get(current)\n      // Filter out visited notes unless they are upper case or it's the one we can visit twice and we haven't yet\n      .filter(n => n !== 'start' && (n === multiple && multipleCount < 2 || n === n.toUpperCase() || visitedNodes.indexOf(n) === -1))\n      // DFS into them\n      .forEach(n => this.recurse(n, nodeToNeighbor, multiple, visitedNodes.concat(), path.concat(), paths));\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2021/Day12.vue?vue&type=script&lang=js\n /* harmony default export */ const _2021_Day12vue_type_script_lang_js = (Day12vue_type_script_lang_js); \n;// CONCATENATED MODULE: ./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-12.use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2021/Day12.vue?vue&type=style&index=0&id=36abffa0&prod&scoped=true&lang=css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/components/2021/Day12.vue?vue&type=style&index=0&id=36abffa0&prod&scoped=true&lang=css\n\n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2021/Day12.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2021_Day12vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"36abffa0\",\n  null\n  \n)\n\n/* harmony default export */ const Day12 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///80520\n")}}]);
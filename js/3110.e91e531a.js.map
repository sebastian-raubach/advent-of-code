{"version":3,"file":"js/3110.e91e531a.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,GAAG,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACtMC,EAAkB,G,WCMtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GAEA,mBACA,sBAEA,OACAQ,OAAAA,EAAAA,GACAC,OAAAA,EAAAA,GACA,IAIA,0CAGA,QACA,oCACAC,IAGA,wBACA,EACAC,SAAAA,SAAAA,EAAAA,GAGA,uCACAC,QAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,MAAAA,EAAAA,OAAAA,EACA,EACAC,OAAAA,SAAAA,EAAAA,GAEA,qCACA,ICnD6P,I,UCOzPC,GAAY,OACd,EACAxB,EACAW,GACA,EACA,KACA,WACA,MAIF,EAAea,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2017/Day13.vue?8181","webpack://advent-of-code/src/components/2017/Day13.vue","webpack://advent-of-code/./src/components/2017/Day13.vue?0185","webpack://advent-of-code/./src/components/2017/Day13.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":13,\"year\":2017,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"13\" :year=\"2017\" :solutions=\"solutions\" @input-changed=\"onInputChanged\" />\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Map the input to objects containing the depth and the range\n      const layers = input.map(i => {\n        const parts = i.split(': ')\n\n        return {\n          depth: +parts[0],\n          range: +parts[1]\n        }\n      })\n\n      // Solution to part one is the severity without a delay\n      this.solutions.partOne = this.severity(0, layers)\n\n      // Solution to part two is the first delay where nobody is caught\n      let delay = 1\n      while (layers.some(l => this.caught(delay, l))) {\n        delay++\n      }\n\n      this.solutions.partTwo = delay\n    },\n    severity: function (delay, layers) {\n      // The severity is calculated for each layer that's caught\n      // Then we reduce it to the sum of the depths multiplied by the ranges respectively\n      return layers.filter(l => this.caught(delay, l))\n                   .reduce((sum, layer) => sum + layer.depth * layer.range, 0)\n    },\n    caught: function (delay, layer) {\n      // Are we getting caught? Depents on the delay + the depth modulo the movement of the scanner within its range\n      return (delay + layer.depth) % (2 * (layer.range - 1)) === 0\n    }\n  }\n}\n</script>\n\n<style scoped>\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day13.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day13.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day13.vue?vue&type=template&id=1a99f643&scoped=true\"\nimport script from \"./Day13.vue?vue&type=script&lang=js\"\nexport * from \"./Day13.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1a99f643\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","depth","range","delay","severity","reduce","caught","component"],"sourceRoot":""}
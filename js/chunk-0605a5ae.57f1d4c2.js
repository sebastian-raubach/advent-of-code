(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-0605a5ae"],{"0e77":function(e,t,n){"use strict";n.r(t),t["default"]="**Ding!** The \"fasten seat belt\" signs have turned on. Time to find your seat.\n\nIt's a completely full flight, so your seat should be the only missing boarding pass in your list. However, there's a catch: some of the seats at the very front and back of the plane don't exist on this aircraft, so they'll be missing from your list as well.\n\nYour seat wasn't at the very front or back, though; the seats with IDs `+1` and `-1` from yours will be in your list.\n\n**What is the ID of your seat?**\n"},1276:function(e,t,n){"use strict";var o=n("d784"),a=n("44e7"),i=n("825a"),r=n("1d80"),s=n("4840"),h=n("8aa5"),l=n("50c4"),u=n("14c3"),c=n("9263"),d=n("d039"),p=[].push,f=Math.min,g=4294967295,m=!d((function(){return!RegExp(g,"y")}));o("split",2,(function(e,t,n){var o;return o="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var o=String(r(this)),i=void 0===n?g:n>>>0;if(0===i)return[];if(void 0===e)return[o];if(!a(e))return t.call(o,e,i);var s,h,l,u=[],d=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,m=new RegExp(e.source,d+"g");while(s=c.call(m,o)){if(h=m.lastIndex,h>f&&(u.push(o.slice(f,s.index)),s.length>1&&s.index<o.length&&p.apply(u,s.slice(1)),l=s[0].length,f=h,u.length>=i))break;m.lastIndex===s.index&&m.lastIndex++}return f===o.length?!l&&m.test("")||u.push(""):u.push(o.slice(f)),u.length>i?u.slice(0,i):u}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:t.call(this,e,n)}:t,[function(t,n){var a=r(this),i=void 0==t?void 0:t[e];return void 0!==i?i.call(t,a,n):o.call(String(a),t,n)},function(e,a){var r=n(o,e,this,a,o!==t);if(r.done)return r.value;var c=i(e),d=String(this),p=s(c,RegExp),y=c.unicode,b=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(m?"y":"g"),L=new p(m?c:"^(?:"+c.source+")",b),w=void 0===a?g:a>>>0;if(0===w)return[];if(0===d.length)return null===u(L,d)?[d]:[];var v=0,x=0,k=[];while(x<d.length){L.lastIndex=m?x:0;var T,I=u(L,m?d:d.slice(x));if(null===I||(T=f(l(L.lastIndex+(m?0:x)),d.length))===v)x=h(d,x,y);else{if(k.push(d.slice(v,x)),k.length===w)return k;for(var j=1;j<=I.length-1;j++)if(k.push(I[j]),k.length===w)return k;x=v=T}}return k.push(d.slice(v)),k}]}),!m)},"14c3":function(e,t,n){var o=n("c6b6"),a=n("9263");e.exports=function(e,t){var n=e.exec;if("function"===typeof n){var i=n.call(e,t);if("object"!==typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==o(e))throw TypeError("RegExp#exec called on incompatible receiver");return a.call(e,t)}},1859:function(e,t,n){"use strict";n.r(t),t["default"]='While it appears you validated the passwords correctly, they don\'t seem to be what the Official Toboggan Corporate Authentication System is expecting.\n\nThe shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently.\n\nEach policy actually describes two **positions in the password**, where `1` means the first character, `2` means the second character, and so on. (Be careful; Toboggan Corporate Policies have no concept of "index zero"!) **Exactly one of these positions** must contain the given letter. Other occurrences of the letter are irrelevant for the purposes of policy enforcement.\n\nGiven the same example list from above:\n\n- `1-3 a`: `abcde` is **valid**: position `1` contains `a` and position `3` does not.\n- `1-3 b`: `cdefg` is **invalid**: neither position `1` nor position `3` contains `b`.\n- `2-9 c`: `ccccccccc` is **invalid**: both position `2` and position `9` contain `c`.\n\n**How many passwords are valid** according to the new interpretation of the policies?\n\n'},1949:function(e,t,n){"use strict";n.r(t),t["default"]="The line is moving more quickly now, but you overhear airport security talking about how passports with invalid data are getting through. Better add some data validation, quick!\n\nYou can continue to ignore the cid field, but each other field has strict rules about what values are valid for automatic validation:\n\n- `byr` (Birth Year) - four digits; at least `1920` and at most `2002`.\n- `iyr` (Issue Year) - four digits; at least `2010` and at most `2020`.\n- `eyr` (Expiration Year) - four digits; at least `2020` and at most `2030`.\n- `hgt` (Height) - a number followed by either `cm` or `in`:\n  - If `cm`, the number must be at least `150` and at most `193`.\n  - If `in`, the number must be at least `59` and at most `76`.\n- `hcl` (Hair Color) - a # followed by exactly six characters `0-9` or `a-f`.\n- `ecl` (Eye Color) - exactly one of: `amb` `blu` `brn` `gry` `grn` `hzl` `oth`.\n- `pid` (Passport ID) - a nine-digit number, including leading zeroes.\n- `cid` (Country ID) - ignored, missing or not.\n\nYour job is to count the passports where all required fields are both **present** and **valid** according to the above rules. Here are some example values:\n\n```\nbyr valid:   2002\nbyr invalid: 2003\n\nhgt valid:   60in\nhgt valid:   190cm\nhgt invalid: 190in\nhgt invalid: 190\n\nhcl valid:   #123abc\nhcl invalid: #123abz\nhcl invalid: 123abc\n\necl valid:   brn\necl invalid: wat\n\npid valid:   000000001\npid invalid: 0123456789\n```\n\nHere are some invalid passports:\n\n```\neyr:1972 cid:100\nhcl:#18171d ecl:amb hgt:170 pid:186cm iyr:2018 byr:1926\n\niyr:2019\nhcl:#602927 eyr:1967 hgt:170cm\necl:grn pid:012533040 byr:1946\n\nhcl:dab227 iyr:2012\necl:brn hgt:182cm pid:021572410 eyr:2020 byr:1992 cid:277\n\nhgt:59cm ecl:zzz\neyr:2038 hcl:74454a iyr:2023\npid:3556412378 byr:2007\nHere are some valid passports:\n\npid:087499704 hgt:74in ecl:grn iyr:2012 eyr:2030 byr:1980\nhcl:#623a2f\n\neyr:2029 ecl:blu cid:129 byr:1989\niyr:2014 pid:896056539 hcl:#a97842 hgt:165cm\n\nhcl:#888785\nhgt:164cm byr:2001 iyr:2015 cid:88\npid:545766238 ecl:hzl\neyr:2022\n\niyr:2010 hgt:158cm hcl:#b6652a ecl:blu byr:1944 eyr:2021 pid:093154719\n```\n\nCount the number of **valid** passports - those that have all required fields and valid values. Continue to treat cid as optional. **In your batch file, how many passports are valid?**"},"1caa0":function(e,t,n){"use strict";n.r(t),t["default"]="Your flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via [toboggan](https://en.wikipedia.org/wiki/Toboggan).\n\nThe shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. \"Something's wrong with our computers; we can't log in!\" You ask if you can take a look.\n\nTheir password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the Official Toboggan Corporate Policy that was in effect when they were chosen.\n\nTo try to debug the problem, they have created a list (your puzzle input) of **passwords** (according to the corrupted database) and the **corporate policy when that password was set**.\n\nFor example, suppose you have the following list:\n\n```\n1-3 a: abcde\n1-3 b: cdefg\n2-9 c: ccccccccc\n```\n\nEach line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, `1-3 a` means that the password must contain `a` at least `1` time and at most `3` times.\n\nIn the above example, **`2`** passwords are valid. The middle password, `cdefg`, is not; it contains no instances of `b`, but needs at least `1`. The first and third passwords are valid: they contain one `a` or nine `c`, both within the limits of their respective policies.\n\n**How many passwords are valid** according to their policies?"},"21b5":function(e,t,n){"use strict";n.r(t),t["default"]="Your flight to the major airline hub reaches cruising altitude without incident. While you consider checking the in-flight menu for one of those drinks that come with a little umbrella, you are interrupted by the kid sitting next to you.\n\nTheir [handheld game console](https://en.wikipedia.org/wiki/Handheld_game_console) won't turn on! They ask if you can take a look.\n\nYou narrow the problem down to a strange **infinite loop** in the boot code (your puzzle input) of the device. You should be able to fix it, but first you need to be able to run the code in isolation.\n\nThe boot code is represented as a text file with one **instruction** per line of text. Each instruction consists of an **operation** (`acc`, `jmp`, or `nop`) and an **argument** (a signed number like `+4` or `-20`).\n\n- `acc` increases or decreases a single global value called the **accumulator** by the value given in the argument. For example, `acc +7` would increase the accumulator by 7. The accumulator starts at `0`. After an `acc` instruction, the instruction immediately below it is executed next.\n- `jmp` **jumps** to a new instruction relative to itself. The next instruction to execute is found using the argument as an **offset** from the `jmp` instruction; for example, `jmp +2` would skip the next instruction, `jmp +1` would continue to the instruction immediately below it, and `jmp -20` would cause the instruction 20 lines above to be executed next.\n- `nop` stands for **No OPeration** - it does nothing. The instruction immediately below it is executed next.\n\nFor example, consider the following program:\n\n```\nnop +0\nacc +1\njmp +4\nacc +3\njmp -3\nacc -99\nacc +1\njmp -4\nacc +6\n```\n\nThese instructions are visited in this order:\n\n```\nnop +0  | 1\nacc +1  | 2, 8(!)\njmp +4  | 3\nacc +3  | 6\njmp -3  | 7\nacc -99 |\nacc +1  | 4\njmp -4  | 5\nacc +6  |\n```\n\nFirst, the `nop +0` does nothing. Then, the accumulator is increased from 0 to 1 (`acc +1`) and `jmp +4` sets the next instruction to the other `acc +1` near the bottom. After it increases the accumulator from 1 to 2, `jmp -4` executes, setting the next instruction to the only `acc +3`. It sets the accumulator to 5, and `jmp -3` causes the program to continue back at the first `acc +1`.\n\nThis is an **infinite loop**: with this sequence of jumps, the program will run forever. The moment the program tries to run any instruction a second time, you know it will never terminate.\n\nImmediately **before** the program would run an instruction a second time, the value in the accumulator is **`5`**.\n\nRun your copy of the boot code. Immediately before any instruction is executed a second time, **what value is in the accumulator**?"},3263:function(e,t,n){"use strict";n.r(t),t["default"]="Your ferry made decent progress toward the island, but the storm came in faster than anyone expected. The ferry needs to take **evasive actions**!\n\nUnfortunately, the ship's navigation computer seems to be malfunctioning; rather than giving a route directly to safety, it produced extremely circuitous instructions. When the captain uses the [PA system](https://en.wikipedia.org/wiki/Public_address_system) to ask if anyone can help, you quickly volunteer.\n\nThe navigation instructions (your puzzle input) consists of a sequence of single-character **actions** paired with integer input **values**. After staring at them for a few minutes, you work out what they probably mean:\n\n- Action `N` means to move **north** by the given value.\n- Action `S` means to move **south** by the given value.\n- Action `E` means to move **east** by the given value.\n- Action `W` means to move **west** by the given value.\n- Action `L` means to turn **left** the given number of degrees.\n- Action `R` means to turn **right** the given number of degrees.\n- Action `F` means to move **forward** by the given value in the direction the ship is currently facing.\n\nThe ship starts by facing **east**. Only the `L` and `R` actions change the direction the ship is facing. (That is, if the ship is facing east and the next instruction is `N10`, the ship would move north 10 units, but would still move east if the following action were `F`.)\n\nFor example:\n\n```\nF10\nN3\nF7\nR90\nF11\n```\n\nThese instructions would be handled as follows:\n\n- `F10` would move the ship 10 units east (because the ship starts by facing east) to east 10, north 0.\n- `N3` would move the ship 3 units north to **east 10, north 3**.\n- `F7` would move the ship another 7 units east (because the ship is still facing east) to **east 17, north 3**.\n- `R90` would cause the ship to turn right by 90 degrees and face **south**; it remains at **east 17, north 3**.\n- `F11` would move the ship 11 units south to **east 17, south 8**.\n\nAt the end of these instructions, the ship's [Manhattan distance](https://en.wikipedia.org/wiki/Manhattan_distance) (sum of the absolute values of its east/west position and its north/south position) from its starting position is `17 + 8` = **`25`**.\n\nFigure out where the navigation instructions lead. **What is the Manhattan distance between that location and the ship's starting position?**"},"348b":function(e,t,n){"use strict";n.r(t),t["default"]="With your neighbor happily enjoying their video game, you turn your attention to an open data port on the little screen in the seat in front of you.\n\nThough the port is non-standard, you manage to connect it to your computer through the clever use of several paperclips. Upon connection, the port outputs a series of numbers (your puzzle input).\n\nThe data appears to be encrypted with the eXchange-Masking Addition System (XMAS) which, conveniently for you, is an old cypher with an important weakness.\n\nXMAS starts by transmitting a **preamble** of 25 numbers. After that, each number you receive should be the sum of any two of the 25 immediately previous numbers. The two numbers will have different values, and there might be more than one such pair.\n\nFor example, suppose your preamble consists of the numbers `1` through `25` in a random order. To be valid, the next number must be the sum of two of those numbers:\n\n- `26` would be a **valid** next number, as it could be `1` plus `25` (or many other pairs, like `2` and `24`).\n- `49` would be a **valid** next number, as it is the sum of `24` and `25`.\n- `100` would **not** be valid; no two of the previous 25 numbers sum to `100`.\n- `50` would also **not** be valid; although `25` appears in the previous 25 numbers, the two numbers in the pair must be different.\n\nSuppose the 26th number is `45`, and the first number (no longer an option, as it is more than 25 numbers ago) was `20`. Now, for the next number to be valid, there needs to be some pair of numbers among `1`-`19`, `21`-`25`, or `45` that add up to it:\n\n- `26` would still be a **valid** next number, as `1` and `25` are still within the previous 25 numbers.\n- `65` would **not** be valid, as no two of the available numbers sum to it.\n- `64` and `66` would both be **valid**, as they are the result of `19+45` and `21+45` respectively.\n\nHere is a larger example which only considers the previous **5** numbers (and has a preamble of length 5):\n\n```\n35\n20\n15\n25\n47\n40\n62\n55\n65\n95\n102\n117\n150\n182\n127\n219\n299\n277\n309\n576\n```\n\nIn this example, after the 5-number preamble, almost every number is the sum of two of the previous 5 numbers; the only number that does not follow this rule is **`127`**.\n\nThe first step of attacking the weakness in the XMAS data is to find the first number in the list (after the preamble) which is not the sum of two of the 25 numbers before it. **What is the first number that does not have this property?**"},"3bb7":function(e,t,n){"use strict";n.r(t),t["default"]="Before you can give the destination to the captain, you realize that the actual action meanings were printed on the back of the instructions the whole time.\n\nAlmost all of the actions indicate how to move a **waypoint** which is relative to the ship's position:\n\n- Action `N` means to move the waypoint **north** by the given value.\n- Action `S` means to move the waypoint **south** by the given value.\n- Action `E` means to move the waypoint **east** by the given value.\n- Action `W` means to move the waypoint **west** by the given value.\n- Action `L` means to rotate the waypoint around the ship **left** (**counter-clockwise**) the given number of degrees.\n- Action `R` means to rotate the waypoint around the ship **right** (**clockwise**) the given number of degrees.\n- Action `F` means to move **forward** to the waypoint a number of times equal to the given value.\n\nThe waypoint starts **10 units east and 1 unit north** relative to the ship. The waypoint is relative to the ship; that is, if the ship moves, the waypoint moves with it.\n\nFor example, using the same instructions as above:\n\n- `F10` moves the ship to the waypoint 10 times (a total of **100 units east and 10 units north**), leaving the ship at **east 100, north 10**. The waypoint stays 10 units east and 1 unit north of the ship.\n- `N3` moves the waypoint 3 units north to **10 units east and 4 units north of the ship**. The ship remains at **east 100, north 10**.\n- `F7` moves the ship to the waypoint 7 times (a total of **70 units east and 28 units north**), leaving the ship at **east 170, north 38**. The waypoint stays 10 units east and 4 units north of the ship.\n- `R90` rotates the waypoint around the ship clockwise 90 degrees, moving it to **4 units east and 10 units south of the ship**. The ship remains at **east 170, north 38**.\n- `F11` moves the ship to the waypoint 11 times (a total of **44 units east and 110 units south**), leaving the ship at **east 214, south 72**. The waypoint stays 4 units east and 10 units south of the ship.\n\nAfter these operations, the ship's Manhattan distance from its starting position is `214 + 72` = **`286`**.\n\nFigure out where the navigation instructions actually lead. **What is the Manhattan distance between that location and the ship's starting position?**"},"44e7":function(e,t,n){var o=n("861d"),a=n("c6b6"),i=n("b622"),r=i("match");e.exports=function(e){var t;return o(e)&&(void 0!==(t=e[r])?!!t:"RegExp"==a(e))}},"4a87":function(e,t,n){"use strict";n.r(t);var o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("h1",[e._v("Day "+e._s(e.day))]),e.markdown&&e.markdown.partOne?n("div",{staticClass:"mb-3"},[n("b-button",{directives:[{name:"b-toggle",rawName:"v-b-toggle.part-one",modifiers:{"part-one":!0}}]},[e._v("Show Part 1")]),n("b-collapse",{attrs:{id:"part-one"}},[n("vue-markdown",{attrs:{source:e.markdown.partOne}})],1)],1):e._e(),e.markdown&&e.markdown.partTwo?n("div",{staticClass:"mb-3"},[n("b-button",{directives:[{name:"b-toggle",rawName:"v-b-toggle.part-two",modifiers:{"part-two":!0}}]},[e._v("Show Part 2")]),n("b-collapse",{attrs:{id:"part-two"}},[n("vue-markdown",{attrs:{source:e.markdown.partTwo}})],1)],1):e._e(),n("h2",[e._v("Input")]),n("b-form",{on:{submit:function(t){return t.preventDefault(),e.onSubmit(t)}}},[n("b-form-group",{attrs:{label:"Task input",description:"The task input provided for this day.","label-for":"task-input"}},[n("b-form-textarea",{attrs:{rows:"5",id:"task-input",disabled:!e.editingEnabled},model:{value:e.input,callback:function(t){e.input=t},expression:"input"}})],1),n("b-button",{attrs:{type:"submit"},on:{click:function(t){return t.preventDefault(),e.onSubmit(t)}}},[e._v("Run")])],1),void 0!==e.solutions.partOne&&null!==e.solutions.partOne?[n("h2",{staticClass:"mt-3"},[e._v("Solution Part 1")]),e._t("partOne"),n("p",[e._v(e._s(e.solutions.partOne))])]:e._e(),void 0!==e.solutions.partTwo&&null!==e.solutions.partTwo?[n("h2",[e._v("Solution Part 2")]),e._t("partTwo"),n("p",[e._v(e._s(e.solutions.partTwo))])]:e._e()],2)},a=[],i=(n("a9e3"),n("ac1f"),n("1276"),n("5530")),r=n("2f62"),s={data:function(){return{input:null}},props:{day:{type:Number,default:1},solutions:{type:Object,default:function(){return{partOne:null,partTwo:null}}},taskInput:{type:String,default:null}},watch:{taskInput:function(e){this.input=e}},computed:Object(i["a"])(Object(i["a"])({},Object(r["b"])(["editingEnabled"])),{},{markdown:function(){var e,t;try{e=n("9e50")("./Day-".concat(this.day,".1.md"))}catch(o){}try{t=n("819c")("./Day-".concat(this.day,".2.md"))}catch(o){}return{partOne:e?e.default:null,partTwo:t?t.default:null}},splitData:function(){return this.input?this.input.split(/\r?\n/):null}}),methods:{onSubmit:function(){this.$emit("input-changed",this.splitData)}},mounted:function(){this.taskInput&&(this.input=this.taskInput)}},h=s,l=n("2877"),u=Object(l["a"])(h,o,a,!1,null,null,null);t["default"]=u.exports},5899:function(e,t){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},"58a8":function(e,t,n){var o=n("1d80"),a=n("5899"),i="["+a+"]",r=RegExp("^"+i+i+"*"),s=RegExp(i+i+"*$"),h=function(e){return function(t){var n=String(o(t));return 1&e&&(n=n.replace(r,"")),2&e&&(n=n.replace(s,"")),n}};e.exports={start:h(1),end:h(2),trim:h(3)}},"59f7":function(e,t,n){"use strict";n.r(t),t["default"]="After saving Christmas [five years in a row](https://adventofcode.com/events), you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.\n\nThe tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them *stars*. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.\n\nTo save your vacation, you need to get all *fifty stars* by December 25th.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants *one star*. Good luck!\n\nBefore you leave, the Elves in accounting just need you to fix your **expense report** (your puzzle input); apparently, something isn't quite adding up.\n\nSpecifically, they need you to **find the two entries that sum to `2020`** and then multiply those two numbers together.\n\nFor example, suppose your expense report contained the following:\n\n```\n1721\n979\n366\n299\n675\n1456\n```\nIn this list, the two entries that sum to `2020` are `1721` and `299`. Multiplying them together produces `1721 * 299 = 514579`, so the correct answer is `514579`.\n\nOf course, your expense report is much larger. **Find the two entries that sum to `2020`; what do you get if you multiply them together?**"},"5a29":function(e,t,n){"use strict";n.r(t),t["default"]="The final step in breaking the XMAS encryption relies on the invalid number you just found: you must **find a contiguous set of at least two numbers** in your list which sum to the invalid number from step 1.\n\nAgain consider the above example:\n\n```\n35\n20\n15\n25\n47\n40\n62\n55\n65\n95\n102\n117\n150\n182\n127\n219\n299\n277\n309\n576\n```\n\nIn this list, adding up all of the numbers from `15` through `40` produces the invalid number from step 1, `127`. (Of course, the contiguous set of numbers in your actual list might be much longer.)\n\nTo find the **encryption weakness**, add together the **smallest** and **largest** number in this contiguous range; in this example, these are `15` and `47`, producing `62`.\n\n**What is the encryption weakness in your XMAS-encrypted list of numbers?**"},"64c7":function(e,t,n){"use strict";n.r(t),t["default"]="It's getting pretty expensive to fly these days - not because of ticket prices, but because of the ridiculous number of bags you need to buy!\n\nConsider again your shiny gold bag and the rules from the above example:\n\n- `faded blue` bags contain `0` other bags.\n- `dotted black` bags contain `0` other bags.\n- `vibrant plum` bags contain `11` other bags: `5` `faded blue` bags and `6` `dotted black` bags.\n- `dark olive` bags contain `7` other bags: `3` `faded blue` bags and `4` `dotted black` bags.\n\nSo, a single `shiny gold` bag must contain 1 `dark olive` bag (and the 7 bags within it) plus 2 `vibrant plum` bags (and the 11 bags within **each** of those): `1 + 1*7 + 2 + 2*11` = `32` bags!\n\nOf course, the actual rules have a small chance of going several levels deeper than this example; be sure to count all of the bags, even if the nesting becomes topologically impractical!\n\nHere's another example:\n\n```\nshiny gold bags contain 2 dark red bags.\ndark red bags contain 2 dark orange bags.\ndark orange bags contain 2 dark yellow bags.\ndark yellow bags contain 2 dark green bags.\ndark green bags contain 2 dark blue bags.\ndark blue bags contain 2 dark violet bags.\ndark violet bags contain no other bags.\n```\n\nIn this example, a single `shiny gold` bag must contain `126` other bags.\n\n**How many individual bags are required inside your single shiny gold bag?**"},6547:function(e,t,n){var o=n("a691"),a=n("1d80"),i=function(e){return function(t,n){var i,r,s=String(a(t)),h=o(n),l=s.length;return h<0||h>=l?e?"":void 0:(i=s.charCodeAt(h),i<55296||i>56319||h+1===l||(r=s.charCodeAt(h+1))<56320||r>57343?e?s.charAt(h):i:e?s.slice(h,h+2):r-56320+(i-55296<<10)+65536)}};e.exports={codeAt:i(!1),charAt:i(!0)}},"6c27":function(e,t,n){"use strict";n.r(t),t["default"]='As your flight approaches the regional airport where you\'ll switch to a much larger plane, [customs declaration forms](https://en.wikipedia.org/wiki/Customs_declaration) are distributed to the passengers.\n\nThe form asks a series of 26 yes-or-no questions marked `a` through `z`. All you need to do is identify the questions for which **anyone in your group** answers "yes". Since your group is just you, this doesn\'t take very long.\n\nHowever, the person sitting next to you seems to be experiencing a language barrier and asks if you can help. For each of the people in their group, you write down the questions for which they answer "yes", one per line. For example:\n\n```\nabcx\nabcy\nabcz\n```\n\nIn this group, there are `6` questions to which anyone answered "yes": `a`, `b`, `c`, `x`, `y`, and `z`. (Duplicate answers to the same question don\'t count extra; each question counts at most once.)\n\nAnother group asks for your help, then another, and eventually you\'ve collected answers from every group on the plane (your puzzle input). Each group\'s answers are separated by a blank line, and within each group, each person\'s answers are on a single line. For example:\n\n```\nabc\n\na\nb\nc\n\nab\nac\n\na\na\na\na\n\nb\n```\n\nThis list represents answers from five groups:\n\n- The first group contains one person who answered "yes" to `3` questions: `a`, `b`, and `c`.\n- The second group contains three people; combined, they answered "yes" to `3` questions: `a`, `b`, and `c`.\n- The third group contains two people; combined, they answered "yes" to `3` questions: `a`, `b`, and `c`.\n- The fourth group contains four people; combined, they answered "yes" to only `1` question, `a`.\n- The last group contains one person who answered "yes" to only `1` question, `b`.\n\nIn this example, the sum of these counts is `3 + 3 + 3 + 1 + 1` = `11`.\n\nFor each group, count the number of questions to which anyone answered "yes". **What is the sum of those counts?**'},7156:function(e,t,n){var o=n("861d"),a=n("d2bb");e.exports=function(e,t,n){var i,r;return a&&"function"==typeof(i=t.constructor)&&i!==n&&o(r=i.prototype)&&r!==n.prototype&&a(e,r),e}},"738e":function(e,t,n){"use strict";n.r(t),t["default"]="You arrive at the airport only to realize that you grabbed your North Pole Credentials instead of your passport. While these documents are extremely similar, North Pole Credentials aren't issued by a country and therefore aren't actually valid documentation for travel in most of the world.\n\nIt seems like you're not the only one having problems, though; a very long line has formed for the automatic passport scanners, and the delay could upset your travel itinerary.\n\nDue to some questionable network security, you realize you might be able to solve both of these problems at the same time.\n\nThe automatic passport scanners are slow because they're having trouble **detecting which passports have all required fields**. The expected fields are as follows:\n\n- `byr` (Birth Year)\n- `iyr` (Issue Year)\n- `eyr` (Expiration Year)\n- `hgt` (Height)\n- `hcl` (Hair Color)\n- `ecl` (Eye Color)\n- `pid` (Passport ID)\n- `cid` (Country ID)\n\nPassport data is validated in batch files (your puzzle input). Each passport is represented as a sequence of `key:value` pairs separated by spaces or newlines. Passports are separated by blank lines.\n\nHere is an example batch file containing four passports:\n\n```\necl:gry pid:860033327 eyr:2020 hcl:#fffffd\nbyr:1937 iyr:2017 cid:147 hgt:183cm\n\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\nhcl:#cfa07d byr:1929\n\nhcl:#ae17e1 iyr:2013\neyr:2024\necl:brn pid:760753108 byr:1931\nhgt:179cm\n\nhcl:#cfa07d eyr:2025 pid:166559648\niyr:2011 ecl:brn hgt:59in\n```\n\nThe first passport is **valid** - all eight fields are present. The second passport is **invalid** - it is missing hgt (the Height field).\n\nThe third passport is interesting; the **only missing field** is `cid`, so it looks like data from North Pole Credentials, not a passport at all! Surely, nobody would mind if you made the system temporarily ignore missing `cid` fields. Treat this \"passport\" as **valid**.\n\nThe fourth passport is missing two fields, `cid` and `byr`. Missing `cid` is fine, but missing any other field is not, so this passport is **invalid**.\n\nAccording to the above rules, your improved system would report `2` valid passports.\n\nCount the number of **valid** passports - those that have all required fields. Treat cid as optional. **In your batch file, how many passports are valid**?"},"757f":function(e,t,n){"use strict";n.r(t),t["default"]='You board your plane only to discover a new problem: you dropped your boarding pass! You aren\'t sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.\n\nYou write a quick program to use your phone\'s camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.\n\nInstead of [zones or groups](https://www.youtube.com/watch?v=oAHbLRjF0vo), this airline uses **binary space partitioning** to seat people. A seat might be specified like `FBFBBFFRLR`, where `F` means "front", `B` means "back", `L` means "left", and `R` means "right".\n\nThe first 7 characters will either be F or B; these specify exactly one of the **128 rows** on the plane (numbered `0` through `127`). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the **front** (0 through 63) or the **back** (64 through 127). The next letter indicates which half of that region the seat is in, and so on until you\'re left with exactly one row.\n\nFor example, consider just the first seven characters of `FBFBBFFRLR`:\n\n- Start by considering the whole range, rows `0` through `127`.\n- `F` means to take the lower half, keeping rows `0` through `63`.\n- `B` means to take the upper half, keeping rows `32` through `63`.\n- `F` means to take the lower half, keeping rows `32` through `47`.\n- `B` means to take the upper half, keeping rows `40` through `47`.\n- `B` keeps rows `44` through `47`.\n- `F` keeps rows `44` through `45`.\n- The final `F` keeps the lower of the two, row `44`.\n\nThe last three characters will be either `L` or `R`; these specify exactly one of the **8 columns** of seats on the plane (numbered `0` through `7`). The same process as above proceeds again, this time with only three steps. `L` means to keep the **lower half**, while `R` means to keep the **upper half**.\n\nFor example, consider just the last 3 characters of `FBFBBFFRLR`:\n\n- Start by considering the whole range, columns `0` through `7`.\n- `R` means to take the upper half, keeping columns `4` through `7`.\n- `L` means to take the lower half, keeping columns `4` through `5`.\n- The final `R` keeps the upper of the two, column `5`.\n\nSo, decoding `FBFBBFFRLR` reveals that it is the seat at **row `44`, column `5`**.\n\nEvery seat also has a unique **seat ID**: multiply the row by `8`, then add the column. In this example, the seat has ID `44 * 8 + 5 = 357`.\n\nHere are some other boarding passes:\n\n- `BFFFBBFRRR`: row `70`, column `7`, seat ID `567`.\n- `FFFBBBFRRR`: row `14`, column `7`, seat ID `119`.\n- `BBFFBBFRLL`: row `102`, column `4`, seat ID `820`.\n\nAs a sanity check, look through your list of boarding passes. **What is the highest seat ID on a boarding pass?**'},"7c55":function(e,t,n){"use strict";n.r(t),t["default"]="The Elves in accounting are thankful for your help; one of them even offers you a starfish coin they had left over from a past vacation. They offer you a second one if you can find **three** numbers in your expense report that meet the same criteria.\n\nUsing the above example again, the three entries that sum to `2020` are `979`, `366`, and `675`. Multiplying them together produces the answer, **`241861950`**.\n\nIn your expense report, **what is the product of the three entries that sum to `2020`**?"},"7eff":function(e,t,n){"use strict";n.r(t),t["default"]="You land at the regional airport in time for your next flight. In fact, it looks like you'll even have time to grab some food: all flights are currently delayed due to **issues in luggage processing**.\n\nDue to recent aviation regulations, many rules (your puzzle input) are being enforced about bags and their contents; bags must be color-coded and must contain specific quantities of other color-coded bags. Apparently, nobody responsible for these regulations considered how long they would take to enforce!\n\nFor example, consider the following rules:\n\n```\nlight red bags contain 1 bright white bag, 2 muted yellow bags.\ndark orange bags contain 3 bright white bags, 4 muted yellow bags.\nbright white bags contain 1 shiny gold bag.\nmuted yellow bags contain 2 shiny gold bags, 9 faded blue bags.\nshiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.\ndark olive bags contain 3 faded blue bags, 4 dotted black bags.\nvibrant plum bags contain 5 faded blue bags, 6 dotted black bags.\nfaded blue bags contain no other bags.\ndotted black bags contain no other bags.\n```\n\nThese rules specify the required contents for `9` bag types. In this example, every `faded blue` bag is empty, every `vibrant plum` bag contains 11 bags (5 `faded blue` and 6 `dotted black`), and so on.\n\nYou have a **`shiny gold`** bag. If you wanted to carry it in at least one other bag, how many different bag colors would be valid for the outermost bag? (In other words: how many colors can, eventually, contain at least one shiny gold bag?)\n\nIn the above rules, the following options would be available to you:\n\n- A `bright white` bag, which can hold your `shiny gold` bag directly.\n- A `muted yellow` bag, which can hold your `shiny gold` bag directly, plus some other bags.\n- A `dark orange` bag, which can hold `bright white` and `muted yellow` bags, either of which could then hold your `shiny gold` bag.\n- A `light red` bag, which can hold `bright white` and muted `yellow bags`, either of which could then hold your `shiny gold` bag.\n\nSo, in this example, the number of bag colors that can eventually contain at least one `shiny gold` bag is **`4`**.\n\n**How many bag colors can eventually contain at least one `shiny gold` bag?** (The list of rules is quite long; make sure you get all of it.)"},"819c":function(e,t,n){var o={"./Day-1.2.md":"7c55","./Day-10.2.md":"9cf8","./Day-11.2.md":"c202","./Day-12.2.md":"3bb7","./Day-2.2.md":"1859","./Day-3.2.md":"9718","./Day-4.2.md":"1949","./Day-5.2.md":"0e77","./Day-6.2.md":"b979","./Day-7.2.md":"64c7","./Day-8.2.md":"ce0c","./Day-9.2.md":"5a29"};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}a.keys=function(){return Object.keys(o)},a.resolve=i,e.exports=a,a.id="819c"},"8aa5":function(e,t,n){"use strict";var o=n("6547").charAt;e.exports=function(e,t,n){return t+(n?o(e,t).length:1)}},9263:function(e,t,n){"use strict";var o=n("ad6d"),a=n("9f7f"),i=RegExp.prototype.exec,r=String.prototype.replace,s=i,h=function(){var e=/a/,t=/b*/g;return i.call(e,"a"),i.call(t,"a"),0!==e.lastIndex||0!==t.lastIndex}(),l=a.UNSUPPORTED_Y||a.BROKEN_CARET,u=void 0!==/()??/.exec("")[1],c=h||u||l;c&&(s=function(e){var t,n,a,s,c=this,d=l&&c.sticky,p=o.call(c),f=c.source,g=0,m=e;return d&&(p=p.replace("y",""),-1===p.indexOf("g")&&(p+="g"),m=String(e).slice(c.lastIndex),c.lastIndex>0&&(!c.multiline||c.multiline&&"\n"!==e[c.lastIndex-1])&&(f="(?: "+f+")",m=" "+m,g++),n=new RegExp("^(?:"+f+")",p)),u&&(n=new RegExp("^"+f+"$(?!\\s)",p)),h&&(t=c.lastIndex),a=i.call(d?n:c,m),d?a?(a.input=a.input.slice(g),a[0]=a[0].slice(g),a.index=c.lastIndex,c.lastIndex+=a[0].length):c.lastIndex=0:h&&a&&(c.lastIndex=c.global?a.index+a[0].length:t),u&&a&&a.length>1&&r.call(a[0],n,(function(){for(s=1;s<arguments.length-2;s++)void 0===arguments[s]&&(a[s]=void 0)})),a}),e.exports=s},9718:function(e,t,n){"use strict";n.r(t),t["default"]="Time to check the rest of the slopes - you need to minimize the probability of a sudden arboreal stop, after all.\n\nDetermine the number of trees you would encounter if, for each of the following slopes, you start at the top-left corner and traverse the map all the way to the bottom:\n\n- Right `1`, down `1`.\n- Right `3`, down `1`. (This is the slope you already checked.)\n- Right `5`, down `1`.\n- Right `7`, down `1`.\n- Right `1`, down `2`.\n\nIn the above example, these slopes would find `2`, `7`, `3`, `4`, and `2` tree(s) respectively; multiplied together, these produce the answer **`336`**.\n\n**What do you get if you multiply together the number of trees encountered on each of the listed slopes?**"},"9cf8":function(e,t,n){"use strict";n.r(t),t["default"]="To completely determine whether you have enough adapters, you'll need to figure out how many different ways they can be arranged. Every arrangement needs to connect the charging outlet to your device. The previous rules about when adapters can successfully connect still apply.\n\nThe first example above (the one that starts with `16`, `10`, `15`) supports the following arrangements:\n\n```\n(0), 1, 4, 5, 6, 7, 10, 11, 12, 15, 16, 19, (22)\n(0), 1, 4, 5, 6, 7, 10, 12, 15, 16, 19, (22)\n(0), 1, 4, 5, 7, 10, 11, 12, 15, 16, 19, (22)\n(0), 1, 4, 5, 7, 10, 12, 15, 16, 19, (22)\n(0), 1, 4, 6, 7, 10, 11, 12, 15, 16, 19, (22)\n(0), 1, 4, 6, 7, 10, 12, 15, 16, 19, (22)\n(0), 1, 4, 7, 10, 11, 12, 15, 16, 19, (22)\n(0), 1, 4, 7, 10, 12, 15, 16, 19, (22)\n```\n\n(The charging outlet and your device's built-in adapter are shown in parentheses.) Given the adapters from the first example, the total number of arrangements that connect the charging outlet to your device is **`8`**.\n\nThe second example above (the one that starts with `28`, `33`, `18`) has many arrangements. Here are a few:\n\n```\n(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,\n32, 33, 34, 35, 38, 39, 42, 45, 46, 47, 48, 49, (52)\n\n(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,\n32, 33, 34, 35, 38, 39, 42, 45, 46, 47, 49, (52)\n\n(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,\n32, 33, 34, 35, 38, 39, 42, 45, 46, 48, 49, (52)\n\n(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,\n32, 33, 34, 35, 38, 39, 42, 45, 46, 49, (52)\n\n(0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31,\n32, 33, 34, 35, 38, 39, 42, 45, 47, 48, 49, (52)\n\n(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,\n46, 48, 49, (52)\n\n(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,\n46, 49, (52)\n\n(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,\n47, 48, 49, (52)\n\n(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,\n47, 49, (52)\n\n(0), 3, 4, 7, 10, 11, 14, 17, 20, 23, 25, 28, 31, 34, 35, 38, 39, 42, 45,\n48, 49, (52)\n```\n\nIn total, this set of adapters can connect the charging outlet to your device in **`19208`** distinct arrangements.\n\nYou glance back down at your bag and try to remember why you brought so many adapters; there must be **more than a trillion** valid ways to arrange them! Surely, there must be an efficient way to count the arrangements.\n\n**What is the total number of distinct ways you can arrange the adapters to connect the charging outlet to your device?**"},"9e50":function(e,t,n){var o={"./Day-1.1.md":"59f7","./Day-10.1.md":"c08b","./Day-11.1.md":"cd2f","./Day-12.1.md":"3263","./Day-2.1.md":"1caa0","./Day-3.1.md":"e118","./Day-4.1.md":"738e","./Day-5.1.md":"757f","./Day-6.1.md":"6c27","./Day-7.1.md":"7eff","./Day-8.1.md":"21b5","./Day-9.1.md":"348b"};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}a.keys=function(){return Object.keys(o)},a.resolve=i,e.exports=a,a.id="9e50"},"9f7f":function(e,t,n){"use strict";var o=n("d039");function a(e,t){return RegExp(e,t)}t.UNSUPPORTED_Y=o((function(){var e=a("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),t.BROKEN_CARET=o((function(){var e=a("^r","gy");return e.lastIndex=2,null!=e.exec("str")}))},a9e3:function(e,t,n){"use strict";var o=n("83ab"),a=n("da84"),i=n("94ca"),r=n("6eeb"),s=n("5135"),h=n("c6b6"),l=n("7156"),u=n("c04e"),c=n("d039"),d=n("7c73"),p=n("241c").f,f=n("06cf").f,g=n("9bf2").f,m=n("58a8").trim,y="Number",b=a[y],L=b.prototype,w=h(d(L))==y,v=function(e){var t,n,o,a,i,r,s,h,l=u(e,!1);if("string"==typeof l&&l.length>2)if(l=m(l),t=l.charCodeAt(0),43===t||45===t){if(n=l.charCodeAt(2),88===n||120===n)return NaN}else if(48===t){switch(l.charCodeAt(1)){case 66:case 98:o=2,a=49;break;case 79:case 111:o=8,a=55;break;default:return+l}for(i=l.slice(2),r=i.length,s=0;s<r;s++)if(h=i.charCodeAt(s),h<48||h>a)return NaN;return parseInt(i,o)}return+l};if(i(y,!b(" 0o1")||!b("0b1")||b("+0x1"))){for(var x,k=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof k&&(w?c((function(){L.valueOf.call(n)})):h(n)!=y)?l(new b(v(t)),n,k):v(t)},T=o?p(b):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),I=0;T.length>I;I++)s(b,x=T[I])&&!s(k,x)&&g(k,x,f(b,x));k.prototype=L,L.constructor=k,r(a,y,k)}},ac1f:function(e,t,n){"use strict";var o=n("23e7"),a=n("9263");o({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},ad6d:function(e,t,n){"use strict";var o=n("825a");e.exports=function(){var e=o(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},b979:function(e,t,n){"use strict";n.r(t),t["default"]='As you finish the last group\'s customs declaration, you notice that you misread one word in the instructions:\n\nYou don\'t need to identify the questions to which **anyone** answered "yes"; you need to identify the questions to which **everyone** answered "yes"!\n\nUsing the same example as above:\n\n```\nabc\n\na\nb\nc\n\nab\nac\n\na\na\na\na\n\nb\n```\n\nThis list represents answers from five groups:\n\n- In the first group, everyone (all 1 person) answered "yes" to `3` questions: `a`, `b`, and `c`.\n- In the second group, there is **no** question to which everyone answered "yes".\n- In the third group, everyone answered yes to only `1` question, `a`. Since some people did not answer "yes" to `b` or `c`, they don\'t count.\n- In the fourth group, everyone answered yes to only `1` question, `a`.\n- In the fifth group, everyone (all 1 person) answered "yes" to `1` question, `b`.\n\nIn this example, the sum of these counts is `3 + 0 + 1 + 1 + 1` = `6`.\n\nFor each group, count the number of questions to which **everyone** answered "yes". **What is the sum of those counts?**'},c08b:function(e,t,n){"use strict";n.r(t),t["default"]="Patched into the aircraft's data port, you discover weather forecasts of a massive tropical storm. Before you can figure out whether it will impact your vacation plans, however, your device suddenly turns off!\n\nIts battery is dead.\n\nYou'll need to plug it in. There's only one problem: the charging outlet near your seat produces the wrong number of **jolts**. Always prepared, you make a list of all of the joltage adapters in your bag.\n\nEach of your joltage adapters is rated for a specific **output joltage** (your puzzle input). Any given adapter can take an input `1`, `2`, or `3` jolts **lower** than its rating and still produce its rated output joltage.\n\nIn addition, your device has a built-in joltage adapter rated for `3` **jolts higher** than the highest-rated adapter in your bag. (If your adapter list were `3`, `9`, and `6`, your device's built-in adapter would be rated for `12` jolts.)\n\nTreat the charging outlet near your seat as having an effective joltage rating of `0`.\n\nSince you have some time to kill, you might as well test all of your adapters. Wouldn't want to get to your resort and realize you can't even charge your device!\n\nIf you **use every adapter in your bag** at once, what is the distribution of joltage differences between the charging outlet, the adapters, and your device?\n\nFor example, suppose that in your bag, you have adapters with the following joltage ratings:\n\n```\n16\n10\n15\n5\n1\n11\n7\n19\n6\n12\n4\n```\n\nWith these adapters, your device's built-in joltage adapter would be rated for `19 + 3 =` **`22`** jolts, 3 higher than the highest-rated adapter.\n\nBecause adapters can only connect to a source 1-3 jolts lower than its rating, in order to use every adapter, you'd need to choose them like this:\n\n- The charging outlet has an effective rating of `0` jolts, so the only adapters that could connect to it directly would need to have a joltage rating of `1`, `2`, or `3` jolts. Of these, only one you have is an adapter rated `1` jolt (difference of **`1`**).\n- From your `1`-jolt rated adapter, the only choice is your `4`-jolt rated adapter (difference of **`3`**).\n- From the `4`-jolt rated adapter, the adapters rated `5`, `6`, or `7` are valid choices. However, in order to not skip any adapters, you have to pick the adapter rated `5` jolts (difference of **`1`**).\n- Similarly, the next choices would need to be the adapter rated `6` and then the adapter rated `7` (with difference of **`1`** and **`1`**).\n- The only adapter that works with the `7`-jolt rated adapter is the one rated `10` jolts (difference of **`3`**).\n- From `10`, the choices are `11` or `12`; choose `11` (difference of **`1`**) and then `12` (difference of **`1`**).\n- After `12`, only valid adapter has a rating of `15` (difference of **`3`**), then `16` (difference of **`1`**), then `19` (difference of **`3`**).\n- Finally, your device's built-in adapter is always `3` higher than the highest adapter, so its rating is `22` jolts (always a difference of **`3`**).\n\nIn this example, when using every adapter, there are **`7`** differences of 1 jolt and **`5`** differences of 3 jolts.\n\nHere is a larger example:\n\n```\n28\n33\n18\n42\n31\n14\n46\n20\n48\n47\n24\n23\n49\n45\n19\n38\n39\n11\n1\n32\n25\n35\n8\n17\n7\n9\n4\n2\n34\n10\n3\n```\n\nIn this larger example, in a chain that uses all of the adapters, there are **`22`** differences of 1 jolt and **`10`** differences of 3 jolts.\n\nFind a chain that uses all of your adapters to connect the charging outlet to your device's built-in adapter and count the joltage differences between the charging outlet, the adapters, and your device. **What is the number of 1-jolt differences multiplied by the number of 3-jolt differences?**"},c202:function(e,t,n){"use strict";n.r(t),t["default"]="As soon as people start to arrive, you realize your mistake. People don't just care about adjacent seats - they care about **the first seat they can see** in each of those eight directions!\n\nNow, instead of considering just the eight immediately adjacent seats, consider the **first seat** in each of those eight directions. For example, the empty seat below would see **eight** occupied seats:\n\n```\n.......#.\n...#.....\n.#.......\n.........\n..#L....#\n....#....\n.........\n#........\n...#.....\n```\n\nThe leftmost empty seat below would only see **one** empty seat, but cannot see any of the occupied ones:\n\n```\n.............\n.L.L.#.#.#.#.\n.............\n```\n\nThe empty seat below would see **no** occupied seats:\n\n```\n.##.##.\n#.#.#.#\n##...##\n...L...\n##...##\n#.#.#.#\n.##.##.\n```\n\nAlso, people seem to be more tolerant than you expected: it now takes **five or more** visible occupied seats for an occupied seat to become empty (rather than **four or more** from the previous rules). The other rules still apply: empty seats that see no occupied seats become occupied, seats matching no rule don't change, and floor never changes.\n\nGiven the same starting layout as above, these new rules cause the seating area to shift around as follows:\n\n```\nL.LL.LL.LL\nLLLLLLL.LL\nL.L.L..L..\nLLLL.LL.LL\nL.LL.LL.LL\nL.LLLLL.LL\n..L.L.....\nLLLLLLLLLL\nL.LLLLLL.L\nL.LLLLL.LL\n```\n\n```\n#.##.##.##\n#######.##\n#.#.#..#..\n####.##.##\n#.##.##.##\n#.#####.##\n..#.#.....\n##########\n#.######.#\n#.#####.##\n```\n\n```\n#.LL.LL.L#\n#LLLLLL.LL\nL.L.L..L..\nLLLL.LL.LL\nL.LL.LL.LL\nL.LLLLL.LL\n..L.L.....\nLLLLLLLLL#\n#.LLLLLL.L\n#.LLLLL.L#\n```\n\n```\n#.L#.##.L#\n#L#####.LL\nL.#.#..#..\n##L#.##.##\n#.##.#L.##\n#.#####.#L\n..#.#.....\nLLL####LL#\n#.L#####.L\n#.L####.L#\n```\n\n```\n#.L#.L#.L#\n#LLLLLL.LL\nL.L.L..#..\n##LL.LL.L#\nL.LL.LL.L#\n#.LLLLL.LL\n..L.L.....\nLLLLLLLLL#\n#.LLLLL#.L\n#.L#LL#.L#\n```\n\n```\n#.L#.L#.L#\n#LLLLLL.LL\nL.L.L..#..\n##L#.#L.L#\nL.L#.#L.L#\n#.L####.LL\n..#.#.....\nLLL###LLL#\n#.LLLLL#.L\n#.L#LL#.L#\n```\n\n```\n#.L#.L#.L#\n#LLLLLL.LL\nL.L.L..#..\n##L#.#L.L#\nL.L#.LL.L#\n#.LLLL#.LL\n..#.L.....\nLLL###LLL#\n#.LLLLL#.L\n#.L#LL#.L#\n```\n\nAgain, at this point, people stop shifting around and the seating area reaches equilibrium. Once this occurs, you count **`26`** occupied seats.\n\nGiven the new visibility method and the rule change for occupied seats becoming empty, once equilibrium is reached, **how many seats end up occupied?**"},cd2f:function(e,t,n){"use strict";n.r(t),t["default"]="Your plane lands with plenty of time to spare. The final leg of your journey is a ferry that goes directly to the tropical island where you can finally start your vacation. As you reach the waiting area to board the ferry, you realize you're so early, nobody else has even arrived yet!\n\nBy modeling the process people use to choose (or abandon) their seat in the waiting area, you're pretty sure you can predict the best place to sit. You make a quick map of the seat layout (your puzzle input).\n\nThe seat layout fits neatly on a grid. Each position is either floor (`.`), an empty seat (`L`), or an occupied seat (`#`). For example, the initial seat layout might look like this:\n\n```\nL.LL.LL.LL\nLLLLLLL.LL\nL.L.L..L..\nLLLL.LL.LL\nL.LL.LL.LL\nL.LLLLL.LL\n..L.L.....\nLLLLLLLLLL\nL.LLLLLL.L\nL.LLLLL.LL\n```\n\nNow, you just need to model the people who will be arriving shortly. Fortunately, people are entirely predictable and always follow a simple set of rules. All decisions are based on the **number of occupied seats** adjacent to a given seat (one of the eight positions immediately up, down, left, right, or diagonal from the seat). The following rules are applied to every seat simultaneously:\n\n- If a seat is **empty** (`L`) and there are **no** occupied seats adjacent to it, the seat becomes occupied.\n- If a seat is **occupied** (`#`) and **four or more** seats adjacent to it are also occupied, the seat becomes **empty**.\n- Otherwise, the seat's state does not change.\n\nFloor (`.`) never changes; seats don't move, and nobody sits on the floor.\n\nAfter one round of these rules, every seat in the example layout becomes occupied:\n\n```\n#.##.##.##\n#######.##\n#.#.#..#..\n####.##.##\n#.##.##.##\n#.#####.##\n..#.#.....\n##########\n#.######.#\n#.#####.##\n```\n\nAfter a second round, the seats with four or more occupied adjacent seats become empty again:\n\n```\n#.LL.L#.##\n#LLLLLL.L#\nL.L.L..L..\n#LLL.LL.L#\n#.LL.LL.LL\n#.LLLL#.##\n..L.L.....\n#LLLLLLLL#\n#.LLLLLL.L\n#.#LLLL.##\n```\n\nThis process continues for three more rounds:\n\n```\n#.##.L#.##\n#L###LL.L#\nL.#.#..#..\n#L##.##.L#\n#.##.LL.LL\n#.###L#.##\n..#.#.....\n#L######L#\n#.LL###L.L\n#.#L###.##\n```\n\n```\n#.#L.L#.##\n#LLL#LL.L#\nL.L.L..#..\n#LLL.##.L#\n#.LL.LL.LL\n#.LL#L#.##\n..L.L.....\n#L#LLLL#L#\n#.LLLLLL.L\n#.#L#L#.##\n```\n\n```\n#.#L.L#.##\n#LLL#LL.L#\nL.#.L..#..\n#L##.##.L#\n#.#L.LL.LL\n#.#L#L#.##\n..L.L.....\n#L#L##L#L#\n#.LLLLLL.L\n#.#L#L#.##\n```\n\nAt this point, something interesting happens: the chaos stabilizes and further applications of these rules cause no seats to change state! Once people stop moving around, you count **`37`** occupied seats.\n\nSimulate your seating area by applying the seating rules repeatedly until no seats change state. **How many seats end up occupied?**"},ce0c:function(e,t,n){"use strict";n.r(t),t["default"]="After some careful analysis, you believe that **exactly one instruction is corrupted**.\n\nSomewhere in the program, **either** a `jmp` is supposed to be a `nop`, **or** a `nop` is supposed to be a `jmp`. (No `acc` instructions were harmed in the corruption of this boot code.)\n\nThe program is supposed to terminate by **attempting to execute an instruction immediately after the last instruction in the file**. By changing exactly one `jmp` or `nop`, you can repair the boot code and make it terminate correctly.\n\nFor example, consider the same program from above:\n\n```\nnop +0\nacc +1\njmp +4\nacc +3\njmp -3\nacc -99\nacc +1\njmp -4\nacc +6\n```\n\nIf you change the first instruction from `nop +0` to `jmp +0`, it would create a single-instruction infinite loop, never leaving that instruction. If you change almost any of the jmp instructions, the program will still eventually find another jmp instruction and loop forever.\n\nHowever, if you change the second-to-last instruction (from `jmp -4` to `nop -4`), the program terminates! The instructions are visited in this order:\n\n```\nnop +0  | 1\nacc +1  | 2\njmp +4  | 3\nacc +3  |\njmp -3  |\nacc -99 |\nacc +1  | 4\nnop -4  | 5\nacc +6  | 6\n```\n\nAfter the last instruction (`acc +6`), the program terminates by attempting to run the instruction below the last instruction in the file. With this change, after the program terminates, the accumulator contains the value **`8`** (`acc +1`, `acc +1`, `acc +6`).\n\nFix the program so that it terminates normally by changing exactly one `jmp` (to `nop`) or `nop` (to `jmp`). **What is the value of the accumulator after the program terminates?**"},d784:function(e,t,n){"use strict";n("ac1f");var o=n("6eeb"),a=n("d039"),i=n("b622"),r=n("9263"),s=n("9112"),h=i("species"),l=!a((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),u=function(){return"$0"==="a".replace(/./,"$0")}(),c=i("replace"),d=function(){return!!/./[c]&&""===/./[c]("a","$0")}(),p=!a((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));e.exports=function(e,t,n,c){var f=i(e),g=!a((function(){var t={};return t[f]=function(){return 7},7!=""[e](t)})),m=g&&!a((function(){var t=!1,n=/a/;return"split"===e&&(n={},n.constructor={},n.constructor[h]=function(){return n},n.flags="",n[f]=/./[f]),n.exec=function(){return t=!0,null},n[f](""),!t}));if(!g||!m||"replace"===e&&(!l||!u||d)||"split"===e&&!p){var y=/./[f],b=n(f,""[e],(function(e,t,n,o,a){return t.exec===r?g&&!a?{done:!0,value:y.call(t,n,o)}:{done:!0,value:e.call(n,t,o)}:{done:!1}}),{REPLACE_KEEPS_$0:u,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:d}),L=b[0],w=b[1];o(String.prototype,e,L),o(RegExp.prototype,f,2==t?function(e,t){return w.call(e,this,t)}:function(e){return w.call(e,this)})}c&&s(RegExp.prototype[f],"sham",!0)}},e118:function(e,t,n){"use strict";n.r(t),t["default"]="With the toboggan login problems resolved, you set off toward the airport. While travel by toboggan might be easy, it's certainly not safe: there's very minimal steering and the area is covered in trees. You'll need to see which angles will take you near the fewest trees.\n\nDue to the local geology, trees in this area only grow on exact integer coordinates in a grid. You make a map (your puzzle input) of the open squares (`.`) and trees (`#`) you can see. For example:\n\n```\n..##.......\n#...#...#..\n.#....#..#.\n..#.#...#.#\n.#...##..#.\n..#.##.....\n.#.#.#....#\n.#........#\n#.##...#...\n#...##....#\n.#..#...#.#\n```\n\nThese aren't the only trees, though; due to something you read about once involving arboreal genetics and biome stability, the same pattern repeats to the right many times:\n\n```\n..##.........##.........##.........##.........##.........##.......  ---\x3e\n#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..\n.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.\n..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#\n.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.\n..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....  ---\x3e\n.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#\n.#........#.#........#.#........#.#........#.#........#.#........#\n#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...\n#...##....##...##....##...##....##...##....##...##....##...##....#\n.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#  ---\x3e\n```\n\nYou start on the open square (`.`) in the top-left corner and need to reach the bottom (below the bottom-most row on your map).\n\nThe toboggan can only follow a few specific slopes (you opted for a cheaper model that prefers rational numbers); start by **counting all the trees** you would encounter for the slope **right `3`, down `1`**:\n\nFrom your starting position at the top-left, check the position that is right `3` and down `1`. Then, check the position that is right `3` and down `1` from there, and so on until you go past the bottom of the map.\n\nThe locations you'd check in the above example are marked here with `O` where there was an open square and `X` where there was a tree:\n\n```\n..##.........##.........##.........##.........##.........##.......  ---\x3e\n#..O#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..\n.#....X..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.\n..#.#...#O#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#\n.#...##..#..X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.\n..#.##.......#.X#.......#.##.......#.##.......#.##.......#.##.....  ---\x3e\n.#.#.#....#.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#\n.#........#.#........X.#........#.#........#.#........#.#........#\n#.##...#...#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...\n#...##....##...##....##...#X....##...##....##...##....##...##....#\n.#..#...#.#.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#  ---\x3e\n```\n\nIn this example, traversing the map using this slope would cause you to encounter `7` trees.\n\nStarting at the top-left corner of your map and following a slope of right `3` and down `1`, **how many trees would you encounter**?"}}]);
//# sourceMappingURL=chunk-0605a5ae.57f1d4c2.js.map
{"version":3,"file":"js/9024.609aa5e0.js","mappings":"0KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,iBAAiB,EACrMC,EAAkB,G,WCOtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAN,UAAAA,CACAO,QAAAA,KACAC,QAAAA,MAGA,EACAC,QAAAA,CACAP,eAAAA,SAAAA,GACA,uBAGA,uBAGA,iDAEA,+CACA,EACAQ,iBAAAA,SAAAA,GAEA,uBAOA,OALAC,EAAAA,SAAAA,SAAAA,IAEAC,GAAAA,KAAAA,iBAAAA,EAAAA,IAGA,CACA,EACAC,gBAAAA,SAAAA,EAAAA,GAEAF,EAAAA,MAAAA,EAAAA,EAEA,cAOA,OANAA,EAAAA,SAAAA,SAAAA,IAEA,wCACAG,GAAAA,CAAAA,IAGA,CACA,EACAC,WAAAA,SAAAA,EAAAA,GAEA,QAEA,KAEA,SACAC,WAAAA,EACAC,SAAAA,KACAC,MAAAA,EACAC,SAAAA,GACAC,QAAAA,IAEA,SAEA,aAEA,KAEA,QAEAC,IACA,QAEAC,GAAAA,EAGAX,EAAAA,SAAAA,OAGA,YAEA,+BACAA,EAAAA,SAAAA,KAAAA,GAEAU,EAAAA,EAAAA,QACA,iBAEAC,GAAAA,OACA,WAGA,OADAX,EAAAA,SAAAA,EACA,EAKAU,GACA,CACA,ICzG4P,I,UCOxPE,GAAY,OACd,EACA/B,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAeoB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2017/Day9.vue?0c37","webpack://advent-of-code/src/components/2017/Day9.vue","webpack://advent-of-code/./src/components/2017/Day9.vue?d8de","webpack://advent-of-code/./src/components/2017/Day9.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":9,\"year\":2017,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"9\" :year=\"2017\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const tokens = input[0].split('')\n\n      // Create the tree\n      const root = this.parseGroup(tokens, 1)\n\n      // Calculate the score starting from the root\n      this.solutions.partOne = this.calculateScores(root, 0)\n      // Calculate the length of garbage starting from the root\n      this.solutions.partTwo = this.calculateGarbage(root)\n    },\n    calculateGarbage: function (group) {\n      // Start by counting the garbage of this group\n      let total = group.garbage.length\n\n      group.children.forEach(c => {\n        // Then add the garbage of all children recursively\n        total += this.calculateGarbage(c)\n      })\n\n      return total\n    },\n    calculateScores: function (group, parentScore) {\n      // Increase the score based on the parent score\n      group.score = parentScore + 1\n\n      let totalScore = group.score\n      group.children.forEach(c => {\n        // Then sum together all the child scores recursively\n        const childScore = this.calculateScores(c, group.score)\n        totalScore += childScore\n      })\n\n      return totalScore\n    },\n    parseGroup: function (tokens, startIndex) {\n      // Keep track of the index\n      let index = startIndex\n      // Keep track of whether we are looking at garbage or noe\n      let isGarbage = false\n      // Keep track of the current group\n      const group = {\n        startIndex: startIndex,\n        endIndex: null,\n        score: 0,\n        children: [],\n        garbage: ''\n      }\n      while (true) {\n        // Get the next character\n        const token = tokens[index]\n\n        if (isGarbage) {\n          // If it's garbage\n          if (token === '!') {\n            // Skip the next token if we observe a \"!\"\n            index++\n          } else if (token === '>') {\n            // This is the end of the garbage\n            isGarbage = false\n          } else {\n            // Keep track of any garbage tokens that aren't skipped or the starting and ending bracket\n            group.garbage += token\n          }\n        } else {\n          if (token === '{') {\n            // Parse the child group\n            const childGroup = this.parseGroup(tokens, index + 1)\n            group.children.push(childGroup)\n            // Adjust the index to start again from the end of the last child group\n            index = childGroup.endIndex\n          } else if (token === '<') {\n            // We have observed the start of garbage\n            isGarbage = true\n          } else if (token === '}') {\n            // Update the end of this group\n            group.endIndex = index\n            return group\n          }\n        }\n\n        // Go to the next token\n        index++\n      }\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day9.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day9.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day9.vue?vue&type=template&id=33527fa9\"\nimport script from \"./Day9.vue?vue&type=script&lang=js\"\nexport * from \"./Day9.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","calculateGarbage","group","total","calculateScores","totalScore","parseGroup","startIndex","endIndex","score","children","garbage","index","isGarbage","component"],"sourceRoot":""}
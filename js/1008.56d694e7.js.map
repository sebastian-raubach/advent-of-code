{"version":3,"file":"js/1008.56d694e7.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2023/Day20.vue?23bc","webpack://advent-of-code/src/components/2023/Day20.vue","webpack://advent-of-code/./src/components/2023/Day20.vue?613c","webpack://advent-of-code/./src/components/2023/Day20.vue","webpack://advent-of-code/./src/util/math.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":20,\"year\":2023,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('p',{staticClass:\"text-info\"},[_vm._v(\"The output below can be saved as a text file each and loaded into \"),_c('a',{attrs:{\"href\":\"https://helium.hutton.ac.uk\"}},[_vm._v(\"Helium\")]),_vm._v(\" to visualize the graph structure as well as the importance of each node.\")]),_c('pre',{staticClass:\"year-2023-day-20-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.pedigreeFile)}}),_vm._v(\"\\n      \")]),_c('pre',{staticClass:\"year-2023-day-20-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.traitFile)}}),_vm._v(\"\\n      \")])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"20\" :year=\"2023\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <p class=\"text-info\">The output below can be saved as a text file each and loaded into <a href=\"https://helium.hutton.ac.uk\">Helium</a> to visualize the graph structure as well as the importance of each node.</p>\n      <pre class=\"year-2023-day-20-code border\">\n<code v-html=\"pedigreeFile\" />\n      </pre>\n      <pre class=\"year-2023-day-20-code border\">\n<code v-html=\"traitFile\" />\n      </pre>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport { lcm } from '@/util/math'\n\nconst FLIP_FLIP = '%'\nconst CONFUNCTION = '&'\nconst BROADCASTER = 'broadcaster'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      pedigreeFile: null,\n      traitFile: null\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      let nodes = this.parse(input)\n\n      let helium = 'Line\\tParent\\n'\n      let trait = '#heliumInput = PHENOTYPE\\nLineName\\tNodeType\\n'\n      Object.keys(nodes).forEach(n => {\n        if (nodes[n].sources) {\n          nodes[n].sources.forEach(s => {\n            helium += `${n}\\t${s}\\n`\n          })\n        }\n        trait += `${n}\\t${nodes[n].type}\\n`\n      })\n      this.pedigreeFile = helium\n      this.traitFile = trait\n\n      this.solutions.partOne = this.solve(nodes, false)\n      nodes = this.parse(input)\n      this.solutions.partTwo = this.solve(nodes, true)\n    },\n    parse: function (input) {\n      const nodes = {}\n\n      input.forEach(i => {\n        const [left, right] = i.split(' -> ').map((j, ji) => ji === 1 ? j.split(', ') : j)\n\n        let type = null\n\n        if (left.startsWith(FLIP_FLIP)) {\n          type = FLIP_FLIP\n        } else if (left.startsWith(CONFUNCTION)) {\n          type = CONFUNCTION\n        } else if (left === 'broadcaster') {\n          type = BROADCASTER\n        }\n\n        const name = left.replace(/[%&]/g, '')\n\n        const source = nodes[name] || { name: name, sources: [], targets: [], type: type, highPulsesSent: 0, lowPulsesSent: 0 }\n        const targets = right.map(r => nodes[r] || { name: r, sources: [], targets: [], type: null, highPulsesSent: 0, lowPulsesSent: 0 })\n\n        targets.forEach(t => {\n          t.sources.push(source.name)\n          nodes[t.name] = t\n        })\n        source.targets.push(...right)\n        source.type = type\n        if (source.type === FLIP_FLIP) {\n          source.state = false\n        }\n        nodes[source.name] = source\n      })\n\n      Object.values(nodes).forEach(n => {\n        if (n.type === CONFUNCTION) {\n          n.memory = {}\n          n.sources.forEach(s => {\n            n.memory[s] = false\n          })\n        }\n      })\n      nodes.broadcaster.sources = ['button']\n\n      return nodes\n    },\n    solve: function (nodes, isPartTwo = false) {\n      const inputMemoryLoops = {}\n      const rxSource = nodes.rx.sources[0]\n\n      nodes[rxSource].sources.forEach(s => {\n        inputMemoryLoops[s] = null\n      })\n\n      const queue = []\n\n      const addToQueue = (pulse, destinationName, sender) => {\n        if (sender) {\n          if (pulse) {\n            sender.highPulsesSent++\n          } else {\n            sender.lowPulsesSent++\n          }\n        }\n\n        queue.unshift({\n          pulse: pulse,\n          module: nodes[destinationName],\n          sender: sender ? (sender.name || '') : ''\n        })\n      }\n\n      let buttonPresses = 0\n\n      const pushButton = () => {\n        buttonPresses++\n        addToQueue(false, 'broadcaster')\n\n        while (queue.length > 0) {\n          const item = queue.pop()\n\n          if (item.module === null) {\n            continue\n          }\n\n          if (item.module.type === 'broadcaster') {\n            item.module.targets.forEach(t => addToQueue(false, t, item.module))\n          } else if (item.module.type === FLIP_FLIP && !item.pulse) {\n            item.module.state = !item.module.state\n            item.module.targets.forEach(t => addToQueue(item.module.state, t, item.module))\n          } else if (item.module.type === CONFUNCTION) {\n            if (item.module.name === rxSource) {\n              // if this is the first time that one of the rx source's source inputs sends a high pulse, record the cycle length\n              if (inputMemoryLoops[item.sender] === null && item.pulse) {\n                inputMemoryLoops[item.sender] = buttonPresses\n              }\n            }\n\n            // remember the state of the input\n            item.module.memory[item.sender] = item.pulse\n            const pulseToSend = !Object.values(item.module.memory).every(p => p)\n            item.module.targets.forEach(t => addToQueue(pulseToSend, t, item.module))\n          }\n        }\n      }\n\n      for (let i = 0; i < (isPartTwo ? Number.MAX_SAFE_INTEGER : 1000); i++) {\n        pushButton()\n\n        if (isPartTwo) {\n          const memoryLoopValues = Object.values(inputMemoryLoops)\n          // if we've found all cycle lengths, output when they will all coincide\n          if (memoryLoopValues.every(v => v != null)) {\n            return lcm(memoryLoopValues)\n          }\n        }\n      }\n\n      // Part 1 solution\n      // Every button push sends a low pulse, which is not accounted for in the rest of the code\n      let totalLow = 1000\n      let totalHigh = 0\n      Object.values(nodes).forEach(m => {\n        totalLow += m.lowPulsesSent\n        totalHigh += m.highPulsesSent\n      })\n\n      return totalLow * totalHigh\n    }\n  }\n}\n</script>\n\n<style>\n.year-2023-day-20-code {\n  background-color: #2c3e50;\n  color: #7f8c8d;\n  max-height: 300px;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day20.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day20.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day20.vue?vue&type=template&id=407d9dea\"\nimport script from \"./Day20.vue?vue&type=script&lang=js\"\nexport * from \"./Day20.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day20.vue?vue&type=style&index=0&id=407d9dea&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","const mod = (a, b) => {\n  return ((a % b) + b) % b\n}\n\nconst transpose = (matrix) => {\n  const rows = matrix.length\n  const cols = matrix[0].length\n  const grid = []\n  for (let j = 0; j < cols; j++) {\n    grid[j] = Array(rows)\n  }\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      grid[j][i] = matrix[i][j]\n    }\n  }\n  return grid\n}\n\nconst gcd = (a, b) => b === 0 ? a : gcd(b, a % b)\nconst lcmInternal = (a, b) => a / gcd(a, b) * b\nconst lcmAll = (ns) => ns.reduce(lcmInternal, 1)\n\nconst lcm = (values) => lcmAll(values)\n\nexport {\n  mod,\n  transpose,\n  lcm\n}\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","_v","domProps","_s","pedigreeFile","traitFile","proxy","staticRenderFns","FLIP_FLIP","CONFUNCTION","BROADCASTER","components","Day","data","partOne","partTwo","methods","Object","nodes","helium","trait","parse","input","type","name","sources","targets","highPulsesSent","lowPulsesSent","t","source","n","solve","inputMemoryLoops","sender","queue","pulse","module","buttonPresses","addToQueue","item","pushButton","totalLow","totalHigh","component","mod","a","b","transpose","matrix","rows","length","cols","grid","j","Array","i","gcd","lcmInternal","lcmAll","ns","reduce","lcm","values"],"sourceRoot":""}
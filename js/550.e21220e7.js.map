{"version":3,"file":"js/550.e21220e7.js","mappings":"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","sources":["webpack://advent-of-code/./src/components/2018/Day16.vue?e1a6","webpack://advent-of-code/src/components/2018/Day16.vue","webpack://advent-of-code/./src/components/2018/Day16.vue?3ceb","webpack://advent-of-code/./src/components/2018/Day16.vue","webpack://advent-of-code/./src/util/Opcode2018.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":16,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"16\" :year=\"2018\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\nimport opcodes from '@/util/Opcode2018.js'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      // Keep track of all samples (3-row examples)\n      this.samples = []\n      this.program = []\n\n      let current = {}\n      let blankCount = 0\n      let programPart = false\n      for (let i = 0; i < input.length; i++) {\n        const line = input[i]\n\n        if (line === '') {\n          // If everything is set, store the sample\n          if (current.before && current.after && current.ins) {\n            this.samples.push(current)\n          }\n          // Create a new sample\n          current = {}\n          blankCount++\n\n          // If there's more than one blank line, the program code starts\n          if (blankCount > 1) {\n            programPart = true\n          }\n        } else if (line.includes('Before: ')) {\n          // Parse the 'before' configuration\n          blankCount = 0\n          current.before = line.replace(/\\D/g, '').split('').map(d => +d)\n        } else if (line.includes('After: ')) {\n          // Parse the 'after' configuration\n          blankCount = 0\n          current.after = line.replace(/\\D/g, '').split('').map(d => +d)\n        } else {\n          blankCount = 0\n          if (programPart) {\n            // If we're in the program part, store it as an instruction\n            this.program.push(line.split(' ').map(d => +d))\n          } else {\n            // Otherwise it's a sample instruction\n            current.ins = line.split(' ').map(d => +d)\n          }\n        }\n      }\n\n      this.solvePartOne()\n      this.solvePartTwo()\n    },\n    solvePartOne: function () {\n      // Keep track of the possible mappings between numeric code and opcode name\n      this.opcodeMapping = {}\n\n      // Iterate through all samples\n      this.solutions.partOne = this.samples.map(s => {\n        // Get the code number\n        const codeNumber = s.ins[0]\n        // Get all opcodes that create the desired result\n        const matchingOpcodes = Object.keys(opcodes).filter(op => {\n          // Take a copy of the before array\n          const beforeCopy = s.before.concat()\n          // Modify it using the opcode\n          opcodes[op](s.ins[1], s.ins[2], s.ins[3], beforeCopy)\n          // Check if they are the same\n          return beforeCopy.every((v, i) => v === s.after[i])\n        })\n\n        // Store the mapping between the numeric code and all possible opcode names\n        if (!this.opcodeMapping[codeNumber]) {\n          this.opcodeMapping[codeNumber] = new Set()\n        } else {\n          matchingOpcodes.forEach(c => this.opcodeMapping[codeNumber].add(c))\n        }\n\n        // Return 1 if it's got at least 3 matching opcodes. This is used to sum up in the end.\n        return matchingOpcodes.length >= 3 ? 1 : 0\n      }).reduce((a, b) => a + b)\n    },\n    solvePartTwo: function () {\n      // The final mapping between numeric code and opcode name\n      const finalMapping = {}\n\n      // While not all have been mapped yet\n      while (Object.keys(finalMapping).length !== Object.keys(this.opcodeMapping).length) {\n        // Find the ones that have a unique mapping\n        const onlyOne = Object.keys(this.opcodeMapping).filter(c => this.opcodeMapping[c].size === 1)\n\n        onlyOne.forEach(c => {\n          // Get the only code\n          const opcode = this.opcodeMapping[c].values().next().value\n          // Store the mapping\n          finalMapping[c] = opcode\n          // Remove that opcode from all other mappings\n          Object.keys(this.opcodeMapping).forEach(k => this.opcodeMapping[k].delete(opcode))\n        })\n      }\n\n      // Start the program with a blank register\n      const reg = [0, 0, 0, 0]\n\n      // Execute each program instruction\n      this.program.forEach(p => opcodes[finalMapping[p[0]]](p[1], p[2], p[3], reg))\n\n      // Get the result\n      this.solutions.partTwo = reg[0]\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day16.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day16.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day16.vue?vue&type=template&id=e1f51fd0\"\nimport script from \"./Day16.vue?vue&type=script&lang=js\"\nexport * from \"./Day16.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default {\n  addr: (a, b, c, reg) => { reg[c] = reg[a] + reg[b] },\n  addi: (a, b, c, reg) => { reg[c] = reg[a] + b },\n  mulr: (a, b, c, reg) => { reg[c] = reg[a] * reg[b] },\n  muli: (a, b, c, reg) => { reg[c] = reg[a] * b },\n  banr: (a, b, c, reg) => { reg[c] = reg[a] & reg[b] },\n  bani: (a, b, c, reg) => { reg[c] = reg[a] & b },\n  borr: (a, b, c, reg) => { reg[c] = reg[a] | reg[b] },\n  bori: (a, b, c, reg) => { reg[c] = reg[a] | b },\n  setr: (a, _, c, reg) => { reg[c] = reg[a] },\n  seti: (a, _, c, reg) => { reg[c] = a },\n  gtir: (a, b, c, reg) => { reg[c] = a > reg[b] ? 1 : 0 },\n  gtri: (a, b, c, reg) => { reg[c] = reg[a] > b ? 1 : 0 },\n  gtrr: (a, b, c, reg) => { reg[c] = reg[a] > reg[b] ? 1 : 0 },\n  eqir: (a, b, c, reg) => { reg[c] = a === reg[b] ? 1 : 0 },\n  eqri: (a, b, c, reg) => { reg[c] = reg[a] === b ? 1 : 0 },\n  eqrr: (a, b, c, reg) => { reg[c] = reg[a] === reg[b] ? 1 : 0 }\n}\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","staticRenderFns","components","Day","data","partOne","partTwo","methods","current","blankCount","programPart","solvePartOne","opcodes","matchingOpcodes","solvePartTwo","onlyOne","finalMapping","Object","component","addr","a","b","c","reg","addi","mulr","muli","banr","bani","borr","bori","setr","_","seti","gtir","gtri","gtrr","eqir","eqri","eqrr"],"sourceRoot":""}
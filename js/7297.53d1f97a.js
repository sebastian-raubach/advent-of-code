"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[7297],{26039:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day14)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day14.vue?vue&type=template&id=370d363a\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":14,\"year\":2018,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2018/Day14.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day14vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.recipeTarget = +input[0];\n      this.solvePartOne();\n      this.solvePartTwo();\n    },\n    solvePartOne: function () {\n      // Define the two nodes of the circular linked list\n      const first = {\n        value: 3\n      };\n      let last = {\n        value: 7\n      };\n      // Define their neighbors\n      last.next = first;\n      first.next = last;\n      // Elves start on those two\n      const elves = [first, last];\n\n      // Keep track of the recipe count\n      let recipeCount = 2;\n      // While we need to produce more\n      while (recipeCount < this.recipeTarget + 10) {\n        // Get the recipe values\n        const values = [elves[0].value, elves[1].value];\n        // Construct the new recipe\n        const newRecipe = values[0] + values[1];\n        // Split the digits\n        const digits = `${newRecipe}`.split('').map(c => +c);\n        // Increase the recipe counter\n        recipeCount += digits.length;\n\n        // For each digit\n        digits.forEach(d => {\n          // Create a new node\n          const node = {\n            value: d,\n            next: first\n          };\n          // Add it to the end\n          last.next = node;\n          last = node;\n        });\n\n        // Use the new values to adjust elf indices\n        values.forEach((value, index) => {\n          // Move forward value + 1 steps\n          for (let i = 0; i < value + 1; i++) {\n            elves[index] = elves[index].next;\n          }\n        });\n      }\n\n      // Start at the beginning\n      let node = first;\n      // Step through the first recipes to the target count\n      for (let i = 0; i < this.recipeTarget; i++) {\n        node = node.next;\n      }\n      // Now start tracking the 10 recipes scores right after\n      const result = [];\n      for (let i = 0; i < 10; i++) {\n        result.push(node.value);\n        node = node.next;\n      }\n\n      // Concatenate them together\n      this.solutions.partOne = result.join('');\n    },\n    solvePartTwo: function () {\n      // Split the input into its digits\n      const targetString = `${this.recipeTarget}`;\n      const targetDigits = targetString.split('').map(c => +c);\n\n      // Define the two nodes of the circular linked list\n      const first = {\n        value: 3\n      };\n      let last = {\n        value: 7\n      };\n      // Define their neighbors\n      last.next = first;\n      first.next = last;\n      // Elves start on those two\n      const elves = [first, last];\n      let totalLength = 2;\n      let matched = [];\n      while (true) {\n        // Get the recipe values\n        const values = [elves[0].value, elves[1].value];\n        // Construct the new recipe\n        const newRecipe = values[0] + values[1];\n        // Split the digits\n        const digits = `${newRecipe}`.split('').map(c => +c);\n        for (let i = 0; i < digits.length; i++) {\n          const value = digits[i];\n          totalLength++;\n          if (value === targetDigits[matched.length]) {\n            matched.push(value);\n          } else {\n            do {\n              matched = matched.slice(1);\n            } while (matched.length > 0 && !targetString.startsWith(matched.join('')));\n            if (value === targetDigits[matched.length]) {\n              matched.push(value);\n            }\n          }\n          if (matched.length === targetDigits.length) {\n            this.solutions.partTwo = totalLength - targetDigits.length;\n            return;\n          }\n          const node = {\n            value: value,\n            next: first\n          };\n          last.next = node;\n          last = node;\n        }\n\n        // Use the new values to adjust elf indices\n        values.forEach((value, index) => {\n          // Move forward value + 1 steps\n          for (let i = 0; i < value + 1; i++) {\n            elves[index] = elves[index].next;\n          }\n        });\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2018/Day14.vue?vue&type=script&lang=js\n /* harmony default export */ const _2018_Day14vue_type_script_lang_js = (Day14vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2018/Day14.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2018_Day14vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day14 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26039\n")}}]);
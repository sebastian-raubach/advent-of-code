"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[3981],{87686:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ Day23)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day23.vue?vue&type=template&id=7a55b830\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'Day\',{attrs:{"day":23,"year":2020,"solutions":_vm.solutions},on:{"input-changed":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day23.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day23vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      this.numbers = input[0].split(\'\').map(i => +i);\n      this.solvePartOne(this.numbers.concat());\n      this.solvePartTwo(this.numbers.concat());\n    },\n    moveCupsClockwise: function (numbers) {\n      const current = numbers[0];\n      const toMove = [numbers[1], numbers[2], numbers[3]];\n\n      // Start with the current - 1\n      let target = current - 1;\n      // While the target is one of the moved cups\n      while (toMove.indexOf(target) !== -1 || target < 1) {\n        // Decrease\n        target--;\n        // If we hit the bottom, start from the top\n        if (target < 1) {\n          target = numbers.length;\n        }\n      }\n\n      // Remove them from the array\n      numbers = [current].concat(numbers.slice(4, numbers.length));\n      // Then add them again in the right position\n      const targetIndex = numbers.indexOf(target);\n      const result = numbers.slice(0, targetIndex + 1).concat(toMove).concat(numbers.slice(targetIndex + 1, numbers.length));\n      // Rotate so that the next number is at the top\n      result.push(result.shift());\n      return result;\n    },\n    solvePartOne: function (numbers) {\n      for (let round = 0; round < 100; round++) {\n        numbers = this.moveCupsClockwise(numbers);\n      }\n      const indexOne = numbers.indexOf(1);\n      let result = \'\';\n      for (let index = 0; index < numbers.length - 1; index++) {\n        result += numbers[(indexOne + index + 1) % numbers.length];\n      }\n      this.solutions.partOne = result;\n    },\n    solvePartTwo: function (numbers) {\n      // Fill up the array with the other numbers\n      for (let i = Math.max(...numbers) + 1; i <= 1000000; i++) {\n        numbers.push(i);\n      }\n      // Replace  them all with objects\n      numbers = numbers.map(value => {\n        return {\n          value\n        };\n      });\n      // Then store the next number like a linked list (only do this for the initial numbers)\n      numbers.forEach((v, i) => numbers[i].next = i < numbers.length - 1 ? numbers[i + 1] : numbers[0]);\n\n      // Create a map that stores value to object\n      const vMap = new Map(numbers.map(number => [number.value, number]));\n\n      // Start with the first number\n      let head = numbers[0];\n\n      // Do the rounds\n      for (let round = 0; round < 10000000; round++) {\n        // Get the numbers to move\n        const toMove = [head.next.value, head.next.next.value, head.next.next.next.value];\n        // And the first one for reference\n        const toMoveHead = head.next;\n        // Update the next one of our current one to the first one after the ones to move\n        head.next = head.next.next.next.next;\n\n        // Start with the current - 1\n        let target = head.value - 1;\n        // While the target is one of the moved cups\n        while (toMove.indexOf(target) !== -1 || target < 1) {\n          // Decrease\n          target--;\n          // If we hit the bottom, start from the top\n          if (target < 1) {\n            target = numbers.length;\n          }\n        }\n\n        // Get the object at the target value\n        const pos = vMap.get(target);\n        // Set the successor of the last one in the to move chunk to the next one after the target\n        toMoveHead.next.next.next = pos.next;\n        // Then update the target to point at the items to move\n        pos.next = toMoveHead;\n\n        // Move on to the next one\n        head = head.next;\n      }\n\n      // Get the object with value 1\n      const posOne = vMap.get(1);\n      // Multiply the next and the one after together\n      this.solutions.partTwo = posOne.next.value * posOne.next.next.value;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2020/Day23.vue?vue&type=script&lang=js\n /* harmony default export */ const _2020_Day23vue_type_script_lang_js = (Day23vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2020/Day23.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2020_Day23vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day23 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///87686\n')}}]);
{"version":3,"file":"js/586.dc2f8a62.js","mappings":"yKAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,IAAM,EAAE,KAAO,KAAK,UAAYN,EAAIO,WAAWC,GAAG,CAAC,gBAAgBR,EAAIS,gBAAgBC,YAAYV,EAAIW,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,qBAAqB,CAACV,EAAG,OAAO,CAACW,SAAS,CAAC,UAAYf,EAAIgB,GAAGhB,EAAIiB,YAAYjB,EAAIkB,GAAG,cAAc,EAAEC,OAAM,GAAM,CAACP,IAAI,UAAUC,GAAG,WAAW,MAAO,CAACT,EAAG,MAAM,CAACU,YAAY,qBAAqB,CAACV,EAAG,OAAO,CAACW,SAAS,CAAC,UAAYf,EAAIgB,GAAGhB,EAAIoB,YAAYpB,EAAIkB,GAAG,cAAc,EAAEC,OAAM,MAAS,EACnjBE,EAAkB,G,WCiBtB,GACAC,WAAAA,CACAC,IAAAA,EAAAA,GAEAC,KAAAA,WACA,OACAjB,UAAAA,CACAkB,QAAAA,KACAC,QAAAA,MAEAT,QAAAA,KACAG,QAAAA,KAEA,EACAO,QAAAA,CACAlB,eAAAA,SAAAA,GACA,WACA,KAGA,uDAEA,SAEAmB,EAAAA,SAAAA,IACA,UAKA,OAHAC,EAAAA,WAEAC,GAAAA,GAIA,KAEAD,EAAAA,KAAAA,EAAAA,WAAAA,IAAAA,IAAAA,WAAAA,IAAAA,IAAAA,WAAAA,OAAAA,KAAAA,MAAAA,UACA,CAEA,0BAGAE,EAAAA,KAAAA,CACAC,MAAAA,EAAAA,KACAC,IAAAA,EAAAA,GACAC,OAAAA,EAAAA,OAEA,KAIA,2DAGAL,EAAAA,UAAAA,SAAAA,IACA,2BACA,WAEAM,EAAAA,GAAAA,KAAAA,EAAAA,GAEA,IAGA,+EACA,8EACA,EACAC,aAAAA,SAAAA,EAAAA,GAEAL,EAAAA,SAAAA,IAEA,oBAEA,qCAEAI,EAAAA,EAAAA,GAAAA,GAAAA,QAAAA,EAAAA,IAIA,0DAEA,2BACA,EACAE,aAAAA,SAAAA,EAAAA,GAEAN,EAAAA,SAAAA,IAEA,0BAEA,sBAEAI,EAAAA,EAAAA,GAAAA,GAAAA,KAAAA,EAAAA,EAAAA,KAAAA,GAAAA,MAEA,IAIA,0DAEA,2BACA,EACAG,OAAAA,SAAAA,GACA,SAEA,0CACA,iBACA,qBACA,2BACA,iBACA,KACAC,GAAAA,KAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAEAC,EAAAA,IAAAA,EACAD,GAAAA,mCAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAGAA,GAAAA,OAGAA,GAAAA,OACA,CAEA,QACA,IC3I4P,I,UCQxPE,GAAY,OACd,EACA1C,EACAsB,GACA,EACA,KACA,KACA,MAIF,EAAeoB,EAAiB,O","sources":["webpack://advent-of-code/./src/components/2022/Day5.vue?3220","webpack://advent-of-code/src/components/2022/Day5.vue","webpack://advent-of-code/./src/components/2022/Day5.vue?da43","webpack://advent-of-code/./src/components/2022/Day5.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":5,\"year\":2022,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('pre',{staticClass:\"day-5-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridOne)}}),_vm._v(\"\\n      \")])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('pre',{staticClass:\"day-5-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.gridTwo)}}),_vm._v(\"\\n      \")])]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Day :day=\"5\" :year=\"2022\" :solutions=\"solutions\" @input-changed=\"onInputChanged\">\n    <template v-slot:partOne>\n      <pre class=\"day-5-code border\">\n<code v-html=\"gridOne\" />\n      </pre>\n    </template>\n    <template v-slot:partTwo>\n      <pre class=\"day-5-code border\">\n<code v-html=\"gridTwo\" />\n      </pre>\n    </template>\n  </Day>\n</template>\n\n<script>\nimport Day from '@/components/Day'\n\nexport default {\n  components: {\n    Day\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      gridOne: null,\n      gridTwo: null\n    }\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const stackData = []\n      const instructions = []\n\n      // Regex for parsing instructions\n      const pattern = /move (?<count>\\d+) from (?<from>\\d+) to (?<to>\\d+)/\n      // Flag to indicate which part we're in\n      let isStackData = true\n      // Iterate over all instructions\n      input.forEach(i => {\n        if (i === '') {\n          // We're switching parts, remove the last stack data (the stack numbering row)\n          stackData.pop()\n          // Flip flag\n          isStackData = false\n          return\n        }\n\n        if (isStackData) {\n          // Replace all brackets and sets of 4 spaces, then split on space\n          stackData.push(i.replaceAll('[', '').replaceAll(']', '').replaceAll('    ', ' ').split(' '))\n        } else {\n          // Match regex\n          const matched = i.match(pattern).groups\n\n          // Remember instruction\n          instructions.push({\n            from: +matched.from,\n            to: +matched.to,\n            count: +matched.count\n          })\n        }\n      })\n\n      // Define the number of stacks we need\n      const stacks = Array.from(Array(stackData[0].length).keys()).map(i => [])\n\n      // Go through the stack data in reverse\n      stackData.reverse().forEach(i => {\n        for (let j = 0; j < i.length; j++) {\n          if (i[j] !== '') {\n            // Push into the stack\n            stacks[j].push(i[j])\n          }\n        }\n      })\n\n      this.solvePartOne(JSON.parse(JSON.stringify(stacks)), JSON.parse(JSON.stringify(instructions)))\n      this.solvePartTwo(JSON.parse(JSON.stringify(stacks)), JSON.parse(JSON.stringify(instructions)))\n    },\n    solvePartTwo: function (stacks, instructions) {\n      // For each instruction\n      instructions.forEach(i => {\n        // Get the stack we're taking bits from\n        const stack = stacks[i.from - 1]\n        // Remove the section of elements\n        const chunk = stack.splice(stack.length - i.count, i.count)\n        // Put it on the other stack\n        stacks[i.to - 1].push(...chunk)\n      })\n\n      // Join for result\n      this.solutions.partTwo = stacks.map(s => s[s.length - 1]).join('')\n      // Print the grid\n      this.gridTwo = this.toGrid(stacks)\n    },\n    solvePartOne: function (stacks, instructions) {\n      // For each instruction\n      instructions.forEach(i => {\n        // Move `count` boxes\n        for (let c = 0; c < i.count; c++) {\n          // If there are enough\n          if (stacks[i.from - 1].length > 0) {\n            // From one stack to another\n            stacks[i.to - 1].push(stacks[i.from - 1].pop())\n          }\n        }\n      })\n\n      // Join for result\n      this.solutions.partOne = stacks.map(s => s[s.length - 1]).join('')\n      // Print the grid\n      this.gridOne = this.toGrid(stacks)\n    },\n    toGrid: function (stacks) {\n      let result = ''\n\n      const height = Math.max(...stacks.map(s => s.length))\n      const topPrinted = stacks.map(s => false)\n      for (let row = 0; row < height; row++) {\n        for (let stack = 0; stack < stacks.length; stack++) {\n          if (stacks[stack].length >= height - row) {\n            if (topPrinted[stack]) {\n              result += ` [${stacks[stack][height - row - 1]}]`\n            } else {\n              topPrinted[stack] = true\n              result += ` <span class=\"day-5-stack-top\">[${stacks[stack][height - row - 1]}]</span>`\n            }\n          } else {\n            result += '    '\n          }\n        }\n        result += '<br/>'\n      }\n\n      return result\n    }\n  }\n}\n</script>\n\n<style>\n.day-5-code {\n  background-color: #2c3e50;\n  color: #7f8c8d;\n  max-height: 100vh;\n}\n.day-5-stack-top {\n  background-color: #2980b9;\n  color: rgb(211, 193, 175);\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day5.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Day5.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Day5.vue?vue&type=template&id=b36db1a2\"\nimport script from \"./Day5.vue?vue&type=script&lang=js\"\nexport * from \"./Day5.vue?vue&type=script&lang=js\"\nimport style0 from \"./Day5.vue?vue&type=style&index=0&id=b36db1a2&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","solutions","on","onInputChanged","scopedSlots","_u","key","fn","staticClass","domProps","_s","gridOne","_v","proxy","gridTwo","staticRenderFns","components","Day","data","partOne","partTwo","methods","input","stackData","isStackData","instructions","from","to","count","stacks","solvePartTwo","solvePartOne","toGrid","result","topPrinted","component"],"sourceRoot":""}
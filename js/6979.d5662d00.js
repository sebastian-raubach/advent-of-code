"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[6979],{7283:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day7)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2015/Day7.vue?vue&type=template&id=63a6507a\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":7,\"year\":2015,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged}})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2015/Day7.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day7vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      operations: {\n        SET: s => s[0],\n        // SET is a direct mapping of source 0\n        AND: s => s[0] & s[1],\n        // AND uses bitwise and between both sources\n        OR: s => s[0] | s[1],\n        // OR uses bitwise or between both sources\n        LSHIFT: s => s[0] << s[1],\n        // LSHIFT shifts source 0 to the left by source 1\n        RSHIFT: s => s[0] >> s[1],\n        // RSHIFT shifts source 0 to the right by source 1\n        NOT: s => ~s[0] // NOT uses bitwise complement for source 0\n      }\n    };\n  },\n\n  methods: {\n    onInputChanged: function (input) {\n      // Parse the input into a more suitable data structure\n      let parsed = this.parseInput(input);\n      // Create a mapping that remembers all the resolved wires and their values\n      const mapping = new Map();\n      // Then solve until all wires are set\n      this.solve(parsed, mapping);\n      // The solution is the value of 'a'\n      this.solutions.partOne = mapping.get('a');\n\n      // Read the input again for part 2\n      parsed = this.parseInput(input);\n      // Override the settings for wire 'b'\n      parsed.filter(p => p.target === 'b').forEach(p => {\n        p.sources = [this.solutions.partOne];\n        p.operand = 'SET';\n      });\n      // Wipe the memory\n      mapping.clear();\n      // Solve again\n      this.solve(parsed, mapping);\n      // And get the result again\n      this.solutions.partTwo = mapping.get('a');\n    },\n    solve: function (parsed, mapping) {\n      // As long as there are unsolved wires left\n      while (parsed.length > 0) {\n        // Filter them (to only keep track of the unsolved ones)\n        parsed = parsed.filter(p => {\n          // Map the sources to resolved values (if possible)\n          const sources = p.sources.map(s => {\n            if (!isNaN(s)) {\n              // If the source is a number, just use it\n              return +s;\n            } else {\n              // Else, check the resolved wires\n              if (mapping.has(s)) {\n                // If it's there, use its value\n                return mapping.get(s);\n              } else {\n                // Otherwise, we cannot proceed for now\n                return null;\n              }\n            }\n          });\n          if (sources.every(s => s !== null)) {\n            // If all sources have a resolved value, compute the new value for the target.\n            // Remember we're working on 16 bit integers, so reduce it accordingly\n            mapping.set(p.target, this.operations[p.operand](sources) & 0xFFFF);\n            // Don't keep it in the list of unresolved wires\n            return false;\n          } else {\n            // We cannot resolve this just now, so keep it in the list\n            return true;\n          }\n        });\n      }\n    },\n    parseInput: function (input) {\n      return input.map(i => {\n        // Split into left and right side\n        const [l, r] = i.split(' -> ');\n        // Split the left again on spaces\n        const lBits = l.split(' ');\n\n        // Remember the incoming wires\n        const sources = [];\n        // And the operand\n        let operand;\n        if (lBits.length === 1) {\n          // If there's only one, it's either a number or another wire that feeds in directly\n          if (isNaN(lBits[0])) {\n            sources.push(lBits[0]);\n          } else {\n            sources.push(+lBits[0]);\n          }\n          // The operand is simply SET\n          operand = 'SET';\n        } else if (lBits.length === 2) {\n          // If there are two, keep the second part as the source\n          sources.push(lBits[1]);\n          // And set the operand to NOT (only operand with only two parts)\n          operand = 'NOT';\n        } else if (lBits.length === 3) {\n          // Otherwise, keep the two sources at index 0 and 2\n          sources.push(lBits[0]);\n          sources.push(lBits[2]);\n          // The operand is in the middle\n          operand = lBits[1];\n        } else {\n          console.error(`Unexpected input found: ${i}`);\n        }\n        return {\n          sources: sources,\n          target: r,\n          operand: operand\n        };\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2015/Day7.vue?vue&type=script&lang=js\n /* harmony default export */ const _2015_Day7vue_type_script_lang_js = (Day7vue_type_script_lang_js); \n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2015/Day7.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2015_Day7vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day7 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7283\n")}}]);
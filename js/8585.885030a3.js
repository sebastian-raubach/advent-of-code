"use strict";(self["webpackChunkadvent_of_code"]=self["webpackChunkadvent_of_code"]||[]).push([[8585],{81798:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Day11)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day11.vue?vue&type=template&id=2b6e9188\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Day',{attrs:{\"day\":11,\"year\":2020,\"solutions\":_vm.solutions},on:{\"input-changed\":_vm.onInputChanged},scopedSlots:_vm._u([{key:\"partOne\",fn:function(){return [_c('pre',{staticClass:\"day-10-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.finalSeating.partOne)}})])]},proxy:true},{key:\"partTwo\",fn:function(){return [_c('pre',{staticClass:\"day-10-code border\"},[_c('code',{domProps:{\"innerHTML\":_vm._s(_vm.finalSeating.partTwo)}})])]},proxy:true}])})}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./src/components/Day.vue + 5 modules\nvar Day = __webpack_require__(86889);\n;// CONCATENATED MODULE: ./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day11.vue?vue&type=script&lang=js\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ const Day11vue_type_script_lang_js = ({\n  components: {\n    Day: Day/* default */.Z\n  },\n  data: function () {\n    return {\n      solutions: {\n        partOne: null,\n        partTwo: null\n      },\n      finalSeating: {\n        partOne: null,\n        partTwo: null\n      }\n    };\n  },\n  methods: {\n    onInputChanged: function (input) {\n      const grid = input.map(i => {\n        return i.split('').map(c => c === 'L' ? false : null);\n      });\n      this.solvePartOne(grid);\n      this.solvePartTwo(grid);\n    },\n    solvePartOne: function (grid) {\n      const partOne = this.solve(grid, 4, (grid, row, col, n) => {\n        // Get the neighbor row\n        const neighborRow = grid[row + n[1]];\n        // If it's invalid (outside of the grid), return false\n        if (neighborRow === undefined) {\n          return false;\n        }\n        // Return true if the neighbor is occupied\n        return neighborRow[col + n[0]] === true;\n      });\n      this.solutions.partOne = partOne.count;\n      this.finalSeating.partOne = partOne.gridSolution;\n    },\n    /**\n     * Solves the given seat occupation grid using the given allowed neighbors and the neighborhandler used to get the number of neighbors for a seat\n     * @param grid The task input\n     * @param allowedNeighbors The number of allowed neighbors per seat before the state switches\n     * @param neighborHandler The task part specific handler to determine the number of visible neighbors for a given seat\n     * @returns An object of the form: `{ count, gridSolution }` where `count` is the number of occupied seats and `gridSolution` is a formatted representation of the final grid.\n     */\n    solve: function (grid, allowedNeighbors, neighborHandler) {\n      let changeCount = 1;\n      let occupiedCount = 0;\n      // List all neighboring cells\n      const neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\n      // While something changed, go on\n      while (changeCount > 0) {\n        // Reset change count and occupied count\n        changeCount = 0;\n        occupiedCount = 0;\n        // Take a copy of the grid, because we don't want to make live changes\n        const tempGrid = JSON.parse(JSON.stringify(grid));\n\n        // For each row and cell\n        for (let row = 0; row < grid.length; row++) {\n          for (let col = 0; col < grid[row].length; col++) {\n            // Get the current grid cell\n            const current = grid[row][col];\n\n            // Only consider seats\n            if (current !== null) {\n              // Iterate all neighbors and filter only the full seats\n              const neighborCount = neighbors.filter(n => neighborHandler(grid, row, col, n)).length;\n              if (current === true && neighborCount >= allowedNeighbors) {\n                // If the current seat is occupied and at least `allowedNeighbors` neighbors are, set it to unoccupied\n                changeCount++;\n                tempGrid[row][col] = false;\n              } else if (current === false && neighborCount === 0) {\n                // If the current seat isn't occupied and there are no neighbors, it is now\n                changeCount++;\n                tempGrid[row][col] = true;\n              }\n\n              // Increase the count if required\n              occupiedCount += tempGrid[row][col] === true ? 1 : 0;\n            }\n          }\n        }\n        grid = tempGrid;\n      }\n      return {\n        count: occupiedCount,\n        gridSolution: this.getGridPrinted(grid)\n      };\n    },\n    solvePartTwo: function (grid) {\n      const maxDim = Math.max(grid.length, grid[0].length);\n      const partTwo = this.solve(grid, 5, (grid, row, col, n) => {\n        // Walk into the direction to check all visible neighbors\n        for (let times = 1; times < maxDim; times++) {\n          // Get the neighbor row\n          const neighborRow = grid[row + n[1] * times];\n          // If it's invalid (outside of the grid), return false\n          if (neighborRow === undefined) {\n            return false;\n          }\n          // Get the neighborig cell\n          const neighbor = neighborRow[col + n[0] * times];\n\n          // If it's invalid (outside of the grid), return false\n          if (neighbor === undefined) {\n            return false;\n          }\n          // Else, if it's a seat, return its value\n          if (neighbor !== null) {\n            return neighbor;\n          }\n        }\n        // If no neighbor is found, return false\n        return false;\n      });\n      this.solutions.partTwo = partTwo.count;\n      this.finalSeating.partTwo = partTwo.gridSolution;\n    },\n    getGridPrinted: function (grid) {\n      return grid.map(r => r.map(c => c === true ? '<span class=\"day-10-seat-full\">#</span>' : c === false ? '<span class=\"day-10-seat-empty\">L</span>' : '.').join('')).join('<br/>');\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/2020/Day11.vue?vue&type=script&lang=js\n /* harmony default export */ const _2020_Day11vue_type_script_lang_js = (Day11vue_type_script_lang_js); \n;// CONCATENATED MODULE: ./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-12.use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/2020/Day11.vue?vue&type=style&index=0&id=2b6e9188&prod&lang=css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/components/2020/Day11.vue?vue&type=style&index=0&id=2b6e9188&prod&lang=css\n\n// EXTERNAL MODULE: ./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1001);\n;// CONCATENATED MODULE: ./src/components/2020/Day11.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  _2020_Day11vue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const Day11 = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///81798\n")}}]);